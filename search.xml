<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java流式API</title>
      <link href="/2021/12/20/Java%E6%B5%81%E5%BC%8FAPI/"/>
      <url>/2021/12/20/Java%E6%B5%81%E5%BC%8FAPI/</url>
      
        <content type="html"><![CDATA[<p>Java8中新增了Stream接口定义了支持顺序和并行操作元素序列操作的一系列标准方法。</p><p>为了执行计算，流操作被组合成一个流管道。 流管道由源（可能是数组、集合、生成器函数、I&#x2F;O 通道等）、零个或多个中间操作（将流转换为另一个流，例如filter(Predicate) ) 和终端操作（产生结果或副作用，例如<code>count()</code>或<code>forEach(Consumer)</code> ）。 流是懒惰的； 对源数据的计算仅在终端操作启动时进行，源元素仅在需要时消费。</p><span id="more"></span><p>集合和流虽然有一些表面上的相似之处，但有不同的目标。 集合主要涉及对其元素的有效管理和访问。 相比之下，流不提供直接访问或操作其元素的方法，而是关注声明性地描述它们的源以及将在该源上聚合执行的计算操作。 但是，如果提供的流操作没有提供所需的功能，则可以使用<code>iterator()</code>和<code>spliterator()</code>操作来执行受控遍历。</p><p>流管道，可以看作是对流源的查询。 除非源明确设计用于并发修改（例如<code>ConcurrentHashMap</code> ），否则在查询流源时修改流源可能会导致不可预测或错误的行为。<br>大多数流操作都接受描述用户指定行为的参数，例如上面示例中传递给mapToInt的 lambda 表达式<code>w -&gt; w.getWeight()</code> 。 为了保持正确的行为，这些行为参数：</p><ul><li>必须是<strong>无干扰的</strong>（它们不修改流源）； </li><li>在大多数情况下必须是<strong>无状态的</strong>（它们的结果不应依赖于在流管道执行期间可能发生变化的任何状态）。</li><li>此类参数始终是<strong>函数式接口</strong>（例如<code>Function</code>实例，并且通常是 lambda 表达式或方法引用。 除非另有说明，否则这些参数必须为非 null 。</li></ul><p>一个流应该只被操作一次（调用一个中间或终端流操作）。 例如，这排除了“分叉”流，其中相同的源提供两个或多个管道，或者同一流的多次遍历。 如果流实现检测到流正在被重用，它可能会抛出<code>IllegalStateException</code> 。 但是，由于某些流操作可能会返回其接收器而不是新的流对象，因此可能无法在所有情况下检测到重用。</p><p>流具有<code>close()</code>方法并实现<code>AutoCloseable</code> ，但几乎所有流实例实际上都不需要在使用后关闭。 通常，只有源是 IO 通道的流（例如<code>Files.lines(Path, Charset)</code>返回的<code>Files.lines(Path, Charset)</code> ）才需要关闭。 大多数流由集合、数组或生成函数支持，不需要特殊的资源管理。 （如果流确实需要关闭，则可以在try -with-resources 语句中将其声明为资源。）</p><p>流管道可以顺序或并行执行。 这种执行模式是流的一个属性。 流是通过初始选择顺序或并行执行来创建的。 （例如， <code>Collection.stream()</code>创建一个顺序流， <code>Collection.parallelStream()</code>创建一个并行流。）这种执行模式的选择可以通过<code>sequential()</code>或<code>parallel()</code>方法修改，并且可以用<code>isParallel()</code>方法。</p><h2 id="Stream-接口"><a href="#Stream-接口" class="headerlink" title="Stream 接口"></a>Stream 接口</h2><p>Stream接口中的方法按操作类型可分为两种：中间操作、终端操作。同时包含了创建Stream的一些静态方法。</p><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><ul><li>方法定义：<code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</code></li><li>说明：返回由与给定谓词匹配的此流的元素组成的流。</li><li>参数：predict - 一个无干扰的、无状态的谓词，应用于每个元素以确定是否应该包括它</li></ul><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><ul><li>方法定义：<code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code></li><li>说明：返回一个流，该流由将给定函数应用于此流的元素的结果组成。</li><li>参数：mapper - 一个无干扰的、无状态的函数，适用于每个元素</li><li>参数类型：R - 新流的元素类型</li></ul><h4 id="mapToInt"><a href="#mapToInt" class="headerlink" title="mapToInt"></a>mapToInt</h4><ul><li>方法定义：<code>IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</code></li><li>说明：返回一个IntStream它包含将给定函数应用于此流的元素的结果。</li><li>参数：mapper - 一个无干扰的、无状态的函数，适用于每个元素</li></ul><h4 id="mapToLong"><a href="#mapToLong" class="headerlink" title="mapToLong"></a>mapToLong</h4><ul><li>方法定义：<code>LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</code></li><li>说明：返回一个LongStream其中包含将给定函数应用于此流的元素的结果。</li><li>参数：mapper - 一个无干扰的、无状态的函数，适用于每个元素</li></ul><h4 id="mapToDouble"><a href="#mapToDouble" class="headerlink" title="mapToDouble"></a>mapToDouble</h4><ul><li>方法定义：<code>DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</code></li><li>说明：返回一个DoubleStream其中包含将给定函数应用于此流的元素的结果。</li><li>参数：mapper - 一个无干扰的、无状态的函数，适用于每个元素</li></ul><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><ul><li>方法定义：<code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</code></li><li>说明：返回一个流，该流由通过将提供的映射函数应用于每个元素而生成的映射流的内容替换此流的每个元素的结果组成。 每个映射流在其内容放入此流后closed 。 （如果映射流为null ，则使用空流代替。）</li><li>参数：mapper - 一个无干扰的、无状态的函数，应用于产生新值流的每个元素</li><li>类型参数：R - 新流的元素类型</li><li>API注意事项：flatMap()操作的作用是对流的元素应用一对多转换，然后将结果元素展平为新的流。  示例：  如果orders是一个采购订单流，并且每个采购订单都包含一个行项目的集合，那么以下生成一个包含所有订单中所有行项目的流：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orders.flatMap(order -&gt; order.getLineItems().stream())...</span><br></pre></td></tr></table></figure>  如果path是文件的路径，则以下内容会生成该文件中包含的words流：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; lines = Files.lines(path, StandardCharsets.UTF_8);</span><br><span class="line">Stream&lt;String&gt; words = lines.flatMap(line -&gt; Stream.of(line.split(<span class="string">&quot; +&quot;</span>)));</span><br></pre></td></tr></table></figure>  传递给flatMap的mapper函数使用简单的正则表达式将一行拆分为一个单词数组，然后从该数组创建一个单词流。</li></ul><h4 id="flatMapToInt"><a href="#flatMapToInt" class="headerlink" title="flatMapToInt"></a>flatMapToInt</h4><ul><li>方法定义：<code>IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);</code></li><li>说明：返回一个IntStream其中包含用通过将提供的映射函数应用于每个元素而生成的映射流的内容替换此流的每个元素的结果。 每个映射流在其内容放入此流后closed 。 （如果映射流为null ，则使用空流代替。）</li><li>参数：mapper - 一个无干扰的、无状态的函数，应用于产生新值流的每个元素</li></ul><h4 id="flatMapToLong"><a href="#flatMapToLong" class="headerlink" title="flatMapToLong"></a>flatMapToLong</h4><ul><li>方法定义：<code>LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);</code></li><li>说明：返回一个LongStream其中包含用通过将提供的映射函数应用于每个元素而生成的映射流的内容替换此流的每个元素的结果。 每个映射流在其内容放入此流后closed 。 （如果映射流为null ，则使用空流代替。）</li><li>参数：mapper - 一个无干扰的、无状态的函数，应用于产生新值流的每个元素</li></ul><h4 id="flatMapToDouble"><a href="#flatMapToDouble" class="headerlink" title="flatMapToDouble"></a>flatMapToDouble</h4><ul><li>方法定义：<code>DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);</code></li><li>说明：返回一个DoubleStream其中包含用通过将提供的映射函数应用于每个元素而生成的映射流的内容替换此流的每个元素的结果。 每个映射流在其内容放入此流后closed 。 （如果映射流为null ，则使用空流代替。）</li><li>参数：mapper - 一个无干扰的、无状态的函数，应用于产生新值流的每个元素</li></ul><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><ul><li>方法定义：<code>Stream&lt;T&gt; distinct();</code></li><li>说明：返回由该流的不同元素（根据<code>Object.equals(Object)</code> ）组成的流。对于有序流，不同元素的选择是稳定的（对于重复元素，保留遇到顺序中最先出现的元素。）对于无序流，没有稳定性保证。</li><li>有状态</li><li>API注意事项：在并行管道中为distinct()保持稳定性相对昂贵（要求操作充当完全屏障，具有大量缓冲开销），并且通常不需要稳定性。 如果您的情况的语义允许，使用无序流源（例如<code>generate(Supplier)</code> ）或使用<code>unordered()</code>删除排序约束可能会显着提高并行管道中distinct()执行效率。 如果需要与遭遇顺序保持一致，并且您在并行管道中使用distinct()遇到性能或内存利用率低的问题，则切换到使用<code>sequential()</code>顺序执行可能会提高性能。</li></ul><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><ul><li>方法定义：<code>Stream&lt;T&gt; sorted();</code></li><li>说明：返回由该流的元素组成的流，按自然顺序排序。 如果此流的元素不是Comparable ，则在执行终端操作时可能会抛出java.lang.ClassCastException 。对于有序流，排序是稳定的。 对于无序流，没有稳定性保证。</li><li>有状态</li></ul><hr><ul><li>方法定义：<code>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</code></li><li>说明：返回由该流的元素组成的流，根据提供的Comparator进行排序。对于有序流，排序是稳定的。 对于无序流，没有稳定性保证。</li><li>参数：comparator - 一个无干扰的、无状态的Comparator ，用于比较流元素</li><li>有状态</li></ul><h4 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h4><ul><li><p>方法定义：<code>Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);</code></p></li><li><p>说明：返回一个由该流的元素组成的流，另外在每个元素上执行提供的操作，因为元素从结果流中被消耗。对于并行流管道，可以在上游操作使元素可用的任何时间和线程中调用该操作。 如果操作修改共享状态，则它负责提供所需的同步。</p></li><li><p>参数：action – 在元素从流中消耗时对元素执行的非干扰操作</p></li><li><p>API注意事项：此方法的存在主要是为了支持调试，您希望在其中查看元素流经管道中的某个点时的情况：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">    .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">    .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li></ul><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><ul><li>方法定义：<code>Stream&lt;T&gt; limit(long maxSize);</code></li><li>说明：返回由该流的元素组成的流，其长度被截断为不超过maxSize 。</li><li>参数：maxSize – 流应该限制的元素数量</li><li>短路状态</li><li>抛出：IllegalArgumentException – 如果maxSize为负</li><li>API注意事项：虽然limit()在顺序流管道上通常是一个廉价的操作，但它在有序并行管道上可能非常昂贵，特别是对于maxSize大值，因为limit(n)被限制为不仅返回任何n 个元素，而是第一个 n遇到顺序中的元素。 如果您的情况的语义允许，使用无序流源（例如<code>generate(Supplier)</code> ）或使用<code>unordered()</code>删除排序约束可能会导致并行管道中的limit()显着加速。 如果需要与遭遇顺序保持一致，并且您在并行管道中使用limit()遇到性能或内存利用率不佳的情况，则切换到使用<code>sequential()</code>顺序执行可能会提高性能。</li></ul><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><ul><li>方法定义：<code>Stream&lt;T&gt; skip(long n);</code></li><li>说明：丢弃流的前n元素后，返回由该流的其余元素组成的流。 如果此流包含少于n元素，则将返回一个空流。</li><li>参数：n - 要跳过的前导元素的数量</li><li>有状态</li><li>API注意事项：虽然skip()在顺序流管道上通常是一种廉价的操作，但它在有序并行管道上可能非常昂贵，尤其是对于n大值，因为skip(n)被限制为不仅跳过任何n 个元素，而且跳过前n个元素遇到顺序中的元素。 如果您的情况的语义允许，使用无序流源（例如<code>generate(Supplier)</code> ）或使用<code>unordered()</code>删除排序约束可能会导致并行管道中的skip()显着加速。 如果需要与遭遇顺序保持一致，并且您在并行管道中使用skip()遇到性能或内存利用率不佳的情况，则切换到使用<code>sequential()</code>顺序执行可能会提高性能。</li></ul><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><ul><li>方法定义：<code>void forEach(Consumer&lt;? super T&gt; action);</code></li><li>说明：对此流的每个元素执行一个操作。此操作的行为明显是不确定的。 对于并行流管道，此操作并不保证尊重流的相遇顺序，因为这样做会牺牲并行的利益。 对于任何给定的元素，可以在库选择的任何时间和线程中执行该操作。 如果动作访问共享状态，它负责提供所需的同步。</li><li>参数：action – 对元素执行的非干扰操作</li></ul><h4 id="forEachOrdered"><a href="#forEachOrdered" class="headerlink" title="forEachOrdered"></a>forEachOrdered</h4><ul><li>方法定义：<code>void forEachOrdered(Consumer&lt;? super T&gt; action);</code></li><li>说明：如果流具有定义的遇到顺序，则按流的遇到顺序对此流的每个元素执行操作。此操作一次处理一个元素，如果存在，则按遇到顺序处理。 对一个元素执行操作发生在对后续元素执行操作之前，但对于任何给定元素，该操作可以在库选择的任何线程中执行。</li><li>参数：action – 对元素执行的非干扰操作</li></ul><h4 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h4><ul><li>方法定义：<code>Object[] toArray();</code></li><li>说明：返回一个包含此流元素的数组。</li><li>返回：包含此流元素的数组</li></ul><hr><ul><li><p>方法定义：<code>&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</code></p></li><li><p>说明：返回一个包含此流元素的数组，使用提供的generator函数分配返回的数组，以及分区执行或调整大小可能需要的任何其他数组。</p></li><li><p>参数：generator — 一个函数，它产生一个所需类型和提供的长度的新数组</p></li><li><p>类型参数：A - 结果数组的元素类型</p></li><li><p>返回：包含此流中元素的数组</p></li><li><p>抛出：ArrayStoreException – 如果从数组生成器返回的数组的运行时类型不是此流中每个元素的运行时类型的超类型</p></li><li><p>API注意事项：生成器函数接受一个整数，它是所需数组的大小，并生成一个所需大小的数组。 这可以用数组构造函数引用简洁地表达：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person[] men = people.stream()</span><br><span class="line">                        .filter(p -&gt; p.getGender() == MALE)</span><br><span class="line">                        .toArray(Person[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><ul><li><p>方法定义：<code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</code></p></li><li><p>说明：使用提供的标识值和关联累加函数对该流的元素执行归约，并返回归约后的值。 这相当于：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> identity;</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="built_in">this</span> stream)</span><br><span class="line">    result = accumulator.apply(result, element)</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>  但不限于顺序执行。<br>  identity值必须是累加器函数的标识。 这意味着对于所有t ， accumulator.apply(identity, t)等于t 。 accumulator函数必须是关联函数。</p></li><li><p>参数：identity - 累积函数的身份值<br>  accumulator – 一个关联的、无干扰的、无状态的函数，用于组合两个值</p></li><li><p>返回：减少的结果</p></li><li><p>API注意事项：Sum、min、max、average 和 string 连接都是归约的特殊情况。 对一串数字求和可以表示为：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> integers.reduce(<span class="number">0</span>, (a, b) -&gt; a+b);</span><br></pre></td></tr></table></figure><p>  或者：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> integers.reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure><p>  虽然与简单地改变循环中的运行总数相比，这似乎是一种更迂回的执行聚合方式，但归约操作可以更优雅地并行化，无需额外的同步，并且大大降低了数据竞争的风险。</p></li></ul><hr><ul><li><p>方法定义：<code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</code></p></li><li><p>说明：使用关联累积函数对此流的元素执行缩减，并返回描述缩减值的Optional （如果有）。 这相当于：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">foundAny</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="built_in">this</span> stream) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!foundAny) &#123;</span><br><span class="line">        foundAny = <span class="literal">true</span>;</span><br><span class="line">        result = element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        result = accumulator.apply(result, element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></figure><p>  但不限于顺序执行。<br>  accumulator函数必须是关联函数。</p></li><li><p>参数：accumulator – 一个关联的、无干扰的、无状态的函数，用于组合两个值</p></li><li><p>返回：一个Optional描述减少的结果</p></li><li><p>抛出：NullPointerException – 如果归约结果为空</p></li></ul><hr><ul><li><p>方法定义：<code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner);</code></p></li><li><p>说明：使用提供的标识、累加和组合函数对该流的元素执行归约。 这相当于：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">U</span> <span class="variable">result</span> <span class="operator">=</span> identity;</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="built_in">this</span> stream)</span><br><span class="line">    result = accumulator.apply(result, element)</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>  但不限于顺序执行。<br>  identity值必须是组合器功能的标识。 这意味着对于所有u ， combiner(identity, u)等于u 。 此外， combiner功能必须与accumulator功能兼容； 对于所有u和t ，以下必须成立：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)</span><br></pre></td></tr></table></figure></li><li><p>参数：identity - 组合器功能的身份值<br>  accumulator – 一种关联的、无干扰的、无状态的函数，用于将附加元素合并到结果中<br>  combiner - 一个关联的、无干扰的、无状态的函数，用于组合两个值，它必须与累加器函数兼容</p></li><li><p>类型参数: U - 结果的类型</p></li><li><p>返回：减少的结果</p></li><li><p>API注意事项：许多使用这种形式的归约可以通过map和reduce操作的显式组合更简单地表示。 accumulator函数充当融合的映射器和累加器，有时比单独的映射和归约更有效，例如当知道先前减少的值可以避免某些计算时。</p></li></ul><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><ul><li><p>方法定义：<code>&lt;R&gt; R collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R, ? super T&gt; accumulator, BiConsumer&lt;R, R&gt; combiner);</code></p></li><li><p>说明：对此流的元素执行可变的归约操作。 可变归约是其中归约值是可变结果容器（例如ArrayList ，并且通过更新结果的状态而不是替换结果来合并元素。 这产生的结果相当于：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> supplier.get();</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="built_in">this</span> stream)</span><br><span class="line">    accumulator.accept(result, element);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>  与reduce(Object, BinaryOperator)相比 ， collect操作可以并行化而无需额外的同步。</p></li><li><p>参数：supplier - 个创建新结果容器的函数。 对于并行执行，此函数可能会被多次调用，并且每次都必须返回一个新值。<br>  accumulator – 一种关联的、无干扰的、无状态的函数，用于将附加元素合并到结果中<br>  combiner - 一个关联的、无干扰的、无状态的函数，用于组合两个值，它必须与累加器函数兼容</p></li><li><p>类型参数: R - 结果的类型</p></li><li><p>返回：减少的结果</p></li><li><p>API注意事项：JDK 中有许多现有类，它们的签名非常适合与方法引用一起用作collect()参数。 例如，以下将把字符串累积到一个ArrayList ：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    List&lt;String&gt; asList = stringStream.collect(ArrayList::<span class="keyword">new</span>, ArrayList::add,</span><br><span class="line">                                            ArrayList::addAll);</span><br><span class="line">    ```                                                </span><br><span class="line"></span><br><span class="line">    以下将采用字符串流并将它们连接成一个字符串：</span><br><span class="line"></span><br><span class="line">    ```Java</span><br><span class="line">    <span class="type">String</span> <span class="variable">concat</span> <span class="operator">=</span> stringStream.collect(StringBuilder::<span class="keyword">new</span>, StringBuilder::append,</span><br><span class="line">                                        StringBuilder::append)</span><br><span class="line">                                .toString();</span><br><span class="line">    ```                                    </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">- 方法定义：`&lt;R, A&gt; R <span class="title function_">collect</span><span class="params">(Collector&lt;? <span class="built_in">super</span> T, A, R&gt; collector)</span>;`</span><br><span class="line">- 说明：使用Collector对此流的元素执行可变归约操作。 Collector封装了用作collect(Supplier, BiConsumer, BiConsumer)参数的函数，允许重用收集策略和组合收集操作，例如多级分组或分区。</span><br><span class="line">    如果流是并行的，并且Collector是concurrent ，并且流是无序的或收集器是unordered ，那么将执行并发减少（有关并发减少的详细信息，请参阅Collector 。）</span><br><span class="line">    当并行执行时，可以实例化、填充和合并多个中间结果，以保持可变数据结构的隔离。 因此，即使与非线程安全的数据结构（例如ArrayList ）并行执行，也不需要额外的同步来进行并行缩减。</span><br><span class="line">- 参数：collector - 描述减少的Collector</span><br><span class="line">- 类型参数：R - 结果的类型  </span><br><span class="line">    A - Collector的中间累积类型</span><br><span class="line">- 返回：减少的结果</span><br><span class="line">- API注意事项：以下将把字符串累积到一个 ArrayList 中：</span><br><span class="line"></span><br><span class="line">    ```Java</span><br><span class="line">    List&lt;String&gt; asList = stringStream.collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>  以下将按城市对Person对象进行分类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;Person&gt;&gt; peopleByCity</span><br><span class="line">    = personStream.collect(Collectors.groupingBy(Person::getCity));</span><br></pre></td></tr></table></figure><p>  下面将按州和城市对Person对象进行分类，将两个Collector级联在一起：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; peopleByStateAndCity</span><br><span class="line">    = personStream.collect(Collectors.groupingBy(Person::getState,</span><br><span class="line">                                                Collectors.groupingBy(Person::getCity)));</span><br></pre></td></tr></table></figure></li></ul><h4 id="min"><a href="#min" class="headerlink" title="min"></a>min</h4><ul><li>方法定义：<code>Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);</code></li><li>说明：根据提供的Comparator返回此流的最小元素。 这是一个reduction的特例。</li><li>参数：comparator - 一个无干扰的、无状态的Comparator来比较这个流的元素</li><li>返回：一个Optional描述此流的最小元素，或空Optional如果流是空</li><li>抛出：NullPointerException – 如果最小元素为空</li></ul><h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><ul><li>方法定义：<code>Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);</code></li><li>说明：根据提供的Comparator返回此流的最大元素。 这是一个reduction的特例。</li><li>参数：comparator - 一个无干扰的、无状态的Comparator来比较这个流的元素</li><li>返回：一个Optional描述此流的最大元素，或空Optional如果流是空</li><li>抛出：NullPointerException – 如果最大元素为空</li></ul><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><ul><li><p>方法定义：<code>long count();</code></p></li><li><p>说明：返回此流中元素的计数。 这是归约的一个特例，相当于：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> mapToLong(e -&gt; <span class="number">1L</span>).sum();</span><br></pre></td></tr></table></figure></li><li><p>返回：此流中的元素计数</p></li></ul><h4 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h4><ul><li>方法定义：<code>boolean anyMatch(Predicate&lt;? super T&gt; predicate);</code></li><li>说明：返回此流的任何元素是否与提供的谓词匹配。 如果不是确定结果所必需的，则可以不对所有元素评估谓词。 如果流为空，则返回false并且不评估谓词。</li><li>参数：predicate - 一个无干扰的、无状态的谓词，适用于这个流的元素</li><li>返回：如果流的任何元素与提供的谓词匹配，则为true ，否则为false</li><li>短路操作</li><li>API注意事项：此方法评估流元素上谓词的存在量化（对于某些 x P(x)）。</li></ul><h4 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h4><ul><li>方法定义：<code>boolean allMatch(Predicate&lt;? super T&gt; predicate);</code></li><li>说明：返回此流的所有元素是否与提供的谓词匹配。 如果不是确定结果所必需的，则可以不对所有元素评估谓词。 如果流为空，则返回true并且不评估谓词。</li><li>参数：predicate - 一个无干扰的、无状态的谓词，适用于这个流的元素</li><li>返回：true如果任一该流中的所有元素匹配提供谓词或流是空的，否则false</li><li>短路操作</li><li>API注意事项：此方法评估流元素上谓词的通用量化（对于所有 x P(x)）。 如果流为空，则称量化为空满足且始终为true （无论 P(x) 是多少）。</li></ul><h4 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h4><ul><li>方法定义：<code>boolean noneMatch(Predicate&lt;? super T&gt; predicate);</code></li><li>说明：返回此流的元素是否与提供的谓词匹配。 如果不是确定结果所必需的，则可以不对所有元素评估谓词。 如果流为空，则返回true并且不评估谓词。</li><li>参数：predicate - 一个无干扰的、无状态的谓词，适用于这个流的元素</li><li>返回：true如果要么没有流的元件匹配提供谓词或流是空的，否则false</li><li>短路操作</li><li>API注意事项：此方法评估对流元素（对于所有 x ~P(x)）的否定谓词的通用量化。 如果流为空，则称量化为空满足且始终为true ，无论 P(x) 如何。</li></ul><h4 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h4><ul><li>方法定义：<code>Optional&lt;T&gt; findFirst();</code></li><li>说明：返回一个Optional描述本流的第一个元素，或空Optional如果流是空的。 如果流没有遇到顺序，则可以返回任何元素。</li><li>返回：一个Optional描述此流的第一个元素，或空Optional如果流是空</li><li>短路操作</li><li>抛出：NullPointerException – 如果所选元素为空</li></ul><h4 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h4><ul><li>方法定义：<code>Optional&lt;T&gt; findAny();</code></li><li>说明：返回一个Optional描述流的一些元件，或一个空Optional如果流是空的。此操作的行为明显是不确定的； 可以自由选择流中的任何元素。 这是为了在并行操作中实现最大性能； 代价是对同一源的多次调用可能不会返回相同的结果。 （如果需要稳定的结果，请改用findFirst() 。）</li><li>返回：一个Optional描述本流的一些元件，或一个空Optional如果流是空</li><li>短路操作</li><li>抛出：NullPointerException – 如果所选元素为空</li></ul><h3 id="创建Stream的静态方法"><a href="#创建Stream的静态方法" class="headerlink" title="创建Stream的静态方法"></a>创建Stream的静态方法</h3><h4 id="builder"><a href="#builder" class="headerlink" title="builder"></a>builder</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Builder&lt;T&gt; <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Streams</span>.StreamBuilderImpl&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回Stream的构建器。</p></li><li><p>类型参数：T - 元素类型</p></li><li><p>返回：流构建器</p></li></ul><h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(Spliterators.&lt;T&gt;emptySpliterator(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回一个空的顺序Stream。</p></li><li><p>类型参数：T - 流元素的类型</p></li><li><p>返回：空的顺序流</p></li></ul><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">of</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(<span class="keyword">new</span> <span class="title class_">Streams</span>.StreamBuilderImpl&lt;&gt;(t), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回包含单个元素的顺序Stream 。</p></li><li><p>参数：t – 单个元素</p></li><li><p>类型参数：T - 流元素的类型</p></li><li><p>返回：单例顺序流</p></li></ul><hr><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;varargs&quot;)</span> <span class="comment">// Creating a stream from an array is safe</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">of</span><span class="params">(T... values)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回一个顺序有序的流，其元素是指定的值。</p></li><li><p>参数：values – 新流的元素</p></li><li><p>类型参数：T – 流元素的类型</p></li><li><p>返回：新流</p></li></ul><h4 id="iterate"><a href="#iterate" class="headerlink" title="iterate"></a>iterate</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">iterate</span><span class="params">(<span class="keyword">final</span> T seed, <span class="keyword">final</span> UnaryOperator&lt;T&gt; f)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(f);</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;T&gt; iterator = <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> (T) Streams.NONE;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">t</span> <span class="operator">=</span> (t == Streams.NONE) ? seed : f.apply(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(Spliterators.spliteratorUnknownSize(</span><br><span class="line">            iterator,</span><br><span class="line">            Spliterator.ORDERED | Spliterator.IMMUTABLE), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回通过将函数f迭代应用到初始元素seed产生的无限顺序有序Stream ，产生由seed 、 f(seed) 、 f(f(seed))等组成的Stream 。<br>Stream的第一个元素（位置0 ）将是提供的seed 。 对于n &gt; 0 ，位置n处的元素将是将函数f应用于位置n - 1处的元素的结果。</p></li><li><p>参数：seed - 初始元素<br>  f – 应用于前一个元素以产生新元素的函数</p></li><li><p>类型参数：T – 流元素的类型</p></li><li><p>返回：一个新的顺序Stream</p></li></ul><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Stream&lt;T&gt; <span class="title function_">generate</span><span class="params">(Supplier&lt;T&gt; s)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(s);</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StreamSpliterators</span>.InfiniteSupplyingSpliterator.OfRef&lt;&gt;(Long.MAX_VALUE, s), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：返回一个无限连续的无序流，其中每个元素都由提供的Supplier生成。 这适用于生成恒定流、随机元素流等。</p></li><li><p>参数：s – 生成元素的Supplier</p></li><li><p>类型参数：T – 流元素的类型</p></li><li><p>返回：一个新的无限顺序无序Stream</p></li></ul><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><ul><li><p>方法定义：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title function_">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(a);</span><br><span class="line">    Objects.requireNonNull(b);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Spliterator&lt;T&gt; split = <span class="keyword">new</span> <span class="title class_">Streams</span>.ConcatSpliterator.OfRef&lt;&gt;(</span><br><span class="line">            (Spliterator&lt;T&gt;) a.spliterator(), (Spliterator&lt;T&gt;) b.spliterator());</span><br><span class="line">    Stream&lt;T&gt; stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());</span><br><span class="line">    <span class="keyword">return</span> stream.onClose(Streams.composedClose(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：创建一个延迟连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。 如果两个输入流都是有序的，则结果流是有序的，如果任一输入流是并行的，则结果流是并行的。 当结果流关闭时，将调用两个输入流的关闭处理程序。</p></li><li><p>参数：a – 第一个流<br>  b – 第二个流</p></li><li><p>类型参数：T - 流元素的类型</p></li><li><p>返回：两个输入流的串联</p></li><li><p>实施注意事项：从重复串联构造流时要小心。 访问深度级联流的元素可能会导致深度调用链，甚至StackOverflowException 。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda表达式 </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yutool简介</title>
      <link href="/2021/12/19/yutool/yutool%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/12/19/yutool/yutool%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>yutool是一款组件式集成开发框架，提供了许多为了解决实际后端web服务问题的一些通用设计及其实现，开箱即用，按需整合。</p><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><p>yutool的模块主要分为两大部分：组件和插件。以下是其主要特点和当前已整合的组件和插件清单。部分组件和插件的设计思路可参考博客<a href="http://yupaits.com/2020/02/04/architecture/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/">《基础组件设计》</a>。</p><ul><li>组件：将业务系统中比较复杂的公共逻辑抽象成可扩展的公共组件，方便应用程序快速接入，约定大于配置，使用时需要遵循组件的设计规范。</li><li>插件：轻量级，非必需，按需引入，灵活可扩展。</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><table><thead><tr><th>组件</th><th>名称</th><th>主要特性</th><th align="center">完成度</th></tr></thead><tbody><tr><td>yutool-cache</td><td>缓存组件</td><td>支持二级缓存（本地缓存和分布式缓存），通过缓存注解控制缓存的刷新和过期</td><td align="center">√</td></tr><tr><td>yutool-file-server</td><td>文件服务</td><td>文件的上传下载，支持租户隔离、防盗链</td><td align="center">√</td></tr><tr><td>yutool-ldap</td><td>LDAP组件</td><td>主流的LDAP服务接入</td><td align="center"></td></tr><tr><td>yutool-mq</td><td>消息组件</td><td>消息队列，支持延迟队列、重试队列（目前仅支持RabbitMQ）</td><td align="center">√</td></tr><tr><td>yutool-orm</td><td>ORM组件</td><td>整合了Spirng生态主流的Mybatis Plus和JPA框架，并加入了实际场景中DO、DTO和VO等POJO对象的转换及处理逻辑</td><td align="center">√</td></tr><tr><td>yutool-push</td><td>推送组件</td><td>支持5种类型消息的推送：<br>● 移动APP通知<br>● Web网页消息<br>● sms短信<br>● Email电子邮件<br>● IM消息<br>通过同一的消息发送入口，按需路由到指定的消息渠道进行消息推送</td><td align="center"></td></tr><tr><td>yutool-social</td><td>第三方登录组件</td><td>社交账号登录（第三方登录）组件，整合各大主流社交平台第三方登录功能并统一入口</td><td align="center"></td></tr><tr><td>yutool-state</td><td>状态机引擎</td><td>抽象主要的状态机应用场景，将状态机状态迁移的整个过程的处理接口标准化</td><td align="center"></td></tr><tr><td>yutool-search</td><td>搜索引擎组件</td><td>基于redisearch开发的轻量级搜索引擎组件，支持中文分词</td><td align="center"></td></tr></tbody></table><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><table><thead><tr><th>插件</th><th>名称</th><th>主要特性</th><th align="center">完成度</th></tr></thead><tbody><tr><td>api-idempotent</td><td>接口幂等插件</td><td>接口幂等检查，基于MySQL数据库主键的幂等性校验</td><td align="center">√</td></tr><tr><td>api-logger</td><td>接口访问日志插件</td><td>接口请求日志，记录接口请求的各项信息</td><td align="center">√</td></tr><tr><td>audit-logger</td><td>审计日志插件</td><td>审计日志，字段维度的审计处理记录</td><td align="center">√</td></tr><tr><td>auth-filter</td><td>权限过滤插件</td><td>权限过滤，用户、角色、部门多维度权限过滤，扩展的自定义权限过滤接口</td><td align="center">√</td></tr><tr><td>distributed-lock</td><td>分布式锁插件</td><td>分布式锁（基于Redis和Zookeeper实现）</td><td align="center">√</td></tr><tr><td>history-data</td><td>历史数据处理插件</td><td>历史数据清理，通过配置项实现历史数据的清除或转移</td><td align="center">√</td></tr><tr><td>jwt-helper</td><td>JWT工具插件</td><td>JWT工具</td><td align="center">√</td></tr><tr><td>native-mobile</td><td>本机号码登录插件</td><td>实现本机号码登录</td><td align="center"></td></tr><tr><td>sms-reply-storage</td><td>短信回复内容存储插件</td><td>短信回复存储，用于向用户推送服务短信之后，接收并存储用户回复的短信内容</td><td align="center"></td></tr><tr><td>sms-verify</td><td>短信验证码插件</td><td>短信验证码的发送及验证，不限制验证码的长度</td><td align="center"></td></tr><tr><td>swagger-support</td><td>Swagger接口文档插件</td><td>swagger接口文档支持，使用配置代替硬编码实现swagger文档的接入和分组功能</td><td align="center">√</td></tr><tr><td>import-export</td><td>数据导入导出插件</td><td>数据导入导出插件，基于EasyExcel实现</td><td align="center">√</td></tr><tr><td>multi-ds-tx</td><td>多数据源事务插件</td><td>多数据源事务控制插件，抽取dynamic-datasource本地事务控制核心代码二次封装进行实现</td><td align="center"></td></tr><tr><td>dynamic-thread-pool</td><td>动态线程池管理插件</td><td>动态线程池参数调优，监控线程池运行状态</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> yutool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yutool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Lambda表达式与函数式接口</title>
      <link href="/2021/12/19/Java%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/12/19/Java%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Java8开始支持lambda表达式，其结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, param3...) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 执行体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lambda表达式是函数式接口的具体实现，用于创建一个匿名类对象。</p><span id="more"></span><ul><li><p>什么是匿名类？</p><p>  Java中可以实现一个类包含另一个类，且不需要提供任何的类名直接实例化。匿名类主要用于创建一个对象执行特定的任务，使代码更加简洁。匿名类是不能有类名的类，不能被引用，只能在创建时用new语句来声明。其语法格式如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个匿名类</span></span><br><span class="line">    <span class="type">Type</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Type</span>() &#123;</span><br><span class="line">        <span class="comment">// 匿名类代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Java8的<code>::</code>运算符用于方法引用，是lambda表达式的一种简写方式。具体为，当需要使用lambda表达式只调用一个已存在的方法时，就可以使用<code>::</code>运算符。</p><p>以下是方法引用的一些语法：</p><table><thead><tr><th>方法引用类型</th><th>语法</th><th>示例</th></tr></thead><tbody><tr><td>静态方法引用</td><td><code>$&#123;className&#125;::$&#123;methodName&#125;</code></td><td><code>Objects::nonNull</code></td></tr><tr><td>对象的实例方法引用</td><td><code>$&#123;instanceName&#125;::$&#123;methodName&#125;</code></td><td><code>System.out::println</code></td></tr><tr><td>对象的超类方法引用</td><td><code>super::$&#123;methodName&#125;</code></td><td><code>super::hashCode</code></td></tr><tr><td>类构造器引用</td><td><code>$&#123;className&#125;::new</code></td><td><code>ArrayList::new</code></td></tr><tr><td>数组构造器引用</td><td><code>$&#123;typename&#125;[]::new</code></td><td><code>String[]::new</code></td></tr></tbody></table><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>JDK中常用的基础函数式接口类有以下这些：</p><table><thead><tr><th>接口类</th><th>接口类说明</th><th>功能接口方法</th><th>接口方法描述</th></tr></thead><tbody><tr><td><code>Supplier&lt;T&gt;</code></td><td>代表结果的提供者。<br>没有要求每次调用时都返回一个新的或不同的结果。</td><td><code>T get();</code></td><td>得到结果</td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td>表示接受单个输入参数且不返回结果的操作。<br>与大多数其他功能接口不同，Consumer预计通过副作用（允许显式修改数据或状态）进行操作。</td><td><code>void accept(T t);</code></td><td>对给定参数执行此操作</td></tr><tr><td><code>Funtion&lt;T, R&gt;</code></td><td>表示接受一个参数并产生结果的函数。</td><td><code>R apply(T t);</code></td><td>将此函数应用于给定的参数</td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td>表示一个参数的谓词（布尔值函数）。</td><td><code>boolean test(T t);</code></td><td>在给定的参数上评估这个谓词</td></tr><tr><td><code>BiConsumer&lt;T, U&gt;</code></td><td>表示接受两个输入参数并且不返回结果的操作。<br>这是Consumer的二元特化。<br>与大多数其他功能接口不同，BiConsumer预计通过副作用运行。</td><td><code>void accept(T t, U u);</code></td><td>对给定的参数执行此操作</td></tr><tr><td><code>BiFunction&lt;T, U, R&gt;</code></td><td>表示接受两个参数并产生结果的函数。<br>这是Function的二元特化。</td><td><code>R apply(T t, U u);</code></td><td>将此函数应用于给定的参数</td></tr><tr><td><code>BiPredicate&lt;T, U&gt;</code></td><td>表示两个参数的谓词（布尔值函数）。<br>这是Predicate的二元特化。<br>这是一个功能接口，其功能方法是test(Object, Object) 。</td><td><code>boolean test(T t, U u);</code></td><td>在给定的参数上评估这个谓词</td></tr><tr><td><code>UnaryOperator&lt;T&gt; extends Function&lt;T, T&gt;</code></td><td>表示对单个操作数的操作，该操作产生与其操作数相同类型的结果。<br>这是Function适用于操作数和结果类型相同的情况。<br>这是一个功能接口，其功能方法是apply(Object) 。</td><td><code>T apply(T t);</code></td><td>将此函数应用于给定的参数</td></tr><tr><td><code>BinaryOperator&lt;T&gt; extends BiFunction&lt;T, T, T&gt;</code></td><td>表示对相同类型的两个操作数的操作，产生与操作数相同类型的结果。<br>这是BiFunction适用于操作数和结果都是相同类型的情况。<br>这是一个函数式接口，其函数式方法是apply(Object, Object) 。</td><td><code>T apply(T t1, T t2);</code></td><td>将此函数应用于给定的参数</td></tr><tr><td><code>Runnable</code></td><td>表示不接受参数并且不返回结果的函数。该接口旨在为希望在活动时执行代码的对象提供通用协议。</td><td><code>void run();</code></td><td>当使用实现接口Runnable的对象创建线程时，启动线程会导致在单独执行的线程中调用对象的run方法。<br>方法run的一般约定是它可以采取任何行动。</td></tr><tr><td><code>Comparator&lt;T&gt;</code></td><td>一个比较函数，它对某些对象集合进行总排序。<br>比较器可以传递给排序方法（例如<code>Collections.sort</code>或<code>Arrays.sort</code>）以允许精确控制排序顺序。<br>比较器还可用于控制某些数据结构的顺序（例如<code>sorted sets</code>或<code>sorted maps</code>），或为没有<code>natural ordering</code>的对象集合提供<code>natural ordering</code>。</td><td><code>int compare(T o1, T o2);</code></td><td>比较它的两个参数的顺序。 当第一个参数小于、等于或大于第二个参数时，返回一个负整数、零或正整数。</td></tr></tbody></table><p>灵活运用函数式接口，可以使代码更加简洁可读性更高，这一点在Stream API中的体现尤为明显。日常编码中也可以运用这些基础的函数式接口编写灵活性更高的抽象接口，使得开发效率和代码的容错性得到提升。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda表达式 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件</title>
      <link href="/2021/08/11/web-architecture/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2021/08/11/web-architecture/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1><h2 id="消息队列使用场景"><a href="#消息队列使用场景" class="headerlink" title="消息队列使用场景"></a>消息队列使用场景</h2><p>消息队列常见的使用场景，核心的有3个：解耦、异步、削峰。</p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>看这么个场景。A系统发送数据到BCD三个系统，通过接口调用发送。如果E系统也要这个数据呢？那如果C系统现在不需要了呢？A系统负责人几乎崩溃……</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E8%A7%A3%E8%80%A61.png" alt="解耦1"></p><p>在这个场景，A系统跟其他各种乱七八糟的系统严重耦合，A系统产生一条比较关键的数据，很多系统都需要A系统将这个数据发送过来。A系统要时时刻刻考虑BCDE四个系统如果挂了该怎么办？要不要重发，要不要把消息存起来？</p><p>如果使用MQ，A系统产生一条数据，发送到MQ里面去，哪个系统需要数据自己去MQ里消费。如果新系统需要数据，直接从MQ里消费即可；如果某个系统不需要这条数据了，就取消对MQ的消费即可。这样下来，A系统就不需要考虑要给谁发送数据，不需要维护这个代码，也不需要考虑是否调用成功、失败超时等情况。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E8%A7%A3%E8%80%A62.png" alt="解耦2"></p><p><strong>总结</strong>：通过一个MQ，Pub&#x2F;Sub发布订阅消息这么一个模型，A系统就跟其它系统彻底解耦了。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>再来看一个场景，A系统接收一个请求，需要在自己本地写库，还需要再BCD三个系统写库，自己本地写库要3ms，BCD三个系统分别写库要300ms、450ms、200ms。最终请求总延时3 + 300 + 450 + 200 &#x3D; 953ms，接近1s。用户通过浏览器发起请求，等待个1s，这几乎是不可接受的。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%BC%82%E6%AD%A51.png" alt="异步1"></p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在200ms以内完成，对用户几乎是无感知的。</p><p>如果使用MQ，那么A系统连续发送3条消息到MQ队列中，加入耗时5ms，A系统从接受一个请求到返回响应给用户，总时长是3 + 5 &#x3D; 8ms，对于用户而言，其实感觉上就是点个按钮，8ms以后就直接返回了，爽！网站做得真好，真快！</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%BC%82%E6%AD%A52.png" alt="异步2"></p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>每天00:00到12:00系统风平浪静，每秒并发请求数量就50个。结果每次一到12:00~13:00，每秒并发请求数量突然会暴增到5k+条。但是系统是直接基于MySQL的，大量的请求涌入MySQL，每秒钟对MySQL执行约5k条SQL。</p><p>一般的MySQL，扛到每秒2k个请求就差不多了，如果每秒请求到5k的话，可能就直接把MySQL给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就1w的用户同时再网站上操作，每秒钟的请求数量可能也就50个，对整个系统几乎没有任何的压力。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%89%8A%E5%B3%B01.png" alt="削峰1"></p><p>如果使用MQ，每秒5k个请求写入MQ，A系统每秒钟最多处理2k个请求，因为MySQL每秒钟最多处理2k个。A系统从MQ中慢慢拉取需求，每秒钟就拉取2k个请求，不要超过自己每秒能处理的最大请求数量就ok，这样下来，哪怕是高峰期的时候，A系统也绝对不会挂掉。而MQ每秒钟5k个请求进来，就2k个请求出去，结果就导致在中午高峰期（1个小时），可能有几十万甚至几百万的请求积压在MQ中。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E5%89%8A%E5%B3%B02.png" alt="削峰2"></p><p>这个短暂的高峰期积压是ok的，因为高峰期过了之后，每秒钟就50个请求进MQ，但是A系统依然会按照每秒2k个请求的速度在处理。所以说，只要高峰期一过，A系统就会快速将积压的消息给解决掉。</p><h2 id="消息队列的优缺点"><a href="#消息队列的优缺点" class="headerlink" title="消息队列的优缺点"></a>消息队列的优缺点</h2><p>优点就是在上述的特殊场景下对应的好处，解耦、异步、削峰。</p><p>缺点有以下几个：</p><ul><li><p>系统可用性降低</p><p>  系统引入的外部依赖越多，越容易挂掉。本来你就是A系统调用BCD三个系统的接口就好了，ABCD四个系统还好好的，没啥问题，但是加了个MQ进来之后，万一MQ挂了怎么办？MQ一挂，整套系统就崩溃了，所以在使用消息队列时，要保证消息队列的高可用性。</p></li><li><p>系统复杂度提高</p><p>  加了MQ之后，如果保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？</p></li><li><p>一致性问题</p><p>  A系统处理完了直接返回成功，如果BCD三个系统那里，BD两个系统写库成功了，结果C系统写库失败了，就会导致数据不一致。</p></li></ul><p>所以消息队列实际是一种非常复杂的结构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，系统复杂度可能提升了一个数量级，也许是复杂了10倍。但是关键时刻，用还是要用的。</p><h2 id="常用消息队列的对比"><a href="#常用消息队列的对比" class="headerlink" title="常用消息队列的对比"></a>常用消息队列的对比</h2><p>以下是常用的消息中间件Kafka、ActiveMQ、RabbitMQ、RocketMQ的对比：</p><table><thead><tr><th align="left">特性</th><th align="left">ActiveMQ</th><th align="left">RabbitMQ</th><th align="left">RocketMQ</th><th align="left">Kafka</th></tr></thead><tbody><tr><td align="left">单机吞吐量</td><td align="left">万级，比RocketMQ、Kafka低一个数量级</td><td align="left">同ActiveMQ</td><td align="left">10万级，支撑高吞吐</td><td align="left">10万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td align="left">topic数量对吞吐量的影响</td><td align="left"></td><td align="left"></td><td align="left">topic可以达到几百&#x2F;几千的级别，吞吐量会有较小幅度的下降，这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic</td><td align="left">topic从几十到几百个的时候，吞吐量会大幅度下降，在同等机器下，Kafka尽量保证topic数量不要过多，如果要支撑大规模的topic，需要增加更多的机器资源</td></tr><tr><td align="left">时效性</td><td align="left">ms级</td><td align="left">微秒级，这是RabbitMQ的一大特点，延迟最低</td><td align="left">ms级</td><td align="left">延迟在ms级以内</td></tr><tr><td align="left">可用性</td><td align="left">高，基于主从架构实现高可用</td><td align="left">同ActiveMQ</td><td align="left">非常高，分布式架构</td><td align="left">非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td align="left">消息可靠性</td><td align="left">有较低的概率丢失数据</td><td align="left">基本不丢</td><td align="left">经过参数优化配置，可以做到0丢失</td><td align="left">同RocketMQ</td></tr><tr><td align="left">功能支持</td><td align="left">MQ领域的功能及其完备</td><td align="left">基于erlang开发，并发能力很强，性能极好，延时很低</td><td align="left">MQ功能较为完善，还是分布式的，扩展性好</td><td align="left">功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p><p>一般的业务系统要引入MQ，最早大家都用ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐场景的验证，社区也不是很活跃，不推荐使用。</p><p>后来大家开始用RabbitMQ，但事实是erlang语言阻止了大量的Java工程师去深入研究和掌控它，对公司而言，几乎处于不可控状态，但是确实人家是开源的，有比较稳定的支持，活跃度也高。</p><p>现在越来越多的公司会取用RocketMQ，确实很不错，阿里出品，但社区可能有突然黄掉的风险（目前RocketMQ已捐给Apache，但GitHub上的活跃度其实不算高），对自己公司技术实力有绝对自信的，推荐用RocketMQ，否则老老实实用RabbitMQ吧。</p><p>所以<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用RabbitMQ是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用RocketMQ是很好的选择。</p><p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用Kafka是业内标准，绝对没问题，社区活跃度很高，绝对不会黄，几乎是全世界这个领域的事实性规范。</p><h2 id="消息队列的高可用"><a href="#消息队列的高可用" class="headerlink" title="消息队列的高可用"></a>消息队列的高可用</h2><h3 id="RabbitMQ的高可用"><a href="#RabbitMQ的高可用" class="headerlink" title="RabbitMQ的高可用"></a>RabbitMQ的高可用</h3><p>RabbitMQ是基于主从（非分布式）做高可用的，比较有代表性。RabbitMQ有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><p>单机模式，就是Demo级别的，生产不会采用单机模式。</p><h4 id="普通集群模式（无高可用性）"><a href="#普通集群模式（无高可用性）" class="headerlink" title="普通集群模式（无高可用性）"></a>普通集群模式（无高可用性）</h4><p>普通集群模式，意思就是在多台机器上启动多个RabbitMQ实例，每个机器启动一个。你创建的queue，指挥放在一个RabbitMQ实例上，但是每个实例都同步queue的元数据（元数据可以认为是queue的一些配置信息，通过元数据，可以找到queue所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从queue所在实例上拉取数据过来。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E6%99%AE%E9%80%9A%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.png" alt="RabbitMQ普通集群模式"></p><p>这种方式确实很麻烦，也不怎么好，没做到所谓的分布式，就是个普通集群。因为这种模式导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个queue所在实例消费数据，前者有数据拉取的开销，后者导致单实例性能瓶颈。</p><p>而且如果那个放queue的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你开启了消息持久化，让RabbitMQ落地存储消息的话，消息不一定会丢失，得等这个实例恢复了，才可以继续从这个queue拉取数据。</p><p>所以这个模式其实没有所谓的高可用性，主要是为了提高吞吐量，就是说让集群中多个节点来服务于某个queue的读写操作。</p><h4 id="镜像集群模式（高可用性）"><a href="#镜像集群模式（高可用性）" class="headerlink" title="镜像集群模式（高可用性）"></a>镜像集群模式（高可用性）</h4><p>这种模式，才是所谓的RabbtiMQ的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的queue，无论元数据还是queue里的消息都会存在于多个实例上，就是说，每个RabbitMQ节点都有这个queue的一个完整镜像，包含queue的全部数据的意思。然后你每次写消息到queue的时候，都会自动把消息同步到多个实例的queue上。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E9%95%9C%E5%83%8F%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F.png" alt="RabbitMQ镜像集群模式"></p><p>那么如何开启这个镜像集群模式呢？其实很简单，RabbitMQ有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建queue的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其他机器（节点）还包含了这个queue的完整数据，别的consumer都可以到其他节点上去消费数据。坏处在于，第一，性能开销有些大，消息需要同步到所有机器上，导致网络带块压力和消耗很重！第二，不是分布式的，就没有扩展性可言了，如果某个queue负载很重，你加机器，新增的机器也包含了这个queue的所有数据，并且没有办法线性扩展你的queue。如果这个queue的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</p><h3 id="Kafka的高可用性"><a href="#Kafka的高可用性" class="headerlink" title="Kafka的高可用性"></a>Kafka的高可用性</h3><p>Kafka有一个最基本的架构认识：由多个broker组成，每个broker是一个节点；你创建一个topic，这个topic可以划分为多个partition，每个partition可以存在于不同的broker上，每个partition就放一部分数据。</p><p>这就是天然的分布式消息队列，就是说一个topic的数据，是分散放在多个机器上的，每个机器就放一部分数据。</p><p>实际上RabbitMQ之类的，并不是分布式消息队列，它就是传统的消息队列，只不过提供了一些集群、HA(High Available，高可用性)的机制而已，因为无论怎么玩，RabbitMQ一个queue的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个queue的完整数据。</p><p>Kafka0.8版本以前，是没有HA机制的，就是任何一个broker宕机了，那个broker上的partition就废了，没法写也没法读，没有什么高可用性可言。</p><p>比如说，我们假设创建了一个topic，指定其partition数量是3个，分别在三台机器上。但是，如果第二台机器宕机了，会导致这个topic 1&#x2F;3 的数据就丢了，因此这个是做不到高可用的。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png" alt="Kafka基础架构"></p><p>Kafka0.8以后，提供了HA机制，就是replica（复制品）副本机制。每个partition的数据都会同步到其他机器上，形成自己的多个replica副本。所有replica会选举一个leader出来，那么生产和消费都跟这个leader打交道，然后其他replica就是follower。写的时候，leader会负责把数据同步到所有follower上去，读的时候就直接读leader上的数据即可。只能读写leader？很简单，要是你可以随意读写每个follower，那么就要关注数据一致性的问题，系统复杂度太高，很容易出问题。Kafka会均匀地将一个partition的所有replica分布在不同的机器上，这样才可以提高容错性。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E9%AB%98%E5%8F%AF%E7%94%A8.png" alt="Kafka高可用"></p><p>这样一来就有所谓的高可用性了，因为如果某个broker宕机了，那个broker上面的partition在其他机器上都有副本的。如果这个宕机的broker上面由某个partition的leader，那么此时会从follower中重新选举一个新的leader出来，在新的leader上继续进行读写操作。这样就可以实现高可用性了。</p><p>写数据的时候，生产者就写leader，然后leader将数据落地写本地磁盘，接着其他follower自己主动从leader拉pull数据。一旦所有follower同步好数据了，就会发送ack给leader，leader收到所哟follower的ack之后，就会返回写成功的消息给生产者。（当然，这只是其中一种模式，还可以调整这个行为）</p><p>消费的时候，只会从leader去读，但是只有当一个消息已经被所有follower都同步成功返回ack的时候，这个消息才会被消费者读到。</p><h2 id="消息的幂等性"><a href="#消息的幂等性" class="headerlink" title="消息的幂等性"></a>消息的幂等性</h2><p>消费消息的时候，我们要考虑会不会重复消费？能不能避免重复消费？或者重复消费了也不能造成系统异常？</p><p>首先，我们要明确，使用RabbitMQ、RocketMQ、Kafka的时候，都有可能会出现消息重复消费的问题。用Kafka来举个例子，Kafka实际上有个offset的概念，就是每个消息写进去，都有一个offset，代表消息的序号，consumer消费了数据之后，每隔一段时间（定时定期），会把自己消费过的消息的offset提交一下，表示“我已经消费过了，下次我要是重启的话，你就让我继续从上次消费到的offset来继续消费吧”。</p><p>但是凡事都有意外，比如在重启consumer服务的时候，是直接kill进程再重启，就会导致consumer有些消息处理了，但是没来得及提交offset，重启之后，部分消息会再次消费一次。</p><p>有这么个场景，数据1、2、3一次进入Kafka，Kafka会给这三条数据每条分配一个offset，代表这条数据的序号，我们假设分配的offset依次是152、153、154。消费者从Kafka去消费的时候，也是按照这个顺序去消费。假如当消费者消费了offset&#x3D;153这条数据，刚准备去提交offset到zookeeper，此时消费者进程被重启了，那么此时消费过的数据1、2的offset并没有提交，Kafka也就不知道你已经消费了offset&#x3D;153这条数据。那么重启之后，由于之前的offset没有提交成功，那么数据1、2会再次传过来，如果此时消费者没有去重的话，就会导致重复消费。</p><p>注意：新版的Kafka已经将offset的存储从zookeeper转移至Kafka brokers，并使用内部位移主题 __consumer_offset 进行存储。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E6%8F%90%E4%BA%A4offset.png" alt="Kafka提交offset"></p><p>如果消费是拿一条数据就往数据库里写一条，会导致数据1、2再数据库插入了两次，那么数据就出错了。</p><p>其实重复消费并不可怕，可怕的是你没考虑到重复消费之后，怎么保证幂等性。</p><p>举个例子，假设你有一个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，就插入了两条，数据就错了；但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，如果是就直接跳过，这样就指挥插入一条数据，从而保证了数据的正确性。</p><p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就是一条数据、或者一个请求，重复来多次，得确保对应的数据是不会改变的，不能出错。</p><p>所以问题来了，怎么保证消息队列消费的幂等性？</p><p>其实还是得集合业务来思考，这里给几个思路：</p><ul><li>如果你取到数据要写库，你先根据主键查一下，如果这条数据已经有了，就别插入了，update一下。</li><li>如果你是写Redis，那没问题，反正每次都是set，天然幂等性。</li><li>如果你不是上面两个场景，那要做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加上一个全局唯一的id，类似订单id之类的，然后再消费的是时候，先根据这个id去Redis查一下，之前是不是消费过了？如果没有消费过，就正常处理，然后把这个id写入Redis；如果已经消费过了，就跳过不处理，保证不重复处理相同的消息即可。</li><li>也可以基于数据库的唯一索引来保证重复数据不会重复插入多条。因为有唯一索引约束了，重复数据插入会报错，不会导致数据库中出现脏数据。</li></ul><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%B6%88%E8%B4%B9%E5%B9%82%E7%AD%89%E6%80%A7%E5%A4%84%E7%90%86.png" alt="消息队列消费幂等性处理"></p><h2 id="消息可靠性传输"><a href="#消息可靠性传输" class="headerlink" title="消息可靠性传输"></a>消息可靠性传输</h2><p>使用MQ的时候有个基本原则，就是数据不能多一条，也不能少一条。不能多，就是前面说的重复消费和幂等性问题。不能少，就是说数据不能丢失。</p><p>如果用MQ传递过来的是非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个MQ传递过程中绝对不会把计费消息给弄丢。</p><p>数据的丢失问题，可能出现在生产者、MQ、消费者中，以下内容从RabbitMQ和Kafka分别来进行说明。</p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1.png" alt="RabbitMQ消息丢失"></p><h4 id="生产者弄丢了消息"><a href="#生产者弄丢了消息" class="headerlink" title="生产者弄丢了消息"></a>生产者弄丢了消息</h4><p>生产者将数据发送到RabbitMQ的时候，可能会因为网络等问题，导致数据在半路给搞丢了。</p><p>此时可以选择用RabbitMQ提供的事务功能，在生产者发送数据之前开启RabbitMQ事务 <code>channel.txSelect</code>，然后发送消息，如果消息没有成功被RabbitMQ接收到，那么生产者会收到异常报错，此时可以回滚事务 <code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务 <code>channel.txCommit</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">channel.txSelect</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再次重发消息</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure><p>开启RabbitMQ的事务机制（同步）时，吞吐量会下来，因为太耗性能了。</p><p>所以一般来说，如果你要确保RabbitMQ的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，每次写的消息都会分配一个唯一的id，然后如果成功写入RabbitMQ中，RabbitMQ会回传一个ack消息，告诉你这个消息写入ok。如果RabbitMQ没能处理这个消息，会回调你的nack接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息id的状态，如果超过一定时间还没有接收到这个消息的回调，可以将消息进行重发。</p><p>事务机制和 <code>confirm</code> 机制最大的不同在于，事务机制时同步的，你提交一个事务之后会阻塞住，但是 <code>confirm</code> 机制是异步的，你发送消息之后可以接着发送下一个消息，RabbitMQ接收到消息之后会异步回调接口通知你消息接收到了。</p><p>所以一般在生产者避免数据丢失，都是用 <code>confirm</code> 机制的。</p><h4 id="RabbitMQ弄丢了消息"><a href="#RabbitMQ弄丢了消息" class="headerlink" title="RabbitMQ弄丢了消息"></a>RabbitMQ弄丢了消息</h4><p>就是RabbitMQ自己弄丢了消息，这个你必须开启RabbitMQ的持久化，就是消息写入之后会持久化到磁盘，哪怕是RabbitMQ自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。极其罕见的是，RabbitMQ还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p><p>设置持久化有两个步骤：</p><ul><li><p>创建queue的时候将其设置为持久化</p><p>  这样就可以保证RabbitMQ持久化queue的元数据，但是它是不会持久化queue里的数据的。</p></li><li><p>发送消息的时候将消息的 <code>deliveryMode</code> 设置为2</p><p>  就是将消息设置为持久化的，此时RabbitMQ就会将消息持久化到磁盘上去。</p></li></ul><p>必须同时设置这两个持久化才行，RabbitMQ哪怕是挂了，再次重启，也会从磁盘上恢复queue，恢复这个queue里的数据。</p><p>注意，哪怕是你给RabbitMQ开启了持久化机制，也有一种可能，就是这个消息写到了RabbitMQ中，但是还没来得及持久化到磁盘上，结果不巧，此时RabbitMQ挂了，就会导致内存里的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕实在持久化到磁盘之前，RabbtiMQ挂了，数据丢了，生产者收不到 <code>ack</code>，你野是可以自己重发的。</p><h4 id="消费端弄丢了消息"><a href="#消费端弄丢了消息" class="headerlink" title="消费端弄丢了消息"></a>消费端弄丢了消息</h4><p>RabbitMQ如果丢失了数据，主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，RabbitMQ认为你消费了，这数据就丢了。</p><p>这个时候得用RabbitMQ提供的 <code>ack</code> 机制，简单来说，就是你必须关闭RabbitMQ的自动 <code>ack</code>，可以通过一个api来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code>。这样的话，如果你还没处理完，就不会 <code>ack</code>，那RabbitMQ就认为你还没处理完，这个时候RabbtiMQ会把这个消息分配给别的consumer去处理，消息是不会丢的。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%8F%8A%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="RabbitMQ消息丢失及对应解决方案"></p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="消费端弄丢了消息-1"><a href="#消费端弄丢了消息-1" class="headerlink" title="消费端弄丢了消息"></a>消费端弄丢了消息</h4><p>唯一可能导致消费者丢失数据的情况，就是说，你消费到了这个消息，然后消费者那边自动提交了offset，让Kafka以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，还没处理自己就挂了，这种情况下这条消息就丢了。</p><p>这不是跟RabbitMQ差不多吗，大家都只打Kafka会自动提交offset，那么只要关闭自动提交offset，在处理完之后自己手动提交offset，就可以保证数据不会丢。但是此时确实还是可能会有重复消费，比如你刚处理完，还没提交offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>生产环境碰到的一个问题，就是说我们的Kafka消费者消费到了数据之后是写到一个内存的queue里先缓冲一下，结果有的时候，你刚把消息写入内存queue，然后消费者会自动提交offset，此时我们重启了系统，就会导致内存queue里还没来得及处理的数据就丢失了。</p><h4 id="Kafka弄丢了消息"><a href="#Kafka弄丢了消息" class="headerlink" title="Kafka弄丢了消息"></a>Kafka弄丢了消息</h4><p>这块比较常见的一个场景，就是Kafka某个broker宕机，然后重新选举partition的leader。如果此时其他的follower刚好还有些数据没有同步，结果此时leader挂了，接着选举某个follower成为leader之后，就会少了一些数据。</p><p>所以此时一般是要求起码设置如下4个参数：</p><ul><li>给topic设置 <code>replication.factor</code> 参数：这个值必须大于1，要求每个partition必须至少有2个副本。</li><li>在Kafka服务端设置 <code>min.insync.replicas</code> 参数：这个值必须大于1，这个是要求一个leader至少感知到有至少一个follower还跟自己保持联系，没掉队，这样才能确保leader挂了还有一个follower可用。</li><li>在producer端设置 <code>acks=all</code>：这个是要求每条数，必须是写入所有 replica 之后，才能认为是写成功了。</li><li>在producer端设置 <code>retries=MAX</code>（很大的一个值，无限次重试的意思）：这个是要求一旦写入失败，就无限重试。</li></ul><p>我们生产环境就是按照上述要求配置的，这样配置之后，至少在Kafka broker端就可以保证leader所在broker发生故障，进行leader切换时，数据不会丢失。</p><h4 id="生产者会不会弄丢消息？"><a href="#生产者会不会弄丢消息？" class="headerlink" title="生产者会不会弄丢消息？"></a>生产者会不会弄丢消息？</h4><p>如果按照上述的思路设置了 <code>acks=all</code>，一定不会丢，要求是，你的leader接收到消息，所有的follower都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断地重试，重试无限次。</p><h2 id="消息的顺序性"><a href="#消息的顺序性" class="headerlink" title="消息的顺序性"></a>消息的顺序性</h2><h3 id="消息错乱的场景"><a href="#消息错乱的场景" class="headerlink" title="消息错乱的场景"></a>消息错乱的场景</h3><p>先看看顺序会错乱的场景：</p><ul><li>RabbitMQ：一个queue，多个consumer。比如，生产者想RabbitMQ里发送了三条数据，顺序依次是data1、data2、data3，压入的是RabbitMQ的一个内存队列。有三个消费者分别从MQ中消费者三条数据中的一条，结果消费者2先执行完操作，把data2存入数据库，然后是data1、data3，明显顺序乱了。</li></ul><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F%E9%94%99%E4%B9%B1.png" alt="RabbitMQ消息顺序错乱"></p><ul><li>Kafka：比如说我们建了一个topic，有三个partition。生产者在写的时候，其实可以指定一个key，比如说我们制定了某个订单id作为key，那么这个订单相关的数据，一定会被分发到同一个partition中去，而且这个partition中的数据一定是有顺序的。</li></ul><p>消费者从partition中取出来数据的时候，也一定是有顺序的。到这里，顺序还是ok的，没有错乱。接着，我们在消费者里可能会搞多个线程来并发处理消息。因为如果消费者是单线程消费处理，而处理比较耗时的话，比如处理一条消息耗时几十ms，那么1秒钟只能处理几十条消息，者吞吐量太低了。而多个线程并发跑的话，顺序可能就乱掉了。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F%E9%94%99%E4%B9%B1.png" alt="Kafka消息顺序错乱"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>拆分多个queue，每个queue一个consumer，就是多一些queue而已，确实是麻烦点；或者就一个queue但是对应一个consumer，然后这个consumer内部用内存队列做排列，然后分发给底层不同的worker来处理。</p><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Rabbit%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F%E9%94%99%E4%B9%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="Rabbit消息顺序错乱解决方案"></p><h4 id="Kafka-1"><a href="#Kafka-1" class="headerlink" title="Kafka"></a>Kafka</h4><ul><li>一个topic，一个partition，一个consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。</li><li>写N个内存queue，具有相同key的数据都到同一个内存queue；然后对于N个线程，每个线程分别消费一个内存queue即可，这样就能保证顺序性。</li></ul><p><img src="/images/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F%E9%94%99%E4%B9%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="Kafka消息顺序错乱解决方案"></p><h2 id="解决消息队列的延时以及过期失效问题"><a href="#解决消息队列的延时以及过期失效问题" class="headerlink" title="解决消息队列的延时以及过期失效问题"></a>解决消息队列的延时以及过期失效问题</h2><p>核心问题：如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，该怎么解决？</p><h3 id="大量消息在MQ中积压了几个消失了还没解决"><a href="#大量消息在MQ中积压了几个消失了还没解决" class="headerlink" title="大量消息在MQ中积压了几个消失了还没解决"></a>大量消息在MQ中积压了几个消失了还没解决</h3><p>几千万条数据在MQ里积压了七八个小时，从下午4点多，积压到了晚上11点多。这个是我们真实遇到过的一个场景，确实是线上故障了，这个时候要不然就是修复consumer的问题，让它恢复消费速度，然后傻傻的等待几个小时消费完毕。</p><p>一个消费者一秒是1000条，3个消费者一秒是3000条，一分钟就是18万条。所以如果你积压了几百万到上千万的数据，几十消费者恢复了，也需要大概1小时的时间才能恢复过来。</p><p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p><ul><li>先修复consumer的问题，确保其恢复消费速度，然后将现有consumer都停掉。</li><li>新建一个topic，partition是原来的10倍，临时建立好原先10倍的queue数量。</li><li>然后写一个临时的分发数据的consumer程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的10倍数量的queue。</li><li>接着临时征用10倍的机器来部署consumer，每一批consumer消费一个临时queue的数据。这种做法相当于是临时将queue资源和consumer资源扩大10倍，以正常的10倍速度来消费数据。</li><li>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的consumer机器来消费消息。</li></ul><h3 id="MQ中的消息过期失效了"><a href="#MQ中的消息过期失效了" class="headerlink" title="MQ中的消息过期失效了"></a>MQ中的消息过期失效了</h3><p>假设你用的是RabbitMQ，RabbitMQ是可以设置过期时间的，也就是TTL。如果消息在queue中积压超过一定的时间就会被RabbitMQ给清理掉，这个数据就没了。那这就是第二个坑了，这就不是数据会大量积压在MQ里，而是大量的数据会直接丢失。</p><p>这个情况下，就不是说要增加consumer消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是批量重导，这个我们之前线上也有过类似的场景。就是大量积压的时候，我们当时就直接丢失数据了，然后等过了高峰期，比如晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入MQ里面去，把白天丢的数据给补回来。</p><p>假设1万个订单积压在MQ里面，没有处理，其中1000个订单都丢了，你只能手动写程序把那1000个订单给查出来，手动发到MQ里去再补一次。</p><h3 id="MQ都快写满了"><a href="#MQ都快写满了" class="headerlink" title="MQ都快写满了"></a>MQ都快写满了</h3><p>如果消息积压在MQ里，你很长时间都没有处理掉，此时导致MQ都快写满了，怎么办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，消费一个丢弃一个，都不要了，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><h3 id="RockerMQ的处理方式"><a href="#RockerMQ的处理方式" class="headerlink" title="RockerMQ的处理方式"></a>RockerMQ的处理方式</h3><p>对于RockerMQ，官方针对消息积压问题，提供了解决方案。</p><h4 id="提高消费并行度"><a href="#提高消费并行度" class="headerlink" title="提高消费并行度"></a>提高消费并行度</h4><p>绝大部分消息消费行为都属于IO密集型，即可能是操作数据库，或者调用RPC，这类消费行为的消费速度在于后端数据库或者外部系统的吞吐量，通过增加消费并行度，可以提高总的消费吞吐量，但是并行度增加到一定程度，反而会下降。所以，应用必须要设置合理的并行度。如下有几种修改消费并行度的方法：</p><p>同一个ConsumerGroup下，通过增加consumer实例数量在提高并行度（需要注意的是超过订阅队列数的consuemr实例无效）。可以通过加机器，或者在已有机器启动多个进程的方式。提高单个consumer的消费并行线程，通过修改参数consumeThreadMin、consumeThreadMax实现。</p><h4 id="批量方式消费"><a href="#批量方式消费" class="headerlink" title="批量方式消费"></a>批量方式消费</h4><p>某些业务流程如果支持批量方式消费，则可以很大程度上提高消费吞吐量，例如订单扣款类应用，一次处理一个订单耗时1s，一次处理10个订单可能也只耗时2s，这样即可大幅度提高消费的吞吐量，通过设置consumer的consumeMessageBatchMaxSize这个参数，默认是1，即一次之消费一条消息，例如设置为N，那么每次消费的消息数小于等于N。</p><h4 id="跳过非重要消息"><a href="#跳过非重要消息" class="headerlink" title="跳过非重要消息"></a>跳过非重要消息</h4><p>发生消息堆积时，如果消费速度一直追不上发送速度，如果业务对数据要求不高的话，可以选择丢弃不重要的消息。例如，当某个队列的消息数堆积到100000条以上，则尝试丢弃部分或者全部消息，这样就可以快速追上发送消息的速度。实例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> msgs.get(<span class="number">0</span>).getQueueOffset();</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxOffset</span> <span class="operator">=</span> msgs.get(<span class="number">0</span>).getProperty(Message.PROPERTY_MAX_OFFSET);</span><br><span class="line">    <span class="type">long</span> <span class="variable">diff</span> <span class="operator">=</span> Long.parseLong(maxOffset) - offset;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">        <span class="comment">//TODO 消息堆积情况的特殊处理</span></span><br><span class="line">        <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TODO 正常消费过程</span></span><br><span class="line">    <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化每条消息消费过程"><a href="#优化每条消息消费过程" class="headerlink" title="优化每条消息消费过程"></a>优化每条消息消费过程</h4><p>举例如下，某条消息的消费过程如下：</p><ul><li>根据消息从DB查询【数据1】</li><li>根据消息从DB查询【数据2】</li><li>复杂的业务计算</li><li>向DB插入【数据3】</li><li>向DB插入【数据4】</li></ul><p>这条消息的消费过程有4次与DB的交互，如果按照每次5ms计算，那么总共耗时20ms，假设业务计算耗时5ms，那么总共耗时25ms，所以如果能把4次DB交互优化为2次，那么总耗时就可以优化到15ms，即总体性能提高了40%。所以应用如果对时延敏感的话，可以把DB部署在SSD硬盘，相比于SCSI磁盘，前者的RT会小很多。</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 消息中间件 </tag>
            
            <tag> MQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用可编排状态机引擎设计</title>
      <link href="/2021/07/01/architecture/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/07/01/architecture/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://mp.weixin.qq.com/s/0GfCOUEw4svvSQVoShjJDw">《高德打车通用可编排订单状态机引擎设计》</a></p><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>日常的业务开发工作中经常会遇到各种状态流转的场景，其中不乏一些状态多、链路长、逻辑复杂的情况，还存在多场景、多类型、多业务维度等业务特性。在保证状态流转稳定性的前提下，可扩展性和可维护性是我们需要重点关注和解决的问题。</p><p>当状态、类型、场景，以及其他一些维度组合时，每一种组合都可能会有不同的处理逻辑，也可能会存在共性的业务逻辑，这种情况下代码中各种if-else肯定是无法想象的。如何有效处理这种“多状态+多类型+多场景+多维度”的复杂状态流转业务，同时能保证整个系统的可扩展性和可维护性？</p><h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>要解决“多状态+多类型+多场景+多维度”的复杂状态流转业务，我们从纵向和横向两个维度进行设计。纵向主要从业务隔离和流程编排的角度出发解决问题，而横向主要从逻辑复用和业务扩展的角度解决问题。</p><h2 id="一、纵向解决业务隔离和流程编排"><a href="#一、纵向解决业务隔离和流程编排" class="headerlink" title="一、纵向解决业务隔离和流程编排"></a>一、纵向解决业务隔离和流程编排</h2><h3 id="状态模式解决多维度组合业务场景的业务隔离"><a href="#状态模式解决多维度组合业务场景的业务隔离" class="headerlink" title="状态模式解决多维度组合业务场景的业务隔离"></a>状态模式解决多维度组合业务场景的业务隔离</h3><p>通常我们处理一个多状态或者多维度的业务逻辑，都会采用状态模式或者策略模式来结局，其核心其实可以概括为一个词“分而治之”，抽象一个基础逻辑接口、每一个状态或者类型都实现该接口，业务处理时根据不同的状态或者类型调用对应的业务实现，以达到逻辑相互独立互不干扰、代码隔离的目的。</p><blockquote><p>这不仅仅是从可扩展性和可维护性的角度出发，其实我们做架构做稳定性、隔离是一种减少影响面的基本手段，类似的隔离环境做灰度、分批发布等。</p></blockquote><p>“多状态+多类型+多场景+多维度”组合业务我们通过“state + bizCode + sceneId + event”四个标识用来区分，各个标识的具体含义如下，其中bizCode和sceneId可以根据不同系统的实际业务范畴自行划分和定义。</p><ul><li>state：当前处理器要处理的状态</li><li>bizCode：业务类型，如产品或订单类型</li><li>sceneId：业务场景，如业务形态或来源场景</li><li>event：触发状态迁移的事件</li></ul><p>根据以上的说明，状态机模式可以简单总结为：<strong>基于某些特定业务和场景下，根据源状态和发生的事件，来执行下一步的流程处理逻辑，并设置一个目标状态。</strong></p><p><img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt="状态机模式"></p><h3 id="状态迁移流程封装"><a href="#状态迁移流程封装" class="headerlink" title="状态迁移流程封装"></a>状态迁移流程封装</h3><p>状态流转的流程中，都会有三个流程：校验、业务逻辑执行、数据更新持久化。更加细化则会有：数据准备(prepare) -&gt; 校验(check) -&gt; 获取下一个状态(getNextState) -&gt; 执行业务逻辑(action) -&gt; 持久化(save) -&gt; 后续处理(after)六个阶段。其中校验可以拓展为串行校验(serialCheck)和并行校验(parallelCheck)，执行业务逻辑和持久化之间可以拓展出插件逻辑(plugins)，用于执行一些公用的额外处理逻辑或是针对特定场景进行特殊化处理的逻辑。通过模版方法将六个阶段方法串联在一起、形成一个有顺序的执行逻辑。这样一来整个状态流程的执行逻辑就更加清晰和简单，可维护性也得到一定的提升。</p><p>状态迁移动作处理流程：</p><p><img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E7%8A%B6%E6%80%81%E8%BF%81%E7%A7%BB%E5%8A%A8%E4%BD%9C%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt="状态迁移动作处理流程"></p><ol><li><p>校验器</p><p> 任何一个状态的流转甚至接口的调用都少不了一些校验规则，尤其是对于复杂的业务，其校验规则和校验逻辑也会更加复杂。那么对于这些校验规则怎么解耦呢，既要将校验逻辑从复杂的业务流程中解耦出来，同时有需要把复杂的校验规则简单化，使整个校验逻辑更具有可扩展性和可维护性。其实做法比较简单，只需要抽象一个校验器接口checker，把复杂的校验逻辑拆开，形成多个单一逻辑的校验器实现类，状态处理器在调用checker时只需要调用一个接口，由校验器执行多个checker的集合就可以了。将校验器chekcer进行封装之后，加入一个新的校验逻辑就十分简单了，只需要写一个新的checker实现类加入校验器就行，对其他代码基本没有改动。</p><p> 考虑到性能问题，多个校验器chekcer串行执行性能肯定比较差，可以使用多线程并行执行多个校验器checker以提高执行效率。但同时需要注意到，有些校验器逻辑可能是有先后依赖的（其实不应该出现），还有些业务流程中要求某些校验器的执行必须有先后顺序，还有些流程不要求校验器的执行顺序但是要求错误时的返回顺序，那怎么在并行的前提下保证顺序呢，此处可以用order + Future进行实现。通过一系列思考和总结，我们把校验器分为参数校验(paramChecker)、同步校验(syncChecker)、异步校验(asyncChecker)三种类型，其中参数校验paramChecker是需要在状态处理器最开始处执行的，因为如果参数都不合法了肯定没有继续向下执行的必要了。</p><p> <img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E6%A0%A1%E9%AA%8C%E5%99%A8.jpg" alt="校验器"></p><p> chekcer的定位是校验器，负责校验参数或业务的合法性，但实际编码过程中，checker中可能会有一些临时状态操作，例如在校验之前进行计数或者加锁操作、在校验完成后根据结果进行释放，这里就需要支持统一的释放功能。</p></li><li><p>上下文</p><p> 整个状态迁移的几个方法都是使用上下文Context对象串联的。Context对象中一共有三类对象：1. 业务领域对象的基本信息（ID、状态、业务属性、场景属性）；2. 事件对象（其参数基本就是状态迁移行为的入参）；3. 具体处理器决定的泛型类。一般要将数据再多个方法中进行传递有两种方案：一是使用ThreadLocal进行包装，每个方法都可以对当前ThreadLocal进行赋值和取值；另一种是使用一个上下文Context对象作为每个方法的入参传递。</p><p> 两种方案都有一些优缺点，使用ThreadLocal其实是一种“隐式调用”，虽然可以在“随处”进行调用，但是对使用方其实是不明显的，在中间件中会大量使用，在开发业务代码中是需要尽量避免的；而使用Context作为参数在方法中进行传递，可以有效减少“不可知”的问题。</p></li><li><p>迁移到的状态判定</p><p> 为什么要把获取下一个状态(getNextState)抽象为单独一个步骤，而不是交由业务自己进行设置呢？原因是要迁移到的下一个状态不一定是固定的，可能是根据当前状态和发生的事件，在遇到更加细节的逻辑时也可能会流转到不同的状态。举个例子，当前状态是用户已下单完成，要发生的事件是用户取消订单，此时根据不同的逻辑，订单有可能流转到取消状态、也可能流转到取消待审核状态、甚至有可能流转到取消待支付费用状态。这里要取决于业务系统对状态和事件定义的粗细和状态机的复杂程度，作为状态机引擎，这里把下一个状态的判定交由业务根据上下文对象自己来判断。</p></li></ol><h3 id="状态消息"><a href="#状态消息" class="headerlink" title="状态消息"></a>状态消息</h3><p>一般来说，所有的状态迁移都应该发出对应的消息，供下游消费方订阅进行相应的业务处理。</p><ol><li><p>状态消息内容</p><p> 对于状态迁移消息的发送内容通常有两种形式，一个是只发状态发生迁移这个通知，例如只发送“订单ID、变更前状态、变更后状态”等几个关键字段，具体下游业务需要哪些具体内容再调用相应的接口进行反查；还有一种是发送所有字段出去，类似于发一个状态变更后的订单内容快照，下游接到消息后几乎不需要再调用接口进行反查。</p></li><li><p>状态消息的时序</p><p> 状态迁移是有时序的，因此很多下游依赖方也需要判断消息的顺序。一种实现方案是使用顺序消息（RocketMQ、Kafka等），但基于并发吞吐量考虑很少采用这种方案；一般都是在消息体中加入“消息发送时间”或者“状态变更时间”字段，由消费方自己进行处理。</p></li><li><p>数据库状态变更和消息的一致性</p><ul><li><p>状态变更需要和消息保持一致吗？</p><p>  很多时候是需要的，如果数据库状态变更成功了，但是状态消息没有发送出去，则会导致一些下游依赖方处理方处理逻辑的缺失。而我们知道，数据库和消息系统是无法保证100%一致的，我们要保证的是数据库状态变更了，消息就要尽量接近100%地发送成功。</p></li><li><p>怎么保证？</p><p>  通常有几种方案：</p><ul><li><p>使用RocketMQ等支持的两段式消息提交方式：</p><ol><li>先向消息服务器发送一条预处理消息</li><li>当本地数据库变更提交之后，再向消息服务器发送一条确认发送的消息</li><li>如果本地数据库变更失败，则再向消息服务器发送一条取消发送的消息</li><li>如果长时间没有向消息服务器发送确认发送的消息，消息系统会回调一个提前约定的接口，来查看本地业务是否成功，以此决定是否真正发送消息</li></ol></li><li><p>使用数据库事务方案（一）</p><ol><li>创建一个消息发送表，将要发送的消息插入到该表中，同本地业务在一个数据库事务中进行提交</li><li>之后再由一个定时任务来轮询发送，直到发送成功后再删除当前表记录</li></ol></li><li><p>使用数据库事务方案（二）</p><ol><li>创建一个消息发送表，将要发送的消息插入到该表中，同本地业务在一个数据库事务中进行提交</li><li>向消息服务器发送消息</li><li>发送成功则删除掉当前表记录</li><li>对于没有发送成功的消息（也就是表里面没有被删除的记录），再由定时任务来轮询发送</li></ol><p>  <img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E6%96%B9%E6%A1%88.jpg" alt="数据库事务方案"></p></li><li><p>数据对账，对不一致的数据进行补偿处理，保证数据的最终一致性。</p></li></ul></li></ul><p> 其实不管使用哪种方案来保证数据库状态变更和消息的一致，数据对账的方案都是“必须”要有的一种兜底方案。</p></li></ol><h2 id="二、横向解决逻辑复用和业务拓展"><a href="#二、横向解决逻辑复用和业务拓展" class="headerlink" title="二、横向解决逻辑复用和业务拓展"></a>二、横向解决逻辑复用和业务拓展</h2><p>实现基于“多类型+多场景+多维度”的代码分离治理、以及标准处理流程模版的状态机模型之后，在真正编码的时候会发现不同类型不同维度对于同一个状态的流程处理过程，有时多个处理逻辑中的一部分流程是一样的或者是相似的。例如支付环节不管是采用免密支付还是其他方式，其中核销优惠券的处理逻辑、设置发票金额的处理逻辑等都是一样的；甚至有些时候多个类型间的处理逻辑大部分是相同的而差异是小部分，比如下单流程的处理逻辑基本逻辑都差不多，而出租车对比网约车可能就多了出租车红包、无预估价等个别流程的差异。</p><p>对于上面这种情况，其实就是要实现在纵向解决业务隔离和流程编排的基础上，需要支持小部分逻辑或代码段的复用，或者大部分流程的复用，减少重复建设和开发。对此我们在状态机引擎中支持两种解决方案：1. 基于插件化的解决方案；2. 基于代码继承方式的解决方案。</p><h3 id="基于插件化的解决方案"><a href="#基于插件化的解决方案" class="headerlink" title="基于插件化的解决方案"></a>基于插件化的解决方案</h3><p>插件的主要逻辑是：可以在业务逻辑执行(action)、数据持久化(save)这两个节点前加载对应打的插件类进行执行，主要是对上下文Context对象进行操作、或者根据Context参数发起不同的流程调用，已到达改变业务数据或流程的目的。</p><p><img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E6%8F%92%E4%BB%B6%E5%8C%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.jpg" alt="插件化解决方案"></p><ol><li><p>标准流程 + 差异化插件</p><p> 上面讲到同一个状态模型下、不同的类型或维度有些逻辑或处理流程是一样的小部分逻辑是不同的。于是我们可以把一种处理流程定义为标准的或默认的处理逻辑，把差异化的代码写成插件，当业务执行到具体差异化逻辑时会调用到不同的插件进行处理，这样只需要为不同的类型或维度编写对应有差异逻辑的插件即可、标准的处理流程由默认的处理器执行就行。</p></li><li><p>差异流程 + 公用插件</p><p> 对于小部分逻辑和代码可以公用的场景，也可以用插件化的方案解决。比如对于同一个状态下多个维修下不同处理器中、我们可以把相同的逻辑或代码封装成一个插件，多个处理器中都可以识别加载该插件进行执行，从而实现多个差异的流程使用想用插件的形式。</p></li></ol><h3 id="基于代码继承方式的解决方案"><a href="#基于代码继承方式的解决方案" class="headerlink" title="基于代码继承方式的解决方案"></a>基于代码继承方式的解决方案</h3><p>当发现新增一个状态不同维度的处理流程和当前已存在的一个处理器大部分逻辑是相同的，此时就可以使新写的这个处理器B继承已存在的处理器A，只需要让处理器B覆写A中不同的方法逻辑，实现差异逻辑的替换。这种方案比较好理解，但是需要处理器A已经规划好一些可以扩展的点，其他处理器可以基于这些扩展点进行覆写替换。当然更好的方案是，先实现一个默认的处理器，吧所有标准处理流程和可扩展点进行封装实现，其他处理器进行继承、覆写、替换就好。</p><h2 id="三、状态迁移流程的执行流程"><a href="#三、状态迁移流程的执行流程" class="headerlink" title="三、状态迁移流程的执行流程"></a>三、状态迁移流程的执行流程</h2><h3 id="状态机引擎的执行过程"><a href="#状态机引擎的执行过程" class="headerlink" title="状态机引擎的执行过程"></a>状态机引擎的执行过程</h3><p>状态机引擎通过两个阶段将状态流程编排、业务隔离以及扩展这几个过程串联起来：初始化阶段和运行时阶段。</p><ol><li><p>初始化阶段</p><p> 在系统初始化，所有特定状态处理器都会被Spring管理成为Spring Bean，状态机引擎通过监听Spring Bean的注册（BeanPostProcessor）来将这些状态处理器processor装载到自己管理的容器中。简单来说，这个状态处理器容器其实就是一个多层map实现的，第一层map的key是状态(state)，第二层map的key是状态对应的事件(event)，一个状态可以有多个要处理的事件，第三层map的key是具体的场景code(bizCode和sceneId的组合)，最后的value是抽象状态处理器集合。</p></li><li><p>运行时阶段</p><p> 经过初始化之后，所有的状态处理器processor都被装载到容器。在运行时，通过一个入口来发起对状态机的调用，方法的主要参数是操作事件(event)和业务入参，新建记录请求需要携带业务(bizCode)和场景(sceneId)信息，如果是已存在记录的更新，状态机引擎会根据记录ID自动获取业务(bizCode)、场景(sceneId)和当前状态(state)。之后引擎会根据state+event+bizCode+sceneId从状态机处理器容器中获取到对应的具体处理器porcessor，从而进行状态迁移处理。</p></li></ol><h3 id="检测到多个状态执行器怎么处理"><a href="#检测到多个状态执行器怎么处理" class="headerlink" title="检测到多个状态执行器怎么处理"></a>检测到多个状态执行器怎么处理</h3><p>当根据state+event+bizCode+sceneId信息获取到的是多个状态处理器processor，有可能确实业务需要单纯依赖bizCode和sceneId两个属性无法有效识别和定位唯一processor，那么这里给业务开一个口，由业务决定从多个处理器中选一个适合当前上下文的。</p><p>如果通过业务过滤之后，还是有多个状态处理器符合条件，那么只能抛异常处理了。这个需要在开发时，对状态和多维度处理器有详细规划。</p><h3 id="状态机引擎处理流程"><a href="#状态机引擎处理流程" class="headerlink" title="状态机引擎处理流程"></a>状态机引擎处理流程</h3><p>运行时的状态机执行过程如下：</p><p><img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt="状态机引擎处理流程"></p><h3 id="状态处理器的原理"><a href="#状态处理器的原理" class="headerlink" title="状态处理器的原理"></a>状态处理器的原理</h3><p><img src="/images/%E9%80%9A%E7%94%A8%E5%8F%AF%E7%BC%96%E6%8E%92%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BC%95%E6%93%8E%E8%AE%BE%E8%AE%A1/%E7%8A%B6%E6%80%81%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86.jpg" alt="状态处理器的原理"></p><h2 id="四、其他问题"><a href="#四、其他问题" class="headerlink" title="四、其他问题"></a>四、其他问题</h2><ol><li><p>状态流转并发问题怎么处理？</p><ul><li>在状态机的sendEvent入口处，针对同一业务领域对象加锁（redis分布式锁），同一时间只允许有一个状态变更操作进行，其他请求进行排队等待。</li><li>在数据库层对当前state做校验，类似乐观锁方式。最终将其他请求抛出错误，由上有业务进行处理。</li></ul></li><li><p>能不能动态实现状态流程的切换和编排？</p><p> 可以通过将state、event、bizCode、sceneId、processor通过数据库来保存，初始化时从数据库加载后进行处理器的状态。但一般来说，状态流转是较为核心的业务，一旦因变更导致故障是不可想象的，因此不推荐动态实现状态流程的切换和编排。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见异常解决方案总结</title>
      <link href="/2021/04/28/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
      <url>/2021/04/28/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文是对日常代码开发调试过程中发现的一些常见异常的解决方法进行归纳，避免重复踩坑。</p><span id="more"></span><h2 id="Java-x2F-Spring"><a href="#Java-x2F-Spring" class="headerlink" title="Java&#x2F;Spring"></a>Java&#x2F;Spring</h2><ol><li><p><code>Caused by: com.alibaba.fastjson.JSONException: default constructor not found.</code></p><ul><li>解决方案：解析的目标类增加无参构造方法。</li></ul></li><li><p>使用 <code>frontend-maven-plugin</code> 进行maven打包时出现以下错误：</p><p> <code>Failed to execute goal com.github.eirslett:frontend-maven-plugin:1.6:install-node-and-npm (install node and npm) on project spider-web: Could not extract the npm archive: Could not extract archive: &#39;C:\Users\xxx\.m2\repository\com\github\eirslett\npm\5.7.1\npm-5.7.1.tar.gz&#39;: EOFException</code></p><ul><li>解决方案：把.&#x2F;m2目录下载不完全的包清掉之后再执行打包。</li></ul></li><li><p>Apache工具类方法FileUtils.forceDelete(File file)报 <code>java.io.IOException: Unable to delete file:</code> 错误。</p><ul><li>解决方案：检查file的路径是否是绝对路径，相对路径有可能会出问题。</li></ul></li><li><p><code>sudo: no tty present and no askpass program specified</code></p><ul><li>解决方案：设置指定用户（如 gitlab-runner）使用sudo命令不需要手动输入登录密码。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br><span class="line">gitlab-runner ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring Cloud架构下微服务使用 <code>@EnableJpaAuditing</code> 开启审计功能时，需要调用方服务依赖 <code>spring-aspects.jar</code> 包，否则在使用RestTemplate进行服务间调用时会报如下错误：<br> <code>o.s.s.o.provider.endpoint.TokenEndpoint  : Handling error: InternalAuthenticationServiceException, sun.reflect.annotation.TypeNotPresentExceptionProxy</code></p><ul><li><p>解决方案：通过在TypeNotPresentExceptionProxy类的构造方法中打断点，发现根本原因是：<br>  <code>java.lang.NoClassDefFoundError: org/springframework/beans/factory/aspectj/ConfigurableObject</code></p><p>  而该类是存在于spring-aspects包中，最终通过添加该依赖解决问题。</p></li></ul></li><li><p>JPA事务管理踩坑：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you retrieve an entity, for example using the findOne method call within a transactional method it has become managed from that point by the persistence provider.</span><br><span class="line">Now if you make any changes to that entity (which is actually a proxy object), upon transaction commit, those changes will be persisted to the database, regardless of the fact of invoking the save or update methods.</span><br><span class="line">save or persist has to be used when you are creating a new entity from scratch and persistence provider does not know of its existance yet.</span><br><span class="line">Remember that you can prevent making any changes upon commit, if you use detach or evict methods on that particular entity before those changes occur.</span><br></pre></td></tr></table></figure><ul><li><p>翻译：如果您检索实体，例如findOne在事务方法中使用方法调用，则由持久性提供程序从那时起管理它。现在，如果对该实体（实际上是代理对象）进行任何更改，则在事务提交时，无论调用save或update方法的事实如何，这些更改都将持久保存到数据库。save或者persist必须在从头开始创建新实体时使用，并且持久性提供程序还不知道它的存在。请记住，如果在发生更改之前在特定实体上使用detach或使用evict方法，则可以阻止在提交时进行任何更改。</p></li><li><p>解决方案：简而言之，就是在save通过findxxxByxxx查询得到的对象的时候，如果有spring的事务进行控制时，需要new一个同类型的对象再去save。</p></li><li><p>参考：<a href="https://stackoverflow.com/questions/46708063/springboot-jpa-need-no-save-on-transactional">SpringBoot JPA need no .save() on @Transactional?</a></p></li></ul></li><li><p>Logback使用AmqpAppender的json格式日志向elk打印日志时，如果使用%ex会因为异常堆栈信息中包含为转义的\t\n等字符导致logstash的json解析失败，从而使得日志中无法记录堆栈信息。</p><ul><li>解决思路：<ol><li>logstash的input直接使用 <code>codec =&gt; plain</code> 解析，此方式适用于 <code>AmqpAppender</code> 的 <code>pattern</code> 格式为字符串日志而不是类json格式日志</li><li>pattern中使用 <code>%replace</code> 对 <code>%ex</code> 中的 <code>\t\n</code> 等字符进行转义替换</li></ol></li></ul></li><li><p>使用Spring RestTemplate 获取 JPA 的 Page 对象时，会报错：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver - Failed to read HTTP message: org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Can not construct instance of org.springframework.data.domain.Page: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of org.springframework.data.domain.Page: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information</span><br><span class="line">at [Source: java.io.PushbackInputStream@77866dd9; line: 1, column: 1]</span><br></pre></td></tr></table></figure><ul><li><p>解决方案：需要使用Page的实现类来接收Page对象，否则jackson在进行反序列化时会解析失败。</p><p>  编写自定义Page实现类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pagination</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">PageImpl</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">982848586283423960L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pagination</span><span class="params">(List&lt;T&gt; content, Pageable pageable, <span class="type">long</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(content, pageable, total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pagination</span><span class="params">(List&lt;T&gt; content)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pagination</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Lists.newArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  使用自定义Page实现类接收RestTemplate返回的Page对象：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pagination&lt;VO&gt; VOPage = restTemplate.getForObject(url, Pagination.class);</span><br></pre></td></tr></table></figure></li><li><p>参考：<a href="https://stackoverflow.com/questions/34647303/spring-resttemplate-with-paginated-api">Spring RestTemplate with paginated API</a></p></li></ul></li><li><p><code>Caused by: io.lettuce.core.RedisCommandExecutionException: ERR value is not an integer or out of range</code></p><ul><li><p>原因分析：出现该错误的原因是使用自定义的RestTemplate构造RedisAtomicLong时，RestTemplate的序列化方式可能不是RedisAtomicLong支持的。</p></li><li><p>解决方案：可以在构造RedisAtomicLong时使用 <code>new RedisAtomicLong(FLAG_KEY, redisConnectionFactory)</code> 代替 <code>new RedisAtomicLong(FLAG_KEY, redisTemplate)</code>。使用RedisAtomicLong类型默认支持的序列化方式进行构造不会出现此错误。</p></li><li><p>参考：<a href="https://blog.csdn.net/wangjun5159/article/details/52387782">https://blog.csdn.net/wangjun5159/article/details/52387782</a></p></li></ul></li><li><p>当使用Spring JdbcTemplate结合BeanPropertyRowMapper编写orm层时，enum字段转换会出现问题，BeanPropertyRowMapper默认enum类型反序列化时依据枚举值的ordinal（序号），即使enum类中使用@JsonCreator指定使用枚举值的某个字段进行反序列化也无效，因为BeanPropertyRowMapper中并未使用@JsonCreator注解。</p><ul><li><p>解决方案：自定义BeanPropertyRowMapper，重写getColumnValue方法，根据PropertyDescriptor判断是否是enum类型，并做对应的转换操作。</p></li><li><p>参考：<a href="https://stackoverflow.com/questions/15411843/spring-jdbc-beanpropertyrowmapper-yes-no-y-n-to-boolean-bean-properties">Spring JDBC BeanPropertyRowMapper yes no (‘Y’,’N’) to boolean bean properties</a></p></li></ul></li><li><p>使用Zuul转发OAuth2认证服务的路由，通过表单登录会报错：</p><p> <code>full authentication is required to access this resource</code></p><ul><li><p>原因分析：在客户端中处于未认证的状态访问需要认证的资源时会跳转至OAuth2认证服务的登录页面进行认证，而认证的过程中会发现判断request中没有 <code>Authorization</code> 请求头，而登录认证是需要 <code>client_id</code> 和 <code>client_secret</code> 信息存储在 <code>Authorization</code> 请求头里的，这就导致报错了。而根本的原因是从网关转发到认证服务的登录页面时直接重定向到了 <code>auth-server/login</code> 而不是 <code>gateway/proxy/login</code> 登录页面，重定向时丢失了 <code>Authorization</code> 信息。</p></li><li><p>解决方案：OAuth2认证服务在做单点登录SSO时，不通过网关进行路由转发。</p></li></ul></li><li><p>在使用Mybatis-Plus的 <code>getOne(Wrapper&lt;T&gt; wrapper)</code> 方法查询单条数据时，出现了以下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.DataIntegrityViolationException: Error attempting to get column &#x27;id&#x27; from result set.</span><br><span class="line">Cause: java.sql.SQLDataException: Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer; Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer; nested exception is java.sql.SQLDataException: Value &#x27;1161534535095926785&#x27; is outside of valid range for type java.lang.Integer</span><br></pre></td></tr></table></figure><ul><li><p>原因分析：从报错信息看，应该是id字段的类型错误导致的实际的Long值超出了Integer取值范围，校对之后发现数据库中该字段类型是BIGINT，而实体类中属性的类型为Long，并没有问题。仔细排查发现原因是实体类上使用的lombok <code>@Buidler</code> 注解导致该类没有无参构造方法，从而导致Mybatis-Plus无法正确映射字段类型。</p></li><li><p>解决方案：在实体类上添加lombok <code>@NoArgsConstructor</code> 和 <code>@AllArgsConstructor</code> 注解。</p></li></ul></li><li><p>在进行 Spring AOP 编程时，有时会出现以下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;xxx&#x27; defined in class path resource [xxx]: Initialization of bean failed;……</span><br><span class="line">...</span><br><span class="line">Caused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class ……</span><br><span class="line">...</span><br><span class="line">Caused by: java.lang.IllegalArgumentException: Cannot subclass final class ……</span><br></pre></td></tr></table></figure><ul><li><p>解决方案：通常情况下是由于切面的切入点表达式过于通用，包含了被 <code>final</code> 修饰的类，Java中不允许继承被 <code>final</code> 所修饰的类，而CGLIB增强是通过继承原对象后动态创建子类来实现的，导致了这样的错误。可以通过以下两种方法解决：</p><ol><li>取消使用 <code>final</code> 修饰目标类</li><li>调整PointCut切入点条件，过滤掉 <code>final</code> 修饰的类</li></ol></li><li><p>参考：<a href="https://stackoverflow.com/questions/36775611/problems-with-aop-in-spring-boot">Problems with Aop in spring boot</a>；<a href="https://www.cnblogs.com/skychenjiajun/p/8867038.html">spring aop问题</a></p></li></ul></li><li><p>同时使用 Lombok 的 <code>@Builder</code> 和 <code>@Data</code> 注解时，如果存在 <code>final</code> 修饰的属性并且手动添加了构造方法，则无法使用 <code>@NoArgsConstructor</code> 和 <code>@AllArgsConstructor</code>，并且会出现以下错误：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoWrapper</span>&lt;V <span class="keyword">extends</span> <span class="title class_">BaseVo</span>&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * vo对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V vo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义字段键值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Object&gt; fields;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VoWrapper</span><span class="params">(V vo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vo = vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error:(17, 1) java: 无法将类 com.yupaits.yutool.metadata.base.VoWrapper&lt;V&gt;中的构造器 VoWrapper应用到给定类型;</span><br><span class="line">                需要: V</span><br><span class="line">                找到: V,java.util.Map&lt;java.lang.Long,java.lang.Object&gt;</span><br><span class="line">                原因: 实际参数列表和形式参数列表长度不同</span><br></pre></td></tr></table></figure><ul><li>解决方案：在手动编写的构造方法上增加 <code>@Tolerate</code> 注解，让 Lombok 不识别此构造方法。 <figure class="highlight java"><figcaption><span>&#123;16&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoWrapper</span>&lt;V <span class="keyword">extends</span> <span class="title class_">BaseVo</span>&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * vo对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V vo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 自定义字段键值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Object&gt; fields;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tolerate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VoWrapper</span><span class="params">(V vo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vo = vo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参考：<a href="https://blog.csdn.net/w605283073/article/details/89221853">记lombok@Data和@Builder一起用无法添加无参构造方法的坑</a></li></ul></li><li><p>Spring Boot项目启动报错：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.context.ApplicationContextException: Unable to start ServletWebServerApplicationContext due to missing ServletWebServerFactory bean.</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:<span class="number">203</span>)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:<span class="number">179</span>)</span><br><span class="line">at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:<span class="number">153</span>)</span><br><span class="line">... <span class="number">8</span> common frames omitted</span><br></pre></td></tr></table></figure><ul><li><p>参考： <a href="https://www.jianshu.com/p/eb36833186c">spring boot启动找不到ServletWebServerFactory bean</a></p></li><li><p>原因：pom.xml里spring-boot-starter-jetty的scope为provided（打包时不会打进jar包或war包），但IDEA的启动配置里没有勾选 “Include dependencies with “Provided” scope“，导致运行时没有将这个包加入，使得启动时没有找到相关的Web容器相关类。</p></li></ul></li><li><p>Druid数据库连接池报错：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Druid-ConnectionPool-Destroy-<span class="number">1489859718</span>] ERROR com.alibaba.druid.pool.DruidDataSource.removeAbandoned(DruidDataSource.java:<span class="number">2989</span>) - abandon connection, owner thread: Saturn-ClearDataJob-<span class="number">6</span>-thread-<span class="number">1</span>, connected at : <span class="number">1637874375524</span>, open stackTrace </span><br><span class="line">        at java.lang.Thread.getStackTrace(Thread.java:<span class="number">1559</span>)</span><br><span class="line">        at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:<span class="number">1477</span>)</span><br><span class="line">        ...</span><br><span class="line">ownerThread current state is RUNNABLE, current stackTrace</span><br><span class="line">        at java.net.SocketInputStream.docketRead0(Native Method)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><ul><li><p>参考: <a href="https://blog.csdn.net/wtopps/article/details/78343659">Druid连接池 报错: abandon connection原因分析</a></p></li><li><p>原因: 由于连接池中处于活动状态的链接，连接时长超过了配置的removeAbandonedTimeoutMillis时长，被强制关闭导致。Druid连接池的超时强制关闭是通过<code>removeAbandoned</code>、<code>removeAbandonedTimeoutMillis</code>两个配置项来控制的，可修改<code>removeAbandoned</code>为<code>false</code>或者调大<code>removeAbandonedTimeoutMillis</code>的值进行解决。</p></li></ul></li></ol><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ol><li><p>Vue.js2.x 报 <code>Cannot read property &#39;__ob__&#39; of undefined</code> 的错误。</p><ul><li>解决方案：检查vue组件的 <code>data()</code> 方法是否有 <code>return</code> 语句。</li></ul></li></ol><Vssue title="常见异常解决方案总结"/>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2021/04/28/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2021/04/28/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在实际的开发工作中，有一些场景会使用到分布式锁，用于控制分布式系统多个节点同一时间只能有一个节点执行目标方法，解决了多节点同时执行导致的数据不一致、数据重复等问题。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>使用Spring Boot Starter技术开发基于Redis的可插拔式分布式锁组件，采用注解+切面的方式将分布式锁自身的控制逻辑与业务代码解耦，侵入性小，使用起来更加简便。</p><h2 id="分布式锁的设计"><a href="#分布式锁的设计" class="headerlink" title="分布式锁的设计"></a>分布式锁的设计</h2><ol><li><p>多个节点执行同一个目标方法时，方法想要获取分布式锁Redis Key相同的多个节点才会受同一个分布式锁的控制。</p></li><li><p>为了避免某个节点拿到锁执行代码逻辑时宕掉，锁无法释放导致其他节点一直拿不到锁，需要设置锁的过期时间，过期后自动释放掉。</p></li><li><p>由于网络连接不稳定导致节点获取不到锁时，需要通过重试机制来进行获取。</p></li><li><p>特殊情况下，有多个方法使用同一个锁，例如方法A和方法B都是比较耗时的计算任务，并且受同一个分布式锁控制，其中方法A自身是需要支持多节点并发计算用于提高处理速度，此时可以通过设计分布式锁的排他性并结合重试之后是否执行方法内的代码逻辑，以满足此种场景的要求。</p></li></ol><h2 id="分布式锁配置参数说明"><a href="#分布式锁配置参数说明" class="headerlink" title="分布式锁配置参数说明"></a>分布式锁配置参数说明</h2><p>分布式锁相关的配置参数说明如下：</p><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>exclusive</td><td>是否为排他锁</td><td>true</td><td>指定注解修饰的目标方法同一时间是否只能由同一个节点或实例执行。当一个节点拿到锁开始执行目标方法时，其他节点获取不到锁则等待重试，一次或多次重试之后仍然获取不到锁，需要根据是否为排他锁分别进行处理。如果是排他锁(exclusive&#x3D;true)，其他节点不执行目标方法内的代码逻辑；如果不是排他锁(exclusive&#x3D;false)，其他节点则直接执行目标方法的代码逻辑。</td></tr><tr><td>timeout</td><td>超时时长</td><td>5</td><td>执行目标方法的超时时长，超过该时长后，锁会被释放掉。</td></tr><tr><td>unit</td><td>时间单位</td><td>TimeUnit.MILLISECONDS毫秒</td><td>超时时长和重试等待时长使用的都是该时间单位</td></tr><tr><td>retries</td><td>重试次数</td><td>0</td><td>重新尝试获取锁的次数</td></tr><tr><td>waitingTime</td><td>重试等待时长，数值</td><td>0</td><td>获取锁失败到下一次尝试获取锁之间的时间间隔</td></tr><tr><td>prefix</td><td>Key前缀</td><td>空字符串</td><td>分布式锁的Redis Key前缀</td></tr><tr><td>argNames</td><td>构建Key的参数</td><td>空数组</td><td>指定哪些方法参数参与Redis Key的构建。为空时默认使用全部的方法参数。</td></tr><tr><td>argsAssociated</td><td>是否使用参数构建Key</td><td>true</td><td>是否使用方法参数构建Redis Key。设为false，则无论argNames中有哪些方法参数，都不会使用方法参数构建Key。</td></tr><tr><td>throwEx</td><td>获取锁失败时是否抛出异常</td><td>false</td><td>重试之后仍然获取不到锁，设为true：不执行目标方法代码并抛出onFailure参数对应的异常，设为false：不执行目标方法代码逻辑且不抛出异常。</td></tr><tr><td>onFailure</td><td>获取锁失败时抛出的异常类型</td><td>DistributedLockException.class</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>历史数据清理</title>
      <link href="/2021/04/28/architecture/%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/"/>
      <url>/2021/04/28/architecture/%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>采用任务调度中心（如：xxl-job, saturn等）+ Java定时任务的方式，清理的时候可以通过动态配置要清理的表及数据范围，以实现灵活地进行历史数据地清除或者转移。</p><h2 id="历史数据清理配置参数说明"><a href="#历史数据清理配置参数说明" class="headerlink" title="历史数据清理配置参数说明"></a>历史数据清理配置参数说明</h2><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>saveHistory</td><td>是否保存至历史表</td><td>否</td><td>设为true，会按预设的格式新建或者匹配到已存在的历史数据表，并将清理的数据转移到该历史数据表中。</td></tr><tr><td>dataSource</td><td>数据源</td><td></td><td>指定待清理数据所在的数据源标识</td></tr><tr><td>tableName</td><td>待清理数据表名</td><td></td><td>指定要清理那张表的数据</td></tr><tr><td>fieldName</td><td>时间索引字段名</td><td></td><td>指定按照那个字段来按时间范围进行清理，该字段必须是DATETIME类型并且已经创建了索引</td></tr><tr><td>keepDays</td><td>保留最近几天的数据</td><td></td><td>指定要保留几天的数据，在此之前的数据会被清理掉</td></tr><tr><td>batchSize</td><td>批量删除记录数</td><td>3000</td><td>清理的数据量大时，通过分批的方式进行删除，每批删除的数量</td></tr><tr><td>extraConditions</td><td>额外查询条件</td><td></td><td>用于限制待清理表的数据范围</td></tr><tr><td>historyTablePrefix</td><td>历史数据表名前缀</td><td></td><td>指定保存历史数据的表名前缀</td></tr><tr><td>historyTableDateTimePattern</td><td>历史数据表名日期时间格式</td><td>yyyyMMdd</td><td>指定保存历史数据表名中的日期时间格式</td></tr><tr><td>historyTableSuffix</td><td>历史数据表名后缀</td><td></td><td>指定保存历史数据的表名后缀</td></tr></tbody></table><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">history:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">saveHistory:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">dataSource:</span> <span class="string">primary</span></span><br><span class="line">        <span class="attr">tableName:</span> <span class="string">tt_sample</span></span><br><span class="line">        <span class="attr">fieldName:</span> <span class="string">created_time</span></span><br><span class="line">        <span class="attr">keepDays:</span> <span class="number">15</span></span><br><span class="line">        <span class="attr">batchSize:</span> <span class="number">1000</span></span><br><span class="line">        <span class="attr">extraConditions:</span> <span class="string">created_by=&#x27;123456&#x27;</span></span><br><span class="line">        <span class="attr">historyTablePrefix:</span> <span class="string">th</span></span><br><span class="line">        <span class="attr">historyTableDateTimePattern:</span> <span class="string">yyyyMMdd</span></span><br><span class="line">        <span class="attr">historyTableSuffix:</span> <span class="string">bak</span></span><br></pre></td></tr></table></figure><p>对应的处理过程：</p><ol><li><p>切换至 <code>primary</code> 数据源</p></li><li><p>将清理参数转换成查找数据 sql 如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设执行清理的日期为 2021-04-28</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tt_sample <span class="keyword">where</span> created_time <span class="operator">&lt;=</span> <span class="string">&#x27;2021-04-13 23:59:59.999999999&#x27;</span> <span class="keyword">and</span> (created_by<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure></li><li><p>当不需要保存删除的数据到历史表时，直接根据步骤2查询出来的 id 删除数据</p></li><li><p>当需要保存删除的数据到历史表时，即 saveHistroy 为 true</p><ul><li>按配置获取相应的历史数据表名，示例的表名为 <code>th_tt_sample_20210428_bak</code></li><li>当上述的历史数据表不存在时，按原表 <code>tt_sample</code> 的表结构的新增该表</li><li>根据步骤2中查出的 id 将数据复制到 <code>th_tt_sample_20210428_bak</code> 表中</li><li>根据步骤2查询出来的 id 删除数据</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客迁移</title>
      <link href="/2020/08/23/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2020/08/23/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>由于个人博客维护起来比较耗费精力，后续技术博客内容将在<a href="https://www.yuque.com/yupaits">语雀平台</a>的知识库进行发布，同时已有的技术博客文章均已迁移完毕。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GoF的23种设计模式的分类和功能</title>
      <link href="/2020/08/04/design-pattern/GoF%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/08/04/design-pattern/GoF%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用范围来分。</p><h3 id="1-根据目的分类"><a href="#1-根据目的分类" class="headerlink" title="1. 根据目的分类"></a>1. 根据目的分类</h3><p>根据模式是用来完成什么工作来划分，这种方式可分为<strong>创建型模式</strong>、<strong>结构型模式</strong>和<strong>行为型模式</strong>3种。</p><ol><li><p>创建型模式：用于描述”怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。</p></li><li><p>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。</p></li><li><p>行为型模式：用于描述类或对象之间怎样互相协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。</p></li></ol><h3 id="2-根据作用范围分类"><a href="#2-根据作用范围分类" class="headerlink" title="2. 根据作用范围分类"></a>2. 根据作用范围分类</h3><p>根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为<strong>类模式</strong>和<strong>对象模式</strong>两种。</p><ol><li><p>类模式：用于处理类与子类之间的关系，这些关系通过集成来建立，是静态的，在编译时便确定下来了。</p></li><li><p>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。</p></li></ol><table><thead><tr><th>范围&#x2F;目的</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>类模式</td><td>工厂方法</td><td>（类）适配器</td><td>模板方法；解释器</td></tr><tr><td>对象模式</td><td>单例；原型；抽象工厂；建造者</td><td>代理；（对象）适配器；桥接；装饰；外观；享元；组合</td><td>策略；命令；职责链；状态；观察者；中介者；迭代器；访问者；备忘录</td></tr></tbody></table><h2 id="GoF的23种设计模式的功能"><a href="#GoF的23种设计模式的功能" class="headerlink" title="GoF的23种设计模式的功能"></a>GoF的23种设计模式的功能</h2><table><thead><tr><th>模式名</th><th>英文名</th><th>功能</th></tr></thead><tbody><tr><td>单例模式</td><td>Singleton</td><td>某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</td></tr><tr><td>原型模式</td><td>Prototype</td><td>将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</td></tr><tr><td>工厂方法模式</td><td>Factory Method</td><td>定义一个用于创建产品的接口，由子类决定生产什么产品。</td></tr><tr><td>抽象工厂模式</td><td>AbstractFactory</td><td>提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</td></tr><tr><td>建造者模式</td><td>Builder</td><td>将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</td></tr><tr><td>代理模式</td><td>Proxy</td><td>为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</td></tr><tr><td>适配器模式</td><td>Adapter</td><td>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</td></tr><tr><td>桥接模式</td><td>Bridge</td><td>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</td></tr><tr><td>装饰模式</td><td>Decorator</td><td>动态地给对象增加一些职责，即增加其额外地功能。</td></tr><tr><td>外观模式</td><td>Facade</td><td>为多个复杂地子系统提供一个一致地接口，使这些子系统更加容易被访问。</td></tr><tr><td>享元模式</td><td>Flyweight</td><td>运用共享技术来有效地支持大量细粒度对象地复用。</td></tr><tr><td>组合模式</td><td>Composite</td><td>将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</td></tr><tr><td>模板方法模式</td><td>Template Method</td><td>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</td></tr><tr><td>策略模式</td><td>Strategy</td><td>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</td></tr><tr><td>命令模式</td><td>Command</td><td>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分隔开。</td></tr><tr><td>职责链模式</td><td>Chain of Responsibility</td><td>把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</td></tr><tr><td>状态模式</td><td>State</td><td>允许一个对象在其内部状态发生改变时改变其行为能力。</td></tr><tr><td>观察者模式</td><td>Observer</td><td>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</td></tr><tr><td>中介者模式</td><td>Mediator</td><td>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</td></tr><tr><td>迭代器模式</td><td>Iterator</td><td>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</td></tr><tr><td>访问者模式</td><td>Visitor</td><td>在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</td></tr><tr><td>备忘录模式</td><td>Memento</td><td>在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</td></tr><tr><td>解释器模式</td><td>Interpreter</td><td>提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</td></tr></tbody></table><p><a href="https://github.com/yupaits/study-java/blob/master/src/main/java/designpattern">代码示例</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2020/08/04/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/08/04/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="软件设计模式的概念和意义"><a href="#软件设计模式的概念和意义" class="headerlink" title="软件设计模式的概念和意义"></a>软件设计模式的概念和意义</h2><h3 id="1-软件设计模式的概念"><a href="#1-软件设计模式的概念" class="headerlink" title="1. 软件设计模式的概念"></a>1. 软件设计模式的概念</h3><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><h3 id="2-学习设计模式的意义"><a href="#2-学习设计模式的意义" class="headerlink" title="2. 学习设计模式的意义"></a>2. 学习设计模式的意义</h3><p><strong>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</strong> 正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h2 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h2><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下4个主要部分。</p><h3 id="1-模式名称"><a href="#1-模式名称" class="headerlink" title="1. 模式名称"></a>1. 模式名称</h3><p>每个模式都有自己的名称，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。模式名称（Pattern Name）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p><h3 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h3><p>问题（Problem）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h3><p>模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的组合）来解决这个问题。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4. 效果"></a>4. 效果</h3><p>描述了该模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中通安全合规之人员安全实践</title>
      <link href="/2020/06/02/post/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/06/02/post/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzUyMTcwNTY3Mg==&mid=2247484402&idx=1&sn=df314f7d54c778864e10fd053ab3ecb9&chksm=f9d64255cea1cb43ad1644f0bb86d6c3fac637ff80e3938dc104ac07b831ede9dcadc9b2870c&xtrack=1&scene=0&subscene=93&clicktime=1559297884&ascene=7&devicetype=android-28&version=2700043b&nettype=ctnet&abtest_cookie=BAABAAoACwASABMABgAjlx4AVpkeAMCZHgDcmR4A+pkeAAOaHgAAAA==&lang=zh_CN&pass_ticket=2CKX5Hqk/BcOK2hGTH+PV4B3tD0RqxX47y3G13tk6Vyo1nNTzgP2Tu0gvbg2q4LR&wx_header=1">中通安全合规之人员安全实践</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>5月13日正式发布的“等保2.0”成为了最近安全圈子里的大新闻，同时也将等保和ISO27001等信息安全标准带上了新热度。作为国家关键信息基础设施企业，中通快递同样实施了等保，在实施等保的过程中我们系统地学习了信息安全管理体系，其中人员安全和合规是重要的组成部分。作为一家拥有几十万员工的企业，毫无疑问人是中通非常宝贵的资源，但同时人也是信息安全极其重要的要素，因此企业的人员安全和合规就显得尤为重要。</p><p>从生命周期的方法论来看，企业员工在企业内同样需要按照生命周期进行安全管理。从人员的入职到离职，在整个生命周期都应当伴随着人员安全管理。为了更好地保障人员安全和合规，中通安全围绕着企业人员的生命周期做了一些实践，在整个人员生命周期内针对不同的人员安全风险设计了安全流程，完成了整个人员安全生命周期的管理，大大降低了人员安全的风险。</p><h2 id="企业人员安全的生命周期"><a href="#企业人员安全的生命周期" class="headerlink" title="企业人员安全的生命周期"></a>企业人员安全的生命周期</h2><p>中通安全目前将人员安全生命周期分为三个阶段：人员入职阶段、人员在职阶段、人员离职阶段。在人员入职阶段主要对人员历史信息进行检查、设置入职门槛、避免问题人员的流入。在人员在职阶段，中通安全秉承持续发展和动态安全管理的理念，加强人员安全培训的同时不断完善认证和权限的建设。在人员离职阶段，通过自动审计避免离职导致的侥幸心理带来的安全风险，也可以保证离职人员权限的自动回收。</p><h3 id="人员入职阶段"><a href="#人员入职阶段" class="headerlink" title="人员入职阶段"></a>人员入职阶段</h3><p>随着中通快递的快速发展，越来越多的人加入到中通，人员的快速增长给人事部门带来了大量的工作，同时也出现了很多急需解决的痛点，例如：</p><ul><li>一线操作员的大量入职，需要进行重复性的身份录入工作</li><li>部分员工存在身份异常等问题，入职后会带来很多后续麻烦</li></ul><p>为了解决上述痛点，中通安全开发了天眼系统，通过中通天眼系统，仅需30秒即可完成上述内容，大大提高了人员入职环节的工作效率，并减少了人员安全问题的产生。</p><p>中通天眼系统由用户端的天眼APP和人事端的天眼WEB管理后台组成，用户端的天眼APP负责基础的人员信息收集和身份校验，完成后可以在人事端的天眼WEB管理后台查看采集的信息和校验结果。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/001.jpg" alt="天眼系统"></p><p>图1  天眼系统</p><ul><li>天眼APP</li></ul><p>在入职办公室内设置了专用于人事信息登记的移动终端，负责人员入职登记工作的人事需要在开启天眼系统时使用中通宝盒进行身份验证，通过后即可开启天眼系统进行入职人员身份登记。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/002.jpg" alt="天眼系统定制移动终端"></p><p>图2  天眼系统定制移动终端</p><p>入职人员通过天眼系统APP仅需三步即可完成入职登记和校验工作。</p><ul><li>第一步：输入基础的手机号、学历等信息</li><li>第二步：通过设备上的NFC模块读取身份证信息</li><li>第三步：进行人脸校验即可</li></ul><p>但其实在简单的操作背后进行了多次的校验。</p><ol><li>普通的NFC设备是无法直接读取身份证明文信息的，天眼APP通过NFC识别读取到了身份证号的信息加密串后，通过公安网接口解密对应的明文信息，防止身份证造假行为</li><li>在进行人脸校验时，除了进行活体检测，还会截取当前的人脸照片，通过公安网的接口校验身份证信息与人脸是否匹配，防止身份证盗用问题</li><li>完成身份信息的读取后，通过物流从业人员黑名单、法院执行人黑名单等系统的接口对人员历史进行审查，避免履历造假、身份异常等问题</li></ol><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/003.jpg" alt="天眼系统APP"></p><p>图3 天眼系统APP</p><ul><li>天眼WEB管理后台</li></ul><p>在完成人员入职登记后，人事即可在天眼WEB管理后台查看人员信息收集情况以及安全校验情况，在确认无误后即可直接登记入职并自动推送到人事系统，避免重复的录入工作和背景审查工作。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/004.jpg" alt="天眼系统WEB"></p><p>图4 天眼系统WEB</p><h3 id="人员在职阶段"><a href="#人员在职阶段" class="headerlink" title="人员在职阶段"></a>人员在职阶段</h3><p>人员在入职之后需要做的安全管理相比于入职时会更多更复杂，中通安全对人员安全的管理的理念是持续发展和自动化控制。很多员工对安全的了解水平参差不齐，为了可以避免未来的潜在问题，需要潜移默化的不断引导员工学习安全知识，通过自我管理以规范员工的安全行为。</p><ul><li>人员的持续教育：中通安全培训体系</li></ul><p>为了更好的引导员工学习安全知识，中通安全建立了中通安全培训体系。对高层管理人员、IT技术人员、办公人员、普通业务员等设置了不同的培训方式。通过差异化的培训，可以更好的让不同岗位的人学习到与其岗位相关的安全知识。</p><p>针对高层管理人员，通过安全风险的输出传达正确的安全理念，以便帮助高层更好的制定安全战略规划。</p><p>针对IT技术人员，每季度会组织一次安全技术培训，给所有本季度内入职未进行安全培训的技术人员培训安全开发等基础安全知识。为了让所有的技术人员可以更好的掌握基础安全知识，在完成培训后中通安全还会进行安全技术培训考试帮助技术人员巩固知识，考试结束后中通安全公布考试成绩，而考试未通过的人员需重修课程。</p><p>对普通的办公人员，中通培训部每月会组织一次新员工培训，中通安全在培训中设置了安全意识培训，对新员工进行信息安全介绍、讲解信息安全相关的法律法规、办公安全相关的要求等以提高员工的安全意识水平。</p><p>对于分布于全国的普通业务员们，中通安全会定期的通过漫画、通知等贴近一线业务员的方式推送信息安全知识。为了提高一线业务员的参与度，在信息安全活动中设置有奖竞答环节。只有不断地引导员工进行安全知识学习，才能营造良好的安全意识，将安全管理落实到员工的自我管理。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/005.jpg" alt="中通安全培训体系"></p><p>图5 中通安全培训体系</p><ul><li>人员的安全意识：中通钓鱼测试</li></ul><p>人员的安全意识很难通过量化的数字进行显现，但是通过具体的行为很容易判断出一个人的安全意识是否及格。中通快递因为企业人员较多，所面临的信息安全相关的威胁也较多。其中最多的就是钓鱼邮件问题，为了提高企业人员应对钓鱼邮件的安全意识，除了培训和宣传外，中通安全在开源的钓鱼框架gophish上做了二次开发，不定期的针对不同的部门和人员进行不同主题的钓鱼测试，并要求所有的中招人员重新参加中通安全组织的专项安全意识培训和考试。通过钓鱼测试极大的提高了企业员工应对钓鱼邮件的安全意识。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/006.jpg" alt="gophish钓鱼系统"></p><p>图6 gophish钓鱼系统</p><p>人员的安全管理不仅仅包含人员的行为和意识，还包括对人员的帐号和权限的管理。中通作为一家集团性的企业，有着庞大的员工队伍和系统规模，为了保障人员的帐号和权限安全，中通安全开发了中通统一认证系统和统一权限安全管控系统。</p><ul><li>人员的帐号安全：中通统一认证系统</li></ul><p>人员在完成入职后即可获得内部员工的身份，作为内部员工访问内部系统的凭证，还需申请内部系统帐号。中通安全以OAuth2授权框架为主, 同时支持LDAP和JWT等多种身份验证方式，开发了认证与权限管理相结合的中通统一认证系统（SSO）系统，支持了内部300+系统的统一接入。为了保障人员和系统身份的绑定安全，中通已经废除了常规的固定密码，中通安全开发了中通宝盒APP，提供了动态口令、二维码扫描、推送验证等多种身份认证方式以替代传统的固定密码，保障访问系统的安全性。关于中通统一认证系统的具体详情可以参考中通安全应急响应中心的文章中通统一认证（SSO）系统安全实践。</p><ul><li>人员的权限安全：统一权限安全管控系统</li></ul><p>SSO负责验证人员是否可以登录系统，而登录了系统后可做什么则由统一权限安全管控系统负责。中通安全开发统一权限安全管控系统将所有的应用权限进行集中管理，通过灵活的权限管理可以快速的判断人员的权限情况，对人员的权限进行最小化管理。另外通过与风控等系统的联动，可以判断出人员的操作是否存在风险并及时进行告警和通知。关于统一权限安全管控系统的具体详情可以参考中通安全应急响应中心的文章中通统一权限安全管控系统实践。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/007.jpg" alt="中通宝盒和中通统一认证（SSO）系统"></p><p>图7 中通宝盒和中通统一认证（SSO）系统</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/008.jpg" alt="中通统一权限安全管控系统"></p><p>图8 中通统一权限安全管控系统</p><h3 id="人员离职阶段"><a href="#人员离职阶段" class="headerlink" title="人员离职阶段"></a>人员离职阶段</h3><p>生命周期有开始自然也就会有结束，当人员发起离职申请的时候便意味在企业的生命周期即将终止。不管因为哪种原因选择离开中通，我们都祝福每一个曾经的中通人有一个更好的未来。据调查，将近一半的人在离职后会测试曾经的权限是否被收回，所以对离职人员的权限收回就显得尤为的重要。</p><ul><li>人员的安全离职：自动审计系统</li></ul><p>自动审计系统为了满足公司内审和外审的工作，会从各个核心系统中读取各类操作日志，自动进行日志分析和确认。而在人员发起离职流程后，自动审计系统会自动分析员工的历史行为，若存在异常行为会推送相关的领导进行确认，只有当所有的审计异常信息被确认，才能通过离职申请。在离职人员完成最后的离职流程后，自动审计系统除了会自动停用离职人员的帐号外，还会定期检查离职人员的帐号状况，避免未经授权的帐号启用等异常情况。</p><p><img src="/images/%E4%B8%AD%E9%80%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E4%B9%8B%E4%BA%BA%E5%91%98%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/009.jpg" alt="帐号异常信息审计"></p><p>图 9  帐号异常信息审计</p><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>人员的安全管理毫无疑问会是信息安全工作非常重要的一环，围绕着企业人员生命周期还有着很多的工作可以做。未来中通还会继续完善人员的安全管理，例如建立高危人员的快速识别和告警机制等等。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网黑产：那些职业羊毛党到底如何月赚几十万？</title>
      <link href="/2020/06/02/post/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7%EF%BC%9A%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87%EF%BC%9F/"/>
      <url>/2020/06/02/post/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7%EF%BC%9A%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/TrIqZ7FPoCRXyicZnEg6Ow">互联网黑产：那些职业羊毛党到底如何月赚几十万？</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>世界上有没有一种职业</p><p>可以用最少成本赚最多的钱？</p><p>可以用最少时间获得最多的回报？</p><p>可以没有技能赚得却比有颜有才的人多？</p><p>甚至可以在四五线城市赚一二线城市的钱？</p></blockquote><p>看这篇文章之前，相信你和我之前的答案一样，掷地有声两个字：“没有”，因为不劳而获躺赚都是骗人的。但看完文章，相信你也会和我一样感慨：<strong>“原来还真有”</strong>。</p><p>今天，我们就给大家介绍一群 <strong>生存在互联网灰色地带的职业羊毛党</strong>，他们有组织有纪律有完整产业上下游的去利用一些大型互联网公司的运营规则甚至漏洞，套取各种补贴和奖金，少的月收入一两万，多的月赚几十万。</p><p>这些人一般活跃在什么平台？有哪些曾经或现在很常见的薅羊毛手段？给你介绍五种。</p><h2 id="1、套取新用户补贴，年收入百万"><a href="#1、套取新用户补贴，年收入百万" class="headerlink" title="1、套取新用户补贴，年收入百万"></a>1、套取新用户补贴，年收入百万</h2><p>要说这群职业羊毛党从什么时候就开始有了，应该就是从大型互联网公司有新用户补贴那天开始。</p><p>所以我们介绍的第一种方法就是 <strong>套取新用户补贴，这也是一种行之有效的手段</strong>。</p><p>一般情况下，一款App新用户注册都有补贴，多数是使用门槛很低的优惠券，比如买10块钱的东西就能减9块。如果用户每次买东西都想要优惠，那么每次用新手机号注册就行。 </p><p>一般人因为只有一个手机号，所以都只会注册一次享受一次优惠。但是，有需求，自然就有供给。一条养卡、注册账号、代收短信验证码、薅羊毛的产业链就这样形成了。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/001.jpg" alt="黑产产业链"></p><p>图片来源：新京报</p><p><strong>产业链的上游是卡商</strong>，他们用猫池养着大量的手机卡，猫池是一种可同时支持多张手机卡的设备，根据机型不同，插口从8到2048不等。通过猫池，手机卡可以直接拨号和接收短信，而上游卡商就靠售卖卡号和验证码赚钱。</p><p><strong>中游是卡商平台，又称为验证码平台，这个平台上活跃着两类人，上游卡商和下游羊毛党</strong>。卡商将手机卡号码和验证码放到平台售卖，羊毛党可以在平台购买，平台提供软件支持、业务结算，赚取分成。根据验证码属性不同，平台与卡商分成比例也不同。</p><p>据之前媒体报道，语音类验证码五五开，短信类验证码三七开，卡商占七成。目前较大的卡商平台有星辰、Thewolf、爱乐赞、玉米、爱码等。平台手机卡很多，有的平台能提供上万个网站的接收验证码服务，几百万张手机号。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/002.jpg" alt="卡商"></p><p>图片来源网络</p><p>除了手机号，微信号也成了销售对象。根据《腾讯网络安全与犯罪研究基地》公众号发布的黑产市场微信号价格的变化趋势数据，2018年6月，微信新号的价格8元一个，老号价格70元一个。</p><p><strong>下游数量庞大的羊毛党一般活跃在贴吧、社区、QQ群等社交媒体</strong>，发布各种薅羊毛信息，还形成一套师傅带徒弟的体系，收费从88元到888元不等。据《第一财经》报道，目前羊毛党的直接从业者超过40万人。</p><p><strong>有些时候，羊毛党厉害到能搞垮一个产品。</strong></p><p>2015年11月，快操盘推出“充1分钱返500元”的活动，无限制提款，一夜被薅近亿。</p><p>2018年12月，星巴克上线“星巴克App注册新人礼”活动。羊毛党迅速注册大量虚假账号，领取活动优惠券，导致星巴克紧急下线活动。网络安全厂商“威胁猎人”估计，短短一天半时间，按普通中杯售价估算，星巴克损失可能达1000万。</p><p>为了防止被薅羊毛，互联网公司也使出一些手段，比如短信验证码变成语音验证码，提高技术门槛；用户手机号与手机识别码绑定，一机一码才认定为新用户。但是这些手段并不能杜绝羊毛党，只能让薅羊毛的成本越来越高。</p><p>不过，也存在一些公司为了冲用户量，找到羊毛党。</p><p>普通用户是用户，羊毛党也是用户，找羊毛党，营销成本低，难度也低。尤其是互联网金融行业，常规获客成本极高，找羊毛党则低得多。一本财经曾报道，互金公司百万的预算，如果全用羊毛党，只需30-50万，剩下的几十万的利润分成。一名互金行业运营人员，靠着频繁跳槽，哪家公司预算高就去哪家，5年跳了7家公司，年收入早就过了百万。</p><p>这么容易赚的钱，偶尔薅翻车的情况也有。</p><p>2018年，斐讯在京东推出0元购。路由器标价399元，返现399元，钱返到合作的互金平台联壁金融App中，一个月后可以提现。羊毛党一拥而上，想通过返现白拿一个路由器，结果遇到P2P行业爆雷，联壁公司涉嫌违法犯罪被公安部门侦察，399也拿不回来了。</p><h2 id="2、刷单套奖励，月入十万"><a href="#2、刷单套奖励，月入十万" class="headerlink" title="2、刷单套奖励，月入十万"></a>2、刷单套奖励，月入十万</h2><p><strong>有奖励的地方，就有刷单。</strong></p><p><strong>O2O打车软件大战时，刷单非常疯狂，特别是Uber</strong>。2015年时，Uber在中国每天有上百万的订单，不过，有媒体爆出30%-40%是刷单。当然也是Uber初入中国，完全低估了国人的小智慧。</p><p>Uber的补贴政策是每天跑满10单奖励120元，15单170元，20单220元。新入司机每天完成20单甚至还有500元奖励。</p><p>为了快速完成补贴单量，有的司机接到单，未到目的地提前结束，让乘客再下一单，乘客可以使用两次优惠券，司机跑一趟也有两单。</p><p>Uber车主还建了刷单群，在群里有专门的黑话，辅助刷单的叫【护士】，车主称为【病人】，刷单就是【打针】。车主根据自己的位置让【护士】下一单，然后开着空车跑一趟，完成后再把乘车费和佣金转给【护士】。车主则获得平台的奖励。这种刷单手段还需要空跑一趟，要油费，最为初级。</p><p><strong>高级一点的做法是带着一堆手机坐地铁，坐公交，坐火车</strong>，油费都省了，不仅车主可以刷，没有车的人PS一张驾驶证和行驶证，在大街上随便拍一辆车，照样可以注册成为车主。</p><p><strong>更高级的做法是利用模拟软件+虚拟定位，足不出户就能刷单</strong>。只需要买一个可以修改串号的安卓手机，同时登录几个乘客和司机账号，通过电脑虚拟操作，模拟跑一圈就完成一单。可变成本几乎为零。通过刷单，月净收入可以达到1.5-2.5万。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/004.jpg" alt="刷单"></p><p><strong>也有职业刷单人，专门帮司机刷单，一个月最高月入10万。</strong></p><p>如今去打车，遇到一些司机还能给你讲一讲当年的盛况，言语间流露出自豪。 后来，只剩下一家公司，打车刷单也就消亡了。</p><p>但是刷单仍然活跃网上，哪里有补贴，哪里就有刷单。外卖，拼团，生鲜电商，互联网金融，统统不能幸免。 双12线下活动时，武汉出现一名刷单哥，带着百部手机代刷优惠，一天赚上千元。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/005.jpg" alt="手动刷单"></p><p><strong>手动刷单，这种薅法，不侵权不作弊，平台拿你也没办法，缺点就是成本有点高。</strong></p><h2 id="3、P2P借贷“黑吃黑”月入十万是基础"><a href="#3、P2P借贷“黑吃黑”月入十万是基础" class="headerlink" title="3、P2P借贷“黑吃黑”月入十万是基础"></a>3、P2P借贷“黑吃黑”月入十万是基础</h2><p>你看中人家收益，人家看中你的本金。</p><p>P2P爆雷让很多参与者倾家荡产，观望者望而怯之，但在一些人看来，爆雷算什么，714高炮算什么，从来都不害怕和紧张，他们看到的全是捞钱的机会。他们就是撸贷大军，P2P网贷的另一端用户。</p><p>平台有1000%的年化利率，照样贷，因为他们根本就没有打算还钱。</p><p>撸贷者只需要买一张电话卡，养卡半年，一次性下载几百个网贷App，挨个贷款，贷完后立马剪卡，从此人间蒸发。电话卡里的所有通话记录都是伪造的，亲朋好友都不会被催收，身份证地址也找不到人。</p><p>撸贷大军在网上至少有几十万人，有撸得多的，一次性撸出50万。他们从不认为自己不道德，反而还站在道德高地：<strong>我们不是老赖，我们只是高利贷的终结者</strong>。</p><p>2017年底，现金贷监管后，一部分人还清贷款，上岸重新做人。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/007.jpg" alt="P2P借贷"></p><p>这样做风险非常大，你必须和现在的朋友圈断绝关系，不能再用自己的身份证办手机卡，还可能成为老赖。</p><p><strong>于是有P2P从业人员不自己撸贷，而是下海当起了中介教别人撸贷</strong>。他们熟悉平台的规则和风控体系，知道如何才能撸更多的钱，甚至还会买通一些现金贷的风控主管。</p><p>中介从内蒙古、甘肃等西部地区寻找客户，这些地方信息相对闭塞，还不知道现金贷是什么，当地人也没有违约等不良信息。中介教他们用现金贷贷款，贷到钱后对半分，几天之内就能下款6万。贷款的人拿3万，中介拿3万，当地人收入一个月才两三千，这比他们一年的收入还多。</p><p>有的中介提成更高，甚至高达70%-80%，也就是贷1000块，中介拿七八百，贷款人只有两三百。干得好的中介，一个月最高有50多万收入，少的时候也有10多万。</p><p><strong>中介一般还搞培训，教别人如何撸贷，一个月下来，培训费就能赚几十万。</strong></p><p>还有些客户资质太差，贷不款，中介就会将这些信息收集起来，与平台合作，注册账号，但不下款，每个账号也有8-10元的返佣，一个月下来也是两三万收入。</p><p><strong>总之，无论你有钱没钱，贷不贷款，每一位客户的价值，都要榨干。</strong></p><p>在撸贷大军的行动下，平台被撸垮也是常见的。有平台创始人透露，自家产品被撸贷大军看中，当自己正高兴用户增长时，却发现一个还款都没有，一天损失高达70万。</p><p>这些撸贷者从来不怕催收，网贷平台通常用“呼死你”来催收，而他们开发了防爆软件，只要输入手机号、身份证号和贷款平台名称，平台的催收座机就会被拦截。撸贷者还会主动进攻，反向轰炸催收电话。在很多反催收的群里，只要提供被骚扰的截图，一些老哥会免费帮网友轰炸催收。</p><p><strong>PS:薅羊毛有风险，搞不好被罚款，还可能坐牢。</strong></p><h2 id="4、做号集团：洗一篇稿赚几万"><a href="#4、做号集团：洗一篇稿赚几万" class="headerlink" title="4、做号集团：洗一篇稿赚几万"></a>4、做号集团：洗一篇稿赚几万</h2><p>今年3月份，知名自媒体三表龙门阵写了篇文章，自述企鹅号被盗经历，一名叫露露的河南女子，用他的号平均每天发五篇娱乐八卦文章，六十天收益高达7.5万，最高一篇文章分了1.2万。而自己之前日常更新文章却根本没赚到钱。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/008.jpg" alt="洗稿"></p><p>相信，全天下自媒体人都会好奇，内容平台一出手补贴几个亿，但 <strong>自己辛苦更新原创，一共也就赚了几十块钱，补贴都到哪里去了？</strong></p><p>在露露的背后，就是做号集团，补贴都被他们拿去了。</p><p><strong>补贴一般是根据阅读量来算，阅读量越高，收益越高</strong>。做号集团对各平台内容特点把握得非常到位，能做到量产高阅读量爆文。</p><p>他们雇佣兼职写手来洗稿，以学生、宝妈和上班族为主，群里领取任务，价格通常为千字10元。也有全职写手，公司开在二三线城市，工资一个月三四千元，加上提成，优秀者月入过万不是问题。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/009.jpg" alt="洗稿推广"></p><p>通常，洗稿内容集中在娱乐明星八卦故事，利用明星效应，调动起读者窥私欲，再靠着劲爆的标题和捕风捉影的内容，能带来大量阅读。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/010.jpg" alt="洗稿文章"></p><p>图片文章可能出自大妈之手</p><p><strong>一篇文章阅读量过百万，广告分成+补贴，收益多的上万元</strong>。据新榜报道，30人的做号集团，一个月平台分成700多万。还有UC平台上有留言，一日收益达900元；两年拿下一辆路虎；期待下月收入破4万。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/011.jpg" alt="评论爆料"></p><h2 id="5、倒卖付费课程：零边际成本"><a href="#5、倒卖付费课程：零边际成本" class="headerlink" title="5、倒卖付费课程：零边际成本"></a>5、倒卖付费课程：零边际成本</h2><p><strong>凡是能倒卖的，统统不能放过。</strong></p><p>知识付费课程火起来时，一些人通过众筹的方式实现低价购买课程，一门课程199，100人众筹每人也就2块钱。</p><p>既然能众筹，何不自己当二道贩子？只需要把课程复制粘贴，放到某网盘里，转手就能在网上卖几块到几十块，几乎不需要成本。通过网盘分享，后期更新也能做到同步，不用再一个个地重新发给顾客。</p><p>想学习的人也很喜欢低价课，199的课程，9块9就能买到。</p><p>二道贩子再通过淘宝，百度贴吧、微信群、个人号等渠道推广，哪有不赚钱的。有些人做倒卖，3个月就赚到20万。</p><p><img src="/images/%E4%BA%92%E8%81%94%E7%BD%91%E9%BB%91%E4%BA%A7_%E9%82%A3%E4%BA%9B%E8%81%8C%E4%B8%9A%E7%BE%8A%E6%AF%9B%E5%85%9A%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E6%9C%88%E8%B5%9A%E5%87%A0%E5%8D%81%E4%B8%87/012.png" alt="倒卖知识付费"></p><p>从二道贩子买过课程的人，同样做起三道贩子、四道贩子…… <strong>永远不知道你买到的课程是几手，但这无所谓，质量都一样</strong>。</p><p><strong>行业竞争大了，有的二道贩子开始注重服务。他们做的服务甚至比平台原版还好。</strong> 当平台还在单门课程销售时间，他们已经开始做包年服务，一年99元，可以看几乎所有主流平台的内容，包括得到、喜马拉雅、混沌大学、千聊、荔枝微课、网易云课堂等等。论品类，他们已经超越了任何一家平台；论价格，他们也有优势，能卖得不好吗？</p><p><strong>了知识付费课程可以转手卖，盗版游戏、电子书等一切付费稀缺资源都成为贩卖对象，单价虽然低，做起来靠量也是一笔不小的收入。</strong></p><blockquote><p>以上介绍的5种互联网黑产薅羊毛手段已经有些过时了，现在互联网平台对付手段也变高明了，薅羊毛的操作空间也越来越少，于是羊毛党开始把对象放到传统企业，这些企业上网后反作弊的经验普遍不足。一个风口过去了，他们又去追逐下一个风口。</p></blockquote><p><em><strong>最后，蛋解创业编辑部还是提醒每一位：空手套白狼，大家都爱。但是，互联网黑产薅羊毛有风险，有些罚款有些甚至要入狱，我们仍然坚信“一分耕耘一分收获”。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互联网 </tag>
            
            <tag> 黑产 </tag>
            
            <tag> 羊毛党 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何避免「三分钟热度」，找到人生的「热爱」</title>
      <link href="/2020/06/02/post/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E3%80%8C%E4%B8%89%E5%88%86%E9%92%9F%E7%83%AD%E5%BA%A6%E3%80%8D%EF%BC%8C%E6%89%BE%E5%88%B0%E4%BA%BA%E7%94%9F%E7%9A%84%E3%80%8C%E7%83%AD%E7%88%B1%E3%80%8D/"/>
      <url>/2020/06/02/post/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E3%80%8C%E4%B8%89%E5%88%86%E9%92%9F%E7%83%AD%E5%BA%A6%E3%80%8D%EF%BC%8C%E6%89%BE%E5%88%B0%E4%BA%BA%E7%94%9F%E7%9A%84%E3%80%8C%E7%83%AD%E7%88%B1%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzA4NzQzNDYyMA==&mid=2650072486&idx=1&sn=110214691b75e63c14058e12c0e34563&chksm=883931b5bf4eb8a32870797113cce90f97932aba2787c1bd8666391e5a5eb37f911b6422ebe9&xtrack=1&scene=0&subscene=91&sessionid=1560579610&clicktime=1560579663&ascene=7&devicetype=android-26&version=27000481&nettype=WIFI&abtest_cookie=BQABAAoACwASABMAFQAGACOXHgBWmR4Ay5keANyZHgD0mR4AC5oeAAAA&lang=zh_CN&pass_ticket=j//blv1oICJ6iExXRy4pjbzcPqaXuSeC/WGyHAa4JSryf/I0wi2XWVHRv41SJXnF&wx_header=1">如何避免「三分钟热度」，找到人生的「热爱」</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="1-很多人说，自己做事总“三分钟热度”。"><a href="#1-很多人说，自己做事总“三分钟热度”。" class="headerlink" title="1. 很多人说，自己做事总“三分钟热度”。"></a>1. 很多人说，自己做事总“三分钟热度”。</h2><blockquote><p>从心理学角度看，什么是“三分钟热度”？</p></blockquote><p>下面这张图是心理学家米哈里·契克森米哈赖的心流通道模型。</p><p>它正好描绘了一个人从事一项活动时，随着技巧的提升和挑战的增长，他对这项活动的体验发生了什么变化。</p><p><img src="/images/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%B8%89%E5%88%86%E9%92%9F%E7%83%AD%E5%BA%A6_%E6%89%BE%E5%88%B0%E4%BA%BA%E7%94%9F%E7%9A%84%E7%83%AD%E7%88%B1/001.jpg" alt="心流通道模型"></p><p>假设这张图所描绘的是小明打网球的情景。</p><p>刚开始时，小明不懂任何技巧，他唯一的挑战是把球打过去，这是A1。这种挑战没什么了不起，但小明还是打得很愉快，因为难度正适合他粗浅的技巧，但愉快的感觉不会持续太久。</p><p><strong>这个阶段，小明所感受到的愉快，就是刚接触一项新事物时的“前三分钟热度”。</strong></p><blockquote><p>接下来又发生了什么，让小明的“热度”消失了呢？</p></blockquote><p>原来，<strong>经过一段时间练习，他的技巧进步了，原先只是把球打过去的挑战，对他来说太小儿科了，于是他感到厌倦</strong>，这时，小明所处的阶段就是A2。</p><p>又或者，<strong>他碰到了比他熟练的对手，使他发现要接住对方的球是个挑战，这时，他对自己拙劣的技巧产生了焦虑</strong>，这时，小明所处的阶段就是A3。</p><p>前三分钟热度，是刚接触新事物时的浅层乐趣，这种乐趣，会随着你在这项活动中的不断深入而消失。</p><p>随之而来的，有可能是厌倦，有可能是焦虑，<strong>这两种感受，就是通常所说的“热度过了，不再感兴趣”，有些人会因为这种消极感受而放弃继续投入</strong>。</p><blockquote><p>那么，那些继续坚持下来的人，经历了什么呢？</p></blockquote><p>从图中我们可以看出，如果他在厌倦（A2）的位置，要重拾乐趣只有一个选择：增强挑战，确立一个跟技巧难度相当的新目标，例如击败一个技巧比他高明的对手；如果他感到的是焦虑（A3），重拾乐趣就需要加强技巧。</p><blockquote><p>所以，对一项活动有兴趣，甚至热爱，是一种什么样的心理机制呢？</p></blockquote><ul><li>要么，就是永远处于A1阶段，只要你不感到厌倦，就可以在很多活动中体会到A1的乐趣，这种状态的外在表现是，兴趣广泛，浅尝辄止，但自得其乐；</li><li>要么，就是经历喜悦、厌倦、焦虑等一系列复杂感受之后，发现了这项活动的深层乐趣，而获得的心流体验，到达这个阶段的兴趣，可以称得上是热爱了。</li></ul><p>曾经有一个小朋友，两岁会哼歌，三岁唱得有模有样，去妈妈同事家，摸了钢琴都不想走。于是他那做美术老师的妈妈，拿出家里所有积蓄给他买了一架钢琴。</p><p>他这么喜欢，学钢琴的时候怎么样呢？不想练琴，被他妈妈打得想放弃。</p><p><strong>你看，这就是兴趣的真相，一开始不管多喜欢，当你需要深入学习和研究时，挫败感和厌倦感从来都不会少。</strong></p><p>那这个小男孩后来怎么样了呢？当然是被他妈妈逼着继续学琴。但随着他学习的深入，他越来越能体会音乐的乐趣，音乐，成了他自觉的追求。</p><p>他14岁时，父母离异，但是躲在音乐世界的他并没有受到巨大的冲击。他回忆说：“12岁到16岁是我最开心的几年。”</p><p>这个人是周杰伦。</p><p>不少人对热爱有种误解，认为一旦找到了那件事，我就会满心欢喜，不知厌倦；相反，如果没有持续这种状态，那这件事就不是我真正热爱的事。</p><p>事实是，<strong>热爱，不是这个东西给你带来了多少次愉悦，而是你为它投入了多少次自我约束</strong>。</p><h2 id="2-有人说，我的爱好是电影和音乐。"><a href="#2-有人说，我的爱好是电影和音乐。" class="headerlink" title="2. 有人说，我的爱好是电影和音乐。"></a>2. 有人说，我的爱好是电影和音乐。</h2><p>然而，如果你没事就刷个片子，带着耳机，这不是爱好，这是消遣。</p><p>职业生涯教育专家古典老师将“兴趣”分为3个层次：直观性趣（感官性趣）、自觉兴趣与潜在兴趣（志趣）。</p><ul><li>觉得火锅好吃、电影好看、游戏有趣，都是感官兴趣。</li><li>觉得火锅好吃，开始研究火锅的制作工艺、食材调配、火锅文化，从而成为一个业余鉴赏家或大厨；觉得电影好看，开始研究电影的历史、剧作理论、剪辑节奏、拍摄技巧，并写出专业影评，拍出精彩短片；这是自觉兴趣。</li><li>而在自觉兴趣的基础上，发现了自己的使命，并以一项活动为终身追求的事业，这就是志趣。</li></ul><p>浅层的兴趣，不能长久，也不能带来浑然忘我的深刻乐趣。</p><p><img src="/images/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%B8%89%E5%88%86%E9%92%9F%E7%83%AD%E5%BA%A6_%E6%89%BE%E5%88%B0%E4%BA%BA%E7%94%9F%E7%9A%84%E7%83%AD%E7%88%B1/002.jpg" alt="兴趣的三个层次"></p><p>心理学家米哈里·契克森米哈赖也介绍了乐趣的3个层次，以音乐为例：</p><ul><li>聆听音乐最初是一种感官体验，我们对什么声音会产生愉快的反应，完全受神经系统中的基因控制。</li><li>下一层次是“联想式”聆听。在这个阶段，听者必须培养根据声音模式，拟想感情与意象的技巧。</li><li>“分析式”聆听，是听音乐最复杂的阶段。此时，注意力已经脱离了感官与情节叙述，转而投注在音乐的结构元素上。此时，听者会以批判、对比、评估的方式去聆听。一个人一旦培养了“分析式”的聆听技巧，享受音乐的机会便呈几何级数增加。</li></ul><p><strong>兴趣的层级理论让我明白了一个道理：热爱永远建立在精通基础上。</strong></p><h2 id="3-世上还存在一种“无趣之人”，他做什么都讲究「投入产出比」，只有知晓了一件事有什么好处后才会去做。"><a href="#3-世上还存在一种“无趣之人”，他做什么都讲究「投入产出比」，只有知晓了一件事有什么好处后才会去做。" class="headerlink" title="3. 世上还存在一种“无趣之人”，他做什么都讲究「投入产出比」，只有知晓了一件事有什么好处后才会去做。"></a>3. 世上还存在一种“无趣之人”，他做什么都讲究「投入产出比」，只有知晓了一件事有什么好处后才会去做。</h2><p>这是一种功利的兴趣观，它的背后，是深刻的不安全感与焦虑。功利的兴趣观危害无穷。</p><p>首先，会极大地扼杀我们挖掘兴趣的动力：</p><blockquote><p>当每一个行为都必须在系统里置换出有用的结果，兴趣这个老师就彻底被开除了，随之而来的好奇心、想象力、创造力更无从谈起。</p><p>——古典：《你的生命有什么可能》</p></blockquote><p>其次，功利的心态会造成自我中心。自我中心会导致我们做每一件事时，将注意力投注在自己身上，无法投注到活动本身，从而难以体验美妙的心流。</p><p>上文中，我多次提到“心流”。但恐怕你对“心流”的概念还是一知半解。这里先解释一下：</p><blockquote><p>心流，是人在专注于一项任务时，所达到的浑然忘我的状态。</p></blockquote><p>要达到心流状态，需要几个前提：</p><ul><li>任务有挑战性，同时，当事人也具备完成挑战的能力；</li><li>有明确的目标和即时反馈，让当事人能够判断自己是否有所改进；</li><li>当事人全神贯注，心无旁骛；<strong>心流中没有反省的空间，一旦当事人投注精力到自我反省、评估得失上，心流状态就会被打断</strong>。</li></ul><p>因此，心态越功利，心流体验越少；心流越少，乐趣便越少；乐趣越少，收获和成就感也就越少；而成就感越少，乐趣就变得更少。如此恶性循环，那人自然不会爱上这项活动。</p><p>《认知天性：让学习轻而易举的心理学规律》这本书讲了一个相似的道理：</p><blockquote><p>那些非常害怕在考试中犯错的学生，成绩可能真的会更糟糕，原因就是他们感到了焦虑。为什么会这样？</p><p>这可能是因为他们把很大一部分工作记忆容量都浪费在监测自己的表现上了（我做得好不好？我是不是犯错了？），而分配给测验中解答问题的记忆容量则较少。</p></blockquote><p>人的认知资源是有限的，当我们将其用于自我监测和评估事件的投入产出比时，便不能将它投注于我们所从事的活动中。</p><p>所以，<strong>功利心是兴趣的天敌</strong>。</p><h2 id="4-总结一下："><a href="#4-总结一下：" class="headerlink" title="4. 总结一下："></a>4. 总结一下：</h2><ul><li>经历三分钟热度后就放弃，是因为我们没能经受通向更高层次乐趣所必经的焦虑和厌倦。</li><li>热爱永远建立在精通基础上；世上根本不存在无需任何努力，就能体验到乐趣的兴趣和热爱。</li><li>功利心是兴趣的天敌。</li></ul><blockquote><p>因此，我们该如何寻找那件热爱的事情呢？</p></blockquote><p>首先，前三分钟热度消退后，再坚持一下，不要因为厌倦和焦虑就放弃。即使真的要放弃，也要弄清是什么原因。</p><p>放弃也是自我认知的过程，起码我们能知道，自己在某个领域真的没有天赋，即使坚持了很久，试了很多方法，也没有进步。</p><p>其次，尝试那些你直觉认为自己感兴趣的活动，并重复上述第一步。</p><p>第三，当你决定投入一项活动时，不要评判，不要反省，不要自我怀疑，将注意力投注在活动本身。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术人具备“结构化思维”意味着什么？</title>
      <link href="/2020/06/02/post/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E2%80%9C%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E2%80%9D%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2020/06/02/post/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E2%80%9C%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E2%80%9D%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/Veh8labc35JQTNyavTfBpQ">技术人具备“结构化思维”意味着什么？</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>阿里妹导读：在日常工作中，我们时常会碰到这样的情况，有的人讲事情逻辑非常混乱，罗列了很多事项，却把握不到重点，无法把一件事情说清楚。这种思维混乱是典型的缺少结构化思维的表现。结构化思维非常重要，不仅仅体现在表达上，也体现在在我们分析问题的过程中。具备结构化思维，才能将问题分析地更全面、更深刻。</p></blockquote><h2 id="什么是结构化思维？"><a href="#什么是结构化思维？" class="headerlink" title="什么是结构化思维？"></a>什么是结构化思维？</h2><p>那么到底是什么是结构化思维呢？简单来说，结构化思维的定义就是：逻辑+套路。</p><h3 id="表达要有逻辑"><a href="#表达要有逻辑" class="headerlink" title="表达要有逻辑"></a>表达要有逻辑</h3><p>所谓逻辑是指我们的结构之间必须是有逻辑关系的。例如，你说话的时候用“第一、第二、第三”这个逻辑顺序是合理的，但是，用“第一，第二，第四”就会显得很奇怪。当然，即使你用了”一、二、三”，也不一定就意味着你的内容有逻辑关系。想让内容有逻辑关系，我们要学会四种组织思想的逻辑关系：</p><p>1）<strong>演绎（因果）顺序</strong>：“大前提、小前提、结论”的演绎推理方式就是演绎顺序。比如，经典三段论：所有人都要死，苏格拉底是人，苏格拉底要死。</p><p>2）<strong>时间（步骤）顺序</strong>：“第一、第二、第三”，“首先、然后、再者”等，很多的时间顺序同时也是因果顺序。</p><p>3）<strong>空间（结构）顺序</strong>：“前端、后端、数据”，“波士顿、纽约、华盛顿”，化整为零（将整体分解为部分）等都是空间顺序。</p><p>4）<strong>程度（重要性）顺序</strong>：比如“最重要、次重要、不重要”等。</p><p>实际上，所有的逻辑关系都在这四种顺序之内。只要我们的思想和表达在这四种逻辑顺序之内，就是有逻辑的，否则就会显得没有逻辑性。</p><h3 id="做事要有套路"><a href="#做事要有套路" class="headerlink" title="做事要有套路"></a>做事要有套路</h3><p><strong>套路是指我们解决问题的方法论，这个也非常重要</strong>。比如，5W2H 分析法就是一个非常好的，可以帮助我们分析问题的一个“套路”。试想一下，面对任何一个问题，你都能从 Why、Who、When、Where、What、How 和 How much（如下图所示），七个方面去思考。是不是比不知道这个方法论的人，用点状的思考，5W2H 分析法就全面得多。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/001.jpg" alt="5W2H分析法"></p><p>例如，我们在对问题域进行分析和领域知识提炼的时候，就可以用上5W2H。5W2H模型给出了具有指导意义的约束，要求我们提炼的领域知识必须具备模型的六个要素。这就好比两位侃侃而谈的交谈者，因为有了确定的主题与话题边界，一场本来是漫无目的野鹤闲云似的闲聊就变成了一次深度交流的专题高端对话。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/002.jpg" alt="问题域分析"></p><p>逻辑是一种能力，而套路是方法论，是经验。逻辑是道的东西，而方法论是术的东西。二者都很重要，只有熟练的掌握二者我们才能更好的进行结构化思考。</p><h2 id="如何进行结构化思考？"><a href="#如何进行结构化思考？" class="headerlink" title="如何进行结构化思考？"></a>如何进行结构化思考？</h2><p>逻辑性和方法论是结构化思维的底层，那么如何进行结构化思考呢？这也是有方法论的，总的来说是有两个步骤，首先是“建立中心”，然后再进行“分解”。</p><h3 id="建立中心"><a href="#建立中心" class="headerlink" title="建立中心"></a>建立中心</h3><p><strong>建立中心也就是要定义清楚要解决的问题，要明确目标</strong>。是我们结构的顶层节点，也是一种以终为始的思考方式。也就是说，我们首先要搞清楚 why，然后再进行 how。</p><p>建立中心有两种方式：</p><ol><li><strong>自上而下</strong>：适用于问题比较明确的情况，我们只需要找到问题的核心要素即可，然后进行展开即可。</li><li><strong>自下而上</strong>：对于问题不够明确的情况，我们需要对多种杂乱的内容，进行分类、剪枝、归纳汇总成一个中心。</li></ol><p>建立中心通常不会是一次成型的，随着对问题理解的变化，对中心的抽象也会进行相应的调整。不同的抽象层次其面对的问题宽度是不一样的。具体要用哪个层次的抽象作为“中心”，要视具体情况而定。</p><p>比如面对“系统 bug 多”的问题，向上抽象是“提升代码质量”，向下抽象是“加强测试”，都可以作为中心，选择哪个为中心取决于你当前要解决的问题是什么。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/003.jpg" alt="建立中心示例"></p><h3 id="结构化分解"><a href="#结构化分解" class="headerlink" title="结构化分解"></a>结构化分解</h3><p>确定完中心之后，我们需要构建一个结构，使用结构化的思维对问题进行分解。分解的策略就是我们上文提到的四种逻辑顺序，即演绎顺序、时间顺序、空间顺序和程度顺序。</p><p>在做空间分解的时候，要注意满足 MECE（Mutually Exclusive Collectively Exhaustive，相互独立，完全穷尽）原则。</p><p>比如我们要对衣服进行分类，如果按照季节和风格进行分类，就会出现互相重叠，并且不能穷尽的情况，也就不满足 MECE。这种分类是逻辑混乱的。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/004.jpg" alt="混乱分解"></p><p>我们可以按季节分：春秋装，冬装，夏装。除了这3类之外，没有其他季节了，这个就是「不遗漏」。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/005.jpg" alt="不遗漏分解"></p><h2 id="结构化思维应用"><a href="#结构化思维应用" class="headerlink" title="结构化思维应用"></a>结构化思维应用</h2><h3 id="如何落地新团队？"><a href="#如何落地新团队？" class="headerlink" title="如何落地新团队？"></a>如何落地新团队？</h3><p>想象这样一个场景，你刚刚入职一家新公司，或者转岗到一个新团队，作为一个技术人，你将如何落地开展你的工作呢？</p><p>这里，我们就能用上结构化思维来帮我们理清思路，从而有条不紊的开展工作了。我们要知道对一个企业来说，核心要素无外乎就是业务、技术和人，也就是说这三个要素是我们要建立的中心。基于这个中心，我们可以进行进一步拆解，形成子结构。然后对子结构再进行分析找到应对策略。这样一步步递进，我们就已经在用结构化思维解决如何落地新团队的问题了。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/006.jpg" alt="团队三要素"></p><h4 id="1-熟悉业务"><a href="#1-熟悉业务" class="headerlink" title="1. 熟悉业务"></a>1. 熟悉业务</h4><p>1）<strong>了解产品</strong>：任何一个团队都有自己要负责的产品，申请一个测试账号去用一下产品，是熟悉产品比较好的方式。</p><p>2）<strong>了解流程</strong>：任何业务都有自己的业务流程，而业务流里面最核心的是信息流。我们可以通过人员采访，了解关键节点的信息输入和信息输出；可以画一些泳道活动图，理清楚系统的主要角色，以及他们之间的交互关系。</p><p>3）<strong>客户走访</strong>：通过走访客户，我们可以更加获得业务的第一手资料，更加贴近业务和客户诉求。</p><h4 id="2-熟悉技术"><a href="#2-熟悉技术" class="headerlink" title="2. 熟悉技术"></a>2. 熟悉技术</h4><p>1）<strong>了解系统架构</strong>：可以让团队的技术人员介绍下他们当初系统设计和架构的思路。</p><p>2）<strong>了解领域模型</strong>：查看关键的核心表结构和系统 API，这样可以快速了解系统的领域模型。</p><p>3）<strong>了解代码结构</strong>：下载系统工程，熟悉整个工程结构和模块职责。以一个最重要的流程为入手点，阅读代码，看清楚核心的执行逻辑。做一个小需求，掌握相关的流程和权限。</p><h4 id="3-熟悉人"><a href="#3-熟悉人" class="headerlink" title="3. 熟悉人"></a>3. 熟悉人</h4><p>1）<strong>了解组织结构</strong>：查看公司的组织树，知道公司大概是如何运作的，以及哪些是KP（Key Person，关键人）。比如，一个典型的电商公司会包括产品部、运营部、销售部、技术部、人力资源部、财务部、法务部等。</p><p>2）<strong>了解人员角色</strong>：了解公司都有哪些岗位，以及各岗位的职责范围。</p><p>3）<strong>拜山头</strong>：找到和自己工作息息相关的岗位人员，比如产品和运营。积极和他们沟通，向他们请教业务问题，多多交流。这样一方面可以建立更好的人际关系，另一方面也可以更快地熟悉业务。</p><h3 id="打造极客文化"><a href="#打造极客文化" class="headerlink" title="打造极客文化"></a>打造极客文化</h3><p>我最近刚刚转岗到新部门，新部门的老板抛给我一个命题：如何帮助技术团队打造极客文化？</p><p>这个问题的中心很明确，接下来，看看我是如何使用结构化思维来解这个问题的。首先我们从空间顺序进行分解，也就是打造极客文化，我们可以去做哪些事情。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/007.jpg" alt="空间顺序分解"></p><p>确定完要做的事情，我们还可以按照时间顺序对如何落地这些事情进行分解。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/008.jpg" alt="时间顺序分解"></p><p>这样把按照这两个维度进行结构化拆解的方案给到老板，老板就会很清晰地知道你的规划和落地策略了。</p><h3 id="如何做晋升述职"><a href="#如何做晋升述职" class="headerlink" title="如何做晋升述职"></a>如何做晋升述职</h3><p>作者在阿里巴巴已经做了好几年的晋升评委，发现很多同学都缺乏结构化思维，冗长的 PPT 里，却不能把价值说清楚，不能把推导过程说清楚。实际上，我们需要有一些方法论来指导我们进行关键述职。</p><p>接下来，我主要说一下述职中存在的两个典型问题：“罗列事情”和“价值的背后”</p><h4 id="1-罗列事情"><a href="#1-罗列事情" class="headerlink" title="1.罗列事情"></a>1.罗列事情</h4><p>对自己做过的事情进行简单罗列，也许你的确做了不少事情。但是不能体现你对问题思考的深度和做这个事情带来的价值。这样的述职很难打动评委，更结构化的表达应该是：<strong>“提出问题，定义问题，分析问题，解决问题，最后是展望未来”</strong>。</p><p>这是一个经典的表述问题的结构，也是麦肯锡推荐的问题解决的框架。</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%85%B7%E5%A4%87%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/009.jpg" alt="麦肯锡解决问题框架"></p><p>类似的框架还有 zoom in&#x2F;zoom out。 我们说事情时，应该像电影镜头一样，先从远拉近，再由近拉远。zoom in 是先从宏观背景开始，首先让大家知道你的事情发生的背景，为什么这事重要？然后讲到具体细节，怎么做成的？解决了什么问题？背后的思考是什么？最后 Zoom out，再从细节调回到整体，结果是什么，带来的客户价值是什么，你对未来的思考是什么。</p><h4 id="2-价值的背后"><a href="#2-价值的背后" class="headerlink" title="2.价值的背后"></a>2.价值的背后</h4><p>把价值说清楚的确很重要，正所谓：路走对了，就不怕远。如果你连价值都不明确，后面做的再多也是白搭。但是，仅仅阐述价值也是不够的，会让人觉得你有邀功之嫌。</p><p>比如你说：“我主导研发的风控系统把公司的坏账率从5%降低到2%”。这样的表述是不够的，你还需要把价值背后的过程和思考说清楚。对于这个结果，评委可能会问：</p><ol><li>之前为什么那么高？</li><li>为什么你的方法可以降低？是如何归因的？</li><li>具体解决了什么问题？</li><li>是否可以总结出一套办法，以后别人也能用这个办法解决这些问题？</li></ol><p>如果你在评委提问之前，就能对这些问题进行深入思考和适当呈现。那么你就是既有结果又有过程了。</p><p>通过这些案例，我们可以看到具备结构化思维，可以帮助我们快速的理清处理问题的思路，提升工作效率。经常锻炼结构化思维，可以极大的提升我们职场竞争力，让工作有条不紊，事半功倍。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到问题后的本能反应，会决定职场发展的高度？</title>
      <link href="/2020/06/02/post/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%90%8E%E7%9A%84%E6%9C%AC%E8%83%BD%E5%8F%8D%E5%BA%94%EF%BC%8C%E4%BC%9A%E5%86%B3%E5%AE%9A%E8%81%8C%E5%9C%BA%E5%8F%91%E5%B1%95%E7%9A%84%E9%AB%98%E5%BA%A6%EF%BC%9F/"/>
      <url>/2020/06/02/post/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%90%8E%E7%9A%84%E6%9C%AC%E8%83%BD%E5%8F%8D%E5%BA%94%EF%BC%8C%E4%BC%9A%E5%86%B3%E5%AE%9A%E8%81%8C%E5%9C%BA%E5%8F%91%E5%B1%95%E7%9A%84%E9%AB%98%E5%BA%A6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/ic1Yqh4TgKNW3bks7jKqSg">遇到问题后的本能反应，会决定职场发展的高度？</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>怎么通俗的理解认知？</p><p>认知，是对待一个问题，本能的思考方式。</p><p>举个例子，老板抛出了一个问题，群里的Team Leader，本能之下可能有这样几类回复：</p><blockquote><p>画外音：Team Leader，后文统一使用TL简写。</p></blockquote><p>（1）这不是一个问题，不影响；</p><blockquote><p>画外音：可能是怕给自己部门找麻烦。</p></blockquote><p>（2）不是我部门的问题，另一个部门请看一下；</p><blockquote><p>画外音：可能是怕老板追责，先把锅甩出去。</p></blockquote><p>（3）我们先看一下，稍后反馈；</p><blockquote><p>画外音：高下立判，不喜欢怎样的TL，就别做那样的TL。</p></blockquote><p><strong>管理认知，对待问题的本能反应，有可能决定一个管理者职场能够到达的高度。</strong></p><p>职场人，常见的有这几类认知，对待同一个问题，ta们往往本能的做出不同的反应。</p><h2 id="第一类：“抱怨型”"><a href="#第一类：“抱怨型”" class="headerlink" title="第一类：“抱怨型”"></a>第一类：“抱怨型”</h2><p>这类员工&#x2F;管理者，<strong>遇到问题，往往归咎外因，以“抱怨”为本能的应对</strong>。</p><p>例如：晋升没有成功，ta会认为，评委都是傻X，没有人是伯乐。</p><p>又例如：系统出了线上问题，ta的本能反应是，QA没有测试到位。</p><p>再例如：绩效不符合预期，ta会认为是TL的支持不够，同事不配合，下属不给力。</p><p>ta们充满负能量，不喜欢从自己身上找原因。他们不但自己不积极，还容易将负能量扩散给团队，引导团队和公司进行对抗，这类员工一旦发现，一定要及时T出团队。</p><h2 id="第二类：“积极行动型”"><a href="#第二类：“积极行动型”" class="headerlink" title="第二类：“积极行动型”"></a>第二类：“积极行动型”</h2><p>这类员工&#x2F;管理者，<strong>遇到问题，往往归因于，自己行动不够，努力不够</strong>，以此为默认的思维方式。</p><p>例如：没有涨工资，ta会认为，是自己不够努力，需要再晚几个小时下班。</p><p>又例如：线上告警没有及时发现，ta会认为，是自己应该更频繁的check线上日志。</p><p>ta们态度端正，工作积极，会从自己身上找原因。<strong>这种正能量大概率会引导ta们走向成功。</strong></p><p>但是，有少部分人，努力却没有成功，就有可能是方法不对，导致效率低下。</p><p><img src="/images/%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%90%8E%E7%9A%84%E6%9C%AC%E8%83%BD%E5%8F%8D%E5%BA%94_%E4%BC%9A%E5%86%B3%E5%AE%9A%E8%81%8C%E5%9C%BA%E5%8F%91%E5%B1%95%E7%9A%84%E9%AB%98%E5%BA%A6/%E6%96%B9%E6%B3%95%E4%B8%8D%E5%AF%B9%E5%AF%BC%E8%87%B4%E6%95%88%E7%8E%87%E4%BD%8E%E4%B8%8B.jpg" alt="方法比努力重要"></p><p><strong>努力是成功的必要条件</strong>，但并不是努力，一切问题就能够解决。遇到这类员工，要帮助和引导他们往更高的认知上走。</p><h2 id="第三类：“找方法型”"><a href="#第三类：“找方法型”" class="headerlink" title="第三类：“找方法型”"></a>第三类：“找方法型”</h2><p>这类员工&#x2F;管理者，<strong>遇到问题，本能反应是，方法比问题多</strong>。</p><p>例如：项目频繁延期，ta会思考，可能是流程不合理，配合不顺畅，需求总变更等。</p><p>又例如：提测质量差，ta会思考，是不是员工能力不足需要培养，或者是不是能借助工具去提高代码质量等。</p><p>这类员工，愿意思考问题的多种解决方案，最终找到优化的方案，把事情持续推动优化。ta们 <strong>不但态度端正，而且解决问题能力很强</strong>。有态度，有能力，他们有潜力成为团队一线、二线管理者，需要重点培养。</p><p>这里，我们作为员工，同时作为管理者，需要反思，每当我们遇到问题，我们的潜在认知：</p><p>（1）是，态度端正，在自己能够掌控的范围寻找问题的解决方法？</p><p>（2）还是，下意识的解释，下意识的defence呢？</p><blockquote><p>画外音：认知决定高度。</p></blockquote><p><strong>在什么情况下，“有方法”也解决不了问题呢？</strong></p><p>此时，很可能是，找错了问题！！！</p><p>“有方法”解决“正确的做事”。</p><p>然而，<strong>“做正确的事”更加重要</strong>。</p><h2 id="第四类：“找方向型”"><a href="#第四类：“找方向型”" class="headerlink" title="第四类：“找方向型”"></a>第四类：“找方向型”</h2><blockquote><p>画外音：或者理解为，战略型思维。</p></blockquote><p>例如：当项目做不过来时，有战略思维的产品经理，不会立刻说“研发人不够，要加资源”，也不会立刻说“必须加班加点多做几个项目”，ta会思考：</p><p>（1）产品的核心指标，工作方向，工作目标；</p><p>（2）为了达成目标，可能有100个产品项目要做；</p><p>（3）这100个项目的投入产出，ROI分别如何；</p><p>（4）在有限资源的情况下，应该先做哪些，后做哪些；</p><blockquote><p>画外音：对接这样的PM，是幸福的。</p></blockquote><p>管理者需要有经营思维，一味强调“人不够”只能说明缺乏成本意识，试想如果你是公司的CEO，你会无限的招人么？</p><p>这类员工&#x2F;管理者，他们往往具备很强的 <strong>逻辑性思维，系统性思维</strong>，而不是想到一出是一出。遇到问题时，他们本能反应是，目标是什么，达成目标的路径是什么，工作的方向是什么，当前的 <strong>主要矛盾是什么</strong>，最终找到当前“正确的事情”是什么。</p><p>这里，我们作为员工，同时作为管理者，需要反思，每当我们遇到问题，我们的潜在认知：</p><p>（1）是，找到当前的主要矛盾？</p><p>（2）还是，盲目的执行呢？</p><blockquote><p>画外音：认知决定高度。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新晋的管理者，<strong>需要认同的第一件事，就是从专家到TL的角色转变</strong>；需要思考的第一件事，就是 <strong>认知的升级</strong>：</p><p>（1）拒绝抱怨；</p><p>（2）态度上，保持正能量；</p><p>（3）能力上，找到问题的解决方案；</p><p>（4）方向上，具备逻辑性思维，系统性思维，找到主要矛盾，为团队设定目标并达成；</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里一年，聊聊我成长了什么</title>
      <link href="/2020/06/02/post/%E9%98%BF%E9%87%8C%E4%B8%80%E5%B9%B4%EF%BC%8C%E8%81%8A%E8%81%8A%E6%88%91%E6%88%90%E9%95%BF%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2020/06/02/post/%E9%98%BF%E9%87%8C%E4%B8%80%E5%B9%B4%EF%BC%8C%E8%81%8A%E8%81%8A%E6%88%91%E6%88%90%E9%95%BF%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/JOryKkISUvjHmE32jsepcA">阿里一年，聊聊我成长了什么</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>2018.5.31~2019.5.31，一段精彩的旅程，渡过了在阿里一年的时光，这段时光有快乐、有焦虑、有迷茫、更有思考，思考的是自己过去的种种不足、思考的是一些现在看来之前错误的想法、思考的是如何成为一个更好的技术人，将这一些思考分享给看到这些文字的每个人，共勉。</p></blockquote><h2 id="应当如何面对线上的异常-x2F-故障"><a href="#应当如何面对线上的异常-x2F-故障" class="headerlink" title="应当如何面对线上的异常&#x2F;故障"></a>应当如何面对线上的异常&#x2F;故障</h2><p>看起来毫无意义的一个问题，碰到线上异常&#x2F;故障如何面对，排查解决了不就好了，但是这真的只是第一层。</p><p>最近在想“消防”这个词语很有意思，它其实是两层意思：</p><ul><li>“消”是消除问题</li><li>“防”是防止问题</li></ul><p>即“消防”这个词语表达的意思应该是先消除问题再防止相同的问题再次发生。其实线上的异常&#x2F;故障也是同样的道理，我们应当先及时止血，把问题处理掉，然后深挖问题，探究根因，举几个例子：</p><ul><li>假设是某段代码的空指针异常导致的，那么是否考虑加强Code Review，或者使用findbugs插件去自动扫描代码中可能的异常？</li><li>假设是线上某个配置修改导致的，那么是否今后变更的修改必须有人双重检查一遍才可以修改？</li><li>假设是本地内存中某些值因为系统重启丢失导致的，那么是否引入定时任务，定时把值写入本地内存中？</li><li>假设是某段代码逻辑没测试到导致的，那么是否可以反思总结为什么这段逻辑没有测试到，未来的测试应该如何改进？</li></ul><p>根据我过往的经验，太多公司、太多团队处理线上的问题仅仅满足于把问题处理完就完事，忽略了对问题的复盘，这对团队&#x2F;对公司的发展都是不利的。</p><h2 id="什么是真正的技术能力"><a href="#什么是真正的技术能力" class="headerlink" title="什么是真正的技术能力"></a>什么是真正的技术能力</h2><p>之前加了几个技术微信群，看到很多技术朋友在兴高采烈地讨论各种源码，spring源码我彻底撸了一遍、最近深入学习了dubbo底层实现方式，当然曾经的我也是这样的，记得学习volatile的时候一直挖到了volatile在硬件层面上的实现方式，但是这真的说明技术能力强吗？从今天的思考去看这个问题，我认为这更多反应的是一个人的学习能力、钻研能力以及对技术的热情，除此之外再体现不出太多其他东西了。</p><p>这个话题，可能是这一年思考的最多个的一个点，钻研是好事，但是实际上大多时候的深入钻研并不在实际工作中有用，且研究得越深，忘得越快，因为研究得越深，那么这个技术点关联的技术点就越多，边边角角的忘了，核心的东西不容易串起来。那么什么是真正的技术能力，我画一张图概括一下：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%B8%80%E5%B9%B4_%E8%81%8A%E8%81%8A%E6%88%91%E6%88%90%E9%95%BF%E4%BA%86%E4%BB%80%E4%B9%88/001.jpg" alt="真正的技术能力"></p><p>简而言之，技术能力 &#x3D; 解决问题的能力，那么同样都在解决问题，大家之间的技术高低又有什么区分呢？我认为有以下几个层次：</p><ul><li>第一层级，解决当下问题</li><li>第二层级，以优雅且可复用的方式解决当下问题</li><li>第三层级，解决的问题不仅仅能满足当下，还能满足未来一段时间</li></ul><p>其实从这个角度上来看，不同的技术能力，在工作过程中区分度是很明显的：</p><ul><li>写的代码是否存在异常风险，多线程运行下是否存在线程安全问题，某段代码是否会导致内存泄露</li><li>写的代码是否优雅可复用，设计的框架是否足够符合开闭原则，代码结构层次是否清晰明了</li><li>针对特定的场景，技术选型、库表结构设计是否足够合理，今天你设计的框架是只能用一年，还是未来三年五年都可以持续使用</li><li>来了一个大的需求，就比如做一个App的会员体系功能好了，是否可以在充分分析需求后，精确将需求划分为几个特定的子模块并梳理清楚模块之间的关系</li></ul><p>越厉害的人，在代码设计与开发过程中，越能看到想到一些别人看不到想不到的问题，这叫做高屋建瓴；当代码运行出现问题的时候，有人1小时排查出问题，有人1分钟发现问题，这叫做举重若轻。</p><p>因此我认为<strong>解决问题的能力才是技术能力的真正体现</strong>，这一年对技术的探究我也从研究源码更多的转变去学习设计模式、去学习分布式环境下各种NoSql的选型对比、去学习使用Lambda让代码更简洁，往真正在实际工作中解决问题的方向去努力。</p><p>另外，抛开这个点，这两天我在思考，还有一个体现技术能力的点，就是<strong>学习能力</strong>。现实中的全栈是很少的，互联网这个行业的程序员的方向通常有几类：</p><ul><li>服务端</li><li>前端</li><li>移动端</li><li>AI</li><li>嵌入式</li><li>大数据</li></ul><p>在同一类中，基础知识、基本概念、思维方向是一致的，更多可能差异在开发工具、语言上，我精通Java，但是如果明天有一个需求，使用nodejs、scala、go更好，那么是否可以快速学习、快速上手？甚至明天有一个需求需要写前端代码，是否可以快速开发、无bug上线？</p><p>所以，解决问题的能力 + 学习能力，是我认为真正的技术能力，不过说到底，学习能力某种程度上也只是为了解决问题而已。</p><h2 id="不要造轮子"><a href="#不要造轮子" class="headerlink" title="不要造轮子"></a>不要造轮子</h2><p>曾几何时，当我们看着github上这么多优秀的源代码的时候，默默立誓，这辈子我一定要写出一个牛逼的框架，开源在网上。</p><p>曾几何时，公司招聘的时候，技术负责人激情满满地介绍着公司内部自研了多少系统并在线上投入使用。</p><p>很多对技术有追求的朋友，进入一家公司可能时时刻刻在寻找机会去做一些自己造轮子的事情，但是就如同前面所说的，衡量真正好技术的标准就是能否实实在在地解决问题，自己造轮子风险高、周期长，且需要长时间的验证、排坑才能达到比较好的效果。</p><p>随便举几个例子，在互联网发展的今天：</p><ul><li>数据库连接池有dbcp、c3p0、druid</li><li>本地缓存有ehcache、要用中心缓存有redis、tail</li><li>服务化有dubbo、跨语言可以用thrift</li><li>分布式任务调度可以考虑schedulex</li><li>搜索可以选es、solr</li><li>更高级一点图片存储可以用七牛、im可以用融云&#x2F;环信、音视频这块声网做得比较成熟，所有这些都提供了各个开发版本的sdk，接入简单</li></ul><p>只要你有的技术方面的需求，绝大多数业界已经有了成熟的解决方案了，根本不需要去专门自己搞一套。因此我认为轻易一定不要造轮子，如果一定要造轮子，那么请想清楚下面几个问题：</p><ul><li>你要做的事情是否当前已经有了类似解决方案？</li><li>如果有，那么你自己做的这一套东西和类似解决方案的差异点在哪里？假设不用你这套，基于已有的解决方案稍加改造是否就能达到目的？</li><li>如果没有，那么为什么之前没有？是你们公司这种场景是独一无二的？还是这种场景对应的解决方案根本就是不可行的所以之前没人去搞？</li></ul><p>如果想清楚了这些问题，那么就去干吧。</p><h2 id="去提升看问题的高度"><a href="#去提升看问题的高度" class="headerlink" title="去提升看问题的高度"></a>去提升看问题的高度</h2><p>过去有太多人在我的公众号或者博客下反馈了一个问题：在这个公司，整天做着增删改查的工作，对自己一点都没有提高。</p><p>对于这种看法，说难听点就是四个字—-目光短浅。我们看：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%B8%80%E5%B9%B4_%E8%81%8A%E8%81%8A%E6%88%91%E6%88%90%E9%95%BF%E4%BA%86%E4%BB%80%E4%B9%88/002.jpg" alt="提高看问题的视野"></p><p>如果以普通的视角去看，那么一颗树那也就只是一棵树而已，但是如果跳脱出目前的视角，站在更高的角度去看，它其实是森林的一部分。你的主管并不是因为他是你的主管所以他就应该你比更高瞻远瞩，而是因为他看问题的高度比你更高、想得更远、做得更深，所以才成为了你的主管。</p><p>把这个问题说得实际点：</p><ul><li>假设今天你负责的是一个系统，那么你仅仅是把这个系统的基本原理搞懂了？还是可以把上下游有几个系统、每个系统之间如何调用、依赖方式都理顺？</li><li>假设今天你负责的是一块业务，那么你仅仅把自己负责的功能点弄清楚了？还是你可以从最上游开始，到你负责的系统，再到最下游，都思考得非常透彻？</li></ul><p>今天与其在抱怨没有机会、抱怨公司对自己能力没有提升，为什么不去思考机会为什么降临在别人头上不降临在你头上？为什么别人可以从小公司写着一样的增删改查走向BAT而你年复一年还在小公司写着增删改查？当你真正能转变自己的思维模式，跳脱出现在的圈子往更高一个层次去看问题、去提升自己，我相信总会有发光发热的一天的。</p><p>同样在阿里巴巴，马老师思考自然、思考环保、思考人类的发展，你的主管思考团队未来的方向和打法，我们在思考如何把某个客户需求完整落地，这就是高度，你未必能想到马老师想的，但是你对标层级高一点的人，一步一步尝试往他们的高度去靠。</p><p>总而言之：眼界决定高度，多看、多想、多保持好奇心、多问几个为什么，久而久之自然就迈上了一个新的台阶。</p><h2 id="学会总结"><a href="#学会总结" class="headerlink" title="学会总结"></a>学会总结</h2><p>需求、项目的复盘是非常重要的一部分内容，然而我之前见过的太多团队、太多Leader，只顾着一个迭代接着一个迭代，一个版本接着一个版本，只满足于把需求做好，而忽略了总结的重要性。</p><p>我认为大到项目、小到需求，如果在完成之后缺乏总结那么某种程度上来说是失败的，可以总结的点非常多：</p><ul><li>通过这个项目&#x2F;需求，是否吃透了某一块业务，搞懂了来龙去脉</li><li>通过这个项目&#x2F;需求，是否充分理解了公司某个技术框架&#x2F;基础组件的用法</li><li>在整个项目的设计上，有哪些做的不好的地方</li><li>在整个项目的开发（针对程序员而言），是否踩了坑，犯了低级的错误</li><li>在整个项目的进度把控上、人员安排上、上下游协调上，是否存在不足之处</li><li>经历了某次大促的值班，是否对可以熟练使用公司的监控工具，遇到突发事件，是否快速有效地进行了解决</li></ul><p>任何工作一定对个人都是有提升的，但是不会总结的人，在每个项目&#x2F;需求中成长的东西都是散的，久而久之就忘了。通过充分的总结之后，犯过的错误我们不会二次再犯，理清楚的业务的来龙去脉铭记在心，对自己是一种提升，分享给别人对别人也是很大的帮助。</p><p>失败者失败的原因各有不同，成功者的做事方式总是相似的，从宏观角度去看，我认为总结就是成功者之所以能成功，很重要一个原因。</p><h2 id="选择大于努力"><a href="#选择大于努力" class="headerlink" title="选择大于努力"></a>选择大于努力</h2><p>好吧，我承认调皮了，但是这一段我也是很真诚的！</p><p>人，努力是最重要的，但是选择也非常重要。有能力是非常好的，有能力的同时，一个好的Leader、一个好的团队将会让你在平时工作中感到无比舒心，将会让你有家一般的温暖，更能将你的能力最大化！</p><p>最后，非常重要的一点：不要害怕面试。通过面试才能发现不足，才能知道未来在技术道路上还需要在哪些方面进行提高，在面试的结尾，你也可以询问面试官自己有什么不足，面试官一定会给到你最诚恳的建议！</p><p>期待和每一个优秀的你一起共事。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级人才的价值在于管理复杂性的能力</title>
      <link href="/2020/06/02/post/%E9%AB%98%E7%BA%A7%E4%BA%BA%E6%89%8D%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E7%AE%A1%E7%90%86%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E8%83%BD%E5%8A%9B/"/>
      <url>/2020/06/02/post/%E9%AB%98%E7%BA%A7%E4%BA%BA%E6%89%8D%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E7%AE%A1%E7%90%86%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/s5Xc076M0U-xmIMc-hfSxA">高级人才的价值在于管理复杂性的能力</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>前段时间，甲骨文中国的裁员事件，引发了对大龄IT人员去向的热议。我看到以下的信息：</p><p><img src="/images/%E9%AB%98%E7%BA%A7%E4%BA%BA%E6%89%8D%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E7%AE%A1%E7%90%86%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E8%83%BD%E5%8A%9B/%E7%94%B2%E9%AA%A8%E6%96%87%E4%B8%AD%E5%9B%BD%E8%A3%81%E5%91%98.jpg" alt="甲骨文中国裁员"></p><p>但我的看法是，这里引用的具体事例其实是岗位错配的结果，并不代表大龄IT人员没有价值。而高级人才的价值，在于<strong>管理复杂性的能力</strong>。</p><h2 id="01-每个知识工作者都是管理者"><a href="#01-每个知识工作者都是管理者" class="headerlink" title="01 每个知识工作者都是管理者"></a>01 每个知识工作者都是管理者</h2><p>IT从业人员，绝大部分都是知识工作者，而<strong>知识工作者其实都是管理者，都需要领导力</strong>。特别是在大公司。</p><p>在大公司工作过的都知道，里面有非常复杂的流程和各种审批，完成任何一件事情，小到交付一个程序，大到完成一个项目，其实都需要与很多不同部门的人进行协作，包括求各种衙门部门的审批，是一个持续升级打怪的过程。<strong>只要需要与人协作，就需要管理能力和领导力</strong>。</p><p>所以，管理能力和领导人并不是带团队的管理岗位才需要。</p><p>有一个说法，美国程序员有80%的时间在开会。开会是为了干什么？搞清楚具体需求和与上下游系统协调咯。没有这些协作，你写的程序再厉害也没用。</p><p>对于公司来说，你的价值并不在于你某项单独技能有多厉害，而是你的整体交付能力。而交付过程中，需要管理各种复杂性。</p><p>老板不知道你做一件事情有多难吗？而这些难处，往往有各种历史和现实原因，或者是站在更高的层面看问题而造成的，它们不会短时间被统一消灭掉，甚至永远不会被消灭掉，而且可能越来越多。<strong>变得复杂，恰恰是一个公司走向成熟的标志</strong>。</p><p>这些时候，就是要靠我们去解决这些难处，把事情完成。你能完成多大的事情，也就是说你能管理多大的复杂性，你的价值就有多大。</p><p>老板对你的要求很简单，交代给你的事情，你搞掂就可以了。你更大的价值在于，老板能否放心地把整个业务或系统交给你。</p><p>而你是否能坐上老板的位置，看看老板休长假时，是否喜欢选择你做代理人就知道了。如果TA经常找你，说明TA对你很放心，TA觉得你能胜任部分或全部TA的工作，将来TA升迁了，找你做接班人就是顺理成章的事情。如果TA经常找你的同僚，你不应该庆幸自己不用多干活，而是要反省为什么老板不信任你。</p><p>所以，今天这个时代，<strong>对通才的需求远远高于专才</strong>，拥有某项特长而其他方面也不差的T型人才更受欢迎。时代变化很快，技术变迁也会越来越快，守着某项专业技能，大几率是很快被淘汰掉。</p><p>一个人的综合能力，也就是管理复杂性、整体交付能力，才是一个人的最大价值。</p><p>当然，你会说小公司就没有那么复杂。恰恰相反，小公司人员少，分工没有那么细，更需要一个人“一脚踢”（广东话，就是一个人包揽整件事情）的能力。</p><h2 id="02-外企就是养老院吗？"><a href="#02-外企就是养老院吗？" class="headerlink" title="02 外企就是养老院吗？"></a>02 外企就是养老院吗？</h2><p>甲骨文北京，被称为“中关村最大的养老院”。然后网上就有说法，外企都是养老院。</p><p>诚然，外企遵循它们在国外的价值观，一般都严格守法，不会主动违反劳动法，包括遵照每周40小时工作制，每月加班不能超过36小时的规定，加班也按规定进行补偿。外企也比较重视工作与生活平衡，年假比较多。甚至有些外企会实现弹性工作制，不需要打卡和考勤。</p><p>不像国内互联网公司以996为潜规则，甚至变成公开准则，公然违法。</p><p>但这并不代表在外企工作轻松。</p><p>首先，<strong>知识工作者的产出本身就不应该以工作时间来衡量</strong>。</p><p>其次，由于公司大的流程、决策往往掌握在总部，总部并不了解中国市场，这会引起很多冲突。而且由于很多职能部门分布在世界各地，<strong>在外企要完成一件事情往往需要全球协作，也常常涉及到文化上的磨合，复杂性可能更高</strong>。</p><p>这也是为什么在外企，高管的位置，通常会选择“世界人”——那些在多个国家工作过的人来做，因为他们有更好的文化理解和更高的视野。</p><p>而且，只要是负责一个具体项目或系统的，其实上班、下班的时间也会变得模糊。有急事的时候，你一样需要在家加班。</p><p>为了让大家对外企的复杂性有更具体的了解，我以去年做的一个项目为例子，给大家罗列一下，我们完成一个项目要打多少怪。</p><p>这是一个我们要在国内开展的新业务。这项业务在国内已经有成熟的供应商产品，因此采购供应商产品成了唯一的选择。所以这个项目，我们的主要工作是实施，自主开发的部分比较少。</p><p>但这看似简单的实施过程，却蕴藏着各种深坑。</p><p>这套供应商系统满足国内的业务需求和监管要求都没有问题，但要满足我们作为全球金融机构的全球标准，就够呛了。</p><p>我们要面对的是各种大怪：</p><ol><li><p>采购合同：由于是供应商产品，所以需要签署采购合同。除了要和供应商洽谈合同细节，我们也有大量的内部流程要走——要获得成本控制委员会的审批，要做技术评审，要获得采购部门和法务部门的支持，要打通复杂的付款流程。</p></li><li><p>架构设计：需要集团指定的架构设计师来完成架构设计。他手头上有非常多的项目，要争取他的时间非常难。而且他是一个英国人，供应商是国内的，不懂英语，我们还要翻译各种文档以及在沟通会上做同声传译。做出来的架构设计也要过集团的审批，负责审批的都不是省油的灯。</p></li><li><p>安全评审：安全是银行最重视的。安全评审、安全测试是系统上线的必要条件，而且要必须执行全球统一的安全标准。而国内对安全要求并不算高，这就导致了供应商产品和我们的全球标准存在巨大的鸿沟，需要大量整改。也需要我们在业务部门、供应商和安全部门间不断周旋。</p></li><li><p>对外服务：业务部门希望能够给外部客户直接访问我们其中一个系统进行交易，并以此作为我们的竞争优势。这个需求可要了我们的亲命。首先，这个系统要接入互联网，为了防止外部攻击，需要额外的架构；其次，作为一种对外服务，集团市场部对网站的外观、用户体验和残疾人可用性都有统一的要求，而供应商的产品没有一项能达标，又衍生出大量的沟通和整改工作，期间的沟通也需要我们做翻译、传译和与各衙门部门的周旋。</p></li></ol><p>我就先列举到这里。</p><p>当然，你会说，有些复杂性是多余的，确实是，但这些都不是我们这个层面能消除和绕开的，而且也可能只是从我们的视角觉得多余而已，我们只能管理和克服。</p><h2 id="03-为什么管理岗能拿更多的钱？"><a href="#03-为什么管理岗能拿更多的钱？" class="headerlink" title="03 为什么管理岗能拿更多的钱？"></a>03 为什么管理岗能拿更多的钱？</h2><p>作为一家技术公司，十年前，我们也在管理晋升路径的基础上，增加了技术专才晋升路径。两者的区别就是，一个需要带团队，一个不需要。</p><p>但是结果是，管理岗晋升路径更清晰，升迁相对容易，而技术岗的晋升路径一直很模糊，能进入高级岗位的人远远少于管理岗，长期趴窝的人非常多。</p><p>这个现象很容易理解。有个简单粗暴的角度，<strong>管理岗的重要性，看看这个岗位下面有多少人就可以了</strong>。人数越多，说明你管理的部门越重要，层级也越高。</p><p>而由于这个位置下面每个人的产出，分配一点就可以滋养这个岗位，这也是为什么管理岗位置越高，收入越高，因为它是带杠杆的，位置越高，下面管理的人越多，杠杆就越大。</p><p>扁平化在大公司基本是不可行的，因为每个人的管理带宽都是有限的，多层级是成熟公司不可避免的宿命。</p><p>而技术专才岗呢？我们要定义一个初级专才岗和高级专才岗的具体要求就有点难了。所以也经常看到处在初级岗的员工在做一些高级岗的事情，反过来的也有。</p><p>不是说没有厉害的技术专才值得获得更高的报酬。但我们设想一个问题，如果一个高级专才的工资是初级的4倍，那么我们是否应该期待TA一个人的产出是初级的4倍呢？这样的人有吗？有，<strong>但极少</strong>。</p><p>所以<strong>通过专才路线晋升到高级岗位的人，是选择了一道窄门</strong>。</p><p>当然，人各有志，有些人就偏爱技术，不喜欢和人打交道，也没有兴趣或能力带人，就喜欢静静地做自己的事情。这样的选择可以有吗？可以，但这些人就要忍耐工资一直涨不上去，也真的需要担心自己35岁后的命运了。因为他们的价值并不比一个只有3-5年工作经验的人大多少。</p><p>这个世界上，哪有光靠安安静静地写着程序就能拿到高工资的美差。</p><p>当我们觉得管理各种复杂性非常疲惫的时候，都会说我好想回到可以一个人写程序的时光，但大家心里都清楚，YY一下可以，那个时光是支配不起你现在的开销和欲望的。</p><p>有个英国的高管就说过，他每天需要坐一个半小时的火车上班，而他会利用这个时间写写程序，他享受这样的时间，因为回到公司就很难有这样的时间了。而这种享受，只能当兴趣，不能当饭吃。</p><p>所以，大龄程序员，确实比较担忧。</p><p>当然，专才技术岗还有一条出路，就是去做架构设计师。但架构设计师绝对不是只懂技术就可以的。我们集团的首席架构师对一个好的架构师的定义如下，我非常认同：</p><p><img src="/images/%E9%AB%98%E7%BA%A7%E4%BA%BA%E6%89%8D%E7%9A%84%E4%BB%B7%E5%80%BC%E5%9C%A8%E4%BA%8E%E7%AE%A1%E7%90%86%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E8%83%BD%E5%8A%9B/%E6%9E%B6%E6%9E%84%E5%B8%88%E8%83%BD%E5%8A%9B.png" alt="架构师能力"></p><ol><li><p>Technical Excellence 技术牛 - 这个不用多说；</p></li><li><p>Communication Mastery 沟通达人 - 架构设计绝对不是画张图那么简单，你需要和不同技术团队进行深入交流，才能做出切实可行的架构方案；</p></li><li><p>Leadership Power 领导力 - 同理，只要需要协作，就需要领导力。你的图纸，别人不买账，就是废纸一张。</p></li></ol><h2 id="04-总结"><a href="#04-总结" class="headerlink" title="04 总结"></a>04 总结</h2><p>说了这么多，并不是要大家一定要做管理岗，而不发展自己的专业。而是奉劝大家<strong>不要限制自己的发展</strong>。</p><p>管理和专才的路线其实会越来越模糊。</p><p>管理复杂性的能力，才是我们的核心价值。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30张图看懂《SCRUM捷径》</title>
      <link href="/2020/06/02/post/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82%E3%80%8ASCRUM%E6%8D%B7%E5%BE%84%E3%80%8B/"/>
      <url>/2020/06/02/post/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82%E3%80%8ASCRUM%E6%8D%B7%E5%BE%84%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/U2aS74A9BP5RSzDB3fFmJw">30张图看懂《SCRUM捷径》</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>《SCRUM捷径》可谓是经典中的经典，语言质朴，中文版的翻译质量也很高，没有任何长篇大论。文中Ilan 根据多年经验，用30个捷径来阐明组织如何能更好地实践Scrum这个轻量级框架。我在多次阅读过程中，对照近年走过的弯路，觉得字字玑珠，每次都能产生更加深刻的共鸣。之所以有这样的体会，是因为这些捷径我们大多数都听说过；说它不容易，是因为这世间有太多的道理知易行难。以下图片均是原创，文字多数出自中文翻译本，或精简、或摘抄、或提炼、或重排，虽仁者见仁，智者见智，但初衷仍是尊重作者观点，以期透过30张图一窥书中精彩。</p></blockquote><ol><li><p>#SCRUM捷径1# 虽然SCRUM不难推，但如何高效实施为自己打的广告牌撑腰，是完全不同的故事。即使已经设法建立了基本的SCRUM设置，但如果想把团队培养成“SCRUM法拉利”而不是”夏利”，则需要耐心、开放的心态、教训以及方便实用的经验指导！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/001.jpg" alt="1-1"></p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/002.jpg" alt="1-2"></p></li><li><p>#SCRUM捷径2# 几个Sprint的误用模式：第一、单独的测试Sprint. 第二、没完没了的Sprint0.  第三、长短不一的Sprint.</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/003.jpg" alt="2"></p></li><li><p>#SCRUM捷径3#  真诚的赞赏，哪怕是最简单的赞赏，也会使我们有安全感，充满活力。像家一样的工作环境，能把我们带回无忧无虑的童年，那个时候我们最高兴，也最有创造力。来！一起做个开心的人吧！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/004.jpg" alt="3"></p></li><li><p>#SCRUM捷径4# 想融入一个团队难，带领一个团队更难，没有官方授权而需要带领一个团队则是难上加难。作为起步，可借助如下五个小窍门。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/005.jpg" alt="4-1"></p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/006.jpg" alt="4-2"></p></li><li><p>#SCRUM捷径5# SCRUM需要的不是摇滚明星，而是演播室音乐人。除了开放、勇气、专注、承诺和尊重以外，还需要活力（正能量满满）、共情（某个伙伴临时有事，其他伙伴能站出来揽过重任）、好奇（做些非专业的事情以消除团队技能的瓶颈）和友善。总之，态度比能力更重要！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/007.jpg" alt="5"></p></li><li><p>#SCRUM捷径6# 就像是儿科大夫是医生，心脑血管大夫也是医生一样，无论是编码还是测试，都是开发人员，他们仅仅是精深领域有所不同罢了。同时我们也鼓励，每个开发人员都是一专多能，这样的T型技能团队更能快速的分享知识，加快价值流动速度。加油，T型的我们！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/008.jpg" alt="6-1"></p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/009.jpg" alt="6-2"></p></li><li><p>#SCRUM捷径7# 任何组织在寻求筹建紧密团队时都要遵守一个原则，即保全和维护成功的团队。这包括不随便把团队成员调离，也包括不轻易空降成员。否则，没完没了的变动必然使保持一个卓越团队越来越困难，尤其是无形的损失，比如失去动力、士气受影响以及损失有价值的隐性知识。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/010.jpg" alt="7-1"></p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/011.jpg" alt="7-2"></p></li><li><p>#SCRUM捷径8# Story points和person days谁对谁错？举个例子，用大大小小的球填满一个杯子是件又快又容易的事情。如果把这些球打开，则有三种可能性：1、内容不满；2、内容刚好；3、内容膨胀。如果把所有的内容再次倒入杯子，也可能发生三种情况：1、杯子不满；2、满；3、溢出。假如把大小不一的球儿看作是Story points，内容物看作Person days的话，那么把球儿破开的过程也正是计划会议中要做的事情。将Story分解成task可以有效地帮助团队权衡决策，确保团队成员对迭代要交付哪些内容做到心中有数。如果基于故事点的估算与基于小时数的估算出入太大，则需要与PO进行进一步沟通。所以基于故事点和小时数的估算并不矛盾，两者的结合更能得出较为准确的计划。但有一点切忌：任务需要多少小时完成，绝对不是我们的目的，如果用小时数来衡量团队成员的效率和产出，必将适得其反。（注：杯子的隐喻仅代表个人观点）</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/012.jpg" alt="8"></p></li><li><p>#SCRUM捷径9# 受累于障碍：阻碍某个具体任务但不一定会延缓整个项目进度的问题叫做“阻碍（blocker），延缓整个团队Sprint进展的叫做“障碍（Impediment）”。典型的阻碍是一个有相互依赖关系的任务因为某些原因停了下来，短暂临时的阻碍是比较合理的，也很普遍，不必特别当心，因为解决依赖问题的同时多半有其他工作可以做；但如果遇到障碍的时候，SCRUM妈妈就必须第一时间着手解决，这包括：来自外部的冗长的会议、不成功的构建、开发工具和环境问题、产品列表未细化、产品负责人缺席或者无权最重要决定、组织里太关注到个人的激励方案。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/013.jpg" alt="9"></p></li><li><p>#SCRUM捷径10# 拆分用户故事好比切蛋糕，最好纵向切片，确保每一个用户故事都是独立的、有端到端的业务价值。同样不到万不得已的时候不要创建单独的技术故事，如果非要创建不可，也不必拘泥于传统的“作为一个……我希望….这样我就可以……” 这样的格式，因为这听上去很刻板生硬，就好比硬要把一个方塞进一个圆里一样，让人觉得不自然！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/014.jpg" alt="10"></p></li><li><p>#SCRUM捷径11# 我们在制定最初的DoD时，一定要现实甚至保守，犯不着穷己一生深思熟虑到底应该如何定义DoD，因为它会随着团队的成熟而演进。一开始就雄心勃勃制定一个过于详细的DoD也许会让人钦佩不已，但它一旦变得不现实，就会挫伤团队信誉和士气。就如做菜一样，盐要一点一点慢慢加，如果一下子加过了，就很难收场了。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/015.jpg" alt="11"></p></li><li><p>#SCRUM捷径12# 随着我们一天天变老，身体也会渐渐发生变化，怎么才能与老化作斗争？方法之一是使用镜子，通过每天照镜及时发现新生的皱纹，多摸点面霜，多燃烧点脂肪，这样可以拯救许多老化问题。同理，虽然SCRUM不是银弹，但它是一面银镜，经常做检视可以帮我们尽早发现哪些地方可以改进，如此便能更好的响应变化。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/016.jpg" alt="12"></p></li><li><p>#SCRUM捷径13# 不管喜不喜欢，为软件项目提供估算这个需求永远不会消失，估算是如此之痛，让我们觉得仿佛走进一条又长又黑的隧道无法解脱，这时相对估算给我们带来了一线光亮。相对估算不去“拆分”故事，而是采用“比较”的原则进行。假如要爬三栋不同的楼房，一栋较矮，一栋较高，另一栋是摩天大厦，怎么办？我们可以花时间去数一数每栋楼有多少层，每层几个台阶，然后估算爬那么多台阶要多长时间。但是我们不知道我们的体力状况，也不知道楼道状况，这样的估算不仅耗时，而且如果假设设置的离谱的话，得出的估算也有巨大误差。假如我们将最矮的楼设为基准（10点）；第二栋楼与它进行高度的比较，同时再综合大楼的新旧情况，我们估算25点；同理，摩天大楼计算为40点。把这个概念应用到软件项目，需要考虑三个因素：重复性、复杂度和风险。虽然相对估算依然不是一件容易的事情，但与其他方法相比，至少是一样的准确，且更加简洁优美。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/017.jpg" alt="13"></p></li><li><p>#SCRUM捷径14# 规划扑克的游戏，把相对估算的方法发扬光大。而且大部分团队，都喜欢使用修改过的“斐波那契”数列，因为它很好地体现了需求越大，不确定性越大的特点，同时也避免了对准确性的错觉（比如从20改到21，42改成40等等）。尽管如此，这仍然给团队估算带来困扰。扑克会的关注点是利用打点的方法，经过故事间的比较，快速估算长期产品列表，不要求有详细规范和复杂的依赖性分析，且能够充分利用到过去获得的经验。如果SCEUM MASTER控制不好扑克会的节奏和关注点，就会使这个会议变成无休无止的口水大战！此外一定要严格控制讨论时间，始终牢记帕金森定律：不到最后一刻，工作总是做不完。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/018.jpg" alt="14"></p></li><li><p>#SCRUM捷径15# 为了识别基准1，我们花了太多力气挑选产品列表中最小的用户故事，结果是团队为了就到底要选哪个故事做为初始基线争的面红耳赤，最终也没达成一致。找出历史数据，经过识别、排序、估算、进一步分类、过滤的步骤之后，最终确定团队未来的参照基准库。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/019.jpg" alt="15"></p></li><li><p>#SCRUM捷径16# 关于处理bug的原则，例1: 如果bug是在当前sprint发现的，则developer应该给予最高优先级，立即解决；例2: 如果该developer手里正在处理另一个bug，且它们属于同一个用户故事，则不应该去打断他，而是做一个简单记录用于稍后沟通；例3: 如果bug非常琐碎且相互有关联，可以统一建一个故事来跟踪以节省记录成本；例4: 如果在sprint demo中才发现的问题，可以根据它的重要程度，按照优先级在下一个迭代处理。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/020.jpg" alt="16"></p></li><li><p>#SCRUM捷径17# SCRUM转型像是让测试人员重生，她们在新的环境下拥有了新的身份：1、咨询师：测试人员是她所在领域的工艺专家，她能帮助非测试人员提高测试技能，还可以作为程序员的共鸣板，一起做测试驱动开发从而定期交付可以工作的软件；2、设计师：测试员的核心技能是设计，没有人比她更能设计出有效的测试用例了；3、探索者：无论拥有多么彻底全面的自动化，都离不开手工探索性测试，任何层次的自动化都不能够代替人的智能。所以与其说测试是科学，不如说更接近于艺术。测试人员应该摆脱手工测试的束缚，有机会更多专注于自己擅长的事情：设计、提供咨询以及探索性测试，以更有趣的方式发挥她们的技能。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/021.jpg" alt="17"></p></li><li><p>#SCRUM捷径18# 在没有自动化的情况下试图实现SCRUM就像是在一条破旧的土路上开一辆赛车，你体验不到赛车那种让人觉得刺激的强大动力，相反，你会感到非常沮丧，还会怀疑赛车。自动化需要大笔投资，且也许是没法立刻收回的投资，尤其是使用哪个测试架构以及自己开发还是使用外部工具，都是需要投入时间和人力研究决定。任何一个scrum团队必须极尽可能实现所有环境下的构建-部署的自动化，有一点总胜于一点没有，30分钟的自动构建胜过好几个小时的构建。千里之行始于足下！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/022.jpg" alt="18"></p></li><li><p>#SCRUM捷径19# 关于指标：不管大家喜不喜欢，人们天生就喜欢测量，所以谈到指标，无论怎样，迟早都要面对。指标有善意和恶意之分，用来作为团队识别大致进展的信号，帮助团队检查和调整流程并不断提高的就是善意指标；否则，用于微观管理个人业绩的僵化指标，更重要的是打击人和抹杀士气的就是恶意指标。善意的指标有：燃尽图、增强型交付燃尽图、sprint干扰图以及补救关注点图等。引入任何一种指标的时候都要谨慎，要出于善意，绝不能不停地生产新指标，染上“分析麻痹症”。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/023.jpg" alt="19"></p></li><li><p>#SCRUM捷径20# 站会就是团队的脉搏，脉搏的稳定、持续、轻快而有力，直接关系到团队的健康。出色的站会应该为团队带来活力，而非带走活力。每日站会很简单，但如果使用不当也会变成每日混乱。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/024.jpg" alt="20"></p></li><li><p>#SCRUM捷径21#对于坐在SCRUM团队外围的人，五颜六色的任务板可能是最显眼的特征，无论是白板的构造还是组成的要素都变化纷繁，如何创建SCRUM板没有对错之分，适合团队自己的就是最好的。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/025.jpg" alt="21"></p></li><li><p>#SCRUM捷径22# 表面来看，SCRUM的每一个活动都简单直接，但是如果不精心准备，可能在这个会议上看到有的人狂怒的拍桌子，有的人却委屈地掉眼泪。SPRINT REVIRW尤其如此，是最需要小心对待且精心引导的一个活动，最核心的问题是如何统一团队外部形形色色的干系人的期望。SCRUM嘛嘛一定要好好准备并且要极力避免SPRINT REVIEW变成枯燥的单向展示。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/026.jpg" alt="22"></p></li><li><p>#SCRUM捷径23# 很不幸，当团队面临压力时，最容易想到的就是取消重要的sprint回顾会议，直到情况缓和下来再回到正规。实际上在有压力或者事情进展不顺利时，回顾会议反而更有价值。SCRUM的核心价值观很重要：开放、勇气、尊重、专注和承诺，这些价值观在回顾会议时得以充分体现，每个人都需要时刻牢记这些价值观。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/027.jpg" alt="23"></p></li><li><p>#SCRUM捷径24# 团队的典型畏惧：1、害怕变革：变革让人害怕，它将人们推出舒适区，经常被许多安于现状的人视为对他们的威胁。一个悲哀的现实是无论变革有何受益，组织里总会有人反对。在这种情况下，我们依然要大胆变革，将变革描述成为实验，当大家了解到我们可以安全失败，并且可以一起检查调整时，这种畏惧便会得到缓解；2、害怕曝光：SCRUM重要的一环是measurement，宗旨是发现浪费或者错误的行为，这些检查可能曝光那些不愿意为团队出力的个人，所以这也会引起畏惧。我们要大胆曝光，使检查以正面的形式进行，更早更及时地发现问题以免带来更大的痛苦；3、害怕犯错：如果一个组织被相互指责、掩盖问题和内部冲突的文化所扭曲，scrum就像一本打开的书，无情地揭示出软件开发中的错误。我们要大胆犯错，最有价值的学习往往都来自于冒险和犯错，建设有心理安全感的环境十分重要；4、放松心情：放松心情有利于缓解畏惧，“福兮祸所依”，能够从问题中吸取教训并争取机会的个人和组织，必然能很快走出畏惧，迎接新生活！</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/028.jpg" alt="24"></p></li><li><p>#SCRUM捷径25# 始终牢记：“谁有黄金谁定法则”，项目发起人有权利决定他们喜欢的工作方式。团队要积极主动地安排一个常规性的项目通气会，与项目发起人建立稳定的合作关系，使自己有机会获取直接或者间接的线索以应对可能存在的办公室政治所带来的障碍。要让发起人参与到问题的解决过程，保证他们在信息圈内，保持良好的外交规则，要有艺术地说不。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/029.jpg" alt="25"></p></li><li><p>#SCRUM捷径26# 当组织中的SCRUM master增多时，就需要引进一个新的角色，首席SCRUM master，来维持团队间一定程度的一致性和纪律性。这个角色实际上充当了若干个SCRUM master的SCRUM教练，负责组织整体的培训和辅导，挑战现有行为、提供和维护工具、定义指标且善用指标、帮助建立实践社区、确保一致性、通过集体回顾会议来保证持续流程的改进、以及负责团队之间的协调等。SCRUM变革成功的关键在于一致、规范和继续教育，维持成功的SCRUM生态系统非同小可。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/030.jpg" alt="26"></p></li><li><p>#SCRUM捷径27# 许多SCRUM的采用推广需要典型的权力中心的演变。不同于以往的“职能型组织”、“项目型组织”以及现在流行的“平衡矩阵组织”，“以团队为中心的组织”更有利于SCRUM成长。职能经理需要重新定义指责，一方面要减少对团队“保姆般”的照顾，另一方面，增加更多导师或者师傅般的辅导，帮助他们学习、成长和表现。并不是因为SCRUM只介绍了三个角色，就意味着其他人都要变得多余或者重复，以开放的心态思考，在不破坏真正SCRUM模式的前提下转变职能。切勿将时间花在无聊的会议、分配授权任务并在行政管理中虚度光阴。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/031.jpg" alt="27"></p></li><li><p>#SCRUM捷径28# 人类天生就喜欢测量。我们到底有多敏捷？85% 还是50%？SCRUM的基石就是持续改进，100%完美是根本不可能实现的，运用百分比来计算敏捷程度根本没有意义。那么怎么判断最初的SCRUM是否成功？SCRUM不是一个机械的流程，它对人和文化的依赖性极高，不是靠表格中的一堆数字前后做做比较就能衡量的。一个简单的、主观的和协作性的问卷调查反而更能帮助我们定量反馈：我们变得更好了么？</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/032.jpg" alt="28"></p></li><li><p>#SCRUM捷径29# 自组织确实非常强大，它没有自上而下的命令和控制权威人士来指挥团队应该采用什么样的具体工作方式；相反，自组织团队由团队自己选择最合适自己的方式工作。但无论怎么宣扬自组织的好处，都不能忽视对边界的考虑。团队成员不可能奇迹般地在某个早晨睡醒后就直接达到自组织的状态。就像植物一样，自组织需要在有鲜明边界的特定环境里种植和培养，否则会有失控的风险，最后爬满邻居的篱笆。这些边界不可能自己形成，也不可能不需要维护，我们需要建立足够合适的检查点，以防不稳定、不确定性和紧张演变成混乱。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/033.jpg" alt="29"></p></li><li><p>#SCRUM捷径30# SCRUM是一个只有少数规则和有限实践的轻量级框架，在Scrum框架的指导下，团队可以大胆尝试，找到适合自己的工作方法。保持透明—&gt; 检查 —&gt; 适应，持续改进，不固步自封，一定会达到预期，甚至渗透到生活的其他领域，成为一种与生俱来的思维方法和行为模式。</p><p> <img src="/images/30%E5%BC%A0%E5%9B%BE%E7%9C%8B%E6%87%82SCRUM%E6%8D%B7%E5%BE%84/034.jpg" alt="30"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
            <tag> SCRUM </tag>
            
            <tag> 敏捷开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大家在寻找的高级程序员到底是什么样子的？</title>
      <link href="/2020/06/02/post/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84%EF%BC%9F/"/>
      <url>/2020/06/02/post/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/xGVrbZT9ZMos0Oq7Dd64vg">大家在寻找的高级程序员到底是什么样子的？</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>我们的中国文化，对“面子”看的特别重，所以你会发现身边到处都是高级XXX，听着倍儿有面子，程序员也不例外。</p><p>但是你真要问每个人，你认为的高级XXX是什么样子的。估计每个人都有不同的回答。</p><p>我还记得在我刚开始从事编程工作的时候，对坐在边上不远的那位我心目中的高级程序员的印象是：</p><blockquote><p>工作至少有6、7年以上，能写一个用起来很方便、看起来很牛逼、但是不太容易让初级人员看懂的框架。</p></blockquote><p>前两天，我把这个问题丢到群里，大家给出的答案中，占比最高的是以下几个。</p><ul><li>有 N 年以上编程经验（大部分都说5年以上）</li><li>有出版过技术图书</li><li>对某领域内对常用框架原理有了解，并且实际使用超过2年</li><li>可以随时随地快速写出常见的一些算法</li><li>至少封装过一个被全局使用的开发框架</li><li>写出来的代码，阅读起来很好理解</li><li>能带领其他人员成功完成项目</li></ul><p>你看，这件事对大家来说就是常说的，“一千个人眼中有一千个哈姆雷特”。</p><p>不过这也正常，毕竟像初级、中级、高级这种高度抽象的词汇，想要得到一个可描述的定义与人交流，必然需要夹杂着个人的主观因素。</p><p>但是很多行业都在这么进行分类，自然有它的道理和好处。</p><p>我觉得<strong>其中最大的一个好处恰好是「主观」的附属品——「弹性」</strong>。</p><p>比如，我现在想招一位高级程序员，面试的时候不管是通过还是不通过，我都有理由来解释我对“高级”的定义。如此一来，我对陌生人的判断就有了更大的「弹性」。</p><p>这其实是面试官的一种权利，也是长期以来面试者总在面试中处于下峰的原因之一。</p><p>事物总是有两面性的，我们在对陌生人弹性的同时，间接的也对内部的人弹性了，会导致内部的一些人才培养出现问题。</p><p>比如，你觉得内部的高级程序员不够，希望能在外部招聘的同时，从内部也培养一些出来。但是此时，你又面临了需要定义什么是“高级”的问题。</p><p>如果没法定义一个能够达成共识的标准，又如何指导培养的方向呢？只能是一句空话。</p><p>长期以往会导致更严重的问题：<strong>真正的高级程序员不够，只能让中级程序员顶上。顶替的时间长了，会让一些中级程序员误以为自己已经达到了高级水平</strong>。</p><p>在我平时的面试中，这样的案例屡见不鲜。网上流传的工作10年 &#x3D; 1年重复10次的段子是真实存在的。</p><p>下面我来聊聊我对「什么是高级程序员」的个人看法，欢迎你和我一起探讨。</p><p>不管是什么行业，什么岗位，在这个高度分工协作的现代社会，所需的能力主要分为三个维度。</p><ul><li>专业能力</li><li>连接能力</li><li>领导能力</li></ul><p>我对程序员在这三个维度的理解大致是以下这个样子。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/001.jpg" alt="能力三维度"></p><p>先卖个关子，文章的最后我会将这三个维度组合起来，你会发现一片新的天地。</p><p>根据这三个维度的水平差异，我们对初级程序员、中级程序员、高级程序员做一个简要的描述。</p><h2 id="01-初级程序员-知道有事要做"><a href="#01-初级程序员-知道有事要做" class="headerlink" title="01 初级程序员 - 知道有事要做"></a>01 初级程序员 - 知道有事要做</h2><p>处在初级阶段的时候，我们的精力大多只会专注在专业能力的提升上。这个时候「领导能力」和「连接能力」是很弱的。</p><p>所以，这个时候哪怕你有强烈的好奇心也无法很好的表达出来，大多只能被动的接受工作安排。</p><p>在这个时期做事情需要依赖一些教程、文档，只能“依样画葫芦”，几乎不能在不借助外部信息的情况下解决之前从未遇到过的新问题，所以百度、Google就成了他们唯一的选择。</p><p>你可以在你的身边观察一下，如果经常有以下这些场景出现，大多是初级程序员的表现。</p><ul><li>很难提出正确的问题，大多会直接问别人这个功能应该怎么做。如果你清楚地向他解释，他就会完全按你说的去做，甚至你写的示例代码都会copy过去。因为在他们的世界里，只有编译成功和编译失败，任务完成和任务未完成。</li><li>经常犯错误，所以会预留过多“弹性时间”，以便有时间在到期日之前重做。所以总会抱怨“没时间”。</li><li>对与自己有工作交集的人员的职能没有认识。比如，对测试人员总是充满敌意的，因为他们发现了错误，“阻碍”了自己完成工作。</li><li>还没注意养成一些好习惯，比如习惯性的提炼重复代码、编写风格一致的代码、自测等等。</li></ul><p>很遗憾，看似很初级的阶段，并不只是刚踏入工作的程序员所属，在实际工作中，也有不少工作多年的人还处在这个阶段。</p><h2 id="02-中级程序员-知道如何做某事"><a href="#02-中级程序员-知道如何做某事" class="headerlink" title="02 中级程序员 - 知道如何做某事"></a>02 中级程序员 - 知道如何做某事</h2><p>对人群按照单一维度进行划分，大多数时候都是符合正态分布的，这里也不例外。中级程序员是我们身边最多的，包括那些不得不穿上高级程序员马甲的中级程序员。</p><p>在这个阶段，有些中级程序员开始具备了一定的「连接能力」，但并不是所有人，主要看是不是拥有了「共同体意识」。</p><p>在专业能力上，中级程序员已经明白了一定的「整体与局部」的概念，但仍然看不到整个“森林”，大多局限在某个模块、流程上。比如，他们会想“这是做敏捷的正确方式吗？”，但不会考虑“这对整个团队、整个公司会产生什么实际的影响？”。</p><p>他们开始注重代码质量，因为担心低质量的代码会影响他们视野中的“整体”。</p><p>但是对于质量的理解还是比较单一。比如，这个时候你会经常听到他们把「性能」挂在嘴边，在他们心目中「性能」的地位是至高无上的，总是想着你这个方案和我的方案哪个性能更好。</p><p>同样可以观察一下周围，中级的开发大多数会这样做事。</p><ul><li>针对一个问题，可以提出多个方案，但是无法做出准确的决策。一旦更权威的人给出了他的选择，中级程序员就会不假思索的按照建议执行。</li><li>可以看出代码中的一些设计模式，但是自己写代码的时候除了单例和工厂，其它的几乎想不到。</li><li>在讨论一些时髦的框架和技术的时候总能聊上几句，但是追问这个框架或者技术有什么缺点，基本说不上来。甚至，草率的在项目中运用上这些时髦的框架和技术，最终导致线上问题频发，不得不让高级程序员来收拾残局。</li><li>能够对自己完成任务所需的时间有准确的评估，但是评估他人的时间不会因人而异，也会以自己作为标准来评估。</li><li>对与自己有工作交集的人员的职能有了一定的认识。比如，会主动寻求测试的配合，帮助自己交付更高质量的项目。</li></ul><p><strong>其实这个阶段是最危险的阶段，因为最可怕的不是无知，而是一知半解</strong>。心理学中的邓宁-克鲁格效应(The Dunning-Kruger Effect)讲述的就是这个问题。</p><p>两位社会心理学家在1999年做的4项研究，证实了下面的这个曲线的存在。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/002.jpg" alt="The Dunning-Kruger Effect"></p><p>在这种状态下，人最容易高估自己，这也是很多导致产生很多“假高级程序员”的原因所在。</p><h2 id="03-高级程序员-知道必须做些什么"><a href="#03-高级程序员-知道必须做些什么" class="headerlink" title="03 高级程序员 - 知道必须做些什么"></a>03 高级程序员 - 知道必须做些什么</h2><p>高级程序员在「专业能力」、「连接能力」、「领导能力」这三个维度都有所建树。因为他们不但可以把从1到100的事情做得很好，也有能力带领其它人完成0到1的事情。</p><p>根据我身边所接触的程序员群体来看，我所认为的高级程序员，他们明白没有什么是完美的，相反，问题、缺点和风险总是存在的。</p><p>他们的决策总是站在为了整体的「平衡」角度去考虑，而不是技术的酷炫或者外界流传的所谓“正确的”技术。</p><p>他们会更多的关心那些不显而易见的东西，如可维护性，可扩展性，易阅读，易调试等等。</p><p>高级程序员就好比社会中的成年人，他们踩过足够多的坑，也填过足够多的坑，已经认清了现实的残酷，寻求适合而不是完美。周到、务实、简单，是他们做事的时候强烈散发出的“味道”。</p><p>可以根据下面的这些场景来看看你身边有多少“有味道”的高级程序员？</p><ul><li>与初级和中级程序员不同，他们抛出问题不是为了正确的做事，而是做正确的事。他们会询问为什么要这样做以及你想要实现什么。当你告诉他们目标是什么后，他们或许会通过暗示这种方式是错误的而另一种更好来做出一些修正；当然，更重要的是还会提供论据说服你。</li><li>因为提前明确了做事的目标，所以在动手做一件事的过程中，他会在关键细节思考有没有更好的方法，甚至是那些不在之前的讨论范围的新尝试。</li><li>他可以轻松地承认他不知道什么，并且向你请教。同时也可以轻松地向他人讲清楚他所知道的事情。</li><li>他们理解合作的人员的职能的作用，不但知道什么时候向谁寻求帮助，还知道自己如何更好的帮助他们。</li><li>困难的事交给他们很放心，因为他们擅长的不是某种技术，而是解决问题的能力。他们总能解决那些之前从未遇到过的新问题，哪怕它们很困难。</li></ul><p>那么，怎么做有助于我们成为高级程序员呢？</p><h2 id="01-关注技术之余还要关注业务"><a href="#01-关注技术之余还要关注业务" class="headerlink" title="01 关注技术之余还要关注业务"></a>01 关注技术之余还要关注业务</h2><p>为什么把它放第一点，因为我觉得这点最重要，是其它项的基础，也最容易做到。但是很多程序员不愿意去做。</p><p>一定要搞清楚业务目标，不搞清楚不开工。相信我，只要是一位合格的leader，一定会不厌其烦的和你说清楚的。</p><p>然后要习惯基于业务目标去分析可能会面临的技术挑战。比如，多少流量，涉及哪些用户角色和功能，复杂度有多大等等。</p><p>再带着下面的「不可能三角」去寻找合适的技术框架、解决方案。尽可能的寻求最优的平衡，而不是走极端。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/003.jpg" alt="不可能三角"></p><p>如果拿捏不准，可以将多个方案各自的优缺点罗列出来，向Leader寻求建议。</p><h2 id="02-“设计”代码而不是“写”代码"><a href="#02-“设计”代码而不是“写”代码" class="headerlink" title="02 “设计”代码而不是“写”代码"></a>02 “设计”代码而不是“写”代码</h2><p>一般人可能拿到需求，就开始写代码了，写着写着由于页面功能越来越多，感觉代码越来越复杂，自己都会觉得难以维护了。</p><p>虽说要做好设计离不开大量的实战经验的积累。但是还是有些方法可以让塑造这个能力的过程更快一些。比如，</p><ol><li>首先就是前面提到的第一点，多关注业务。不了解业务，你啥都设计不出来。或者把马设计成了驴……</li><li>如果某个功能的开发&#x2F;修改，以“天”为工时单位，一定要先画图。具体画什么图，可以参考我之前写的文章：软件开发中会用到的图。</li><li>搞明白每个设计模式的特点和适用场景，注意，不需要把代码怎么写背下来。只要你每次写代码之前扫一眼设计模式的列表，看看有没有适用的。如果有的话，再去“依样画葫芦”按照设计模式去实现，经过时间的积累，慢慢地，你真正掌握的设计模式就越来越多了。这有助于锻炼你的设计能力。</li></ol><h2 id="03-“接”需求之前会先“砍”需求"><a href="#03-“接”需求之前会先“砍”需求" class="headerlink" title="03 “接”需求之前会先“砍”需求"></a>03 “接”需求之前会先“砍”需求</h2><p>要做这点还得依赖于第一点，否则，你提出的“砍”需求建议大多是不会被采纳的。</p><p>很多人在听需求讲解的时候，思考的是，这个功能能不能实现、怎么实现、难不难。大多数的提问也是基于这个思路展开的。</p><p>可能也会提出“砍”需求的问题，但是理由大多是这个实现起来太麻烦了，这个没法实现之类。</p><p>其实只要你时刻保持着“做这个需求的目的是什么”这个问题去思考，“砍”需求会变成一件更容易成功，而且自然而然的事情。</p><h2 id="04-解决一类问题而不是一个问题"><a href="#04-解决一类问题而不是一个问题" class="headerlink" title="04 解决一类问题而不是一个问题"></a>04 解决一类问题而不是一个问题</h2><p>很多人觉得，每天看到bug清完就万事大吉了。哪怕同一个问题在生产环境出现多次，最多也就说一句“不会吧，怎么又出问题了”。</p><p>这种对待问题的方式只会让你越来越忙，因为你的解决问题效率与投入的时间多少是成同比变化的。</p><p>我们要习惯于解决掉一个bug之后，想一下能否通过什么方式找到现有代码中的同类问题，并把它们处理掉。</p><p>甚至是考虑有没有什么办法能够一劳永逸的避免此类问题再次发生，比如封装一个SDK或者写一个组件，尽可能用一种低侵入的通用方式将问题扼杀在摇篮里。不但让自己轻松了，也造福了大家。</p><h2 id="05-遵循KISS原则，写尽可能简单的代码"><a href="#05-遵循KISS原则，写尽可能简单的代码" class="headerlink" title="05 遵循KISS原则，写尽可能简单的代码"></a>05 遵循KISS原则，写尽可能简单的代码</h2><p>KISS 原则：保持简单，愚蠢（Keep it simple, stupid）。</p><p><strong>不单单是程序员，任何化繁为简的能力才是一个人功力深厚的体现，没有之一</strong>。</p><p>越简单，越接近本质。就好比，有的人要用长篇大论才能讲明白一件事，而有的人只要做一个形象的比喻你就懂了。</p><p>这个「简单」指的是整体的简单，而不是通过局部的复杂让另一个局部简单。比如，为了上层的使用更加傻瓜化，底层封装的代码错综复杂、晦涩难懂，这并不是真正的“简单”。</p><p>如果你自认为已经是一个中级或者高级程序员了，那么你回头去看看自己还是初级程序员那会写的代码，就会很容易发现一些显得冗余的代码。</p><p>第二点提到的——「“设计”代码而不是“写”代码」对做好这点有很大的帮助。</p><h2 id="06-选择忍受某些问题"><a href="#06-选择忍受某些问题" class="headerlink" title="06 选择忍受某些问题"></a>06 选择忍受某些问题</h2><p>在人工智能还不能代替我们coding之前，我们永远要亲自面对无穷无尽的、这样那样的问题。</p><p>然而，任何事物都有两面性的，一个方案在解决一个老问题的同时，总会带来新的问题。所以，我们一定要意识到，忍受某些问题是必然的。</p><p>那些你现在看起来很傻逼的设计，可能就是当时的人做出的妥协。</p><p>所以，既然如此，你更应该考虑的是，当前的这个问题现在到底有没有必要解决？值不值得，为什么之前没去解决？它是不是你当前所有待解决问题列表中优先级最高的？</p><h2 id="07-打造自己的“T型”专业技能"><a href="#07-打造自己的“T型”专业技能" class="headerlink" title="07 打造自己的“T型”专业技能"></a>07 打造自己的“T型”专业技能</h2><p>可能很多人都听过“T型人才”的概念，我们程序员在专业技能的打造上也适合用这种模型。</p><p>但是对于“先竖再横”还是“先横再竖”可能不同的人有不同的看法。</p><p>我的观点是，<strong>大多数情况下，先竖再横。特别是某个技术、领域发展的越成熟，越应该如此</strong>。</p><p>因为很多事物的本质是一样的，所以对某一个领域达到非常深入，洞察到一些本质的东西之后，对其它相邻的领域有触类旁通的效果。可以加速自己在「广度」上的扩展。</p><p>不过，「广度」也不是说蜻蜓点水，只知道最表象的“它是什么”。我认为比较合适的程度是，可以不用清楚某个技术具体的使用方式，但得知道它可以解决哪些问题，以及使用成本和潜在的风险，我将这些信息概括为“它怎么样”。</p><h2 id="08-构建自驱动的“闭环”"><a href="#08-构建自驱动的“闭环”" class="headerlink" title="08 构建自驱动的“闭环”"></a>08 构建自驱动的“闭环”</h2><p>很多人都知道闭环的概念，但是它的重要性和价值往往被低估。因为人总是短视的，“聚沙成塔”之类的方式总是不受待见。</p><p>常规的搭建一个闭环的过程大多是这样的。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/004.jpg" alt="闭环"></p><p>这里所说的自驱动的“闭环”是这样的。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/005.jpg" alt="自驱动闭环"></p><p>如何才能变成这样呢？<strong>只要做一件事，尽可能多的对外输出自己的知识</strong>。</p><p>举个我自己的例子，我在2015年那会在项目中开始引入领域驱动设计，并且不断的在内部进行分享它的好处，慢慢地越来越多的项目开始往这个方向走。</p><p>因为前期的不断分享，所以在组织内部，别人对我的人设多了一个“DDD专家”的标签，那么大家遇到有关DDD的问题就会来和我一起探讨。</p><p>越到后面，我已经不用自己主动去寻找这个领域的知识去学习了，因为接收到的外部反馈已经足够多了，它们能够倒逼我往前走。并且这些反馈都是实际的真实场景，此时的信息获取和学习自然能达到「学以致用」的效果。</p><p>说实话，有不少人并不是这么想的，他们想的恰恰相反：“为什么每个人都在问我问题！你自己去学习吧！”。</p><p>所以，当你遇到其他人来请教你的时候，如果恰巧这是你所关注的领域，那么应该去拥抱这个问题而不是排斥它。<strong>因为你是团队里最权威的人，这是你构建自驱动“闭环”的好机会</strong>。错过这一回，下一回不知道得等多久。</p><p>前面文章里说到，我会将「专业技能」、「连接外部的能力」、「领导力」三个维度组合起来给你看。就是下面这个样子。</p><p><img src="/images/%E5%A4%A7%E5%AE%B6%E5%9C%A8%E5%AF%BB%E6%89%BE%E7%9A%84%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84/006.png" alt="能力三维度组合"></p><p>你会发现这里面包含了程序员在进阶后的几个常见岗位。</p><p>可以对号入座一下：D</p><p>好了，我们总结一下。</p><p>这篇我先和你聊了一下在大家眼中高级程序员是什么样子，发现没有特别统一的标准，都是模糊的。这也体现在了几个现实的场景中，比如招聘高级程序员、培养高级程序员上。</p><p>其次，我对初级、中级、高级程序员的特点分别阐述了自己的观点。</p><p>然后，给出了一些帮助大家往高级程序员靠拢的实践思路。</p><p>希望对你有所启发。</p><p>最后，用Martin Fowler的一句话作为结尾：“任何傻瓜都能写计算机能理解的代码，优秀的程序员编写人类能够理解的代码。”</p><blockquote><p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand</p><p>Martin Fowler</p></blockquote><p>希望看到这篇文章的每个程序员最终都能成为头发茂盛的码农：D</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里高级技术专家方法论：如何写复杂业务代码？</title>
      <link href="/2020/06/02/post/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%EF%BC%9F/"/>
      <url>/2020/06/02/post/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA%EF%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247491068&idx=1&sn=2e724face6f7e1df5e81c377c84862a6&chksm=e92920f3de5ea9e574cdc9b183e837aab9eb032694d44f44c61b4637d8e477e0c0de831f7f51&scene=0&xtrack=1&key=32c60e053085a25a672fef3da7f5f0b0666caa58a1f830e928c40b77255c6a73bcf6acd0e1e3cfad8cf2e7c7b0e89095c6e81ea34543fa81fdffbb826f4d9dd7b8f57e090dd84e4e565000490e445567&ascene=14&uin=NzY4MDc0NTEx&devicetype=Windows+10&version=62060833&lang=zh_CN&pass_ticket=YFdki/C91SuYZ9EN4uME0o15SyEjun/i+YMf4Zcr9bJk2Sgt4KHnETaywmWxCaEh">阿里高级技术专家方法论：如何写复杂业务代码？</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>阿里妹导读：张建飞是阿里巴巴高级技术专家，一直在致力于应用架构和代码复杂度的治理。最近，他在看零售通商品域的代码。面对零售通如此复杂的业务场景，如何在架构和代码层面进行应对，是一个新课题。结合实际的业务场景，Frank 沉淀了一套“如何写复杂业务代码”的方法论，在此分享给大家，相信同样的方法论可以复制到大部分复杂业务场景。</p></blockquote><h2 id="一个复杂业务的处理过程"><a href="#一个复杂业务的处理过程" class="headerlink" title="一个复杂业务的处理过程"></a>一个复杂业务的处理过程</h2><h3 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h3><p>简单的介绍下业务背景，零售通是给线下小店供货的B2B模式，我们希望通过数字化重构传统供应链渠道，提升供应链效率，为新零售助力。阿里在中间是一个平台角色，提供的是Bsbc中的service的功能。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/001.jpg" alt="业务背景"></p><p>商品力是零售通的核心所在，一个商品在零售通的生命周期如下图所示：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/002.jpg" alt="商品生命周期"></p><p>在上图中红框标识的是一个运营操作的“上架”动作，这是非常关键的业务操作。上架之后，商品就能在零售通上面对小店进行销售了。因为上架操作非常关键，所以也是商品域中最复杂的业务之一，涉及很多的数据校验和关联操作。<br>针对上架，一个简化的业务流程如下所示：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/003.jpg" alt="商品上架流程"></p><h3 id="过程分解"><a href="#过程分解" class="headerlink" title="过程分解"></a>过程分解</h3><p>像这么复杂的业务，我想应该没有人会写在一个service方法中吧。一个类解决不了，那就分治吧。</p><p>说实话，能想到分而治之的工程师，已经做的不错了，至少比没有分治思维要好很多。我也见过复杂程度相当的业务，连分解都没有，就是一堆方法和类的堆砌。</p><p>不过，这里存在一个问题：即很多同学过度的依赖工具或是辅助手段来实现分解。比如在我们的商品域中，类似的分解手段至少有3套以上，有自制的流程引擎，有依赖于数据库配置的流程处理：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/004.jpg" alt="自制流程引擎"></p><p>本质上来讲，这些辅助手段做的都是一个pipeline的处理流程，没有其它。因此，我建议此处最好保持KISS（Keep It Simple and Stupid），即<strong>最好是什么工具都不要用，次之是用一个极简的Pipeline模式，最差是使用像流程引擎这样的重方法</strong>。</p><p>除非你的应用有极强的流程可视化和编排的诉求，否则我非常不推荐使用流程引擎等工具。第一，它会引入额外的复杂度，特别是那些需要持久化状态的流程引擎；第二，它会割裂代码，导致阅读代码的不顺畅。大胆断言一下，<strong>全天下估计80%对流程引擎的使用都是得不偿失的</strong>。</p><p>回到商品上架的问题，这里问题核心是工具吗？是设计模式带来的代码灵活性吗？显然不是，<strong>问题的核心应该是如何分解问题和抽象问题</strong>，知道金字塔原理的应该知道，此处，我们可以使用结构化分解将问题解构成一个有层级的金字塔结构：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/005.jpg" alt="将问题分解成金字塔结构"></p><p>按照这种分解写的代码，就像一本书，目录和内容清晰明了。</p><p>以商品上架为例，程序的入口是一个上架命令（OnSaleCommand）, 它由三个阶段（Phase）组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Command</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnSaleNormalItemCmdExe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OnSaleContextInitPhase onSaleContextInitPhase;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OnSaleDataCheckPhase onSaleDataCheckPhase;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OnSaleProcessPhase onSaleProcessPhase;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(OnSaleNormalItemCmd cmd)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">OnSaleContext</span> <span class="variable">onSaleContext</span> <span class="operator">=</span> init(cmd);</span><br><span class="line"></span><br><span class="line">        checkData(onSaleContext);</span><br><span class="line"></span><br><span class="line">        process(onSaleContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response.buildSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OnSaleContext <span class="title function_">init</span><span class="params">(OnSaleNormalItemCmd cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> onSaleContextInitPhase.init(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkData</span><span class="params">(OnSaleContext onSaleContext)</span> &#123;</span><br><span class="line">        onSaleDataCheckPhase.check(onSaleContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(OnSaleContext onSaleContext)</span> &#123;</span><br><span class="line">        onSaleProcessPhase.process(onSaleContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个Phase又可以拆解成多个步骤（Step），以OnSaleProcessPhase为例，它是由一系列Step组成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Phase</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnSaleProcessPhase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PublishOfferStep publishOfferStep;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BackOfferBindStep backOfferBindStep;</span><br><span class="line">    <span class="comment">//省略其它step</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(OnSaleContext onSaleContext)</span>&#123;</span><br><span class="line">        <span class="type">SupplierItem</span> <span class="variable">supplierItem</span> <span class="operator">=</span> onSaleContext.getSupplierItem();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成OfferGroupNo</span></span><br><span class="line">        generateOfferGroupNo(supplierItem);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 发布商品</span></span><br><span class="line">        publishOffer(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前后端库存绑定 backoffer域</span></span><br><span class="line">        bindBackOfferStock(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同步库存路由 backoffer域</span></span><br><span class="line">        syncStockRoute(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置虚拟商品拓展字段</span></span><br><span class="line">        setVirtualProductExtension(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发货保障打标 offer域</span></span><br><span class="line">        markSendProtection(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录变更内容ChangeDetail</span></span><br><span class="line">        recordChangeDetail(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同步供货价到BackOffer</span></span><br><span class="line">        syncSupplyPriceToBackOffer(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是组合商品打标，写扩展信息</span></span><br><span class="line">        setCombineProductExtension(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去售罄标</span></span><br><span class="line">        removeSellOutTag(offerId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送领域事件</span></span><br><span class="line">        fireDomainEvent(supplierItem);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭关联的待办事项</span></span><br><span class="line">        closeIssues(supplierItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗，这就是商品上架这个复杂业务的业务流程。需要流程引擎吗？不需要，需要设计模式支撑吗？也不需要。对于这种业务流程的表达，简单朴素的组合方法模式（Composed Method）是再合适不过的了。</p><p>因此，在做过程分解的时候，我建议工程师不要把太多精力放在工具上，放在设计模式带来的灵活性上。而是应该多花时间在对问题分析，结构化分解，最后通过合理的抽象，形成合适的阶段（Phase）和步骤（Step）上。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/006.jpg" alt="过程分解"></p><h3 id="过程分解后的两个问题"><a href="#过程分解后的两个问题" class="headerlink" title="过程分解后的两个问题"></a>过程分解后的两个问题</h3><p>的确，使用过程分解之后的代码，已经比以前的代码更清晰、更容易维护了。不过，还有两个问题值得我们去关注一下：</p><p>★ 领域知识被割裂肢解</p><p>什么叫被肢解？因为我们到目前为止做的都是过程化拆解，导致没有一个聚合领域知识的地方。每个Use Case的代码只关心自己的处理流程，知识没有沉淀。</p><p>相同的业务逻辑会在多个Use Case中被重复实现，导致代码重复度高，即使有复用，最多也就是抽取一个util，代码对业务语义的表达能力很弱，从而影响代码的可读性和可理解性。</p><p>★ 代码的业务表达能力缺失</p><p>试想下，在过程式的代码中，所做的事情无外乎就是取数据–做计算–存数据，在这种情况下，要如何通过代码显性化的表达我们的业务呢？说实话，很难做到，因为我们缺失了模型，以及模型之间的关系。脱离模型的业务表达，是缺少韵律和灵魂的。</p><p>举个例子，在上架过程中，有一个校验是检查库存的，其中对于组合品（CombineBackOffer）其库存的处理会和普通品不一样。原来的代码是这么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isCombineProduct</span> <span class="operator">=</span> supplierItem.getSign().isCombProductQuote();</span><br><span class="line"></span><br><span class="line"><span class="comment">// supplier.usc warehouse needn&#x27;t check</span></span><br><span class="line"><span class="keyword">if</span> (WarehouseTypeEnum.isAliWarehouse(supplierItem.getWarehouseType())) &#123;</span><br><span class="line">    <span class="comment">// quote warehosue check</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtil.isEmpty(supplierItem.getWarehouseIdList()) &amp;&amp; !isCombineProduct) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.makeFault(ServiceExceptionCode.SYSTEM_ERROR, <span class="string">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// inventory amount check</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">sellableAmount</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isCombineProduct) &#123;</span><br><span class="line">        sellableAmount = normalBiz.acquireSellableAmount(supplierItem.getBackOfferId(), supplierItem.getWarehouseIdList());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//组套商品</span></span><br><span class="line">        <span class="type">OfferModel</span> <span class="variable">backOffer</span> <span class="operator">=</span> backOfferQueryService.getBackOffer(supplierItem.getBackOfferId());</span><br><span class="line">        <span class="keyword">if</span> (backOffer != <span class="literal">null</span>) &#123;</span><br><span class="line">            sellableAmount = backOffer.getOffer().getTradeModel().getTradeCondition().getAmountOnSale();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sellableAmount &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.makeFault(ServiceExceptionCode.SYSTEM_ERROR, <span class="string">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.\r[id:&quot;</span> + supplierItem.getId() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，如果我们在系统中引入领域模型之后，其代码会简化为如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(backOffer.isCloudWarehouse())&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (backOffer.isNonInWarehouse())&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;亲，不能发布Offer，请联系仓配运营人员，建立品仓关系！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (backOffer.getStockAmount() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;亲，实仓库存必须大于0才能发布，请确认已补货.\r[id:&quot;</span> + backOffer.getSupplierItem().getCspuCode() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有没有发现，使用模型的表达要清晰易懂很多，而且也不需要做关于组合品的判断了，因为我们在系统中引入了更加贴近现实的对象模型（CombineBackOffer继承BackOffer），通过对象的多态可以消除我们代码中的大部分的if-else。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/007.jpg" alt="对象模型"></p><h3 id="过程分解-对象模型"><a href="#过程分解-对象模型" class="headerlink" title="过程分解+对象模型"></a>过程分解+对象模型</h3><p>通过上面的案例，我们可以看到<strong>有过程分解要好于没有分解，过程分解+对象模型要好于仅仅是过程分解</strong>。对于商品上架这个case，如果采用过程分解+对象模型的方式，最终我们会得到一个如下的系统结构：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/008.jpg" alt="系统结构"></p><h2 id="写复杂业务的方法论"><a href="#写复杂业务的方法论" class="headerlink" title="写复杂业务的方法论"></a>写复杂业务的方法论</h2><p>通过上面案例的讲解，我想说，我已经交代了复杂业务代码要怎么写：<strong>即自上而下的结构化分解+自下而上的面向对象分析</strong>。</p><p>接下来，让我们把上面的案例进行进一步的提炼，形成一个可落地的方法论，从而可以泛化到更多的复杂业务场景。</p><h3 id="上下结合"><a href="#上下结合" class="headerlink" title="上下结合"></a>上下结合</h3><p>所谓上下结合，是指我们要<strong>结合自上而下的过程分解和自下而上的对象建模</strong>，螺旋式的构建我们的应用系统。这是一个动态的过程，两个步骤可以交替进行、也可以同时进行。</p><p>这两个步骤是相辅相成的，<strong>上面的分析可以帮助我们更好的理清模型之间的关系，而下面的模型表达可以提升我们代码的复用度和业务语义表达能力</strong>。</p><p>其过程如下图所示：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/009.jpg" alt="上下结合过程"></p><p>使用这种上下结合的方式，我们就有可能在面对任何复杂的业务场景，都能写出干净整洁、易维护的代码。</p><h3 id="能力下沉"><a href="#能力下沉" class="headerlink" title="能力下沉"></a>能力下沉</h3><p>一般来说实践DDD有两个过程：</p><p>★ 套概念阶段：了解了一些DDD的概念，然后在代码中“使用”Aggregation Root，Bounded Context，Repository等等这些概念。更进一步，也会使用一定的分层策略。然而这种做法一般对复杂度的治理并没有多大作用。</p><p>★ 融会贯通阶段：术语已经不再重要，理解DDD的本质是统一语言、边界划分和面向对象分析的方法。</p><p>大体上而言，我大概是在1.7的阶段，因为有一个问题一直在困扰我，就是哪些能力应该放在Domain层，是不是按照传统的做法，将所有的业务都收拢到Domain上，这样做合理吗？说实话，这个问题我一直没有想清楚。</p><p>因为在现实业务中，很多的功能都是用例特有的（Use case specific）的，如果“盲目”的使用Domain收拢业务并不见得能带来多大的益处。相反，这种收拢会导致Domain层的膨胀过厚，不够纯粹，反而会影响复用性和表达能力。</p><p>鉴于此，我最近的思考是我们应该采用<strong>能力下沉</strong>的策略。</p><p>所谓的能力下沉，是指我们不强求一次就能设计出Domain的能力，也不需要强制要求把所有的业务功能都放到Domain层，而是采用实用主义的态度，即只对那些需要在多个场景中需要被复用的能力进行抽象下沉，而不需要复用的，就暂时放在App层的Use Case里就好了。</p><blockquote><p>注：Use Case是《架构整洁之道》里面的术语，简单理解就是响应一个Request的处理过程。</p></blockquote><p>通过实践，<strong>我发现这种循序渐进的能力下沉策略，应该是一种更符合实际、更敏捷的方法。因为我们承认模型不是一次性设计出来的，而是迭代演化出来的</strong>。</p><p>下沉的过程如下图所示，假设两个use case中，我们发现uc1的step3和uc2的step1有类似的功能，我们就可以考虑让其下沉到Domain层，从而增加代码的复用性。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/010.jpg" alt="能力下沉"></p><p>指导下沉有两个关键指标：</p><ul><li>复用性</li><li>内聚性</li></ul><p>复用性是告诉我们When（什么时候该下沉了），即有重复代码的时候。内聚性是告诉我们How（要下沉到哪里），功能有没有内聚到恰当的实体上，有没有放到合适的层次上（因为Domain层的能力也是有两个层次的，一个是Domain Service这是相对比较粗的粒度，另一个是Domain的Model这个是最细粒度的复用）。</p><p>比如，在我们的商品域，经常需要判断一个商品是不是最小单位，是不是中包商品。像这种能力就非常有必要直接挂载在Model上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CSPU</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String baseCode;</span><br><span class="line">    <span class="comment">//省略其它属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单品是否为最小单位。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMinimumUnit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.equals(code, baseCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对中包的特殊处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMidPackage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.equals(code, midPackageCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前，因为老系统中没有领域模型，没有CSPU这个实体。你会发现像判断单品是否为最小单位的逻辑是以StringUtils.equals(code, baseCode)的形式散落在代码的各个角落。这种代码的可理解性是可想而知的，至少我在第一眼看到这个代码的时候，是完全不知道什么意思。</p><h2 id="业务技术要怎么做"><a href="#业务技术要怎么做" class="headerlink" title="业务技术要怎么做"></a>业务技术要怎么做</h2><p>写到这里，我想顺便回答一下很多业务技术同学的困惑，也是我之前的困惑：即业务技术到底是在做业务，还是做技术？业务技术的技术性体现在哪里？</p><p>通过上面的案例，我们可以看到业务所面临的复杂性并不亚于底层技术，要想写好业务代码也不是一件容易的事情。业务技术和底层技术人员唯一的区别是他们所面临的问题域不一样。</p><p>业务技术面对的问题域变化更多、面对的人更加庞杂。而底层技术面对的问题域更加稳定、但对技术的要求更加深。比如，如果你需要去开发Pandora，你就要对Classloader有更加深入的了解才行。</p><p>但是，不管是业务技术还是底层技术人员，有一些思维和能力都是共通的。比如，<strong>分解问题的能力，抽象思维，结构化思维等等</strong>。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E9%AB%98%E7%BA%A7%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E6%96%B9%E6%B3%95%E8%AE%BA_%E5%A6%82%E4%BD%95%E5%86%99%E5%A4%8D%E6%9D%82%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81/011.jpg" alt="思维和能力"></p><p>用我的话说就是：<strong>“做不好业务开发的，也做不好技术底层开发，反之亦然”。业务开发一点都不简单，只是我们很多人把它做“简单”了</strong>。</p><p>因此，如果从变化的角度来看，业务技术的难度一点不逊色于底层技术，其面临的挑战甚至更大。因此，我想对广大的从事业务技术开发的同学说：沉下心来，夯实自己的基础技术能力、OO能力、建模能力… 不断提升抽象思维、结构化思维、思辨思维… 持续学习精进，写好代码。我们可以在业务技术岗做的很”技术“！。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章是我最近思考的一些总结，大部分思想是继承自我原来写的COLA架构，该架构已经开源，目前在集团内外都有比较广泛的使用。</p><p>这一篇主要是在COLA的基础上，针对复杂业务场景，做了进一步的架构落地。个人感觉可以作为COLA的最佳实践来使用。</p><p>另外，本文讨论的问题之大和篇幅之短是不成正比的。原因是我假定你已经了解了一些DDD和应用架构的基础知识。如果觉得在理解上有困难，我建议可以先看下《领域驱动设计》和《架构整洁之道》这两本书。</p><p>如果没有那么多时间，也可以快速浏览下我之前的两篇文章应用架构之道 和 领域建模去知晓一下我之前的思想脉络。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>降低软件复杂性的一般原则和方法</title>
      <link href="/2020/06/02/post/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2020/06/02/post/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/-Gu_XkY2bZq9Lf2ZCJZPtQ">降低软件复杂性的一般原则和方法</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>追求卓越、学习成长是美团的基因，因此工作之余，多读书、读好书蔚然成风——我们有专门的P2P图书馆、不时的好书推荐、图书打卡交流群和各种丰富读书活动……</p><p>本文是作者阅读John Ousterhout的《A Philosophy of Software Design》之后，结合自己的工作经验，对“降低复杂性”做了详细总结，希望给读者朋友们带来不一样的思路。</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>斯坦福教授、Tcl语言发明者John Ousterhout 的著作《A Philosophy of Software Design》[1]，自出版以来，好评如潮。按照IT图书出版的惯例，如果冠名为“实践”，书中内容关注的是某项技术的细节和技巧；冠名为“艺术”，内容可能是记录优秀作品的设计过程和经验；而冠名为“哲学”，则是一些通用的原则和方法论，这些原则方法论串起来，能够形成一个体系。正如“知行合一”、“世界是由原子构成的”、“我思故我在”，这些耳熟能详的句子能够一定程度上代表背后的人物和思想。用一句话概括《A Philosophy of Software Design》，软件设计的核心在于降低复杂性。</p><p>本篇文章是围绕着“降低复杂性”这个主题展开的，很多重要的结论来源于John Ousterhout，笔者觉得很有共鸣，就做了一些相关话题的延伸、补充了一些实例。虽说是“一般原则”，也不意味着是绝对的真理，整理出来，只是为了引发大家对软件设计的思考。</p><h2 id="二、如何定义复杂性"><a href="#二、如何定义复杂性" class="headerlink" title="二、如何定义复杂性"></a>二、如何定义复杂性</h2><p>关于复杂性，尚无统一的定义，从不同的角度可以给出不同的答案。可以用数量来度量，比如芯片集成的电子器件越多越复杂（不一定对）；按层次性[2]度量，复杂度在于层次的递归性和不可分解性。在信息论中，使用熵来度量信息的不确定性。</p><p>John Ousterhout选择从认知的负担和开发工作量的角度来定义软件的复杂性，并且给出了一个复杂度量公式：</p><p><img src="/images/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/001.png" alt="复杂度量公式"></p><p>子模块的复杂度Cp乘以该模块对应的开发时间权重值tp，累加后得到系统的整体复杂度C。系统整体的复杂度并不简单等于所有子模块复杂度的累加，还要考虑开发维护该模块所花费的时间在整体时间中的占比（对应权重值tp）。也就是说，即使某个模块非常复杂，如果很少使用或修改，也不会对系统的整体复杂度造成大的影响。</p><p>子模块的复杂度Cp是一个经验值，它关注几个现象：</p><ul><li><strong>修改扩散</strong>，修改时有连锁反应。</li><li><strong>认知负担</strong>，开发人员需要多长时间来理解功能模块。</li><li><strong>不可知</strong>（Unknown Unknowns），开发人员在接到任务时，不知道从哪里入手。</li></ul><p>造成复杂的原因一般是代码依赖和晦涩（Obscurity）。其中，依赖是指某部分代码不能被独立地修改和理解，必定会牵涉到其他代码。代码晦涩，是指从代码中难以找到重要信息。</p><h2 id="三、解决复杂性的一般原则"><a href="#三、解决复杂性的一般原则" class="headerlink" title="三、解决复杂性的一般原则"></a>三、解决复杂性的一般原则</h2><p>首先，互联网行业的软件系统，很难一开始就做出完美的设计，通过一个个功能模块衍生迭代，系统才会逐步成型。对于现存的系统，也很难通过一个大动作，一劳永逸地解决所有问题。系统设计是需要持续投入的工作，通过细节的积累，最终得到一个完善的系统。因此，好的设计是日拱一卒的结果，在日常工作中要重视设计和细节的改进。</p><p>其次，专业化分工和代码复用促成了软件生产率的提升。比如硬件工程师、软件工程师（底层、应用、不同编程语言）可以在无需了解对方技术背景的情况下进行合作开发；同一领域服务可以支撑不同的上层应用逻辑等等。其背后的思想，无非是通过将系统分成若干个水平层、明确每一层的角色和分工，来降低单个层次的复杂性。同时，每个层次只要给相邻层提供一致的接口，可以用不同的方法实现，这就为软件重用提供了支持。分层是解决复杂性问题的重要原则。</p><p>第三，与分层类似，分模块是从垂直方向来分解系统。分模块最常见的应用场景，是如今广泛流行的微服务。分模块降低了单模块的复杂性，但是也会引入新的复杂性，例如模块与模块的交互，后面的章节会讨论这个问题。这里，我们将第三个原则确定为分模块。</p><p>最后，代码能够描述程序的工作流程和结果，却很难描述开发人员的思路，而注释和文档可以。此外，通过注释和文档，开发人员在不阅读实现代码的情况下，就可以理解程序的功能，注释间接促成了代码抽象。好的注释能够帮助解决软件复杂性问题，尤其是认知负担和不可知问题（Unknown Unknowns）。</p><h2 id="四、解决复杂性之日拱一卒"><a href="#四、解决复杂性之日拱一卒" class="headerlink" title="四、解决复杂性之日拱一卒"></a>四、解决复杂性之日拱一卒</h2><h3 id="4-1-拒绝战术编程"><a href="#4-1-拒绝战术编程" class="headerlink" title="4.1 拒绝战术编程"></a>4.1 拒绝战术编程</h3><p>战术编程致力于完成任务，新增加特性或者修改Bug时，能解决问题就好。这种工作方式，会逐渐增加系统的复杂性。如果系统复杂到难以维护时，再去重构会花费大量的时间，很可能会影响新功能的迭代。</p><p>战略编程，是指重视设计并愿意投入时间，短时间内可能会降低工作效率，但是长期看，会增加系统的可维护性和迭代效率。</p><p><img src="/images/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/002.png" alt="战术编程与战略编程"></p><p>设计系统时，很难在开始阶段就面面俱到。好的设计应该体现在一个个小的模块上，修改Bug时，也应该抱着设计新系统的心态，完工后让人感觉不到“修补”的痕迹。经过累积，最终形成一个完善的系统。从长期看，对于中大型的系统，将日常开发时间的10%-15%用于设计是值得的。有一种观点认为，创业公司需要追求业务迭代速度和节省成本，可以容忍糟糕的设计，这是用错误的方法去追求正确的目标。降低开发成本最有效的方式是雇佣优秀的工程师，而不是在设计上做妥协。</p><h3 id="4-2-设计两次"><a href="#4-2-设计两次" class="headerlink" title="4.2 设计两次"></a>4.2 设计两次</h3><p>为一个类、模块或者系统的设计提供两套或更多方案，有利于我们找到最佳设计。以我们日常的技术方案设计为例，技术方案本质上需要回答两个问题，其一，为什么该方案可行？其二，在已有资源限制下，为什么该方案是最优的？为了回答第一个问题，我们需要在技术方案里补充架构图、接口设计和时间人力估算。而要回答第二个问题，需要我们在关键点或争议处提供二到三种方案，并给出建议方案，这样才有说服力。</p><p>通常情况下，我们会花费很多的时间准备第一个问题，而忽略第二个问题。其实，回答好第二个问题很重要，大型软件的设计已经复杂到没人能够一次就想到最佳方案，一个仅仅“可行”的方案，可能会给系统增加额外的复杂性。对聪明人来说，接受这点更困难，因为他们习惯于“一次搞定问题”。但是聪明人迟早也会碰到自己的瓶颈，在低水平问题上徘徊，不如花费更多时间思考，去解决真正有挑战性的问题。</p><h2 id="五、解决复杂性之分层"><a href="#五、解决复杂性之分层" class="headerlink" title="五、解决复杂性之分层"></a>五、解决复杂性之分层</h2><h3 id="5-1-层次和抽象"><a href="#5-1-层次和抽象" class="headerlink" title="5.1 层次和抽象"></a>5.1 层次和抽象</h3><p>软件系统由不同的层次组成，层次之间通过接口来交互。在严格分层的系统里，内部的层只对相邻的层次可见，这样就可以将一个复杂问题分解成增量步骤序列。由于每一层最多影响两层，也给维护带来了很大的便利。分层系统最有名的实例是TCP&#x2F;IP网络模型。</p><p><img src="/images/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/003.png" alt="TCP/IP网络模型"></p><p>在分层系统里，每一层应该具有不同的抽象。TCP&#x2F;IP模型中，应用层的抽象是用户接口和交互；传输层的抽象是端口和应用之间的数据传输；网络层的抽象是基于IP的寻址和数据传输；链路层的抽象是适配和虚拟硬件设备。如果不同的层具有相同的抽象，可能存在层次边界不清晰的问题。</p><h3 id="5-2-复杂性下沉"><a href="#5-2-复杂性下沉" class="headerlink" title="5.2 复杂性下沉"></a>5.2 复杂性下沉</h3><p>不应该让用户直面系统的复杂性，即便有额外的工作量，开发人员也应当尽量让用户使用起来更简单。如果一定要在某个层次处理复杂性，这个层次越低越好。举个例子，Thrift接口调用时，数据传输失败需要引入自动重试机制，重试的策略显然在Thrift内部封装更合适，开放给用户（下游开发人员）会增加额外的使用负担。与之类似的是系统里随处可见的配置参数（通常写在XML文件里），在编程中应当尽量避免这种情况，用户（下游开发人员）一般很难决定哪个参数是最优的，如果一定要开放参数配置，最好给定一个默认值。</p><p>复杂性下沉，并不是说把所有功能下移到一个层次，过犹不及。如果复杂性跟下层的功能相关，或者下移后，能大大下降其他层次或整体的复杂性，则下移。</p><h3 id="5-3-异常处理"><a href="#5-3-异常处理" class="headerlink" title="5.3 异常处理"></a>5.3 异常处理</h3><p>异常和错误处理是造成软件复杂的罪魁祸首之一。有些开发人员错误的认为处理和上报的错误越多越好，这会导致过度防御性的编程。如果开发人员捕获了异常并不知道如何处理，直接往上层扔，这就违背了封装原则。</p><p>降低复杂度的一个原则就是尽可能减少需要处理异常的可能性。而最佳实践就是确保错误终结，例如删除一个并不存在的文件，与其上报文件不存在的异常，不如什么都不做。确保文件不存在就好了，上层逻辑不但不会被影响，还会因为不需要处理额外的异常而变得简单。</p><h2 id="六、解决复杂性之分模块"><a href="#六、解决复杂性之分模块" class="headerlink" title="六、解决复杂性之分模块"></a>六、解决复杂性之分模块</h2><p>分模块是解决复杂性的重要方法。理想情况下，模块之间应该是相互隔离的，开发人员面对具体的任务，只需要接触和了解整个系统的一小部分，而无需了解或改动其他模块。</p><h3 id="6-1-深模块和浅模块"><a href="#6-1-深模块和浅模块" class="headerlink" title="6.1 深模块和浅模块"></a>6.1 深模块和浅模块</h3><p>深模块（Deep Module）指的是拥有强大功能和简单接口的模块。深模块是抽象的最佳实践，通过排除模块内部不重要的信息，让用户更容易理解和使用。</p><p><img src="/images/%E9%99%8D%E4%BD%8E%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E6%80%A7%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%96%B9%E6%B3%95/004.jpg" alt="深模块与浅模块"></p><p>Unix操作系统文件I&#x2F;O是典型的深模块，以Open函数为例，接口接受文件名为参数，返回文件描述符。但是这个接口的背后，是几百行的实现代码，用来处理文件存储、权限控制、并发控制、存储介质等等，这些对用户是不可见的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> flags, <span class="type">mode_t</span> permissions)</span>;</span><br></pre></td></tr></table></figure><p>与深模块相对的是浅模块（Shallow Module），功能简单，接口复杂。通常情况下，浅模块无助于解决复杂性。因为他们提供的收益（功能）被学习和使用成本抵消了。以Java I&#x2F;O为例，从I&#x2F;O中读取对象时，需要同时创建三个对象FileInputStream、BufferedInputStream、ObjectInputStream，其中前两个创建后不会被直接使用，这就给开发人员造成了额外的负担。默认情况下，开发人员无需感知到BufferedInputStream，缓冲功能有助于改善文件I&#x2F;O性能，是个很有用的特性，可以合并到文件I&#x2F;O对象里。假如我们想放弃缓冲功能，文件I&#x2F;O也可以设计成提供对应的定制选项。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fileStream);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bufferedStream);</span><br></pre></td></tr></table></figure><p>关于浅模块有一些争议，大多数情况是因为浅模块是不得不接受的既定事实，而不见得是因为合理性。当然也有例外，比如领域驱动设计里的防腐层，系统在与外部系统对接时，会单独建立一个服务或模块去适配，用来保证原有系统技术栈的统一和稳定性。</p><h3 id="6-2-通用和专用"><a href="#6-2-通用和专用" class="headerlink" title="6.2 通用和专用"></a>6.2 通用和专用</h3><p>设计新模块时，应该设计成通用模块还是专用模块？一种观点认为通用模块满足多种场景，在未来遇到预期外的需求时，可以节省时间。另外一种观点则认为，未来的需求很难预测，没必要引入用不到的特性，专用模块可以快速满足当前的需求，等有后续需求时再重构成通用的模块也不迟。</p><p>以上两种思路都有道理，实际操作的时候可以采用两种方式各自的优点，即在功能实现上满足当前的需求，便于快速实现；接口设计通用化，为未来留下余量。举个例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backspace</span><span class="params">(Cursor cursor)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Cursor cursor)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteSelection</span><span class="params">(Selection selection)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上三个函数可以合并为一个更通用的函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Position start, Position end)</span>;</span><br></pre></td></tr></table></figure><p>设计通用性接口需要权衡，既要满足当前的需求，同时在通用性方面不要过度设计。一些可供参考的标准：</p><ul><li>满足当前需求最简单的接口是什么？在不减少功能的前提下，减少方法的数量，意味着接口的通用性提升了。</li><li>接口使用的场景有多少？如果接口只有一个特定的场景，可以将多个这样的接口合并成通用接口。</li><li>满足当前需求情况下，接口的易用性如何？如果接口很难使用，意味着我们可能过度设计了，需要拆分。</li></ul><h3 id="6-3-信息隐藏"><a href="#6-3-信息隐藏" class="headerlink" title="6.3 信息隐藏"></a>6.3 信息隐藏</h3><p>信息隐藏是指，程序的设计思路以及内部逻辑应当包含在模块内部，对其他模块不可见。如果一个模块隐藏了很多信息，说明这个模块在提供很多功能的同时又简化了接口，符合前面提到的深模块理念。软件设计领域有个技巧，定义一个“大”类有助于实现信息隐藏。这里的“大”类指的是，如果要实现某功能，将该功能相关的信息都封装进一个类里面。</p><p>信息隐藏在降低复杂性方面主要有两个作用：一是简化模块接口，将模块功能以更简单、更抽象的方式表现出来，降低开发人员的认知负担；二是减少模块间的依赖，使得系统迭代更轻量。举个例子，如何从B+树中存取信息是一些数据库索引的核心功能，但是数据库开发人员将这些信息隐藏了起来，同时提供简单的对外交互接口，也就是SQL脚本，使得产品和运营同学也能很快地上手。并且，因为有足够的抽象，数据库可以在保持外部兼容的情况下，将索引切换到散列或其他数据结构。</p><p>与信息隐藏相对的是信息暴露，表现为：设计决策体现在多个模块，造成不同模块间的依赖。举个例子，两个类能处理同类型的文件。这种情况下，可以合并这两个类，或者提炼出一个新类（参考《重构》[3]一书）。工程师应当尽量减少外部模块需要的信息量。</p><h3 id="6-4-拆分和合并"><a href="#6-4-拆分和合并" class="headerlink" title="6.4 拆分和合并"></a>6.4 拆分和合并</h3><p>两个功能，应该放在一起还是分开？“不管黑猫白猫”，能降低复杂性就好。这里有一些可以借鉴的设计思路：</p><ul><li>共享信息的模块应当合并，比如两个模块都依赖某个配置项。</li><li>可以简化接口时合并，这样可以避免客户同时调用多个模块来完成某个功能。</li><li>可以消除重复时合并，比如抽离重复的代码到一个单独的方法中。</li><li>通用代码和专用代码分离，如果模块的部分功能可以通用，建议和专用部分分离。举个例子，在实际的系统设计中，我们会将专用模块放在上层，通用模块放在下层以供复用。</li></ul><h2 id="七、解决复杂性之注释"><a href="#七、解决复杂性之注释" class="headerlink" title="七、解决复杂性之注释"></a>七、解决复杂性之注释</h2><p>注释可以记录开发人员的设计思路和程序功能，降低开发人员的认知负担和解决不可知（Unkown Unkowns）问题，让代码更容易维护。通常情况下，在程序的整个生命周期里，编码只占了少部分，大量时间花在了后续的维护上。有经验的工程师懂得这个道理，通常也会产出更高质量的注释和文档。</p><p>注释也可以作为系统设计的工具，如果只需要简单的注释就可以描述模块的设计思路和功能，说明这个模块的设计是良好的。另一方面，如果模块很难注释，说明模块没有好的抽象。</p><h3 id="7-1-注释的误区"><a href="#7-1-注释的误区" class="headerlink" title="7.1 注释的误区"></a>7.1 注释的误区</h3><p>关于注释，很多开发者存在一些认识上的误区，也是造成大家不愿意写注释的原因。比如“好代码是自注释的”、“没有时间”、“现有的注释都没有用，为什么还要浪费时间”等等。这些观点是站不住脚的。“好代码是自注释的”只在某些场景下是合理的，比如为变量和方法选择合适的名称，可以不用单独注释。但是更多的情况，代码很难体现开发人员的设计思路。此外，如果用户只能通过读代码来理解模块的使用，说明代码里没有抽象。好的注释可以极大地提升系统的可维护性，获取长期的效率，不存在“没有时间”一说。注释也是一种可以习得的技能，一旦习得，就可以在后续的工作中应用，这就解决了“注释没有用”的问题。</p><h3 id="7-2-使用注释提升系统可维护性"><a href="#7-2-使用注释提升系统可维护性" class="headerlink" title="7.2 使用注释提升系统可维护性"></a>7.2 使用注释提升系统可维护性</h3><p>注释应当能提供代码之外额外的信息，重视What和Why，而不是代码是如何实现的（How），最好不要简单地使用代码中出现过的单词。<br>根据抽象程度，注释可以分为低层注释和高层注释，低层次的注释用来增加精确度，补充完善程序的信息，比如变量的单位、控制条件的边界、值是否允许为空、是否需要释放资源等。高层次注释抛弃细节，只从整体上帮助读者理解代码的功能和结构。这种类型的注释更好维护，如果代码修改不影响整体的功能，注释就无需更新。在实际工作中，需要兼顾细节和抽象。低层注释拆散与对应的实现代码放在一起，高层注释一般用于描述接口。</p><p>注释先行，注释应该作为设计过程的一部分，写注释最好的时机是在开发的开始环节，这不仅会产生更好的文档，也会帮助产生好的设计，同时减少写文档带来的痛苦。开发人员推迟写注释的理由通常是：代码还在修改中，提前写注释到时候还得再改一遍。这样的话就会衍生两个问题：</p><ul><li>首先，推迟注释通常意味着根本就没有注释。一旦决定推迟，很容易引发连锁反应，等到代码稳定后，也不会有注释这回事。这时候再想添加注释，就得专门抽出时间，客观条件可能不会允许这么做。</li><li>其次，就算我们足够自律抽出专门时间去写注释，注释的质量也不会很好。我们潜意识中觉得代码已经写完了，急于开展下一个项目，只是象征性地添加一些注释，无法准确复现当时的设计思路。</li></ul><p>避免重复的注释。如果有重复注释，开发人员很难找到所有的注释去更新。解决方法是，可以找到醒目的地方存放注释文档，然后在代码处注明去查阅对应文档的地址。如果程序已经在外部文档中注释过了，不要在程序内部再注释了，添加注释的引用就可以了。</p><p>注释属于代码，而不是提交记录。一种错误的做法是将功能注释放在提交记录里，而不是放在对应代码文件里。因为开发人员通常不会去代码提交记录里去查看程序的功能描述，很不方便。</p><h3 id="7-3-使用注释改善系统设计"><a href="#7-3-使用注释改善系统设计" class="headerlink" title="7.3 使用注释改善系统设计"></a>7.3 使用注释改善系统设计</h3><p>良好的设计基础是提供好的抽象。在开始编码前编写注释，可以帮助我们提炼模块的核心要素：模块或对象中最重要的功能和属性。这个过程促进我们去思考，而不是简单地堆砌代码。另一方面，注释也能够帮助我们检查自己的模块设计是否合理，正如前文中提到，深模块提供简单的接口和强大的功能，如果接口注释冗长复杂，通常意味着接口也很复杂；注释简单，意味着接口也很简单。在设计的早期注意和解决这些问题，会为我们带来长期的收益。</p><h2 id="八、后记"><a href="#八、后记" class="headerlink" title="八、后记"></a>八、后记</h2><p>John Ousterhout累计写过25万行代码，是3个操作系统的重要贡献者，这些原则可以视为作者编程经验的总结。有经验的工程师看到这些观点会有共鸣，一些著作如《代码大全》、《领域驱动设计》也会有类似的观点。所以本文中提到的原则和方法具有一定实操和指导价值。对于很难有定论的问题，也可以在实践中去探索。</p><p>关于原则和方法论，既不必刻意拔高，也不要嗤之以鼻。指导实践的不是更多的实践，而是实践后的总结和思考。应用原则和方法论实质是借鉴已有的经验，可以减少我们自行摸索的时间。探索新的方法可以帮助我们适应新的场景，但是新方法本身需要经过时间检验。</p><h2 id="九、参考文档"><a href="#九、参考文档" class="headerlink" title="九、参考文档"></a>九、参考文档</h2><p>[1] John Ousterhout. A philosophy of software design. Yaknyam Press, 2018.</p><p>[2] 梅拉尼·米歇尔. 复杂. 湖南科学技术出版社, 2016.</p><p>[3] Martin Fowler. Refactoring: Improving the Design of Existing Code (2nd Edition) . Addison-Wesley Signature Series, 2018.</p><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p>政华，顺谱，陶鑫，美团打车调度系统工程团队工程师。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术团队管理</title>
      <link href="/2020/05/06/post/%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
      <url>/2020/05/06/post/%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDYxODQ3Mg==&mid=2247483680&idx=1&sn=767dc4e6e41dbea97a33a426eacadb6b&chksm=ec1c6c27db6be531c8e47db7996688c049ffceec5b376846f833a26032c808b06f7cfb3af120&scene=21#wechat_redirect">技术团队管理（上）</a> <mark class="hl-label green">转载</mark> ，<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDYxODQ3Mg==&mid=2247483692&idx=1&sn=73cc7b3fb9f3dce0bb5f33bbe60bd834&chksm=ec1c6c2bdb6be53dcbc5bc09242f9e2c1beb7802df12676c2c9e90db692bf2a68941b88d4bd6&scene=21#wechat_redirect">技术团队管理（下）</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>对于非创业阶段的公司，业务相对稳定，公司发展的目标、计划也比较明确，公司一般很重视产品技术团队的建设；在这样的环境下，研发团队应该如何发展呢？笔者准备从以下几个角度，来探讨技术团队的综合管理。</p><ul><li>招聘</li><li>人员培养</li><li>团队文化、氛围</li><li>技术栈、技术架构</li><li>项目管理</li><li>晋升</li></ul><h2 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h2><p>每个公司对引入合适的人才，都逐渐形成自己的人才观和人事方面的方法论。大部分团队的负责人和leader，也接受过公司关于人才招聘方面的培训。我们如何去寻找到合适的人才呢？请看下面这张图。【来自百度百科：人才冰山模型】</p><p><img src="/images/%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/%E4%BA%BA%E6%89%8D%E5%86%B0%E5%B1%B1%E6%A8%A1%E5%9E%8B.webp" alt="人才冰山模型"></p><p>对一个候选人，我们的面试过程，也是从这几个方面进行考察。稍微和上面有一些差异。</p><p><strong>知识：</strong> 在专业知识方面考察时，需要注意的是让至少高于候选人两个级别的人来面试，从而能准确的评价候选人的知识。如果让低P的人来面试，很可能会因为面试官没听懂候选人的回答，而早早误杀掉。</p><p>对于技术团队，在知识上，一般考察的是算法、数据结构、常用技术栈和数据库等方面的、有一致理解的“知识”。</p><p><strong>经验：</strong> 在考察一个人的经验时，首先看的是他的简历，这样能快速的对一个人的经验做出判断。这个“速读”不能很深入的理解一个人的实际深度；做过一个项目、使用过一个技术，做的好不好、专业不专业，是看不出来的。</p><p>在面试过程中，可以挑一两个中型的项目，让候选人用十分钟来说一下当时做的情况，使用的主要的框架、部分难点攻关的细节。</p><p><strong>素质：</strong> 这里是很容易发生误判的一个环节。不同的面试官面试同一个人，对一个人的素质判断可能会差异很大。这方面我使用的方法，是聚焦一下关键素质，包括：智商（逻辑思维能力、结构化思维能力）、情商（情绪控制能力、感染他人能力）。</p><p><strong>动机：</strong> 一个人的动机判断，在面试阶段很难判断的出来，我自己在这方面也做的不好。我会去看一下这个人是不是比较善良，眼神里透露的是不是纯净，判断他的心态、工作和生活态度；以此来估计候选的动机是不是正能量。【这也许是个很差劲的方法】</p><p>以上说明了考察的几个主要方面。那么面试过程中，如何有效的和候选人沟通，获得这方面的信息，以做出对候选人素质的判断呢？我认为最重要的，是让候选人讲出实际的case，举例和讲解他在以往工作里做出的实际行动、项目、技术。从这些实际发生的客观事实里，联系到知识、经验、素质和动机上来，以做出比较好的判断。</p><p>作为技术团队，对候选人的智商考察，是很重要的。技术工作有一定的智商门槛。这里强调一下，做技术工作，不是智商越高越好，而是过了门槛就好。到了实际工作里，只要智商达到一定水平，具体的工作贡献，和个人的情商、动机关联更高。工作做的更好、发展更快的，往往是那些情商更高的人。</p><p>招聘过程中，还有一个现象，就是在招聘压力比较大的时候，面试官或部门负责人，会一定程度上放水，体现在对候选人的要求降低，或对候选的定级上放松。这方面比较有效的实践，是做跨事业部复试，对候选人的能力、级别进行公司层面的拉齐。</p><p>最后，在面试中和面试结束后，如果有好的建议给候选人，也可以跟候选人交流一下。我的实践是，候选人一般都会对真心的、客观的建议表示感激，在HR回访候选人时，也会体现出较高的面试过程满意度。</p><h2 id="人员培养"><a href="#人员培养" class="headerlink" title="人员培养"></a>人员培养</h2><p>人才是选出来的，不是培养出来的。这是人才的一个基本理念。人才选拔招聘这一环节，是非常重要的。但是，培训依然非常重要。</p><p>培训的内容，不仅仅有专业知识、业务知识的培训，还有公司文化、环境的培训，还有公司的价值观的培训，培训的内容分类，可以说是丰富多彩。我比较喜欢贝壳的领导力培训体系，覆盖了招聘、绩效考核、团队管理等一系列的课程。薪酬绩效部分的培训，是当时的CHO郑云端先生亲自上阵，让鄙人受益匪浅。</p><p>培训的价值，我认为是把各式各样背景的人才，通过培训的方式，在某些方面（比如管理、价值观），形成一致的认识，能够让完全不同的人，能够按一致的方式来思考、处理某类问题。比如在招聘的理解和实操上，能够把公司的招聘策略、方法和要求，一致性的传达给所有的部门负责人、面试官。这对公司整体的人才选拔，有很大的助力。</p><p>在研发团队内，培训主要分成这几个方向：</p><ul><li>专业技术培训</li><li>行业知识培训</li><li>技术分享</li><li>价值观培训</li></ul><p><strong>专业技术培训</strong>，主要是对技术人员进行一些软件开发、系统架构方面的知识培训。比如对微服务架构、DDD领域设计、大数据分析方面的培训。团队内人才结构按梯度分布，不同梯度的人才，所接受的专业技术培训，也是不同的。我们一般是在公司内部寻找专业知识培训资源。</p><p><strong>行业知识培训</strong>，主要是对团队所建设的领域，进行知识培训。比如我现在贝壳负责的人事、财务领域，在2019年组织了几场系列的人事、财务专业知识培训，请我们的HR、财务总监，来给我们讲课。这样的行业知识，能够让技术团队在后续的工作里，更快的理解业务需求，做项目的过程中，及时发现一些专业问题。</p><p><strong>技术分享</strong>，主要是团队内的技术分享。团队成员完成了一个项目，作为一种知识扩散和团队互相交流的形式，给大家讲自己做项目过程的收获、体会，使用的方法、技术。技术分享主要的目的，是增进团队成员之间的互相了解，互通有无；其营造文化氛围方面的作用，超过技术传播方面的作用。</p><p><strong>价值观培训</strong>，主要是团队内对文化价值观进行交流。价值观这个事情，就得一遍一遍的说，说到团队能记住了，不知不觉的影响了自己的行为即可。具体的方式，是一遍一遍的讲价值观的事例，对模范事情进行表彰，对不符合价值观实践进行刨析。价值观培训是个持续的过程，一个慢慢影响组织、渐渐发生物理变化的过程。</p><p>人员培养不止培训，还有另外一个维度，对潜在后继人员、潜在晋升人员进行培养。对于部门负责人来说这是很重要的事情，就是在团队里发现那些具备后继任潜力、晋升潜力的人，提前通过工作任务安排、项目安排和技术攻关，来让他们加速提高。这方面我们的研发团队做的很好，每个研发总监都有、而且在培养自己的后继任人。</p><h2 id="团队文化、氛围"><a href="#团队文化、氛围" class="headerlink" title="团队文化、氛围"></a>团队文化、氛围</h2><p>对于一个规模比较大的研发团队（50～200人），团队的文化、氛围，对团队的正向发展，变得非常重要。我分为以下几个方面，来探讨团队文化和氛围。</p><img src="/images/技术团队管理/团队文化氛围.webp" alt="团队文化氛围" width="200"><ul><li>技术民主的决策环境</li><li>适度自由的工作氛围</li><li>富有挑战的工作内容</li><li>鼓励创新的文化</li><li>积极互助的同事关系</li></ul><p><strong>技术民主的决策环境：</strong> 在技术栈选型、技术架构设计、技术方案评审方面，推崇技术民主的文化，支持任何人提出自己的观点、发表意见，并客观的评估提出的观点、意见，如果是更合适的、或是纠正现在的错误的，那就积极采用、支持落地，并对提出者给予公开的表扬。如果不采用，反馈不采用的原因，不得以批评、指责的方式打压提出观点、意见的人。</p><p>团队leader需要清楚的知道，在技术上，自己不一定是最强的人，甚至要引进技术比自己强的人，而和更强的人一起合作的方法，就是对对方意见和建议的尊重，采纳正确的方案。</p><p>即使是团队内技术不如自己的同事，因自己在设计上会有不完善或思考不周的地方，有纰漏和缺陷也很常见。审慎的对待每个提出的意见，尊重、感谢提出意见的同事，是避免出现线上大坑的有效方法。</p><p>民主的技术决策环境，体现的是对伙伴的尊重，对群体智慧的应用。</p><p><strong>适度自由的工作氛围：</strong> 一般来讲，团队的成员请假，我基本都会批准。技术团队的加班加点是比较多的，在公司、团队的项目比较忙时，我们需要团队成员付出额外的时间是来投入工作；当员工遇到生活上的问题时，无论是生病、家中琐事、朋友来访还是亲人关怀，作为leader一样要给予方便。</p><p>有时部分同事为了安静的完成项目任务，提出在家“闭关”几天，我也会支持。项目的需求明确了，技术方案确定了，他自己的任务也清晰了，如果在家能够更安心高效的完成任务，减少上下班通勤时间，做到更好的交付，也是对公司、团队有益的。</p><p>当然，“自由”是适度的，是对那些平时工作积极、勤奋的同学才会是开始放的。这个自由，不能成为团队部分成员散漫的缺口，leader需要把握住。</p><p><strong>富有挑战的工作内容：</strong> 对于做技术工作的同学来说，克服技术难题，实现以往自己做不到的事情，是个有莫大自豪感、成就感和快乐的事情。这种快乐，也许只有酒鬼遇到酒时，才能理解。【鄙人体会过前者，未体会过后者】。克服技术难题，做挑战性的项目，能激发起团队成员的斗志。</p><p>对于公司来说，对于能够完成挑战性任务的团队，自然也是另眼相看。但是做挑战性的项目，自然失败或延期交付的概率也高一些。团队的负责人在此时，需要及时的和公司沟通，同时积极鼓励团队加速攻关，而不是批评打压。</p><p>贝壳的UC系统，在 2019年上半年以前，稳定性只有2个9，A级故障频发。也被公司的技术委员会、合作团队多有诟病、评判。在我列入部门OKR、尚未安排启动时，我们部门的一个研发leader，已经自己组织了团队，每周六加班一天，用了2个月的时间，重构系统，把性能提高了10倍，稳定性达到4个9。</p><p>这样的创新、挑战行为，我是非常支持的，在年终的大会上，对这个项目和团队，给予了很高的评价。</p><p><strong>一个没有挑战性工作的团队，是没有生命力的，优秀的人会逐渐流失。</strong></p><p><strong>鼓励创新的文化：</strong> 技术工程师团体一般比较年轻，思维活跃，敢于尝试，这是非常优秀的品质。对于他们在一些技术项目上，做一些“离经叛道”的尝试，应予以鼓励。但是对这样的创新的项目，团队的架构师和技术负责人，在确定能发布之前，必须严格的评审、review，防止给线上服务带来严重影响。</p><p>当前很多公司都在推统一的技术架构、统一的技术栈，以提高研发的效率。这是一个正确的事情，能够提高研发效率、交付质量、降低运维成本。但是同时也会带来相应的负面的影响，公司内对不同技术栈的研究不足，对日新月异的技术发展跟进不足。技术团队应该对新生事物保持好奇，保持探索的精神。</p><p><strong>积极互助的同事关系：</strong> 作为技术团队，每天在公司的时间，一般都超过10个小时，也就是说，我们和同事相处的时间，大部分超过和我们的家人、朋友相处的时间。如果公司的同事之间，关系比较紧张，那么内心是很压抑的，在压抑的环境下，智力工作的效率是很低的。</p><p>作为团队的leader，需要主动去营造一个互助的氛围。积极和同事沟通，进行工作和非工作的交流，熟悉每个人的性格、特点、近况，做到即是工作上的leader，也是生活上的朋友。让团队内的气氛轻松，拉近团队的距离，让团队的沟通成本降低。</p><p>作为leader，尊重每个同事，欣赏每个同事，是和谐的团队关系的前提。曾经我一度误以为，严格的领导风格，对团队效率更高；对同事的缺点、项目的问题进行直接、严苛的批评，但是会逐渐发现，问题解决了，人心却散了。严格的批评、指责，是很容易滑向不尊重的，会非常伤害同事。后来我换了一个方法，在保持尊重和有礼的态度下，语气平和的指出问题和改进方法，团队成员表现出来的是更多的配合、感谢和持续提升。</p><h2 id="技术栈、技术架构"><a href="#技术栈、技术架构" class="headerlink" title="技术栈、技术架构"></a>技术栈、技术架构</h2><p>很多公司都经历过技术栈、技术架构统一的过程，形成公司内研发组织统一的选型和强制标准。这是一个非常有利的事情，能带来以下好处：</p><ol><li><strong>在公司的不同团队、项目上，技术人员复用性更强</strong></li><li><strong>有利于公司在选定的技术栈和技术架构上，深入挖掘，形成自己的最佳实践</strong></li><li><strong>公司的运维体系统一</strong>，有效提高线上运维的一致性，降低运维成本</li><li><strong>不同团队所研发的基础服务或组件，能够在公司内低成本复用</strong></li><li><strong>不同的系统之间，集成成本低</strong>，甚至相当“自然”</li></ol><p>我曾经经历过一次合并收购的公司，使用的开发语言是PHP，而公司的主流开发语言是JAVA；引发了一系列的实际困难，最终用了一年的时间，才把技术栈切换过来。具体遇到的困难是：</p><ol><li>收购的业务已经在线，已经有用户使用；因业务发展需要，新的需求和迭代，依然在不断发生。</li><li>对于新收购的业务，在人员扩充上，进入两难境地。一方面知道未来肯定要切换到JAVA语言，另一方面眼前只能招PHP的技术人员，来解决研发资源问题。当开发语言完成切换后，这些PHP工程师怎么办？</li><li>定级、晋升体系出现困难，由于PHP技术很少，在工程师定级、工程师晋升评审上，不好客观比较、匹配。</li><li>运维需要独立一套体系，不能融入现有的运维体系。导致线上故障的发现、处理效率，相对公司整体水平偏低。</li></ol><p>对于这种困境，解决的过程也是很煎熬的，逐渐把新的服务开发向JAVA语言转换，过程中团队内PHP工程师安全感低，人员流失严重，团队文化氛围差；Leader需要做很多安抚和培训，对一部分价值观正、学习能力强的人，进行JAVA技术培训，以期以后能够转换到JAVA序列。</p><p>鉴于技术栈统一的优点，大部分公司发展到一定阶段，都会开始做技术栈的整合、统一，笔者认为此事非常正确。但是也需要正视带来的负面影响，采取一些行动，来降低负面影响。我认为负面的影响如下：</p><ol><li><strong>在人才招聘上，可能会因为候选人的技术栈不同，而错过一些优秀的人才</strong>。如果候选人的经验、学习能力很好，那么他是有能力用几个月的时间，掌握、切换到新的技术栈上；但是在面试时，因为面试官对于技术栈的偏好和熟悉度，很可能会降低候选人的表现和评价。</li><li><strong>技术团队不能有效发现其他技术栈的优点；</strong> 团队对选定的技术栈钻研比较深，而对其它的技术栈、新的技术栈探索的比较浅，不能有效发现其他技术栈的优点，在当前技术栈逐渐衰老、退出行业舞台时，进行调整变化的节奏慢。</li><li><strong>技术人员本身的技术视角的广度可能会受到限制</strong>，一些更有效、更优美的解决办法，会被错过。</li></ol><p>鉴于这种情况，建议技术团队的负责人，<strong>在一些不关键的项目、工具上，允许甚至鼓励团队尝试一下新技术栈，但一定不要“传染”到公司的主要对外服务的线上系统里</strong>。保持团队的好奇心、创新性，留给技术人员接触、使用、和研究不同技术栈的“试验田”、“自留地”。</p><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><p>自移动互联网爆发后，项目经理的岗位几乎在互联网里消失，项目经理的职责里，仅剩的项目进度跟进，被产品经理“兼职”了。2015年到2018年之间，项目经理的发展空间是大幅度萎缩的。以前高德CTO杨永琦说过，移动互联网就是要不断试错，不断把想法变成产品，推到用户那里，让用户投票，用户不用就下掉，用户喜欢就继续加码。</p><p>这样的背景下，产品迭代的速度，就成了各个互联网公司比拼的重要内功，甚至成为一种“竞争力”。能够让公司在还看不清楚的时候，就进行低成本的市场验证，进行“火力侦察”。用户的APP频繁升级，甚至成了提高用户活跃度的手段。这种背景下，重要的是产品经理又有了什么点子去让用户快速验证，只要撒对一个“idea”，用户就留存了，资本就欢喜了。</p><p>但是自2017年，王兴提出“互联网下半场”的节点后，“供给侧改革”为代表的B端服务兴起。项目逐渐变成需求复杂、交付周期长、质量要求高，产品经理的重心在需求的分析和理解上，在行业实践的探索上，而保障交付、保障质量的职责，重新回到了项目管理的维度上。B端服务的特征是专业知识门槛高、用户试错容忍度低、获客成本高，这些都为项目经理的重要性重新归来，奠定了前提条件。</p><p>我们团队自2019年重新建立了PMO团队，来跟进部门的项目，解决项目是否要做、参与项目各方的目标、资源、进度和交付问题。</p><p><strong>项目管理第一个要解决的问题，是“项目值不值得做”的问题。</strong> 提出需求的部门、产品经理，必须能够讲的清楚，这个项目能给公司、用户带来什么价值，通过运营，最终实现什么样的结果。我们做了太多看似有用、实则可有可无的系统：有了没什么坏处，没有的话也没有什么痛。</p><p><strong>项目管理第二个要解决的问题，是多部门、跨团队的协调问题。</strong> 大的组织里，每个部门都有自己的主攻方向和OKR（KPI），正常情况下各团队都以自己的部门OKR为重。这导致跨部门、跨团队的项目组织非常困难，由于目标、专业技能的不一致，项目的进展和实际结果，和开始的预期相差很远。项目经理必须能够清楚的理解项目的价值，并且传递给多个部门、团队的负责人，引导参与方对价值、优先级认知一致，在此基础上，制定出跨部门的整体计划来。</p><p><strong>项目经理需要有足够的授权</strong>，如果项目经理只能是辅助角色，支持立项流程、跟进实施进度、协调各团队配合协作，那是体现不了项目经理的价值的。项目经理需要对项目的结果（业务结果）负责，以拿到业务结果为目标，组织公司的资源，实施项目过程。因此项目经理的人选，也是非常苛刻的，除了PMO外，项目经理大都是需求部门的负责人来兼任的角色。</p><h2 id="晋升"><a href="#晋升" class="headerlink" title="晋升"></a>晋升</h2><p>为了给技术人员、除了管理这个“独木桥“外的晋升空间，大部分公司都建立了技术专业职级的制度，鼓励技术人员在专业能力上，持续发展、晋升。这满足了技术人员在职业上进行持续发展的需要，促进了技术团队的持续发展、稳定。</p><p>那么在技术人员晋升上，需要注意什么呢？<strong>笔者认为最重要的是公平性、公开性和看重直接领导意见</strong>。同时也要避开一个误区，那就是技术人员达到一个“级别标准”，即可晋级。（每次做晋升评审后，我在团队里进行晋升结果沟通时，都会遇到这样的情况，论实际的工作能力、掌握的技能，不比其他高级别的差，为啥有的人没有晋升成功呢？）</p><p>实际在各个公司的晋升评审中，可能每个评审官手里都一个职级能力标准；但是实际进行晋升评审时，往往只是作为“参考”。甚至到了最后阶段，是把大家打分的结果，拿出来“排序”，排序在前的几个人通过。这些情况反映了<strong>晋升评审的困难：到了一定级别，每个人的优点、个性都很明确，缺点也很明确，所做的工作内容可能差异也很大，不同领域的知识跨界很难，不同的人之间进行比较，要做到很客观是有困难的。</strong></p><p>在这里，我需要重点提一下，晋升评审中，<strong>直接leader的意见很重要</strong>，每个人的能力、素质是不一样的，部分人就是不擅长言辞、临场发言（比如在下…），在晋升评审里，不能把自己的优点、做的东西讲出来。直接leader有责任、有义务通过更客观的数据、评价，提交给评审组，对他的晋升进行支持。</p><p><strong>晋升是需要有比例限制的</strong>；一方面大部分公司的晋升和调薪都是挂钩的，出于成本的控制，有限制晋升比例的动力；另一方面，各团队都希望自己部门晋升的人多一些，如果没有限制，会出现职级晋升放水。</p><p>晋升政策上，还需要关注一个问题，部分员工做的贡献很大，但是技术（专业能力）并不是很强，或者因为所做的项目，是需求复杂性、行业知识难的项目，而不是技术有挑战的项目。这方面笔者倾向于支持行业知识要求高的候选人晋升、需求复杂度高的不晋升（主要专业能力体现在产品经理身上）；但是在绩效奖金、调薪上，应该对贡献大予以支持。<strong>不能因为晋升不成功，影响这些贡献比较大的人的调薪空间（目前很多公司在这两方面，是进行了绑定），从而影响这些人的稳定性，形成谁都不愿意做的“黑暗系统”。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研发Leader成长手册</title>
      <link href="/2020/05/06/post/%E7%A0%94%E5%8F%91Leader%E6%88%90%E9%95%BF%E6%89%8B%E5%86%8C/"/>
      <url>/2020/05/06/post/%E7%A0%94%E5%8F%91Leader%E6%88%90%E9%95%BF%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDYxODQ3Mg==&mid=2247483699&idx=1&sn=294b333dfaaf5710b34d4eb548456235&chksm=ec1c6c34db6be5228d5f34e6c7eb92baecd061ac6f4887d9ec41069e72f6b1ced8d77ead2fb0&scene=21#wechat_redirect">研发leader成长手册（一）</a> <mark class="hl-label green">转载</mark> ，<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDYxODQ3Mg==&mid=2247483704&idx=1&sn=c3544351d20ca4edbc8875c927c63b69&chksm=ec1c6c3fdb6be529c55ea4c2a53239add1312f307f59dbb70b633a843817ede60895d0196634&scene=21#wechat_redirect">研发Leader成长手册（二）</a> <mark class="hl-label green">转载</mark> ，<a href="https://mp.weixin.qq.com/s/2b1EXElHHlg8Za77Tod3xg">研发Leader成长手册（三）</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>近来和一些担任研发leader的同事和朋友交流中，发现部分同学，在研发leader的岗位工作上遇到了瓶颈。具体的问题，有个人发展空间上的，有工作内容上的，有时间精力安排的，有对外合作配合的，笔者仅以自己过去的经历和对leader工作的理解，分享一下对成为一个成功的研发leader的视角、观点。</p><p>研发leader的工作内容，可以分为以下几个方向：</p><ol><li>技术方向工作 </li><li>规划方向工作（目标、计划、执行、制度等）</li><li>协调方向工作（跨部门沟通、跨部门项目协作）</li><li>团队方向工作（招聘、培养、沟通、团建、宣传等）</li></ol><p>在这几个方向上，分4个主题，逐个来分析、探讨。这4点交融在leader的工作中，因此每个方向探讨时，会有互相交叉的部分。</p><h2 id="技术方向篇"><a href="#技术方向篇" class="headerlink" title="技术方向篇"></a>技术方向篇</h2><p>在技术工作方向上，容易出现的三个误区：</p><ul><li>A. 技术leader是团队的产出核心，其他人辅助工作</li><li>B. “我”是做技术的，产品、运营做的好不好，不关我事</li><li>C. “他们”技术不行，培养太花时间，等他们做完，我早做完了</li></ul><p>下面我们来刨析这三个误区，看看这么做leader工作会带来什么问题。</p><h3 id="01-技术leader是团队的产出核心，其他人辅助工作"><a href="#01-技术leader是团队的产出核心，其他人辅助工作" class="headerlink" title="01.技术leader是团队的产出核心，其他人辅助工作"></a>01.技术leader是团队的产出核心，其他人辅助工作</h3><p>作为研发团队的leader，首先要做好技术方向的工作，这是这个岗位的最基本职责；大部分研发团队的leader，都是因为技术工作做的比较好，而被提拔为leader，给予晋升空间和发展空间。但是技术leader的职责不仅仅是技术方向的工作，还要承接更多的岗位职责，大部分leader感到工作瓶颈，都是在非技术工作上面。</p><p>在技术方向的工作职责之外，其他的职责，是初晋升研发leader所不了解、不擅长的，此时如果没有得到很好的帮助或自己思考想清楚，工作便会出现一个迷茫期，不仅影响自己的发展，也影响团队的整体产出。笔者也未幸免，曾经在非技术方面折腾过一段时间，深为苦恼，甚至怀疑自己是不是应该回去做技术专家，而不是去带技术团队。</p><p>我从这个坑里爬出来，最直接、最重要的一个因素，是意识到了研发leader的岗位职责变化。<strong>研发Leader的岗位职责是要看团队整体的产出效率，而不是看个人的产出效率</strong>。作为曾经的研发好手，在技术问题攻关、代码编写质量、速度方面，是自己的长项，晋升leader也是因为这些方面的强项，被公司、上级所认可。这会给晋升的leader们一种错觉，技术能力和项目产出是自己的主要贡献。</p><p>在这种“leader观”下，会不幸的形成以自己为技术中心、其他团队成员协助工作的模式；项目里最难、最重要的部分，由leader攻关、实施；leader成为团队最忙、负载最大的同学。这种情况在早期阶段，依然可以运转一段时间，但是随着时间的推移，因为leader其它工作职责的加入，把leader已经被技术工作占满的时间、精力，轻易的给“引爆”。</p><p>团队成员遇到了工作的问题、招聘面试量的增加、和PM沟通讨论产品方案、和业务方开会讨论需求、开展晋升绩效的沟通、团队工作汇报的准备等等，会迅速的开始消耗leader的时间精力，使得leader主导的技术攻关、项目攻关，出现延期、失败，而团队其他人由于技术能力问题、分工安排问题，不能有效支持项目推进。此时，Leader不得不面对这个现状，为了摆脱这个“陷阱”，做出选择。</p><ul><li>A. 拒绝技术工作外的管理工作，来保障技术工作的完成；</li><li>B. 投入时间做好管理工作，但技术工作陷入混乱；</li><li>C. 对管理工作敷衍，依然把主要精力放在技术工作上，保障技术工作的完成。</li></ul><p><strong>笔者当年走过由A到C，再到B的过程</strong>，所以在今天的工作里，对团队里的技术leader，非常能够理解他们遇到的工作上的问题。下面我说一下我自己的经历。</p><p>刚开始，我对自己被提拔为技术leader非常兴奋。作为一个疯狂的技术爱好者，这种晋升，我认为是对技术能力和产出的一个认可，非常有成就感。我把这次晋升，当成了一个奖励，丝毫没有意识到随岗位的变化，我的职责也变了（当然也没有人真正严肃的对我说，我的职责变了，要求的能力模型变了）。<strong>也丝毫没有意识到，除了技术能力，其他方面我都没有达到一个leader的能力要求，处于“不知道自己不知道”的状态</strong>。于是更以加倍的热情，投入到开发工作里，绝大部分时间都是在做开发，少部分时间分下任务给团队其他人。</p><p>由于是团队leader，HR开始安排更多的面试工作，自己部门的、其他部门的，在面试工作的时间上，基本增加了一倍以上；项目经理、客户（内部需求方和外部客户）开始找我沟通项目的安排、进度，会议的量开始增加…… 是的，各位leader今天遇到的问题，我也没意外的遇到了。我热爱技术工作，我是技术极客，干嘛让我把时间花到这些“虚”（不是写代码，都是虚的）的事情上呢？I reject！</p><p>但是拒绝不了多久，就被我的老板谈话了。这些事我不参加、不做，对应的伙伴们，自然就要找我的老板投诉了。当然这也不难沟通，作为leader那些事是要做的，只是我不喜欢，那如果还要做leader的话，就得改变自己啊！价值观是杠杠的，调整自己认真对待技术以外应该承担的工作。但是我的精力客观上是有限的，白天用了40%-50%的时间在这些问题上，技术工作就只能继续用自己的夜晚时间来补充。熬夜到12点后，成为一个常态。【曾经有一回，在公司加班到1点，开车回家的路上，我睡着了…着了…了，以60KMPH的速度，撞在了前面一辆现代SUV上，还好相对速度不那么大，车损人未损。阿弥陀佛，如果不撞上这辆车，我撞上的，将是50米前方的两个水泥路障，当时在施工建设地铁，阿弥陀佛，救命之恩！】</p><p><strong>好吧，知道不能这么下去了，我在认认真真的想，我是不是该回去做程序员？我是不是根本就不适合做管理？</strong> 在这种不坚定、不明确的状态下，对非技术类的工作，进入一种敷衍的状态，开会时经常两个耳朵听着，两只手在看着屏幕敲代码…… 不知道当时的同事们有多想骂我，在此对你们说声sorry！然而我一直没有下定决心往回撤。因为人都要上进，没干好的情况下往回撤退，我岂不是懦夫。<strong>隐隐的感觉到，我自己遇到了“瓶颈”，我需要突破自己。也就是说，进入了“知道自己不知道”的状态。</strong></p><p>转机出现在一次去广州出差的路上，在机场买了一本《领导阶梯》，完全是偶然的在机场买了一本。<strong>里面明确说明了一点，作为首次晋升的leader，根本的转变，是我从个人贡献者，转变为一个管理者。两者的差异，在于职责上，Leader要对团队的结果负责，而不是对Leader自己在其中的比例负责。</strong> 进一步，我做了以下的思考。</p><p>假如我们团队有6个人，我个人超强，一个人贡献团队40%的产出；其他人平均每人贡献12%的产出（合计算100%）；假如我通过管理工作，让团队的外部环境井然有序、任务明确，并致力于指导、提高团队成员的能力，让每个人的产出，提升一倍，我自己的个人贡献因精力转移降低60%，降到16%；此时我们相对以前，整体的产出是 （16% + 24%*5）&#x3D; 136%。这样，我做为leader的杠杆效用，就出现了：通过我的工作，团队的整体产出增加了。</p><p>懂得这个逻辑无比的重要，能让自己下定决心转型，做好外部工作，做好内部指导、培养工作，通过自己的工作提高团队的整体产出，给团队每个人带来成长。对leader的考核，应该是团队的整体产出情况，而不是leader个人做了那些具体的事。</p><p>因此，技术leader在技术工作上，应该把精力转移到那些体现leader价值、高杠杆率的事情上。包括：</p><ol><li>和产品经理或项目经理沟通、明确项目需求，让团队的技术工作不乱</li><li>系统架构设计、核心算法设计、主要性能攻关</li><li>提高团队成员能力、引进合适人才</li></ol><h3 id="02-“我”是做技术的，产品、运营做的好不好，不关我事"><a href="#02-“我”是做技术的，产品、运营做的好不好，不关我事" class="headerlink" title="02. “我”是做技术的，产品、运营做的好不好，不关我事"></a>02. “我”是做技术的，产品、运营做的好不好，不关我事</h3><p>这个观点虽然我们一看就知道不合价值观，但是在实际的工作里，却是一个挺常见的现象。作为技术leader，保障在技术上把产品、运营的需求，用代码给做出来，变成产品、服务。</p><p>一般来说，我们都清楚产品经理对自己的产品目标负责、运营经理对自己的运营方案效果负责；那么作为研发的负责人，我们可以独身于事外、对产品和服务的实际结果，不加关注嘛？</p><p>很抱歉的说一句，笔者也曾经有过这样的思维。我负责技术团队，确保技术团队的战斗力，把交给我们实施的需求，都给实现了，就起到了研发这个环节的责任、体现了研发的价值。直到有一次和高德的总裁董振宁先生请教，他对我说：<strong>从公司角度看，无论是做技术的、产品的还是做管理的，负责人们都是业务干部，业务做没做好，是考核干部合不合格的标准。</strong></p><p>一席话激起千重浪，深刻的击中我自己的认知盲点。对于干部，公司的期望是完成业务目标，拿到业务结果；我们不能在业务结果不好的情况下，说我们产品设计是没问题的、我们开发交付是没问题的，这不叫责权明确，对于干部来讲，这叫甩锅，而且锅只能是给老板来接。</p><h3 id="03-“他们”技术不行，培养太花时间，等他们做完，我早做完了"><a href="#03-“他们”技术不行，培养太花时间，等他们做完，我早做完了" class="headerlink" title="03.“他们”技术不行，培养太花时间，等他们做完，我早做完了"></a>03.“他们”技术不行，培养太花时间，等他们做完，我早做完了</h3><p>我不知道有多少leader们，有没有心里想过、嘴里说过这句话。笔者心里想过，嘴里没有说过。作为因技术能力强、技术产出高而在team里被提拔起来的人，有实力说这句话。客观的实际工作里，也有这样的情况，我们要不要自己动手，取代团队成员应该完成的工作？</p><p>我认为是不行的。</p><p><strong>首先，精力是不允许的</strong>。Leader还有很多其他方向的工作，在写代码这个非常耗时间精力的事情上投入，会严重影响其他工作的展开。一个团队，如果leader不能打理好内外环境，很快就会进入效率降低的阶段。取代他们的职责，是拆东墙补西墙，团队整体的产出依然下降。</p><p><strong>其次，对成员的发展不利</strong>。遇到困难不能克服，就让leader来做，那成员是很难成长起来的。我们的成长，70%来自于工作。遇到困难时，也是他们成长的最好机会。此时做为leader，应该是花时间帮助他，指导他。这也花时间，但是和直接自己取代来做不一样的，团队成员的能力会因此提高，给将来团队的整体实力、产出提高打下了伏笔。这样既推动了项目的完成进度，也提高了团队的成长。</p><p>笔者曾经经历过这个阶段，当时公司成本控制，招聘的同学的技术能力在行业里偏低，水平一般。大部分的工作也是我在做。后来我改变了策略，不管如何，把任务分给他们，约定完成时间。到项目周期的1&#x2F;3时，我会review下所有人工作的进展情况，分情况进行不同处理：</p><ul><li>A. 进展符合预期，不管他了，让他继续往前做。</li><li>B. 进展高于预期50%以内，给予指导，在这个项目上，给他建议，提高效率。</li><li>C. 进展低于预期50%以内，拿过来我做，追赶上项目工期。</li></ul><p>真正落到C选项的，实际很少，大部分在A和B里分流了。对于A种情况，对应的工程师会给予更多的项目和职责，快速成长起来；对于B种情况，对应的工程师能够有效得到帮助，能实实在在的提高自己的工作水平；对于C情况，如果不能带起来，就只能优化了。</p><p><strong>最后，如果用这样的思维思考，团队内的氛围会比较差</strong>。成员不能承接自己本应该承接的工作，得不到成长锻炼的机会，没有有效的产出，会很容易产生不安全感；人在不安全感的情况下，容易会去互相推脱责任，互相指责、力求自保，诉求最基础的“我没错”的安全需要。</p><p>这种氛围下，团队就带散了，有能力的人会离职、转岗，没能力的人会力求不犯错，做为leader的老板，不得不出来解决这个团队的稳定性问题。还好，笔者没有这么干过：）</p><p><em><strong>综上所述，我给研发leader们三个建议：</strong></em></p><ol><li>在技术工作上，当退则退，保持30%的精力，在某个技术方向上做深，利用业余时间提高技术广度。保持技术深度和广度的同时，留出精力去做管理性的工作。充分挖掘团队资源，去完成团队任务。</li><li>作为技术leader，身在技术，心在业务，始终站在业务成功的角度思考问题。</li><li>为团队培养人才、引进人才，优化不合适的人才；是团队建设永远正确的真理。</li></ol><h2 id="规划方向篇"><a href="#规划方向篇" class="headerlink" title="规划方向篇"></a>规划方向篇</h2><p>规划这个词，对很多leader来说，是个伟大而又玄乎的词，经常的会听到“咱们先做个规划”、“年度规划”、“季度规划”，规划是个啥东西，怎么做对？怎么做好？</p><p>不过有一个好消息是，在整体公司组织中，作为技术团队leader角色时，是执行角色；技术团队leader主要是承接部门经理或总监安排的任务，体现执行方面的能力和效率，还不需要做高大上的“规划”。</p><p>那读者可能要问，既然如此，这篇文章你写个啥？笔者想说，<strong>虽然不需要做规划，但是总得有能力理解上级做的规划，理解执行的任务来自什么</strong>。我们从这几个层面来看规划：</p><ol><li>企业级规划</li><li>事业部级规划</li><li>职能部门规划（成本中心）、运营部门业务规划（利润中心）</li></ol><p>我们分别来看一下，怎么来理解各层级的规划。</p><h3 id="企业业务规划"><a href="#企业业务规划" class="headerlink" title="企业业务规划"></a>企业业务规划</h3><p>企业的规划一般来自三个方向：</p><ul><li>业务规划：业务规模、收入</li><li>人力规划：供给“人才”，实现收入的目标</li><li>财务规划：资金流、成本、利润</li></ul><h4 id="01-业务规划"><a href="#01-业务规划" class="headerlink" title="01. 业务规划"></a>01. 业务规划</h4><p><strong>业务规划是指公司的业务规模收入方面的计划</strong>。贝壳在2019年，定下的目标是GMV达到2万亿【百度上能公开检索到，这不是泄漏公司机密哈】，当然还有其他指标，不过核心的是业务的GMV指标。商业企业是一个经济组织，其目标一定是商业目标，大白话就是钱；业务规模、增长率、开拓新市场等，无一不回归到商业利益上来。</p><p>在这里解释一下，<strong>企业的直接目标是商业利益，但长远目标和存在的意识，不是商业利益</strong>。企业的使命和愿景，是存在的意义和看得到的未来，一般不会是商业利益；贝壳的使命是有尊严的服务者和更美好的服务；贝壳的愿景是服务2亿家庭的品质居住平台。因使命和愿景，是一个公司更长久的意义，不是规划出来的，而是创始人的理想、企业社会责任和价值的表达。</p><p><strong>企业级的业务规划，比较简单，一下就能看懂。如果企业的目标很长很难记，那对几万人的公司，就是个灾难。</strong></p><h4 id="02-人力规划"><a href="#02-人力规划" class="headerlink" title="02. 人力规划"></a>02. 人力规划</h4><p><strong>人力规划，主要关注的是用什么样的人来完成业务收入。</strong> 人力规划和财务的规划是有关联的，因为财务需要控制预算，保障资金流健康。在合理的人力成本预算下，HR制定人力政策，和Leader们关联比较大的，是年度HC有多少、调薪幅度有多少、绩效考核方案怎么做。</p><p>郑云端先生曾说，HR的三板斧是：招聘、培训和激励；在规划上，基本也是围绕着这三个方面进行展开。通过招聘、培训和激励机制建设，来“供给”实现业务需要的人才。</p><h4 id="03-财务规划"><a href="#03-财务规划" class="headerlink" title="03. 财务规划"></a>03. 财务规划</h4><p><strong>在财务规划上，我认为最核心的是保障资金流稳定，其次是成本控制。</strong> 资金流是企业的血液，企业业务好好的、员工好好的，看似一切健康无比，血液不流动了，会瞬间倒下。我们知道的OFO、互联网金融的崩盘，主要都是资金流出了问题。</p><p>获得资金流的方法，<strong>主要是公司自身业务收入（造血能力）、融资、贷款</strong>，当然也有创始人的自有资金，笔者有个朋友，曾经卖了北京房子，作为创业资本。大部分的CFO，不是在找钱，就是在找钱的路上。</p><p>除了资金流保障、成本管理，近些年管理会计兴起，代表是全面预算，对业务规模收入进行测算、各类费用、成本、资金进行测算，通过预算分配资源，实现目标。</p><h3 id="事业部级规划"><a href="#事业部级规划" class="headerlink" title="事业部级规划"></a>事业部级规划</h3><p>事业部可以理解成一个不太完整的公司，一般情况下独立核算。事业部作为一个业务单元，一般在业务方面完全自主、人事和财务方面有一定的自主权。</p><h4 id="01-业务规划-1"><a href="#01-业务规划-1" class="headerlink" title="01. 业务规划"></a>01. 业务规划</h4><p><strong>事业部的业务规划，首先是对公司业务规划的拆解</strong>；一般拆解后，整体会超过公司的业务规划。事业部的业务规划，除了收入的目标外（比如南部战区目标XX亿GMV），<strong>还要有支持业务发展的中长期能力建设目标</strong>。</p><p>对于能力建设目标，举个例子，如贝壳效率工程的SaaS HR团队，承载支持加盟体系关于组织、人的信息化，通过把加盟商、经纪人等的信息化做准、做好了，才能和贝壳平台做更好的连接。这就是对业务的一个<strong>中长期能力建设，对未来业务目标的提升，起着长期而又重要的作用</strong>。</p><h4 id="02-人事规划"><a href="#02-人事规划" class="headerlink" title="02. 人事规划"></a>02. 人事规划</h4><p>事业部在认识规划方面，首先是在企业人事规划的范畴类，不能违背企业的人事规划（偶尔出现事业部挑战规则，突破企业人事规划的现象也存在）。<strong>人事规划基本是在招聘、培训和激励三个方面。</strong></p><p>在招聘上，事业部的人力HC预算，一定在企业规划之内。实际操作上，事业部负责人有很大的动力通过人力扩充，加速业务的增长。美团曾经经历过这样一个阶段，业务快速增长时，公司HR发现控不住事业部的人员规模。因为事业部的负责人也是集团的高管，有比较大的权限，突破HR政策。</p><p>在培训上，一般是成熟的组织比较重视，对应的培训预算、培训内容和培训方法也更完善。目前在我的工作经历中，贝壳当之无愧是最重视培训的一家。在贝壳一年多的时间里，我接受的培训是以前的一倍多。</p><p>在激励上，一般是制定公司的绩效管理办法，通过绩效考核，为优秀的人才提供更好的变动薪酬和晋升空间。另外，通过对运营的绩效规则的设定，激励运营方向的员工，获得公司期望的业务结果。</p><p>事业部的人事规划不细展开，因为事业部也不是我们技术leader工作的界面。</p><h4 id="03-财务规划-1"><a href="#03-财务规划-1" class="headerlink" title="03. 财务规划"></a>03. 财务规划</h4><p><strong>事业部的财务规划，相对做的比较细，对收入、成本要做比较准确的预测，编制收入预算，测试业务规模、收入；</strong> 并且按月进行滚动，按实际发生的业务规模、收入，进行预实对比，调整后继收入预算。</p><p>同时对费用预算、成本预算进行编制。费用预算和成本预算要看各个公司实际业务（生产的产品、提供的服务）的情况，发生的费用和成本类型大不一样。</p><p>事业部的财务规划，<strong>最后反应在三张表上：资产负债表、现金流量表、利润表。</strong></p><h3 id="技术团队规划"><a href="#技术团队规划" class="headerlink" title="技术团队规划"></a>技术团队规划</h3><p>我们依然用“规划”这个高大上的词吧，技术团队主要在做执行工作，但执行工作来源于企业一层层的规划。</p><p>BTW，做C端业务和做B端业务，在公司的决策-执行上差异很大；<strong>做C端业务，公司一般很重视扁平化，让一线呼叫总部炮火支持</strong>，因为C端业务，对于一线员工，理解起来不那么困难，容易共情。而B端业务高度复杂，理解判断困难，一般从上到下的决策比较多。在<strong>B端公司，理解逐层的规划、决策的能力很重要。</strong></p><h4 id="01-业务规划-任务转化"><a href="#01-业务规划-任务转化" class="headerlink" title="01. 业务规划-任务转化"></a>01. 业务规划-任务转化</h4><p>企业做业务规划，可能会有个大会宣讲；事业部的规划，可能事业部总经理也会内部进行宣贯；对于技术leader来说，这离自己要执行的任务，还是遥远。这种情况下，<strong>技术leader不能等待，而是主动出击，在任务还没有分配下来时，主动和自己的上级沟通，了解规划需要拆分成的任务，甚至参与拆分的过程，向前迈一步。</strong></p><p>这样的好处，是技术leader避免了被动承接任务。人在被动接受时，总会带着怀疑和不解的。IT行业从来都很紧凑，当任务分发下来时，已经把上线日期都规划好了，没有太多的时间buffer，让技术leader了解前因后果；技术leader不能在内讲清楚上下文，技术团队就会沦陷为一个干活机器，终日忙碌中，知道自己干什么，不知道自己为什么而干，也不知清楚懂干的事有没有价值。这样的团队，怎么会有积极的氛围呢？怎么不回逐渐进入一种焦虑呢？</p><p><strong>往前迈一步，参与规划到业务的转化过程，是我对技术leader的一个建议。这些拆解好的任务，就成了研发团队自己的“规划”。</strong></p><h4 id="02-人力规划-–-丰富多彩"><a href="#02-人力规划-–-丰富多彩" class="headerlink" title="02. 人力规划 – 丰富多彩"></a>02. 人力规划 – 丰富多彩</h4><p>人力可能是公司出规章制度最多的一个部门，每一个规章制度，都影响着团队的运作。如考勤、招聘、调薪、晋升、绩效、等等。这在《团队工作方向》里进行展开，下面简单提下招聘和考勤两个重要的场景，本篇不再细述。</p><p>技术leader对于招聘工作务必上心，给自己的团队招聘优秀的人才，是leader一个很重要的职责（不是HR的职责），而且在人才选拔上，除了保持团队的梯队合理外，要敢于请进来专业能力比自己强的人。作为技术leader，走向管理岗位，就需要接受团队里专业比自己强的人存在，给他们发挥的空间。</p><p>在考勤上，由于从事技术工作的人不少是夜猫子，喜欢晚上安静的时候干活，平时加班也很多，我推崇“自由”的考勤制度。做技术工作，如果自驱能力不够好，很快产出就掉下去了。技术leader发现后，通过绩效管理、辅导的方式，能够有效应对。考勤“自由”，是对工程师的一种信任，当然如果违背信任，对应的惩罚代价也很大。</p><p><strong>技术leader一定和自己接口的HR或HRBP，保持高频沟通，来保持团队在人事规章制度上，即使自己不知道，也有人来监督、提醒。</strong></p><h4 id="03-财务规划-2"><a href="#03-财务规划-2" class="headerlink" title="03. 财务规划"></a>03. 财务规划</h4><p><strong>对于技术团队来说，财务规划一般就是要做好预算费用的编制和控制。</strong> 在技术团队，涉及的预算，一般包括：</p><ol><li>行政办公设备预算</li><li>工具软件license预算</li><li>团建预算</li><li>差旅预算</li><li>测试机、短信通道、云服务等预算</li><li>其他</li></ol><p>笔者初作预算时，头脑嗡嗡响，一是想不到有那么多预算项目，二是不知道怎么去做，设定多少预算额度合适。这主要是因为隔行如隔山，请教一下做过预算的前辈、自己耐心做几次就熟悉了。</p><p>综上，本文概要介绍了业务规划、人事规划、财务规划，帮助技术leader去理解公司的规划，进一步自己参与规划拆解为研发任务的过程，提供一定的知识基础。</p><h2 id="协调方向篇"><a href="#协调方向篇" class="headerlink" title="协调方向篇"></a>协调方向篇</h2><p>协调方向的工作非常广，涉及到方方面面，我们在公司的协作中，到底为什么这么难？不探究本质，是难以找到解决方案的。笔者认为，<strong>协调遇到的困难，本质的原因，是组织内天然存在的部门墙</strong>。本文从部门墙维度，来看部门的协作、项目协作的改进。<strong>此篇和技术团队Leader有关，但是其实延伸的更远，更多职业阶段，都受到协调工作的“苦难”；同时也探讨下，如何在工作里，利用部门墙，使之产生不一样、难以抗拒的价值。</strong></p><h3 id="01-什么是部门（团队）墙？"><a href="#01-什么是部门（团队）墙？" class="headerlink" title="01.  什么是部门（团队）墙？"></a>01.  什么是部门（团队）墙？</h3><p>给部门墙下一个定义，因多种因素产生的部门间不能有效协作的隐形障碍，并对公司整体目标达成产生伤害。部门墙可以归纳出以下几个主要诱因：</p><ul><li>目标不同产生的部门墙</li><li>信息不透明产生的部门墙</li><li>观点不一致产生的部门墙</li><li>节奏（优先级）不一致而产生的部门墙</li><li>专业理解不一致而产生的部门墙</li><li>因主导权竞争而产生的部门墙</li></ul><p>在复杂的中大型企业里，为了完成业务，制造产品或提供服务，需要不同能力、技能和专业的人，进行系统性的配合，才能完成。这些人才因业务不同而分开、因职责不同而分开、因地域不同而分开、或因管理规模切分而分开；形成不同的部门和团队组织。</p><p>每个团队自组建那一天起，他就是一个生命体，有自己的意志、灵魂，有自己的欲望、思想；有自己的新陈代谢，有自己的生老病死。每个team成员，都是其中的一个器官或细胞，只不过和我们所熟知的生命器官形态、功能并不一样。</p><p><strong>在从事工作的18年后，我回忆了所有我工作过的团队、部门，很不幸的是，没有一个团队或部门，是没有部门墙的</strong>；在存续的生命周期里，都对外产生了协作的或大或小的问题。<strong>部门墙和企业文化无关、和员工素质无关，是企业多部门、多团队组织的自然存在</strong>。</p><h3 id="02-部门墙的典型事例"><a href="#02-部门墙的典型事例" class="headerlink" title="02. 部门墙的典型事例"></a>02. 部门墙的典型事例</h3><p>先看看因目标不同而产生的部门墙。举一个身边的例子，2019年技术部门启动了UC的重构项目，因这个系统发生过多起公司A级故障，非常影响公司业务的稳定开展；产品部门启动了HR体系数据治理，要把人事数据的准确率提高到99%；这两个目标对于公司，都是很有价值、有必要去完成的项目。</p><p>但是这两个目标产生了对产品资源和研发资源的竞争；UC的重构优化是需要产品经理的；人事数据治理也是需要技术的；双方对对方的资源投入都不满意，以至于投诉到了我这里。产生部门墙的后果也很严重，产品团队要把负责UC优化的PM给撤出来，减少对UC项目的支持；结果让两个团队之间剑拔弩张。</p><p>后来通过沟通，保障了一个全职的PM，来推进UC的重构、优化，同时研发团队优化资源调配，加大对数据治理项目的支持；最终两个项目，都完成了自己的目标。</p><p>下面看一个信息不透明产生的部门墙例子；我刚进一个公司，负责一块新业务时，研发团队刚刚组建（5个人），而此时产品已经有6个人了。这在我看来是有问题的，意味着产品要么做的设计没有资源实现，要么产品在非常低效的产出。我刚来负责这个部门，当向PM团队提出这个问题时，PM团队不愿意关于这个问题进行深入的沟通，只是反馈我们都很忙，工作量都很满。</p><p>这样的信息不透明，产生的结果是很负面的，后续的解决过程，几乎一直在对抗的负面状态；后来我思考这个问题，可能是因为我的比较重的技术背景，让PM团队不愿意接受我来lead，于是调整姿态，以逐个具体产品方案的review，来降低信息不透明的问题，通过3个月的持久努力，解决了产品和技术团队的配比问题。</p><p>这里再举一个节奏不一致导致的部门墙问题，去年我们启动了一个业财对接的项目；财务对这个业务的核算非常重视，因为业务规模比较大；而此时，业务部门的重心放在业务的规范和线上化上，也认同业务的核算是必须要做的，但是得先让业务系统跑顺起来。在持续了9个月的时间里，业财对接一直低效的推进，财务的数据规则、流程规范，在业务系统里得不到落地。这是典型的两个部门节奏不一致导致的部门墙，过程中也是非常痛苦，业务负责业财对接的团队，士气低迷；而财务同事，也非常泄气。</p><p>直到今年，业务系统把财务核算纳入到整体系统规范、标准化中来，提高了优先级，和财务部门的目标优先级相匹配，这个项目才有了起色。</p><p>这样的例子太多了，我想各位读者静思一下，能列出的实际例子，比我列举的更多、更丰富，有很多的因素，能够撞上“部门墙”，降低部门效率，扰乱团队的合作氛围。</p><h3 id="03-如何跨越部门墙"><a href="#03-如何跨越部门墙" class="headerlink" title="03. 如何跨越部门墙"></a>03. 如何跨越部门墙</h3><p>没有一个组织，不希望团队、部门间能够无间的协作；站在公司层面，都是公司的资源，有效的把资源转成公司的产出，才是公司这个组织所期许的。对于无处不在的部门墙，我们如何能够有效的跨越呢？笔者据自己的经验，列出以下几个方法：</p><ul><li>个体主动放弃防御心理</li><li>在对外寻求合作时，务必提前把事情想清楚</li><li>在支持外部发起的合作时，务必努力去把信息接受全</li><li>站高一层，跳出当前部门，从更高的层面看协作</li></ul><h4 id="个体主动放弃防御心理"><a href="#个体主动放弃防御心理" class="headerlink" title="个体主动放弃防御心理"></a>个体主动放弃防御心理</h4><p>这对于职场里的每个人，都非常有价值。<strong>防御心理使得我们只想听那些我们想听的话，而错失其他信息的输入、曲解外界的信息输入</strong>。在对外的沟通中，不预设对方的态度、目的，以避免形成成见，以空杯心态迎接外界。这能够最大限度的让我们接受外面真实的信息，减少误判。</p><p>笔者在这方面，也踩过很多坑；无来由的怀疑对方的动机和目的，以至于在具体工作配合上，采取不信任、消极的态度。时而反思自己，方能减少这样的错误。</p><h4 id="对外寻求合作时，把事情想清楚"><a href="#对外寻求合作时，把事情想清楚" class="headerlink" title="对外寻求合作时，把事情想清楚"></a>对外寻求合作时，把事情想清楚</h4><p>合作从来都是难的事情，尤其在信任不足的场景下（如果有信任，那合作是很快能达成的，不需要检查那么多合作的预置条件），对此<strong>我们有必要把合作的目标、计划、资源、价值想的清楚了，去对外沟通。每个团队、部门都是繁忙的（大部分情况下），自己准备充分，是对别人的尊重，是获得支持的有效方法。</strong></p><p>我们的技术部门和公司的基础架构平台有非常好的合作，去年我们把团队所有的公共技术组件资源，都转交到了基础架构平台，以响应公司的基础技术环境统一建设的号召。但是我们团队的技术人员，非常希望通过基础技术组件的建设，来提高自己的技术能力和视角。因此我们创新性的提出“合作共建”的方法，主动提出参与基础架构平台的系统建设，即为基础架构平台提供资源的支持，也为我们部门的技术发展、技术组件引进，提供了可能，对技术团队的稳定、成长，有很好的帮助。</p><h4 id="在支持外部发起的合作时，务必努力去把信息接受全"><a href="#在支持外部发起的合作时，务必努力去把信息接受全" class="headerlink" title="在支持外部发起的合作时，务必努力去把信息接受全"></a>在支持外部发起的合作时，务必努力去把信息接受全</h4><p>在外界需要我们配合协作时，作为负责人，我们将最终要判断要不要合作、投入多大力度合作。这是一个决策机制，依赖信息准确、丰富。不仅仅对方把信息push过来，同时我们自己也要主动的去沟通获取重要信息，判断是否有价值做、是否有资源做。当然，既要根据信息做出正向支持的决策，也要做出负向支持的决策（不见得所有的协作都是有必要的）。</p><p>近期我们启动了一个项目，看似非常紧急，调动我们团队的工程师加班加点，一阵猛如虎的操作以后，发现这事情好像也没有这么重要；再回过头来Review时，确认是可以长线做的，不是异常紧急的项目。这是典型的一个信息没有完全接受，做出的一个决策结果。</p><p><strong>建议可以结构化的对外接受信息，从以下几个方面主动获取信息：</strong></p><ul><li>清晰的目标价值（最好是数字表达的目标）</li><li>明确的进度计划</li><li>需要的资源投入</li><li>完成后如何评价项目价值 （最好也是可衡量的数字化价值）</li></ul><h4 id="站高一层，跳出当前部门，从更高的层面看协作"><a href="#站高一层，跳出当前部门，从更高的层面看协作" class="headerlink" title="站高一层，跳出当前部门，从更高的层面看协作"></a>站高一层，跳出当前部门，从更高的层面看协作</h4><p>最重要的事，一般放在最后讲。我认为<strong>这是跳出部门墙进行合作的最有效办法</strong>。在二维空间，部门墙是拦路虎，迂回到很远才能越过去；但是如果升维到三位空间，部门墙就是可以跳跃过去的。</p><img src="/images/研发Leader成长手册/从更高层面看协作.webp" alt="从更高层面看协作" width="600"><p>站在跨越了部门的更高维度思考，可以让我们避开二维的“部门墙”思维陷阱，在更高的维度看，A和B同时在一个新的“组织”里，是内部的关系。</p><p><strong>Leader如果具备更高维度的思考能力，或做这样的尝试（这是个难的事），对自己个人的提高、发展是大有裨益的。在外界看来，这个leader的格局很高，做事公正无私，跨部门合作也容易产生更有价值的成绩，实在是发展、晋升的必备良药。</strong></p><h3 id="04-如何利用部门墙"><a href="#04-如何利用部门墙" class="headerlink" title="04. 如何利用部门墙"></a>04. 如何利用部门墙</h3><p>既然部门墙如此客观的存在，那就没有利的一面嘛？凡事都有两面性，我们应当合理的利用部门墙。</p><p><strong>首先，部门墙容易产生“领地”意识；</strong> 对于领地意识，是个有好有坏的典型。一方面，“领地”意识导致别人难以进入，提供更好的方案；<strong>另一方面，“领地”意识产生极强的责任心，很宝贵的责任心。</strong> 我承认我也是有“领地”意识的，效率工程是我们的“领地”，这里出现问题，责无旁贷，不需要公司push，我们就回去解决；而同时，也确实限制了其他部门对效率工程方面的贡献。</p><p><strong>其次，部门墙使得决策延长、不靠谱的决策被挡住。</strong> 一个部门内的事情，可以很快、高效的决定，但是也不会有人来review；跨部门的协作，天然的就加了这样一道机制，让另一双眼睛来审视，决策是否正确、是否可以更好。</p><p><strong>最后，部门墙让部门的不同意见、看法产生碰撞，如果能够因势利导，这样的碰撞也许能够碰触比原来不一样的思考、决策，甚至是创新。</strong> 部门之间的碰撞越大，说明分歧越大，分歧越大，为了弥补分歧，就要提出更好的方案，来覆盖多方的分歧。这岂不是创新的温床？</p><p><em><strong>综上所述，部门墙的弊端，在技术Leader这一职业阶段，会比部门墙的利端更大；但是随着职业的发展，有效利用部门墙，会带来意想不到的价值。</strong></em></p><h2 id="团队方向篇"><a href="#团队方向篇" class="headerlink" title="团队方向篇"></a>团队方向篇</h2><p>敬请期待…</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能写作v2.0</title>
      <link href="/2020/05/05/post/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9Cv2.0/"/>
      <url>/2020/05/05/post/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9Cv2.0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自：<a href="https://mp.weixin.qq.com/s/SbyL7elFFhXDGv4yOkT7iQ">智能写作v2.0</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p><strong>computational literature</strong></p><p>如何看待文科渐渐「计算化」的趋势？</p></blockquote><p>近年随着算力和数据科学的发展，不少文科开始出现「计算XX学」的分支，跟写作相关的比如，<strong>计算文学、计算语言学、计算美学</strong>。本文大量的工作基于《人工智能写作指南v1.0》，结合近些年作者的实践研究及国内外行业进展，整理而成，主要包括知识点、产品、技术栈等内容。</p><p>版本记录：</p><ul><li>2019-02-14 v1.0</li><li>2020-04-26 v2.0</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这是一个机器人写稿的时代，智能写作应用的行业涉及非常广，有新闻业、媒体业、广告业、自媒体行业、政府公文等等，跟文字生产有关的都有所应用。</p><p><strong>应用场景上下游</strong>主要分为上游的生产端，表现为创作工具（诸如编辑器、笔记类产品），中间环节主要是内容的审核、发布、培训（主要产品比如文本风险、版权检测、多平台自动发布），下游主要是内容的消费，比如广告变现、知识付费等。</p><p>最典型的产品是<strong>机器人记者</strong>，是不是意味着“人类记者即将失业”？其实不然，目前，新闻机器人主要用于以数据为基础的报道领域，例如公司年报、股票市场简报、地震报道和体育报道等等数据类的新闻。</p><p>还有文学类的产品也备受关注，例如<strong>互动小说、小说生成</strong>之类的。甚至是书籍的生成，有一个做法是通过浏览维基百科，<strong>算法自动生成教科书</strong>。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>程序写作<br>Program Writing<br>使用计算机程序来生成文字，包含的范围非常广。</p></li><li><p>电脑生成文学<br>Computer-Generated Literary Art<br>主要是计算机与文学方面的结合，偏艺术创作。</p></li><li><p>智能写手<br>artificial intelligence writer<br>主要是使用机器学习、深度学习等算法来生成文章或辅助写作。应用有写稿机器人、写作辅助工具、智能写诗、写春联等。</p></li><li><p>机器人记者<br>robo-journalist<br>主要用于写新闻报道，甚至能够对事实进行评论。比如在体育报道方面，它能够充分理解“反败为胜”“团队努力”之类的专业术语，同时根据自己的判断对体育比赛最重要的方面进行报道。它不会单纯地复述事实，而是会给文章加入一些不同的元素。</p></li><li><p>互动小说<br>Interactive Fiction<br>通常缩写成IF，指在软件模拟的环境中，读者通过输入纯文字命令来控制人物和影响环境，从而完成故事讲述。通俗一点的理解，可以将它看作是文字版的冒险或RPG游戏。</p></li><li><p>非线性叙事<br>由于是涉及到文学作品的生成、创作，计算机、人工智能改变了以往的叙事逻辑，我们可以技术的帮助下，进行非线性的叙事创作。</p></li><li><p>计算美学<br>Computational Aesthetics<br>计算美学研究审美对象的种种量化关系。其思想根源早在20世纪上半叶就已经诞生。当时美国数学家 George D. Birkhoff 提出，秩序与复杂度之间的比值作可以作为一种美学度量。因此，计算美学的主要任务就是发展新的科学方法来量化美，并建立人类审美感知的模型。</p></li></ul><h2 id="人工智能写作基本能力"><a href="#人工智能写作基本能力" class="headerlink" title="人工智能写作基本能力"></a>人工智能写作基本能力</h2><ol><li><p>第一是总结能力，分析大量数据，从而总结事实；</p></li><li><p>第二是解构重组能力，从大量数据中提取所需内容，并通过排列、组合形成文档。</p></li><li><p>第三是美学能力，能够分别出成文的句子、段落、篇章的艺术特点，具体表现为一套评分系统</p></li></ol><blockquote><p>(目前市面上还没看到一款有美学能力的智能产品,欢迎读者提供线索)</p></blockquote><h2 id="典型的技术思路"><a href="#典型的技术思路" class="headerlink" title="典型的技术思路"></a>典型的技术思路</h2><p>使用创新的创作技巧撰写非凡的文本，专注于新的写作方法，而不是传统的抒情或叙事手法。下面分别从新闻生产、新媒体内容生成、文学作品、书籍内容生成来介绍。</p><ul><li>新闻编码的理论</li></ul><p>来源于《纽约时报》研究与发展实验室提出的「Particles理论」，这套理论核心是：<strong>给新闻编码</strong>。</p><p>以“积木式”的编辑模式改变新闻生产、分发全部环节，并最大限度释放媒体人的生产力。</p><p>最核心的是把可能会被重复使用的部分识别出来并加以注释，这一过程被称为Particles。</p><p>从而，所有的资讯内容都被转化为了可供拼装的“颗粒”，每个部分都被重新编码，添加标签，而且是可以被嵌入的。</p><ul><li>算法新闻的制作方法</li></ul><p>首先，选定主题；<br>其次，编写爬虫爬取题材对应的文章数据；<br>第三，清洗数据，整理数据，去除无效信息；<br>第四，探索数据，发现其中有价值的信息；<br>最后，编写机器学习算法完成创作。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E5%8F%AF%E8%A7%86%E5%8C%96web%E9%A1%B5%E9%9D%A2.png" alt="可视化web页面"></p><p><strong>表现形式一般是可视化的web页面，这次疫情尤其凸显出此类新闻的重要性</strong>。</p><p>机器学习可以帮助记者完成日常任务，比如</p><p>寻找新闻；<br>捕捉图片和影像；<br>在社交媒体上编辑和发布新闻作品；<br>自动转录，使用图像识别技术来识别照片中的人，以及给视频加上字幕；<br>从社交媒体的海量内容中寻找特定信息；</p><ul><li>机器自动生成新媒体内容</li></ul><p>用机器完成内容的生成，思路来源于一款叫「新闻七点钟News at Seven」的应用，利用现有的网络资源、外部文本、多媒体资料库和用户偏好，来为用户创建个性化的音频和视频内容。</p><p>具体流程：<br>首先，根据用户偏好在系统中找到相关的文本<br>其次，处理文本<br>第三，补充图像、视频和相关的网友回复<br>第四，输出一个在线Flash短片，用卡通人物形象模仿传统的晚间新闻广播形式，来向用户播放内容。</p><ul><li>文学作品创作思路</li></ul><p>举一个撰写「关于饮食习惯」的文学作品的例子。</p><p>首先介绍一种<strong>量化美食</strong>的思路，下图是一个<strong>美食风味网络</strong>，每个节点代表一种食材，颜色代表所归属食物种类。节点大小反映了一种食材在菜谱中的普遍性。如果两种配料有显著数量风味的化合物共享，则表示它们之间有关联，链接的粗细代表两种配料之间共享化合物的数量。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E7%BE%8E%E9%A3%9F%E9%A3%8E%E5%91%B3%E7%BD%91%E7%BB%9C.png" alt="美食风味网络"></p><p>美食风味网络</p><p>回到我们的文学作品的构建思路，首先，收集微博文本内容；</p><p>其次，提取出用户饮食习惯等数据，主要使用分词、词性标注和依存句法分析等NLP技术。那么如何抽取出用户饮食习惯呢？主要是由三个条件组成的规则：</p><blockquote><p>一条微博里含有词语“吃”；</p><p>与“吃”相关的句法关系为动宾关系；</p><p>“吃”的宾语为名词；</p></blockquote><p>就可以判断发生饮食行为，进而提取出“吃”的宾语就是相关的食物，从而形成饮食习惯数据。</p><p>最后，重新组织语言，把用户的饮食习惯数据书写出来。</p><ul><li>情感弧线<br>emotional arcs</li></ul><p>此项技术可以帮助我们<strong>分析故事的主要高潮和低谷</strong>。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E6%83%85%E6%84%9F%E5%BC%A7%E7%BA%BF%E5%88%86%E6%9E%90.webp" alt="情感弧线分析"></p><p>作者使用了三种主要方法进行《哈利·波特》的情感弧线分析：奇异值分解（singular value decomposition）；以 Ward 的方法产生故事的分层聚类；以及自组织映射机器学习方法来聚类情感弧线。<strong>情感弧线是通过使用 hedonom.org 和 labMT 数据集分析滑动10000字窗口的情绪而构建的</strong>。</p><p>另外 hedonometer.org 网站还提供了许多其他书籍、故事、电影剧本以及Twitter的交互可视化情感弧线。</p><ul><li>新型书籍的自动生成</li></ul><p>在没有人工参与的情况下，自动生成整本维基教科书；</p><p>这部分是来源于Wikibook-bot的一项技术，是由以色列内盖夫本古里安大学的沙哈尔阿德马蒂Shahar Admati 及其同事开发的；</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E7%BB%B4%E5%9F%BA%E6%95%99%E7%A7%91%E4%B9%A6.webp" alt="维基教科书"></p><p>主要的流程如下：</p><p>首先，准备一组现有的维基教科书，用作训练数据集，数量级在6000本以上。</p><p>其次，进行数据清洗，规则是：<br>1 关注浏览量超过 1000 次的教科书；<br>2 涵盖超过十个章节</p><p>第三，生成标题，该标题用以描述某种概念。</p><p>第四，文章清洗，规则类似于pagerank的原理，文章通常通过超链接指向其他文章，在网络上搜集出通过点击超链接三次以内得到的所有文章作为优质的文章。每本人工维基教科书都有自己的网络结构，其决定因素包括，引用该文的文章链接数量、指向其他文章的链接数量、所包含文章的页面排名列表等。</p><p>第五，文章分类，对所有维基百科文章进行分类；</p><p>第六，每一个类别主题对应的文章的再次清洗，该算法会查看每一篇给定主题筛选出来的文章，接着判断如果将其添加到维基教科书中是否会使该书的网络结构与人工创作的书籍更相似。如果不相似，那么该文章就会排除在外。</p><p>第七，将每一个类别主题对应的文章组织成章节。主要借助聚类算法，结合由整组文章组成的网络，找出如何将其划分为连贯的集群。</p><p>第八，确定文章在每个章节中的出现顺序。使用的是枚举，然后排序的思路，通过给文章成对分组，对所有文章枚举所有组合，然后使用网络模型来计算排序逻辑，最终计算出更为理想的文章顺序以及章节顺序。</p><p>感兴趣可以详细阅读论文：<br><a href="https://arxiv.org/pdf/1812.10937v1">https://arxiv.org/pdf/1812.10937v1</a></p><h2 id="主要涉及的NLP技术"><a href="#主要涉及的NLP技术" class="headerlink" title="主要涉及的NLP技术"></a>主要涉及的NLP技术</h2><h3 id="NLP-自然语言处理"><a href="#NLP-自然语言处理" class="headerlink" title="NLP 自然语言处理"></a>NLP 自然语言处理</h3><p>为了实现写作类的应用，需要对文本进行大量的处理，NLP是一种让机器能够像我们平常那样阅读和理解语言的技术。常常会结合知识图谱来使用，以提升产品效果。</p><p>我们需要掌握NLP的常见任务及算法。</p><ul><li>主要的NLP任务</li></ul><p>文本分类、情感分析、分词、依存句法分析、实体识别等；</p><ul><li>深度学习算法</li></ul><p>目前深度学习有以下典型的算法，可以一一详细了解掌握；<br>参考地址 <a href="https://github.com/graykode/nlp-tutorial">https://github.com/graykode/nlp-tutorial</a></p><ul><li>GPT2</li></ul><p>这里要举一个例子，在大受欢迎的 reddit 社区中，一个名为 SubSimulatorGPT2 的子讨论小组格外引人注目：<strong>其内容完全由人工智能聊天机器人模仿各种讨论小组的风格生成后发布</strong>。</p><p>SubSimulatorGPT2<br><a href="https://www.reddit.com/r/SubSimulatorGPT2/">https://www.reddit.com/r/SubSimulatorGPT2/</a></p><p>早期的SubredditSimulator（<a href="https://www.reddit.com/r/SubredditSimulator/%EF%BC%89%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BD%BF%E7%94%A8**%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE**%EF%BC%8C%E8%BF%99%E6%98%AF%E4%B8%80%E7%A7%8D%E6%88%90%E7%86%9F%E7%9A%84%E7%94%9F%E6%88%90%E5%BA%8F%E5%88%97%E7%9A%84%E6%8A%80%E6%9C%AF%E3%80%82">https://www.reddit.com/r/SubredditSimulator/）的机器人使用**马尔科夫链**，这是一种成熟的生成序列的技术。</a></p><ul><li>马尔可夫链和N-gram</li></ul><p><strong>马尔科夫链的假设（第一性原理）</strong>。基于马尔可夫链的模型假定句子中的每个单词仅取决于其前面的几个单词。因此，给定任意句子的概率为组成该句子的所有n-gram（n个单词的序列）的组合概率。下图说明了该概念:</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE&N-gram.png" alt="马尔可夫链&amp;N-gram"></p><p>以Python 语言为例，采用字典(Dictionary)的数据结构。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure><p>键名是当前的单词，键值是一个列表List，存储当前单词的下一个单词。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;word1 : [word2,word3], word2 : [word3,word4,word5] &#125;</span><br></pre></td></tr></table></figure><p>具体的例子，有这么两句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I like to eat oranges</span><br><span class="line">You eat apples</span><br></pre></td></tr></table></figure><p>我们希望通过<strong>马尔科夫链</strong>来学习以上数据，经过计算，模型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#x27;START&#x27;: [&#x27;i&#x27;,&#x27;you&#x27;],</span><br><span class="line">&#x27;i&#x27;: [&#x27;like&#x27;],</span><br><span class="line">&#x27;like&#x27;: [&#x27;to&#x27;],</span><br><span class="line">&#x27;to&#x27;: [&#x27;eat&#x27;],</span><br><span class="line">&#x27;you&#x27;: [&#x27;eat&#x27;],</span><br><span class="line">&#x27;eat&#x27;: [&#x27;apples&#x27;,&#x27;oranges&#x27;],</span><br><span class="line">&#x27;END&#x27;: [&#x27;apples&#x27;,&#x27;oranges&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们不需要计算下一个单词出现的概率，因为如果它们出现的概率较大，那么他们会在选取下个单词的列表中出现好几次。采用适当的数据结构，问题也得到了简化的处理。</strong></p><ul><li>词嵌入和神经语言模型</li></ul><p>词嵌入是当今NLP中任何人都必学的第一项技术：将词投射到多维空间中。它的优势在于，具有相似用法&#x2F;含义的单词会获得相似的向量（按余弦相似度衡量）。因此，涉及相似单词的单词向量的矩阵乘法趋于给出相似的结果。</p><p><strong>何为余弦相似度？</strong> 在NLP的任务里，会对生成两个词向量进行相似度的计算，常常采用余弦相似度公式计算。余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小。余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。</p><p>这是基于神经网络的语言模型的基础。有趣的是，<strong>神经模型不计算出现次数来确定概率，而是学习可以为任何输入计算出它们的参数（权重矩阵和偏差）</strong>。这样，甚至可以为我们从未见过的n个语法之后的下一个单词计算一个合理的概率分布。下图是一个最简单的神经网络：MLP (multilayer perceptron) 多层感知器。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/MLP%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8.png" alt="MLP多层感知器"></p><ul><li>递归神经网络</li></ul><p>随着递归神经网络（RNN）的出现，特别是长短期记忆（LSTM）的出现，语言生成方面获得了更大进步。与之前提到的最简单的神经网络不同，RNN的上下文不仅限于n个单词；它甚至没有理论上的限制。</p><p>RNN的主要改进在于保留了内部状态。因此，RNN可以不停地逐字读取单词，从而更新其内部状态以反映当前上下文，而不是只看固定的窗口（n个单词）。</p><p><strong>使用RNN的文本生成以自回归方式遵循与马尔可夫链相似的原理</strong>。RNN对第一个单词进行采样，将其送到神经网络以获取下一个单词的概率，然后再对下一个单词进行采样，依此类推，直到句子结束为止。如下图所示，依次学习The、boys、that、came单词的过程。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/RNN%E6%96%87%E6%9C%AC%E7%94%9F%E6%88%90.png" alt="RNN文本生成"></p><p>Internal State类似于大脑（黑箱），记录了所有复杂的文本信息。</p><ul><li>注意力机制</li></ul><p><strong>在产生下一个输出之前，先回顾所有先前的单词</strong>。计算注意力本质上是指计算过去单词的某种分布，然后将这些单词的向量与接收到的注意力成比例地进行聚合。下图说明了该概念。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/%E8%AE%A1%E7%AE%97%E6%B3%A8%E6%84%8F%E5%8A%9B.png" alt="计算注意力"></p><p>注意机制使RNN可以回顾先前单词的输出，而不必将所有内容压缩为隐藏状态。中间输出之前的压缩RNN块与不注意时的块相同。</p><ul><li>Transformer</li></ul><p>Transformer是一种神经网络架构，于2017年推出，旨在解决RNN的缺点。它的关键思想是<strong>完全依靠注意力，以至根本不需要内部状态或循环</strong>。下图是Transformer的简化的描述。实际的架构非常复杂，您可以在查阅相关文章找到更详细的解释  。</p><p><img src="/images/%E6%99%BA%E8%83%BD%E5%86%99%E4%BD%9C2.0/Transformer%E7%AE%80%E5%8C%96.png" alt="Transformer简化"></p><ul><li>GPT模型</li></ul><p>回到前文所提到的GPT2，GPT全称Generative Pre-Training，出自2018年OpenAI的论文《Improving Language Understandingby Generative Pre-Training》，论文地址：</p><p><a href="https://www.cs.ubc.ca/~amuham01/LING530/papers/radford2018improving.pdf">https://www.cs.ubc.ca/~amuham01/LING530/papers/radford2018improving.pdf</a></p><p>GPT是一种半监督学习方法，它致力于用大量无标注数据让模型学习“常识”，以缓解标注信息不足的问题。详细可以阅读论文深入了解。</p><h2 id="人工智能辅助写作"><a href="#人工智能辅助写作" class="headerlink" title="人工智能辅助写作"></a>人工智能辅助写作</h2><p>一些相关产品。</p><ul><li>Grammarly在线写作网站</li></ul><p>Grammarly是一款全自动英文写作工具， 可以实时检查语法，一边写一边改，语法问题和修改意见会以标注的形式显示在文档的右侧，方便用户去一一查看，而且在每条批注下面都会配有详细的解释，告诉用户哪里错了，为什么要这样修改。</p><ul><li>百度创作大脑</li></ul><p>百度人工智能写作辅助平台“创作大脑”，智能助手可以为人类创作者提供纠错、提取信息等各种辅助工作。</p><ul><li>GET智能写作</li></ul><p>一站式智能写作服务平台。全网热点追踪、推荐海量素材、提升原创质量。</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzA3MDgyMjMwMA==&mid=2649936256&idx=1&sn=44ec5149a73c8ef5ae0deff52bb08851&chksm=87308173b0470865c38cc2e4a972174775f456e4fb69c6a19a73d84e1f3c673888c87844fb3f&scene=21#wechat_redirect">揭秘 GET人工智能写作的前世今生</a></p><h2 id="算法新闻、机器人记者"><a href="#算法新闻、机器人记者" class="headerlink" title="算法新闻、机器人记者"></a>算法新闻、机器人记者</h2><p>目前在这个领域领先的有国外的2家公司：</p><ol><li>自动化洞察力公司 Automated Insights</li><li>叙述科学公司 Narrative Science</li></ol><p>我们先来了解下算法新闻的简史。</p><ul><li>算法新闻简史</li></ul><p><em>国外的早期创业公司，如今的佼佼者</em></p><p>早在2007年，美国的「自动化洞察力」Automated Insights公司成立；</p><p>2009年，美国西北大学研发的StatsMonkey「统计猴子」系统就撰写了一篇关于美国职业棒球大联盟季后赛的新闻稿件；</p><p>2010年，「叙述科学」公司Narrative Science成立；</p><p><em>由机器人记者主导的新闻行业正在迅速崛起</em></p><p>在2014年，美联社与Automated Insight公司达成协议，成为机器人记者的早期的采用者。</p><p>2014年3月，第一条完全由计算机程序生产的新闻报道产生。作为首家“聘用”机器人记者的主流媒体，《洛杉矶时报（LA Times）》在地震发生后3分钟就发布了首条相关新闻。</p><p>在这一年，机器人写稿技术研发公司Automated Insight全年生产了10亿条新闻。</p><p>在2015年，新华社推出可以批量编写新闻的写作机器人「快笔小新」；<br>同年9月，腾讯财经发布写作机器人「Dreamwriter」；</p><p>1年后，中国湖北广播电视台长江云新闻客户端就派出两会机器人记者“云朵”进行采访。<br>第一财经也发布写作机器人「DT稿王」</p><p>同年，国外挪威新闻社NTB启动机器人，开始着手制作自动化足球新闻报道项目；</p><p><em>自动化新闻已经通过自动新闻写作和发行进入新闻编辑室</em></p><p>2017年1月，南方都市报社写作机器人「小南」正式上岗，推出第一篇共300余字的春运报道。</p><p>……</p><p>以上为算法新闻简史。</p><p>我们需要知道「机器人记者」并不是真正的职业记者，而是一种新闻报道软件，拥有自动撰写新闻故事的功能。相类似的概念有算法新闻、自动新闻。</p><p>媒体一般都会形象地，描述机器人记者在媒体单位“上班”，机器人具备“真人记者”所有的采编功能，不会出错，不用休息，所写的文章不仅时效性强，质量也高，工作效率比“真人记者”高出好几倍。</p><ul><li>经典产品「机器人记者」</li></ul><p>由美国叙述科学公司Narrative Science发明的写作软件；这个软件拥有自动撰写新闻故事的功能。</p><p>基于选题和新闻热点追踪，通过平台授权，结构化采集、处理、分类、分析原始数据素材，快速抓取，生成新闻关键词或线索，然后，利用文本分析和信息抽取技术，以模板和规则知识库的方式，自动生成完整的新闻报道。</p><p>尤其在体育赛事，金融经济，财报数据等方面作用突出。</p><ul><li>2018年数据新闻创新奖《搜索侦察机》</li></ul><p>记者彼得•奥尔德乌斯Peter Aldhous，开发了这个项目，他使用了机器学习——特别是「随机森林random forest」算法，从大量的飞机飞行数据中，建立了一个模型，可以根据以下数据：</p><blockquote><p>飞机的转弯速率</p><p>飞行速度</p><p>飞行高度</p><p>每条飞行路径周围的矩形区域</p><p>飞行持续时间</p></blockquote><p>识别出可能是“隐藏身份的侦察机”。</p><ul><li>各大报社、杂志社的应用</li></ul><p>国内有人民日报「小端」、光明日报「小明」、今日头条「张小明」、南方都市报「小南」等等。近期新华智云的更新是业内比较大的动作。</p><p>新华智云<br>作为新华社和阿里巴巴集团共同投资成立的大数据人工智能科技公司，于2019年发布了“媒体大脑3.0”。以区块链技术和AI审核为显著特征，为内容工作者提供“策、采、编、发、审、存”全流程赋能，为媒体机构、宣传部门、企业单位各类融媒体中心提供便捷、高效、智能的数据中台和内容生产平台。</p><p>新华社「快笔小新」<br>「快笔小新」的写稿流程由数据采集、数据分析、生成稿件、编发四个环节组成，这一机器人适用于体育赛事、经济行情、证券信息等快讯、简讯类稿件的写作。</p><p>腾讯「DREAMWRITER」<br>腾讯在2015年9月推出了一个叫 Dreamwriter 自动化新闻写作机器人。最开始，这项技术主要用在财经领域，现在它在体育赛事的快速报道中也有很成功的应用案例了。</p><p>2016年里约奥运会期间，Dreamwriter 就自动撰写了3000多篇实时战报，是奥运媒体报道团的“效率之王”。</p><p>在“2017腾讯媒体+峰会”现场，Dreamwriter 平均单篇成文速度仅为0.5秒，一眨眼的时间就写了14篇稿件。</p><p>国外的应用主要如下：</p><p>《卫报》<br>使用机器人辅助写作，并发表了一篇名为《Political donations plunge to $16.7m – down from average $25m a year》</p><p>《华盛顿邮报》<br>Heliograf机器人记者，在报道2016年夏季奥运会和2016年选举时证明了它的有用性；</p><p>还帮助《华盛顿邮报》在一年一度的全球大奖中获得了「巧妙使用机器人奖Excellence in Use of Bots」</p><p>《 Guardian》<br>2014年，英国《 Guardian》进行了纸质测试计划，安排“机器人”统计分析社交网络上的共享热点和注意力加热，然后内容过滤、编辑排版和打印，最后制作一份报纸。</p><p>《华尔街日报》<br>应用于金融投资研究报告片段的摘录，网站会提醒读者那一段摘录是由机器人完成的，哪些是由人类完成的。主要摘录类似于以下的文字：</p><blockquote><p>第二季度的现金结余8.3亿美元，这意味着在第一季度减少1.4亿美元之后，第二季度又消耗了8000万美元</p><p>Q2 cash balance expectation of $830m implies ~$80m of cash burn in Q2 after a $140m reduction in cash balance in Q1</p></blockquote><p>这句话实际上只包含了三个数据点，并使用特定的语法合并在一起，而且不包含任何巧合的成分。</p><p>《洛杉矶时报》<br>《洛杉矶时报》靠「机器人写手」，第一时间报道了美国加州2014年3月18日当地时间早晨发生4.4级地震；还应用于对犯罪时间错误归类的分析。</p><p>《纽约时报》<br>《纽约时报》对美国国会议员的图像识别；还应用机器人编辑Blossom预测哪些文章有可能会在社交网站上引起传播，相应地给版面责任编辑提出建议；</p><p>《福布斯》<br>2011年，开始使用叙述科学公司 Narrative Science 的自动写稿程序来撰写新闻；</p><p>彭博社<br>应用机器人系统Cyborg，帮助记者在每个季度进行大量的文章撰写，数量达到数千篇，包括各公司的财报文章等。机器人可以在财报出现的一瞬间就对其进行详细的剖析，并且提供包含这些相关事实和数据的实时新闻报道，速度非常迅速。</p><p>美联社<br>从2014年7月开始使用语言大师 Wordsmith 软件，利用自动化技术来写公司财务报表。几毫秒的时间，软件就能写出一篇美联社风格的完整报道。</p><ul><li>技术进展</li></ul><p>从早些年的以摘选稿件中句子为主，过渡到现在全流程的方式。</p><ul><li>人形机器人</li></ul><p>结合硬件，还有人形机器人版本的机器人记者的出现，例如中国智能机器人佳佳作为新华社特约记者越洋采访了美国著名科技观察家凯文·凯利。这是全球首次由高仿真智能机器人作为记者与人进行交互对话，专家认为具有标志性意义。</p><h2 id="新媒体与人工智能写作"><a href="#新媒体与人工智能写作" class="headerlink" title="新媒体与人工智能写作"></a>新媒体与人工智能写作</h2><p>按照美国新媒体艺术理论家马诺维奇（Lev Manovich）在《新媒体语言》一书中对新媒体技术所下的定义：</p><blockquote><p>所有现存媒体通过电脑转换成数字化的数据、照片、动态形象、声音、形状空间和文本，且都可以计算，构成一套电脑数据的，这就是新媒体。</p></blockquote><p>这是一个艺术与科技跨界结合的领域，我们可以关注国外的大牛：</p><p>MIT的Nick Montfort教授<br>国际上被公认为诗人和通过计算探索语言的人</p><p>他撰写了大量互动小说文章，发布在博客Grand Text Auto上，同时也开发了许多数字诗和文本生成器。他最近的着作是「The Future」和「The Truelist」，有兴趣可以去了解下他的研究。</p><p>下面给大家介绍典型的案例。</p><p><em>互动小说与新型文学作品的创作</em></p><p>2016年，人工智能创作的小说在日本「星新一文学奖」上被评委称为「情节无破绽」。人工智能应用于文学创作领域，为文学作品带来了新鲜血液，与文学作品的结合还增添了作品的互动性，与游戏、电影产生了跨界交融。</p><p><em>互动故事平台</em></p><p>加拿大多伦多的互动故事平台Wattpad<br>其产品包括匹配创作者和读者的机器写作，识别故事“趋势”，根据主题进行创意写作等；还开发了视频讲故事的应用「Raccoon」；</p><p>这是一个故事版的YouTube，专注于非虚构的，基于视频的，连接全球各地愿意分享、观看视频故事的用户。作者用视频的形式讲一段故事，用户可以收藏或分享。</p><p><em>社交媒体文学作品</em></p><p>对社交媒体上信息的重组，从而产生了新的文学形式。这时候机器类似于记者，采编社交媒体上的用户发言，而生成报道。</p><p><em>全球日常活动日记</em></p><p>阿姆斯特丹的Moniker设计工作室编写了一个针对推特信息的简单查询，<br>它搜索类似“这是 + 点 + 分 + 上午&#x2F;下午 + 和 + ”这类结构的句子，构成一份包含全球日常活动的日记。</p><p>这种“这是几点和我是”句式，可以反映社交媒体上用户的日常活动状态，下面是生成的报道效果：</p><blockquote><p>“这是12:29而我需要点饮料”</p><p>“这是1:00pm而我还没有离开我的床”</p><p>“这是11:00pm我终于得到了一杯咖啡。”</p></blockquote><p><em>《推傲慢与推偏见》<br>Twide and Twejudice</em></p><p>把推特中的内容，按照奥斯汀原文中的对话的风格，来重新生成。原理是替换相似内容的用词，让对话看起来“更接地气”：</p><blockquote><p>Is he&#x2F;she overrun 0r single?</p><p>What _a fineee thingi 4my rageaholics girls!</p></blockquote><p><em>类似于游戏的互动小说</em></p><p>案例一个互动小说，《The Hitchhiker’s Guide to the Galaxy（银河系漫游指南）》；小说讲述的是一个名叫阿瑟尔·登特的地球人，因为遭遇外星人修路拆迁，被卷入星际探险的故事。</p><p>它是根据同名科幻小说改编的互动版，虽然开头部分与原小说非常类似，但随着故事的开展。及用户的参与，出现了很多新的故事情节和从而产生了各种不同的结局。</p><p>体验地址：<a href="http://www.bbc.co.uk/h2g2game">www.bbc.co.uk/h2g2game</a></p><p><em>更游戏化的体验<br>IOS平台互动小说「florence」</em></p><p>是一款漫画风格的互动故事书式的手机游戏，出自《纪念碑谷》首席设计师之手，讲述了女主人公Florence Yeoh的初恋故事。<br>灵感来源于”Slice of Life”漫画小说和网络漫画；<br>但其故事是线性的，不存在选择与剧情分支。</p><p><em>互动电影<br>《黑镜：潘达斯奈基》</em></p><p>这部电影拥有一万亿种不同的情节排列组合，和五个截然不同的结局。凭借互动版《黑镜》，Netflix再次向世界证明自己“用技术打破传统、引领内容创新”的价值观。观众用触屏、鼠标、遥控器等就可以自己控制剧情走向和主角命运；选择不同，每个观众看到的内容就不同、故事结局也因人而异。</p><p><em>NaNoGenMo比赛</em></p><p>花一个月写代码，生成一个50k字的小说，最后分享小说和代码。是 Darius Kazemi 在美国「全国小说写作月 National Novel Writing Month：NaNoWriMo」的基础上延伸出的一个项目；</p><p>NaNoGenMo的目的更多的是娱乐自己和他人；<br>Github地址<a href="https://nanogenmo.github.io/">https://nanogenmo.github.io</a></p><p><em>World Clock<br>世界钟</em></p><p>是2013年的冠军，它由MIT数字媒体方向的Nick Montfort教授完成；他用165行Python代码将字符、位置信息以及一天之中每分钟的动作设计排列为新的序列。</p><p><em>Teens Wander Around a House小说</em></p><p>围绕某个话题的对话，但对话的内容毫无意义。设定了一大堆的智能代理，让它们随机的穿过房间，程序会记录下它们的行动。当两个同时来到一间屋子的时候，程序会从Twitter上摘取对话内容。一个微博内容也许就能成为一个问题，比如“明天晚饭吃什么？”那么紧接着的对话中也要包含“晚饭”这个词，“一天之中我最喜欢的就是晚饭”。</p><p><em>Generated Detective</em></p><p>这是一部黑色喜剧，生成的漫画有时不连贯，有如梦幻式的叙述；编写的程序从「Project Gutenberg古腾堡项目」的侦探小说中搜寻包含下列一系列单词的语句：问题、凶手、证人、目击、场景、杀手、武器、线索、指责、揭示。随后，程序用采集的每个语句检索Flickr，并把图像拼接成漫画的形式，合成对话框，最后以一个怪异而神秘的黑色故事作为结尾。</p><h2 id="机器的工作方式"><a href="#机器的工作方式" class="headerlink" title="机器的工作方式"></a>机器的工作方式</h2><p>我们已潜移默化地理解机器的工作方式，用机器所习惯的语言与机器沟通。例如，我们在适用搜索的时候，是不是跟我们日常的语言所不一样，我们习惯了不断变换关键字，不断组合关键字来与机器沟通。</p><h3 id="机器风格"><a href="#机器风格" class="headerlink" title="机器风格"></a>机器风格</h3><p>以文章是否读起来像人类作品作为评判电脑作品的依据是迂腐的，因为什么样的语言能够被称作“自然语言”的标准是相对的，而不是绝对的。</p><p>机器生成文章，以人类作家的标准去评判，是目前大众所认为的“正确”的事，然而，正是由于是机器生成的，有机器自身的独特风格，那有没有一种评判标准，脱离人类的评判标准，但符合机器的特点？</p><p>机器生成文本是另外一种文学风格，是机器所擅长的。</p><ul><li><p>能力1「节选」</p><p>  按句式，例如：</p><blockquote><p>A认为…</p></blockquote><p>  或按人物，例如：</p><blockquote><p>翟天临事件调查组</p><p>翟天临导师名字</p><p>北大回应翟天临事件</p><p>人民日报谈翟天临</p></blockquote></li><li><p>能力2「组装」</p><p>  把结构化数据，填充入语句中</p><p>  比如A，B 字段的数据，填充如句子：</p><blockquote><p>A可能造成B</p></blockquote></li><li><p>能力3「解构重组」</p><p>  情感分析，按照情感的设定重组章节</p></li></ul><p>这里介绍2个案例：</p><blockquote><p>《搜索者》</p><p>The Seeker</p><p><a href="https://github.com/thricedotted/theseeker">https://github.com/thricedotted/theseeker</a></p></blockquote><p>NaNoGenMo 2014年的作品。一本试图“通过阅读WikiHow来了解人类行为”的机器的自传。The Seeker的每次运行都是独一无二的，因为它依赖于外部随机性（在本例中为WikiHow）。<br>搜索者既是算法，也是代理人，主角，叙述者。</p><p>从本质上讲，它是一个解析，解构和重构文本的实体。此算法的输出是其执行此操作的“日志”，搜集关于人类活动的概念。</p><p>另一个是：</p><blockquote><p>我在清水中淌过</p><p>I Waded in Clear Water</p></blockquote><p>作者使用了情绪分析算法，根据文本的情绪特征对其进行分级，并据此规则改写Gustavus Hindman Miller的《10000个梦的解释》。</p><p>主要的句式是：</p><ul><li><strong>“行为”+“含义”</strong></li><li><strong>action + denotation结构</strong></li></ul><p>例如：</p><blockquote><p>行为：“看到橡树结满橡果”</p><p>含义：“意味着升职加薪”</p></blockquote><p>首先将行为部分转换为第一人称，简单的将句子重新处理成：</p><blockquote><p>“我看到橡树结满橡果”</p></blockquote><p>然后根据情绪分析算法所得出的结果，将“含义”部分按照从梦中最坏到最好的顺序重新排列。情绪分数创建了短的章节比如：</p><blockquote><p>“我将车开到浑水中。我看到别人在除草”</p></blockquote><p>和由一系列不相干的行动组成的长章节：</p><blockquote><p>“我走下一层楼梯。</p><p>我看到一个瘸子。</p><p>我看到我的爱人喝鸦片酒解愁。</p><p>我听见嘲笑声。</p><p>我停在窗台。</p><p>我身上有虱子。</p><p>我看到。</p><p>我丢掉了它。</p><p>无论如何我都感到忧郁。</p><p>我发出一条信息……”</p></blockquote><h3 id="人机协作"><a href="#人机协作" class="headerlink" title="人机协作"></a>人机协作</h3><p>机器有其特定的风格，而人机协作，可以产生更为丰富、有创意的成果，一个典型的人机协作思路是：机器生成若干结果，人从中选择一个结果，不断重复此过程，以完成某项任务。</p><p>这是Kazemi在2015年的NaNoGenMo作品中加入这种新的人机交流形式，让人和算法一起“合作”写小说；算法会起草十个句子，然后他作为人类从中选择他认为最好的那句。算法写作了文章中的每一个字，而作者则决定了整本小说的形式。</p><p><strong>10年后，人们对机器学习&#x2F;人工智能的看法将与我们今天对Excel、Word的看法一样。它只是我们用来完成某些任务的工具。</strong></p><p><strong>不要想我们可以在哪里可以使用人工智能，</strong></p><p><strong>反而应该想想我们每天都要面对哪些问题，</strong></p><p><strong>然后评估人工智能是否可以解决这些问题。</strong></p><p>以上为全文。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趋势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境搭建</title>
      <link href="/2020/04/06/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/06/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h2><table><thead><tr><th>名称</th><th>简介</th><th>使用说明</th></tr></thead><tbody><tr><td>OpenLDAP</td><td>开源的LDAP协议实现。</td><td><a href="https://github.com/osixia/docker-openldap">OpenLDAP</a></td></tr><tr><td>GitLab</td><td>Git仓库管理工具</td><td><a href="https://blog.yupaits.com/in-action/gitlab-manual.html">GitLab使用手册</a></td></tr><tr><td>GitLab-CI</td><td>GitLab默认集成的持续集成工具</td><td><a href="https://docs.gitlab.com/runner/">GitLab-CI Runner</a></td></tr><tr><td>Confluence</td><td>专业的企业知识管理与协同软件，可用于构建企业wiki</td><td>–</td></tr><tr><td>Jira</td><td>项目与事务跟踪工具，广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域</td><td>–</td></tr><tr><td>Crowd</td><td>Confluence与Jira单点登录</td><td>–</td></tr><tr><td>SonarQube</td><td>代码质量管理平台</td><td><a href="https://docs.sonarqube.org/latest/">SonarQube</a></td></tr><tr><td>Nexus</td><td>Maven仓库管理器</td><td><a href="https://help.sonatype.com/docs">Sonatype Help</a></td></tr><tr><td>Portainer</td><td>Docker可视化管理工具</td><td><a href="https://www.portainer.io/installation/">Portainer安装</a></td></tr><tr><td>jumpserver</td><td>开源堡垒机，符合4A的专业运维审计系统。</td><td><a href="https://docs.jumpserver.org/zh/docs/dockerinstall.html#">jumpserver</a></td></tr></tbody></table><span id="more"></span><h2 id="使用-docker-compose-部署"><a href="#使用-docker-compose-部署" class="headerlink" title="使用 docker-compose 部署"></a>使用 docker-compose 部署</h2><p>以上工具的 <code>docker-compose.yml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">portainer:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">portainer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">900</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/portainer/data:/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=sql123</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/mysql/conf:/etc/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">gitlab-runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitlab/gitlab-runner</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-runner</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/gitlab-runner/conf:/etc/gitlab-runner</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">openldap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/openldap:1.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openldap</span></span><br><span class="line">    <span class="comment"># 以下环境变量仅用于新的LDAP服务器</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="comment"># 组织名称</span></span><br><span class="line">      <span class="attr">LDAP_ORGANISATION:</span> <span class="string">&#x27;yupaits&#x27;</span></span><br><span class="line">      <span class="comment"># LDAP域</span></span><br><span class="line">      <span class="attr">LDAP_DOMAIN:</span> <span class="string">yupaits.com</span></span><br><span class="line">      <span class="comment"># LDAP基本DN。为空，默认取LDAP_DOMAIN的值</span></span><br><span class="line">      <span class="attr">LDAP_BASE_DN:</span> </span><br><span class="line">      <span class="comment"># LDAP管理员密码。默认是 admin</span></span><br><span class="line">      <span class="attr">LDAP_ADMIN_PASSWORD:</span> <span class="string">ldap123</span></span><br><span class="line">      <span class="comment"># LDAP配置密码。默认是 config</span></span><br><span class="line">      <span class="attr">LDAP_CONFIG_PASSWORD:</span> <span class="string">config</span></span><br><span class="line">    <span class="comment"># 使用现有的LDAP数据库</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/slapd/database:/var/lib/ldap</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/slapd/config:/etc/ldap/slapd.d</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">389</span><span class="string">:389</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">636</span><span class="string">:636</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">openldap-backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/openldap-backup:1.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openldap-backup</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="comment"># OPENLDAP配置备份cron表达式，默认是 &#x27;0 4 * * *&#x27;，每天凌晨4点</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_CONFIG_CRON_EXP:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line">      <span class="comment"># OPENLDAP数据备份cron表达式，默认是 &#x27;0 4 * * *&#x27;</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_DATA_CRON_EXP:</span> <span class="string">&#x27;0 5 * * *&#x27;</span></span><br><span class="line">      <span class="comment"># OPENLDAP备份保存天数，默认15天</span></span><br><span class="line">      <span class="attr">LDAP_BACKUP_TTL:</span> <span class="number">15</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/openldap/backup:/data/backup</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">phpLDAPadmin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">osixia/phpldapadmin:0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">phpLDAPadmin</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">PHPLDAPADMIN_LDAP_HOSTS:</span> <span class="string">ldap-host</span></span><br><span class="line">      <span class="attr">PHPLDAPADMIN_HTTPS:</span> <span class="string">&#x27;false&#x27;</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;openldap:ldap-host&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">680</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/nexus/data:/nexus-data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8081</span><span class="string">:8081</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:10</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=pg123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=sonar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube:lts</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sonarqube</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.url=jdbc:postgresql://postgres/sonar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.username=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonar.jdbc.password=pg123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_conf:/opt/sonarqube/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_data:/opt/sonarqube/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">confluence:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-confluence:6.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">confluence</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8090</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8091</span><span class="string">:8091</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/confluence/home:/var/atlassian/confluence</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/confluence/logs:/opt/atlassian/confluence/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jira:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-jira:7.10.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jira</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/jira/home:/var/atlassian/jira</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/jira/logs:/opt/atlassian/jira/logs</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">crowd:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yupaits/atlassian-crowd:3.2.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">crowd</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_MINIMUM_MEMORY=384m</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JVM_MAXIMUM_MEMORY=768m</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8095</span><span class="string">:8095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;env_path&#125;/volumes/crowd:/var/atlassian/application-data/crowd</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">sonarqube_conf:</span></span><br><span class="line">  <span class="attr">sonarqube_extensions:</span></span><br><span class="line">  <span class="attr">sonarqube_logs:</span></span><br><span class="line">  <span class="attr">sonarqube_data:</span></span><br></pre></td></tr></table></figure><h2 id="首次登录说明"><a href="#首次登录说明" class="headerlink" title="首次登录说明"></a>首次登录说明</h2><ul><li>phpLDAPadmin</li></ul><p>初始的登录账号密码为：<code>cn=admin,dc=yupaits,dc=com</code> <code>ldap123</code></p><ul><li>gitlab-runner</li></ul><p>gitlab-runner的配置文件 <code>config.toml</code> 的内容为：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>sonarqube</li></ul><p>初始登录账号密码为：<code>admin</code> <code>admin</code></p><p>在宿主机执行 <code>sudo nano /etc/sysctl.conf</code> 追加写入 <code>vm.max_map_count=262144</code>，执行 <code>sudo sysctl -p</code> 使配置生效</p><ul><li>mysql</li></ul><p>注释 <code>docker-compose.yml</code> 第21-23行，执行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;env_path&#125;</span>/volumes  <span class="comment"># $&#123;env_path&#125;替换为实际的目录</span></span><br><span class="line">sudo docker <span class="built_in">cp</span> mysql:/etc/mysql mysql/</span><br><span class="line">sudo <span class="built_in">mv</span> mysql/mysql mysql/conf</span><br><span class="line">sudo docker <span class="built_in">cp</span> mysql:/var/lib/mysql mysql/data</span><br></pre></td></tr></table></figure><p>取消21-23注释再执行 <code>sudo docker-compose up -d</code></p><ul><li><p>altalassian</p><p>  破解步骤：</p><ol><li>执行 <code>java -jar confluence_keygen.jar</code></li><li>填写 Name 和 Server ID，点击 <code>.gen!</code> 生成 Key</li><li>点击 <code>.patch!</code> 选择 <code>atlassian-extras-2.4.jar</code>，如果破解的 Jar 包名称不是则重命名为 <code>atlassian-extras-2.4.jar</code></li><li>将破解之后的 <code>atlassian-extras-2.4.jar</code> 覆盖当前实例的相应 Jar 包（名称和版本可能不一样，要修改成当前实例中的 Jar 包名称）</li><li>重启服务，填写 Key，完成安装</li></ol></li></ul><Vssue title="开发环境搭建"/>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2使用指南</title>
      <link href="/2020/03/28/WSL2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/28/WSL2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="WSL2简介及安装"><a href="#WSL2简介及安装" class="headerlink" title="WSL2简介及安装"></a>WSL2简介及安装</h2><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-about">关于 WSL2</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-install">安装 WSL2</a></li></ul><h2 id="安装WSL2支持的Linux发行版"><a href="#安装WSL2支持的Linux发行版" class="headerlink" title="安装WSL2支持的Linux发行版"></a>安装WSL2支持的Linux发行版</h2><p>进入 Microsoft Store 搜索关键词 <code>wsl</code>，选择要安装的Linux发行版，推荐安装 Ubuntu。</p><span id="more"></span><h2 id="Ubuntu系统配置"><a href="#Ubuntu系统配置" class="headerlink" title="Ubuntu系统配置"></a>Ubuntu系统配置</h2><h3 id="替换-APT-软件源"><a href="#替换-APT-软件源" class="headerlink" title="替换 APT 软件源"></a>替换 APT 软件源</h3><p>备份原有源文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/apt/sources.list</code> 修改 <code>sources.list</code> 文件，更改为阿里源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新软件源并升级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 升级</span></span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="配置中文环境"><a href="#配置中文环境" class="headerlink" title="配置中文环境"></a>配置中文环境</h3><p>安装中文语言包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install language-pack-zh-hans language-pack-zh-hans-base</span><br></pre></td></tr></table></figure><p>运行语言支持检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install $(check-language-support)</span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/default/locale</code> 修改配置文件为如下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">LANGUAGE</span>=zh_CN:zh</span><br><span class="line"><span class="attr">LC_NUMERIC</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TIME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MONETARY</span>=zh_CN</span><br><span class="line"><span class="attr">LC_PAPER</span>=zh_CN</span><br><span class="line"><span class="attr">LC_NAME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ADDRESS</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TELEPHONE</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MEASUREMENT</span>=zh_CN</span><br><span class="line"><span class="attr">LC_IDENTIFICATION</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ALL</span>=zh_CN.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>执行 <code>sudo nano /etc/environment</code> 在环境配置文件追加以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">LANGUAGE</span>=zh_CN:zh</span><br><span class="line"><span class="attr">LC_NUMERIC</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TIME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MONETARY</span>=zh_CN</span><br><span class="line"><span class="attr">LC_PAPER</span>=zh_CN</span><br><span class="line"><span class="attr">LC_NAME</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ADDRESS</span>=zh_CN</span><br><span class="line"><span class="attr">LC_TELEPHONE</span>=zh_CN</span><br><span class="line"><span class="attr">LC_MEASUREMENT</span>=zh_CN</span><br><span class="line"><span class="attr">LC_IDENTIFICATION</span>=zh_CN</span><br><span class="line"><span class="attr">LC_ALL</span>=zh_CN.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>重启 WSL2 服务：</p><p>打开 <code>任务管理器 -&gt; 服务 -&gt; LxssManager</code>，右键菜单选择 <code>重新启动</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发实战总结</title>
      <link href="/2020/02/20/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/20/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>总结了一些实际开发过程中需要注意的一些细节。（持续更新…）</p><span id="more"></span><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><p>使用<code>st_distance_sphere</code>函数获取指定地点周边一定范围内的所有地点。</p><p> 例如：district表中保存了各个城市（city_code）的经纬度信息（longitude、latitude），使用以下sql查询上海市（121.797447, 31.166809）周边300公里内的城市</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> city_code, st_distance_sphere(Point(longitude, latitude), Point(<span class="number">121.797447</span>, <span class="number">31.166809</span>)) <span class="keyword">as</span> distance</span><br><span class="line">    <span class="keyword">from</span> district</span><br><span class="line">    <span class="keyword">where</span> st_distance_sphere(Point(longitude, latitude), Point(<span class="number">121.797447</span>, <span class="number">31.166809</span>)) <span class="operator">&lt;</span> <span class="number">300000</span>;</span><br></pre></td></tr></table></figure></li><li><p>SQL join语法速记：</p><ul><li><code>A inner join B on ...</code> 取A和B的交集</li><li><code>A left join B on ...</code> 取A全部，B没有的对应的字段值为null</li><li><code>A right join B on ...</code> 取B全部，A没有的对应的字段值为null</li><li><code>A full outer join B on ...</code> 取并集，彼此没有的对应的字段值为null</li></ul></li><li><p>SQL的where语句中，使用<code>=</code>（或<code>!=</code>）去匹配给定的字段值时，匹配的结果中不包含表中该字段为null的数据。</p><p> 例如：当tt_data表中存在一条数据的字段data_type为null时，使用以下sql都无法查询到该条数据：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tt_data <span class="keyword">where</span> data_type <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tt_data <span class="keyword">where</span> data_type <span class="operator">!=</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用多线程分页同步数据时，会使用到常用的分页查询sql: <code>select * from table order by id asc limit n, m</code>。在数据量较大时，该sql在执行到最后几页的时候耗时会明显增加，原因是<code>limit</code>语句会从表的第1行扫描到第n行，n越大，扫描的时间越长。下面是针对这种场景的一种优化方式：</p><ul><li>假设主键ID是自增的，查出带同步数据的最小主键ID（minId）和最大主键ID（maxId）</li><li>通过sql: <code>select * from table where id &gt;= startId and id &lt; endId order by id asc</code>查询得到每页需要同步的数据。其中startId目标数据页的起始行ID，endId为目标数据页的结束行ID，并且<code>endId = startId + m</code>。特殊的，第一页的startId&#x3D;minId，最后一页的endId&#x3D;maxId。</li></ul></li><li><p>在执行数据清理任务是，如果MySQL单表需要清除的数据超过全表数据的50%时，可采用以下方案：</p><ul><li>创建临时表，表结构与原表结构相同</li><li>拷贝需要保留的数据到临时表</li><li>重命名临时表为原表名</li><li>删除原表</li></ul><p> 具体sql为：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `temp_table` <span class="keyword">LIKE</span> `ori_table`;</span><br><span class="line"><span class="comment">-- 拷贝原表数据到临时表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `temp_table` <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `ori_table` <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="comment">-- 重命名表</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> `ori_table` <span class="keyword">TO</span> `ori_table_bak`, `temp_table` <span class="keyword">TO</span> `ori_table`;</span><br><span class="line"><span class="comment">-- 移除原表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> `ori_table_bak`;</span><br></pre></td></tr></table></figure></li><li><p>配置MySQL连接参数<code>rewriteBatchedStatements=true</code>可启用批量插入优化，将多条数据插入语句批量提交只执行一次，可在一定程度上优化写入性能降低TPS。</p></li><li><p>MySQL随机数sql:</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取500~1500之间的随机数</span></span><br><span class="line"><span class="keyword">select</span> round(rand() <span class="operator">*</span> <span class="number">1000</span> <span class="operator">+</span> <span class="number">500</span>);</span><br></pre></td></tr></table></figure></li><li><p>在查询sql中使用<code>force index(idx)</code>强制此次查询使用指定索引，例如：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tt_data force index(idx) <span class="keyword">where</span> ...; </span><br></pre></td></tr></table></figure></li><li><p>MySQL执行sql报错：<code>You can&#39;t specify target table &#39;tt_data&#39; for update in FROM clause</code>，改写sql之后解决。但是改写在后的sql中，<code>delete from tt_data where id in (ids)</code>语句并没有并没有走主键索引进行查找删除，换成join临时表的方式使<code>id in (ids)</code>正常走主键索引查询删除，效率提升明显。具体语句如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 原sql，会报错</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tt_data <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tt_data <span class="keyword">where</span> ...);</span><br><span class="line"><span class="comment">-- 改写后的sql</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tt_data <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tt_data <span class="keyword">where</span> ...));</span><br><span class="line"><span class="comment">-- 优化后的sql</span></span><br><span class="line"><span class="keyword">delete</span> a <span class="keyword">from</span> tt_data a <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tt_data <span class="keyword">where</span> ...) b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li><p><code>RandomUtils.nextInt()</code> 生成随机整数，<code>RandomStringUtils</code> 生成随机字符串。</p></li><li><p>实现随机抽取集合里面的部分元素 <code>Collections.shuffle(list)</code> 将 list 元素循序打乱 <code>list.subList(0, loreResource.getQuesNum()); // subList(fromIndex, toIndex)的实际范围是[fromIndex, toIndex)</code> 获取指定数量的元素。</p></li><li><p><code>ListUtils.select()</code> 方法，类似于 JQuery 数组的 filter 方法。</p></li><li><p><code>System.out.println(Arrays.toString(someList.toArray()));</code> 方法可以方便地打印List内容。</p></li><li><p><code>Arrays.asList(T... a)</code> 无法将基本类型转换为 List，原因是 <code>asList()</code> 方法接收的是泛型的可变长参数，而基本类型（如int，char等）是无法泛型化的。使用 <code>asList()</code> 对基本数据类型进行操作时需要使用基本数据类型的包装类。<code>asList()</code> 返回的 ArrayList 类型是 <code>Arrays</code> 的一个内部类，没有实现 <code>add()</code> 、 <code>remove()</code> 等用于操作 ArrayList 的方法，当我们需要对 <code>asList()</code> 返回的列表进行常用操作时需要对其进行转换，<code>List list = new ArrayList(Arrays.asList(testArray));</code></p></li><li><p>Java类启动顺序，<code>static</code> 静态代码先于构造方法。</p></li><li><p>ThreadLocal变量一般使用<code>static</code>修饰。使用时，为了避免内存泄漏，在当前线程执行完之后需要调用<code>ThreadLocal.remove()</code>方法清除线程关联对象。</p></li></ol><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ol><li><p>如果项目启用了事务管理，Service 的实现类在增删改数据时需要加上 <code>@Transactional</code> 注解标明该类或方法加入了事务管理。</p></li><li><p>使用 shiro 权限框架时，需要检查需要权限控制的 Controller 类或方法是否加上了 <code>@RequiresRoles</code> 或 <code>@RequiresPermissions</code> 注解。</p></li><li><p>Controller 的方法传入 <code>@RequestBody</code> 参数时，method 只能是 POST 或 PUT。</p></li><li><p>Controller 通过 Model 对象实例通过 setAttribute 方法传值到前端 jsp 页面或是其他模板页面时，如果是在 js 里获取的话需要通过 var param &#x3D; ‘${param}’ 方式获取，用’’引起来可以避免当 ${param} 为空时 js 代码报错的问题，但同时也将参数类型强制转换为 string 类型了；当参数类型是 List 集合时，需要使用 eval(‘${param}’) 方法。</p></li><li><p>后台在增删改数据时，记得更新和该数据相关的缓存；特别是在更改记录时要更新更改之前和之后会包含该记录的缓存。</p></li><li><p>跨域访问时，可以在全局 Interceptor 中使用 <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, ACCESS_CONTROL_ALLOW_ORIGIN)</code> 限制可跨域访问的域名，类似的，使用 <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, ACCESS_CONTROL_ALLOW_METHODS)</code> 限制请求方法，<code>httpServletResponse.setHeader(&quot;Access-Control-Max-Age&quot;, ACCESS_CONTROL_MAX_AGE)</code> 设置可跨域访问的时限， <code>httpServletResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, ACCESS_CONTROL_ALLOW_HEADERS)</code> 限制请求头参数。 </p></li><li><p>SpringBoot 中可以使用 <code>@EnableScheduling</code> 注解启用定时任务功能，在方法上使用 <code>@Scheduled</code> 注解设置任务启动的时间。</p></li><li><p>访问日志功能的实现：定义一个 LogInterceptor ，使用 <code>logger.info()</code> 等方法记录下 httpServletRequest 中相关属性。</p></li><li><p>shiro 的 reaml 中保存的 Principal 为 User 对象时，页面上想要获取 User 对象的 username 属性可以使用 <code>&lt;shiro:principal property=&quot;username&quot;/&gt;</code> 标签，注意这里的 property 即是对应的属性名。</p></li><li><p>Spring 框架自带的 <code>BeanUtils.copyProperties(Object source, Object target, String... ignoreProperties)</code> 方法可以方便的做类属性的拷贝。</p></li><li><p>SpringBoot security 在使用 <code>.antMatchers(&quot;/management/**&quot;).hasAnyRole(&quot;SuperAdmin&quot;, &quot;admin&quot;)</code> 要注意数据库里保存的角色名称必须要以 <code>&#39;ROLE_&#39;</code> 开头，这里的角色在数据库的名称应为 <code>&quot;ROLE_SuperAdmin&quot;</code> 和 <code>&quot;ROLE_admin&quot;</code>。</p></li><li><p>SpringBoot security 的注解 <code>@PreAuthorize</code> 可以用在类或方法上来进行权限控制，其中 <code>hasRole()</code> 和 <code>hasAuthority()</code> 的区别在于前者可以忽略角色信息的前缀（默认是 “ROLE_”），而后者则必须要包含前缀。例如当保存的角色信息为”ROLE_admin”时， <code>hasRole(&#39;admin&#39;)</code> 和 <code>hasAuthority(&#39;ROLE_admin&#39;)</code> 是等效的。</p></li><li><p>SpringBoot 在整合 shiro 时无法在使用 rememberMeCookie 实现”记住我”（即 rememberMe）功能的同时实现使用 sessionIdCookie 单独管理用户 session 信息。而使用 sessionIdCookie 可以解决出现404之后刷新页面直接跳转到登录页面的问题（问题详情：<a href="http://jinnianshilongnian.iteye.com/blog/1999182">http://jinnianshilongnian.iteye.com/blog/1999182</a>）。</p></li><li><p>SpringBoot JPA 可以很简单的集成分页和排序功能，支持的 request 参数如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page，第几页，从 0 开始，默认为第 0 页；  </span><br><span class="line">size，每一页的数量，默认为 10；  </span><br><span class="line">sort，排序相关的信息，以 `property,direction(,ASC|DESC)` 的方式组织，例如 `sort=firstname&amp;sort=lastname,desc` 表示在按 firstname 增序排列的基础上按 lastname 的降序排列。  </span><br></pre></td></tr></table></figure><p> 例如请求链接为：<br> <code>http://host:port/blogs?page=0&amp;size=3&amp;sort=category,asc&amp;sort=description,desc</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;Blog&gt; <span class="title function_">findAll</span><span class="params">(<span class="meta">@PageableDefault(size = 10, page = 0, sort = &quot;id&quot;, direction = Sort.Direction.DESC)</span> Pageable pageable)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    Page&lt;Blog&gt; blogPage = (Page&lt;Blog&gt;) redisTemplate.opsForValue().get(blogCachePrefix + JSON.toJSONString(pageable));</span><br><span class="line">    <span class="keyword">if</span> (blogPage == <span class="literal">null</span>) &#123;</span><br><span class="line">        blogPage = blogRepository.findAll(pageable);</span><br><span class="line">        redisTemplate.opsForValue().set(blogCachePrefix + JSON.toJSONString(pageable), blogPage, <span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">&quot;获取分页博客博客，pageable ：&#123;&#125;, 耗时：&#123;&#125;ms&quot;</span>, JSON.toJSONString(pageable), (endTime - startTime));</span><br><span class="line">    <span class="keyword">return</span> blogPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 jackson 将实体对象转成 JSON ，在属性上加上 @JsonInclude(JsonInclude.Include.NON_NULL) 注解，当该属性NULL或者为空时将不参加序列化。JsonInclude 可选项有：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JsonInclude.Include.ALWAYS      //默认总是参加序列化</span><br><span class="line">JsonInclude.Include.NON_DEFAULT //属性为默认值不序列化</span><br><span class="line">JsonInclude.Include.NON_EMPTY   //属性为空或NULL都不序列化</span><br><span class="line">JsonInclude.Include.NON_NULL    //属性为NULL不序列化</span><br></pre></td></tr></table></figure></li><li><p>实体类里的<strong>Enum</strong>类型的属性映射数据库字段的时候可以使用 <code>@Convert(converter = Status.class, attributeName = &quot;status&quot;)</code> 注解；jackson 在序列化<strong>Enum</strong>类型的时候可以在<strong>Enum</strong>类对应的<strong>getter</strong>方法使用 <code>@JsonValue</code> 注解来定义向前端输出的内容，而前端传过来的值同样可以通过 <code>@JsonCreator</code> 注解反序列化得到对应的<strong>Enum</strong>类型对象。</p></li><li><p><em>1.5.6.RELEASE</em> 版本的<strong>SpringBoot</strong>在使用 <code>ElasticsearchRespository</code> 类时会产生以下异常：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException:                 Could not write JSON document: (was java.lang.NullPointerException) (through reference chain: org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl[&quot;facets&quot;]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain:     org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl[&quot;facets&quot;])</span><br></pre></td></tr></table></figure><p> 推荐使用 <em>1.4.7.RELEASE</em> 版本。</p></li><li><p>Json 序列化的时候会将 Long 等类型强转成类似于 Javascript 中的 number 类型（内部实现<strong>可能</strong>是转成 Double 类型），这样会导致大数值丢失精度的问题。jackson 可以使用 <code>@JsonSerialize(using = ToStringSerializer.class)</code> 注解将 Long 类型转成String 再进行序列化，但这样会导致前端接收到的数据类型变成了 String 而不是 number。</p></li><li><p>在进行批量更新操作时，需要将待更新的数据进行排序之后再进行批量操作，这样可以避免并发场景下的死锁问题。</p></li><li><p>@RequestBody注解的实体对象如果需要将前端传过来的 array 转成实体中相应的 String 类型的属性时，可以在该属性的 setter 方法进行转换操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;welcome_message&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeMessage</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;articles&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String articles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArticles</span><span class="params">(List&lt;WxMpXmlOutNewsMessage.Item&gt; articles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articles = JSON.toJSONString(articles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;WxMpXmlOutNewsMessage.Item&gt; getArticles() &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(<span class="built_in">this</span>.articles, WxMpXmlOutNewsMessage.Item.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 相应的，如果需要将数据库中存储的 String 转成 List 传回前端或者应用于后台逻辑，可以在字段对应属性的 getter 方法进行转换。<br> 这里使用的是 fastjson 的 JSON 类。</p></li><li><p>过长的 Long 类型主键转 Json 传回前端会使用js处理会丢失精度，可以在实体的 @Id 上配置转成 Json 的序列化及反序列化处理类，在将 id 传回前端或者接收 前端传过来的 id 时使用 String 类型来进行转换保证精度，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决Long类型的主键转json传回前端丢失精度的问题，将Long转成String</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> yupaits</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2017/12/18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongJsonSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Long value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException, JsonProcessingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            jsonGenerator.writeString(String.valueOf(value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将前端String类型的主键转成Long类型</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> yupaits</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2017/12/18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongJsonDeserializer</span> <span class="keyword">extends</span> <span class="title class_">JsonDeserializer</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span> <span class="keyword">throws</span> IOException, JsonProcessingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jsonParser.getText();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">value</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : Long.parseLong(value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = LongJsonSerializer.class)</span></span><br><span class="line"><span class="meta">@JsonDeserialize(using = LongJsonDeserializer.class)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li><li><p>SpringAop的Order顺序遵循先进后出的原则。如Aop1（order&#x3D;1），Aop2（order&#x3D;2），则切面的执行顺序为<code>Aop1.doAround.beforeProceed</code> -&gt;  <code>Aop1.doBefore</code> -&gt; <code>Aop2.doAround.beforeProcced</code> -&gt; <code>Aop2.doBefore</code> -&gt; <code>Aop2.doAround.afterProcced</code> -&gt; <code>Aop2.doAfter</code> -&gt; <code>Aop2.doAfterReturning</code> -&gt; <code>Aop1.doAround.afterProcced</code> -&gt; <code>Aop1.doAfter</code> -&gt; <code>Aop1.doAfterReturning</code>。</p></li><li><p>Spring Boot启动时指定环境。</p><ul><li>IDEA中进入 <code>Run/Debug Configurations</code> 设置 <code>Environment-&gt;VM options</code> 为 <code>-Dspring.profiles.active=test</code>，或者在 <code>Environment variables</code> 中添加参数 <code>spring.profiles.active</code> 并指定参数的值为 <code>test</code>。</li><li>命令行使用 <code>java -jar *.jar</code> 启动时，在命令的后面增加 <code>--spring.profiles.active=test</code>。</li><li>在 <code>application.yml</code> 中配置 <code>spring.profiles.active</code> 的值为 <code>test</code>。</li></ul></li><li><p>通过zuul上传包含中文名的文件时，需要在上传文件url的path加上 <code>/zuul</code> 前缀即可。</p><p> 例如：当上传url为 <code>http://localhost:10060/upload/image</code>，上传名为 <code>头像.jpg</code> 的文件，会出现报错 <code>java.io.FileNotFoundException: E:\upload\image\2018-5\??.jpg (文件名、目录名或卷标语法不正确。)</code>。如果将url直接改为<code>http://localhost:10060/zuul/upload/image</code> 则可以上传成功。</p></li><li><p>Spring Boot Jpa实现实体联合主键：实体类加上 <code>@IdClass(XxxKey.class)</code> 注解，实体类中多个联合注解的属性上都加上 <code>@Id</code> 注解。示例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(UserRoleKey.class)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;shop_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRoleKey</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Spring Cloud Sleuth的日志中会包含链路追踪的信息，具体体现为:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-04-08 23:56:50.459 INFO [bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false] 8764 — [nio-8080-exec-1] demo.JpaSingleDatasourceApplication : Step 2: Handling print</span><br><span class="line">2017-04-08 23:56:50.459 INFO [bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false] 8764 — [nio-8080-exec-1] demo.JpaSingleDatasourceApplication : Step 1: Handling home</span><br></pre></td></tr></table></figure><p> 比一般的日志多出了 <code>[bootstrap,38d6049ff0686023,d1b8b0352d3f6fa9,false]</code> 这些内容，对应 <code>[appname,traceId,spanId,exportable]</code>。</p><ul><li>appname：服务名称</li><li>traceId\spanId：链路追踪的两个术语</li><li>exportable: 是否是发送给zipkin</li></ul></li><li><p>SpringBoot中使用 <code>logback-spring.xml</code> 进行日志打印的配置。示例：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;app-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; - [$&#123;appName&#125;] - $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %c - %m%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;amqp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.amqp.rabbit.logback.AmqpAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span>&gt;</span>172.17.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>5672<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">applicationId</span>&gt;</span>okbuy<span class="tag">&lt;/<span class="name">applicationId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">routingKeyPattern</span>&gt;</span>logstash<span class="tag">&lt;/<span class="name">routingKeyPattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">declareExchange</span>&gt;</span>true<span class="tag">&lt;/<span class="name">declareExchange</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exchangeType</span>&gt;</span>direct<span class="tag">&lt;/<span class="name">exchangeType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exchangeName</span>&gt;</span>okbuy.log<span class="tag">&lt;/<span class="name">exchangeName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateId</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxSenderRetries</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxSenderRetries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">durable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">durable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryMode</span>&gt;</span>PERSISTENT<span class="tag">&lt;/<span class="name">deliveryMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;stdoutAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;logPattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;asyncStdoutAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;stdoutAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;amqp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;asyncStdoutAppender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring的事务控制和数据库的事务控制之间的关系：</p><ul><li>数据库开启事务、提交事务、回滚事务对应jdbc的三个api，Spring事务控制的本质是通过AOP把这三个方法增强在不同的地方调用，实现Spring的事务在方法之间的传播。</li><li>数据库在开启事务到提交的过程中，数据库本身有异常都会回滚。 </li><li>业务异常导致数据库回滚，是Spring通过调用 <code>jdbc rollback</code> 的api实现的。</li></ul></li><li><p>Spring Security OAuth2 Client项目中@EnableOAuth2Sso注解修饰Application启动类时不起作用，需要放在@Configuration修饰的类上（通常是继承WebSecurityConfigurerAdapter的配置类）才能正常工作。</p></li><li><p>检查幂等（是否重复请求）伪代码：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_unique` (</span><br><span class="line">    `request_id` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;request id&#x27;</span>,</span><br><span class="line">    `gmt_create` <span class="type">timestamp</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `gmt_modified` <span class="type">timestamp</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`request_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;幂等表&#x27;</span>;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="title function_">checkUnique</span><span class="params">(String requestId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">UniqueDO</span> <span class="variable">uniqueDO</span> <span class="operator">=</span> buildUniqueDO(request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reqeustId唯一索引，重复则抛异常DataIntegrityViolationException</span></span><br><span class="line">        uniqueDao.insert(uniqueDO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入成功说明之前没有数据，返回没有被幂等</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (DataIntegrityViolationException ex) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//出现异常不一定时由于db里面有数据，可能是事务隔离级别导致，</span></span><br><span class="line">        <span class="comment">//所以要再查一次，确认数据再db里面存在</span></span><br><span class="line">        <span class="type">UniqueDO</span> <span class="variable">uniqueDO</span> <span class="operator">=</span> uniqueDao.selectByRequestId(requestId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uniqueDO == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//不存在数据则抛异常让方法重试</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存在返回被幂等</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> requestId一般由客户端sdk生成和具体业务相关联。</p></li><li><p>profile为default时会读取 <code>application.yml</code> 的配置，而当profile不是default时，会读取对应的 <code>applicaiton-&#123;profile&#125;.yml</code> 的配置。需要注意的是，如果 <code>application.yml</code> 和 <code>application-&#123;profile&#125;.yml</code> 中存在相同的配置项时，<code>application.yml</code> 的优先级更高，所以一般在 <code>application.yml</code> 中设置共用的配置项。</p></li><li><p>在SpringMVC中 <code>@RequestBody</code> 注解修饰的对象如果存在 <code>@DateTimeFormat</code> 注解修饰的属性，而且使用 jackson 进行反序列，那么 <code>@DateTimeFormat</code> 注解实际上是不起作用的，此时需要使用 <code>@JsonFormat</code> 注解进行代替。示例如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime startTime;</span><br></pre></td></tr></table></figure></li><li><p>Spring AOP 的切入点（PointCut）表达式使用规则：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)</span><br></pre></td></tr></table></figure><ul><li><code>?</code> 的部分表示可省略</li><li><code>*</code> 用来代表任意字符</li><li><code>..</code> 用来表示任意个参数</li><li><code>modifiers-pattern</code> 表示修饰符如 public、protected 等</li><li><code>ret-type-pattern</code> 表示方法返回类型</li><li><code>declaring-type-pattern</code> 表示特定的类</li><li><code>name-pattern</code> 表示方法名称</li><li><code>param-pattern</code> 表示参数</li><li><code>throws-pattern</code> 表示抛出的异常</li></ul></li><li><p>fastjson序列化之后如果出现<code>$ref</code>说明启用了“重复应用&#x2F;循环引用”特性，可以通过以下两种方式处理：</p><ol><li>通过全局或局部序列化配置<code>SerializerFeature.DisableCircularReferenceDetect</code>来展示实际内容</li><li>将存在重复引用的对象使用该对象的副本（new一个同类型对象并复制属性值）而不是原对象</li></ol></li><li><p>Mybatis的if标签中判断字符串相等要使用如下格式:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;field == &quot;value&quot;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 注意外层用单引号，字符串的值使用双引号。</p></li></ol><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><ol><li>页面的modal元素记得加上 <code>data-backdrop=&#39;static&#39;</code> 和 <code>data-keyboard=&#39;false&#39;</code>，禁用非 modal 内点击和点击键盘 ESC 键 取消 modal。</li></ol><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><ol><li><p>批量删除并返回批量删除的结果时，ajax 方法中 async 一定要配置成 false，否则页面无法正确响应批量删除的结果。</p></li><li><p>使用 qrcodejs 生成二维码图片之后直接使用 <code>$(&#39;img&#39;).attr(&#39;src&#39;)</code> 返回的值是undefined，这时需要使用 <code>setTimeout(function(), delay_time)</code> 来拿到图片的 src 。</p></li><li><p>js数组遍历删除元素的方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (...) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ol><li><p>局部列表滚动查看css，height和max-height二选一。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-list</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">190px</span>; //固定高度的列表</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">500px</span>; //列表最大高度</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-list</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个基于网格的响应式布局简单示例：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">719px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">719px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 浏览器窗口宽度大于719px时，元素呈2列排布，反之呈1列排布。</p></li></ol><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li>使用原生HTML进行表单开发时，如果没有指定 <code>&lt;button&gt;</code> 的 <code>type</code> 属性，则默认 <code>type=&quot;submit&quot;</code>，最终导致点击之后 <code>window.location.href</code> 的路径中会自动多一个 <code>?</code>，这是因为原生的表单提交是以path后拼接form的参数进行请求的，所以在进行异步请求时需要指定提交的按钮为 <code>&lt;button type=&quot;button&quot;&gt;</code>。</li></ol><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ol><li><p>使用局部的 filter 代替 methods 中的方法格式化数据显示。</p></li><li><p>vue 在绑定 date 类型的 input 输入框时，设置默认值要用 <code>:value=&quot;date | toDate&quot;</code>，toDate 为过滤器；当 date 的值是 timestamp 类型时，toDate 可以为以下方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dateTime</span>(<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (date) &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">        <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> day = date.<span class="title function_">getDate</span>();</span><br><span class="line">        <span class="keyword">var</span> hour = date.<span class="title function_">getHours</span>();</span><br><span class="line">        <span class="keyword">var</span> minute = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">        <span class="keyword">var</span> second = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">        <span class="keyword">return</span> date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;-&#x27;</span> + </span><br><span class="line">            (month &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + month : month) + <span class="string">&#x27;-&#x27;</span> + </span><br><span class="line">            (day &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + day : day) + <span class="string">&#x27; &#x27;</span> + </span><br><span class="line">            (hour &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + hour : hour) + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">            (minute &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + minute : minute) + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">            (second &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + second : second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue.js 2.5.2版本在 v-for 循环中使用 v-model 绑定数组元素时会报如下错误：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.</span><br></pre></td></tr></table></figure><p> 从提示信息可以看出 vue 建议使用 array 的某个元素的属性值作为 v-model 绑定的主体，如果元素并不是 Object 类型而是 String 类型时，需要通过 index 来实现元素绑定。具体代码如下：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(el, index)  in array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;array[index]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将数组中位于 index1 的元素移动至 index2 的位置：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">splice</span>(index2, <span class="number">0</span>, list.<span class="title function_">splice</span>(index1, <span class="number">1</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p> 交换数组中位于 index1 和 index2 的两个元素：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[index1] = list.<span class="title function_">splice</span>(index2, <span class="number">1</span>, list[index1])[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p> vue 组件中实时交换位于 index1 和 index2 的两个元素：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$set(list, index1, list.<span class="title function_">splice</span>(index2, <span class="number">1</span>, list[index1])[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>Vue的 <code>filters</code> 块中的过滤器不能加载自身 <code>data()</code> 块中的变量，如果需要使用 <code>data()</code> 中的变量对数据进行转换时可以将过滤器的逻辑写在 <code>methods</code> 块中。</p></li><li><p>在使用基于Vue的前端框架进行开发时，有些框架组件无法对点击事件进行监听和处理（如 <code>ant-design-vue</code> 的 <code>popconfirm</code> 组件，详见 <a href="https://github.com/ant-design/ant-design/issues/7233">Could you add a property in PopConfirm to stop click event propagation?</a>），而如果此时正好需要阻止某个组件的点击事件向上层元素传播时，可以使用如下方式：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;e =&gt; e.stopPropagation()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a-popconfirm</span>&gt;</span><span class="tag">&lt;/<span class="name">a-popconfirm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Vue的 <code>style scoped</code> 中的样式不起作用时，可以新增一个无scoped修饰的 <code>style</code> 来定义css样式，例如：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="selector-class">.scoped-style</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.global-style</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Vue中使用JSX语法时，需要注意以下方面：</p><ul><li>所有的运算赋值操作都需要在 <code>&#123;&#125;</code> 中，如获取变量值，调用方法等。</li><li>不支持Vue的过滤器，需要使用方法来代替。</li><li>事件监听 <code>@click=&quot;handleClick(param)&quot;</code> &#x3D;&gt; <code>onClick=&#123;this.handleClick.bind(this, param)&#125;</code>，<code>@click.native=&quot;handleNativeClick(param)&quot;</code> &#x3D;&gt; <code>nativeOnClick=&#123;this.handleNativeClick.bind(this, param)&#125;</code>，这里需要使用js原生的<code>bind</code>方法来进行方法调用。</li><li>不支持Vue的指令，常用的指令的备选解决方案：<code>v-if=&quot;condition&quot;</code> &#x3D;&gt; <code>v-show=&quot;condition&quot;</code> 或者 <code>&#123;condition ? &lt;div&gt;JSX&lt;/div&gt; : &#39;&#39;&#125;</code>；<code>&lt;li v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;&#123;item&#125;&lt;/li&gt;</code> &#x3D;&gt; <code>&#123;items.map((item, index) =&gt; &#123;return &lt;li&gt;&#123;item&#125;&lt;/li&gt;&#125;)&#125;</code>。</li></ul></li><li><p>win7系统在安装高版本node.js（v14.x.x）时，会提示“仅支持更高的win8、win10系统”。但是node.js的生态里，很多新技术必须安装高版本node.js环境才能正常使用和开发（如electron的最新版本要求node.js版本不低于v14.x.x）。可以通过以下方式解决：</p><ul><li>下载<a href="https://github.com/nvm-sh/nvm">nvm（node.js版本管理器）</a>并安装</li><li>安装完成后，使用<code>nvm list available</code>查看可安装的node.js版本</li><li>选择最新的<code>CURRENT</code>版本或者<code>LTS</code>版本进行安装，安装完成后使用<code>nvm use 14</code>切换至高版本node.js即可正常使用</li></ul></li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ol><li>使用 redis-cli 进入 redis 的命令行模式时，可以使用 <code>keys **</code> 查看所有 key 值，使用 <code>get [key]</code> 查看 key 对应的 value 值。需要注意的是，使用 <code>keys **</code> 查看到的 key 值如果使用 “” 包括，那么 <code>get [key]</code> 的 key 也需要用 “” 包括起来。</li></ol><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><ol><li><p>使用 <strong><code>frontend-maven-plugin</code></strong> 整合前后端项目构建时，需要注意web模块需要放在server模块之前，保证web先构建，这样才能将web构建好的文件复制到server的 <code>resources/public</code> 目录下。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>xxx-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 同时要注意后台不要对 <code>@RequestMapping(&quot;/&quot;)</code> 做处理，否则有可能会使得访问 <code>&quot;/&quot;</code> 无法显示前端构建好的index.html页面。</p></li><li><p>maven引用私服的jar包时，需要在 <code>pom.xml</code> 文件的 <code>&lt;repositories&gt;</code> 标签下中指定私服的 <code>&lt;id&gt;</code>、<code>&lt;name&gt;</code>、<code>&lt;url&gt;</code>。</p></li><li><p>gitlab-runner的 <code>config.toml</code> 在 <code>[runners.docker] </code>中配置 <code>extra_hosts = [&quot;xxx.xxx.com:172.17.0.1&quot;]</code>可实现runner容器的ip和host映射关系的配置。</p></li><li><p>设置maven的 <code>setting.xml</code> 中 mirror 节点的 <code>mirrorOf</code> 有以下配置策略：</p><ul><li>*：everything</li><li>external:*：everything not on the localhost and not file based</li><li>repo,repo1：repo or repo1</li><li>*,!repo1：everything except repo1</li></ul></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><p>windows 下使用 Nginx 相关命令如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line">点击 Nginx 目录下的 nginx.exe；cmd 运行 start nginx</span><br><span class="line"></span><br><span class="line">#关闭</span><br><span class="line">nginx -s stop #立即停止nginx，不保存相关信息</span><br><span class="line">nginx -s quit #正常退出nginx，并保存相关信息</span><br><span class="line"></span><br><span class="line">#重启（重新加载配置）</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>nginx 的配置文件 root 路径不识别 <code>\</code> 只识别 <code>/</code>。</p></li><li><p>Letsencrypt通配符证书的申请和在nginx配置：</p><ul><li><a href="https://my.oschina.net/kimver/blog/1634575">申请Let’s Encrypt通配符HTTPS证书</a></li><li><a href="http://www.cyberciti.biz/faq/how-to-configure-nginx-with-free-lets-encrypt-ssl-certificate-on-debian-or-ubuntu-linux/">How to configure Nginx with Let’s Encrypt on Debian&#x2F;Ubuntu Linux</a></li></ul></li><li><p>使用 nginx 解决 CORS 问题</p><p> 使用反向代理将服务端（接口提供方）与客户端（接口调用方）部署在同一个域下。</p></li><li><p>使用 nginx 解决 X-Frame-Options: deny 问题</p><p> 使用<a href="https://github.com/openresty/headers-more-nginx-module">headers-more</a>插件，推荐直接下载带headers-more模块的openresty，<a href="https://openresty.org/en/download.html">下载地址</a>。</p><p> 在 nginx.conf 中（一般是在server下）配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除 &quot;X-Frame-Options&quot; header</span><br><span class="line">more_clear_headers &#x27;X-Frame-Options&#x27;;</span><br><span class="line"># 设置 &quot;X-Frame-Options: SAMEORIGIN&quot; 同域可嵌入iframe</span><br><span class="line">more_set_headers &#x27;X-Frame-Options: SAMEORIGIN&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>指定MySQL时区，在mysqld.conf中增加 <code>default-time-zone=&#39;+8:00&#39;</code> 配置。</p></li><li><p>在做微信公众号开发时，需要在公网上调用开发机器的接口，除了使用花生壳等软件进行内网穿透之外，如果有富余的公网服务器资源，可以使用一些简单方便的内网穿透工具，推荐 <a href="https://github.com/sosont/ichWebpass">ichWebpass</a>。</p></li><li><p>gitlab pg数据库配置</p><p> 修改<code>/var/opt/gitlab/postgresql/data/pg_hba.conf</code>文件，增加下面的配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host all all 192.168.1.10/22 trust</span><br></pre></td></tr></table></figure><p> 上述的修改会在使用<code>gitlab-ctl reconfigure</code>命令之后失效，通过修改gitlab配置文件中pg数据库的entries可以避免这种情况。具体为：</p><p> 在gitlab.rb中增加</p> <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postgresql<span class="section">[&#x27;custom_pg_hba_entries&#x27;]</span> = &#123;</span><br><span class="line">  APPLICATION: <span class="section">[&#123; # APPLICATION should identify what the settings are used for</span></span><br><span class="line"><span class="section">    type: &#x27;host&#x27;,</span></span><br><span class="line"><span class="section">    database: &#x27;all&#x27;,</span></span><br><span class="line"><span class="section">    user: &#x27;all&#x27;,</span></span><br><span class="line"><span class="section">    cidr: &#x27;192.168.1.0/24&#x27;,</span></span><br><span class="line"><span class="section">    method: &#x27;trust&#x27;,</span></span><br><span class="line"><span class="section">    #option: 0</span></span><br><span class="line"><span class="section">  &#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong> 这里的<code>APPLICATION</code>对象是一个数组，有些gitlab版本默认不是数组，需要手动修改。</p></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>GitHub 现在支持创建私有代码仓库了，但使用时需要注意：将 GitHub 的 repository 从 <em><strong>public</strong></em> 切换成 <em><strong>private</strong></em> 再切回 <em><strong>public</strong></em> 之后，需要 <code>push</code> 代码到 <code>master</code> 分支才能让已经404的 <code>Github Pages</code> 页面恢复正常。</li></ol><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ol><li><p>为了在windows系统上安装docker，需要将win10系统升级到专业版开启HyperV虚拟机才行。</p><p> win10专业版升级密钥：DR9VN-GF3CR-RCWT2-H7TR8-82QGT</p></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li><p>Ubuntu&#x2F;Debian开机启动脚本 <code>spider.sh</code> 示例：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Provides: spider</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Required-Start:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Required-Stop:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default-Stop: 0 1 6</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Short-Description: spider</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Description: spider service start</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"></span><br><span class="line">[shell content]</span><br></pre></td></tr></table></figure><ul><li>开机启动：<code>update-rc.d spider.sh defaults</code></li><li>移除开机启动：<code>update-rc.d spider.sh remove</code></li></ul></li><li><p>使用netstat查看系统网络端口情况：<code>netstat -tunlp</code>；如果发现没有 <code>PID</code> (进程号)，需要使用 <code>sudo netstat -tunlp</code>。</p></li><li><p>对于新安装的官方Ubuntu-server等系统，可以通过指令 <code>sudo apt-get install build-essential</code> 安装gcc环境。</p></li><li><p>取消sudo密码：<code>sudo visudo</code> 进入编辑界面；添加行 <code>username ALL=(ALL) NOPASSWD:ALL</code>，username为登录用户名，如果想作用于某个用户组则使用 <code>%usergroup ALL=(ALL:ALL) NOPASSWD:ALL</code>。</p></li><li><p>linux系统添加ssh公钥的方式：</p><ul><li><p>本地</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 覆盖</span></span><br><span class="line"><span class="built_in">cat</span> [ssh_pub_key] &gt; ~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="built_in">cat</span> [ssh_pub_key] &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>远程</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@[remote-server-ip]:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>  <strong>注：</strong> 需要输入远程服务器的登录密码进行认证。</p></li></ul></li><li><p>ssh对目录的权限有要求，具体如下：</p><table><thead><tr><th>目录&#x2F;文件</th><th>权限</th></tr></thead><tbody><tr><td>~&#x2F;.ssh</td><td>700</td></tr><tr><td>~&#x2F;.ssh&#x2F;*</td><td>600</td></tr><tr><td>~&#x2F;.ssh&#x2F;config</td><td>700</td></tr></tbody></table></li><li><p>在终端中执行<code>curl -X GET http://www.sample.com/api?a=1&amp;b=2</code>指令时，实际上只会传入<code>a=1</code>参数，想要同时传入<code>a=1</code>和<code>b=2</code>，可使用以下两种方式：</p><ul><li><code>&amp;</code>符号转义: <code>curl -X GET http://www.sample.com/api?a=1\&amp;b=2</code></li><li>url加上双引号: <code>curl -X GET &quot;http://www.sample.com/api?a=1&amp;b=2&quot;</code></li></ul></li></ol><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><p>使用docker-compose的build参数构建docker镜像时，要注意指定的context目录下默认的Dockerfile文件名必须为 <code>Dockerfile</code>。如果想使用其他文件名，可以通过 <code>-f filename</code> 指定。 </p></li><li><p>docker环境为docker for windows，有效避免host为windows系统时 <code>docker run -v</code> 绑定的目录映射关系在系统重启之后失效的方法为：使用 <code>docker volume create path1</code> 创建volume，再使用 <code>-v path1:/container/path</code>。简单地说就是使用 “自定义数据卷” 代替 “容器自动创建的临时数据卷” 进行映射，完成docker容器的数据持久化。</p></li><li><p>指定docker的dns，防止网络环境变化时导致容器网络的不稳定。<br> 编辑docker的<code>daemon.json</code>:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;114.114.114.114&quot;</span><span class="punctuation">,</span> <span class="string">&quot;8.8.8.8&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用docker-compose来部署redash时，注意需要先创建redash数据库才能启动：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose run --<span class="built_in">rm</span> server create_db</span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>使用docker方式部署consul时，由于consul在docker虚拟网络中无法正确识别注册服务的hostname，因此需要在注册服务中配置 spring.cloud.consul.discovery.hostname&#x3D;192.168.1.xxx (注册服务的局域网ip，要注意的是必须是docker宿主机所在地局域网ip，使用172.17.0.1等docker内网ip也不行)，才能确保consul正确地进行健康检查。</p></li></ol><Vssue title="开发实战总结"/>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Git </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Linux </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Maven </tag>
            
            <tag> Docker </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大报表：财务界的通用语言</title>
      <link href="/2020/02/14/post/%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8%EF%BC%9A%E8%B4%A2%E5%8A%A1%E7%95%8C%E7%9A%84%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80/"/>
      <url>/2020/02/14/post/%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8%EF%BC%9A%E8%B4%A2%E5%8A%A1%E7%95%8C%E7%9A%84%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/KY_FgC1-joFaACL0fjU2Ag">三大报表：财务界的通用语言</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>你问一名程序员：世界上最好的语言是什么，你可能会得到各种答案。但如果你问一名财务人员，想要了解一家公司，什么是必不可少的？他们的回答会非常一致：三张报表。</p><p>资产负债表、利润表、现金流量表，这三张报表跨越了国别与行业，无论你是美国的炼油厂，还是巴西的农贸公司，这三张报表的编制与格式却是大同小异的。这当然不是一个巧合，而是因为任何一家商业公司，都可以抽象成一个用钱生钱的过程：融资拿到钱，投资花掉钱，经营赚回钱。而三张报表，则是这个过程的忠实记录者。</p><ul><li>资产负债表</li></ul><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E8%B5%84%E4%BA%A7%E8%B4%9F%E5%80%BA%E8%A1%A8.webp" alt="资产负债表"></p><ul><li>利润表</li></ul><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E5%88%A9%E6%B6%A6%E8%A1%A8.webp" alt="利润表"></p><ul><li>现金流量表</li></ul><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E7%8E%B0%E9%87%91%E6%B5%81%E9%87%8F%E8%A1%A8.webp" alt="现金流量表"></p><h2 id="一、资产负债表"><a href="#一、资产负债表" class="headerlink" title="一、资产负债表"></a>一、资产负债表</h2><p>资产负债表反映的是企业的融资和投资过程。</p><p>先说说融资，顾名思义，融资就是找到成立和运营公司需要的钱。而一家公司拿到的钱，又可以分为股权融资和债权融资，这两者有什么不同呢？同样是给企业注入资金，但两者承担的风险和收益是完全不同的。</p><p>股权融资的收益，是和企业的发展息息相关的。如果企业发展得特别好，每年赚到的净利润都是属于股东的，而如果发展得不好，你同样需要承担亏损，决定是否追加资本，甚至就算是倒闭，也是优先补偿债权人后，才将剩余的清算价值分配给股东。</p><p>债权融资很好理解，就像你借钱给同事，会跟他谈清楚每年的利息是多少，借多久之后还给你本金。而他用这个钱，最后是赚大钱了还是亏光了，你并不在意，也无权干涉，你只要求他按约定的时间偿还利息和本金就可以。不过，借钱给你的人也不傻，他当然也会评估一家公司的偿债能力、信用水平，至少，你不能空手套白狼，这家公司首先肯定得有股东愿意投钱吧。</p><p>因此，股东先通过股权融资成立一家企业并向其中注入资金，然后，看公司发展需要和外界是否有人愿意借钱给公司，从而再通过债权融资获得资金。</p><p>在财务报表上，股权融资的钱体现为所有者权益（又称为净资产），债权融资的钱体现为负债。</p><p>那么现在有了这些钱，如何花钱，就是投资构建资产的过程。</p><p>比如说，我打算创建一家「存银行赚利息公司」，个人作为股东投入了 10 万元，同事借给了这家公司 10 万元。而公司的经营方式就是将融资得到的钱，存入银行赚取利息。这时候我的投资决策，就是将所有融到的钱，都投资存在银行里，作为银行存款。</p><p>这就是一张最简单的资产负债表，也就是所谓的会计恒等式之一：所有者权益 + 负债 &#x3D; 资产。</p><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E4%BC%9A%E8%AE%A1%E6%81%92%E7%AD%89%E5%85%AC%E5%BC%8F%E4%B8%80.webp" alt="会计恒等公式一"></p><p>当然，不太可能真的有公司的商业模式是拿到钱存到银行赚利息。21 世纪初，互联网刚刚兴起的时候，媒体都喜欢给互联网公司贴上轻资产的标签，那是因为，相比起传统企业需要购买厂房、知识产权、原材料等等资产，互联网公司只要买上几台电脑，就能开干了。无论如何，当企业把融到的钱转换成了资产，下一步就可以盘活利用这些资产去赚钱。而反映赚钱的这个过程，则是利润表。</p><h2 id="二、利润表"><a href="#二、利润表" class="headerlink" title="二、利润表"></a>二、利润表</h2><p>利润表的概念相对较简单，无非就是「收入 - 成本 &#x3D; 利润」。这个过程反映的就是企业的经营，即如何利用资产负债表上的资产端，为企业创造收入，在扣减掉各项成本开支后，剩下的利润就是这一年赚到的钱。</p><p>不过，这个看似简单的概念，在利润表上，你却会发现好多个不同的「利润」，它们其实反映的是企业不同经营层面的盈利能力。</p><p>以一家餐饮为例，毛利润实际上反映了最小经营单位的盈利能力，比如对一家餐饮来说，这个最小经营单位，往往是客人吃一桌饭。如果这顿饭客人吃了 3000 元，而相对应的，餐馆专门为了这顿饭有哪些变动成本呢？各种原材料食品的成本、一次性餐具的成本……扣减掉这些成本，就是企业的毛利润。</p><p>那么进一步的，经营一家餐饮，还需要给厨师&#x2F;服务员&#x2F;餐厅经理发基本工资，交房租，打广告，还银行贷款的利息……这些成本，无论你今天是 100 位客人，还是 200 位客人，花出去的钱都是一样的。这些就是所谓的固定成本，扣减掉他们，得到的就是营业利润，反映了企业在一定规模下经营的总体盈利能力。</p><p>不过，在企业的日常经营过程中，总会发生一些不常规的情况。例如，当地发生了洪灾，你作为餐厅的老板，决定以餐厅的名义捐款 100 万元，这笔钱就是正常经营外的支出。最后，缴纳完企业所得税，最终得到了餐厅这一年来真正赚到手的钱：净利润。</p><p>一般来说，我们在分析一家企业的盈利能力时，都会想方设法去除掉营业外损益的影响，因为我们假设这些事情是一次性的。不过，你也不能拿到利润表，就不管三七二十一先把营业外损益剔除掉，很多时候，企业也会想方设法通过一些会计手段来调整自己的利润水平，把很多非一次性的东西，打包放在营业外损益中。比如这家餐饮的老板特别乐善好施，每年都喜欢以餐厅的名义捐钱，这时候你就不能把它再简单地看成营业外损益了。</p><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E4%BC%81%E4%B8%9A%E7%9B%88%E5%88%A9%E5%88%86%E6%9E%90.webp" alt="企业盈利分析"></p><p>对于净利润来说，它最终又会回到资产负债表上，表示完成了一次企业经营周期的周转。在最简单的情况下，企业今年的净利润 c 元全部已经以现金的方式存入到了资产端的银行存在当中，那么，在不分红、不回购的情况下，c 元的净利润同时也作为留存收益，使所有者权益增加了。</p><p>这就是一个完整的周期，企业通过融资获得资金，去投资经营所需要的资产，然后通过一定时间段内的经营产生收入，最终产生的净利润，使最初股东投入的所有者权益增值了，实现了用钱生钱的过程。</p><p><img src="/images/%E8%B4%A2%E5%8A%A1%E7%95%8C%E4%B8%89%E5%A4%A7%E6%8A%A5%E8%A1%A8/%E4%BC%81%E4%B8%9A%E7%BB%8F%E8%90%A5%E5%91%A8%E6%9C%9F.webp" alt="企业经营周期"></p><h2 id="三、现金流量表"><a href="#三、现金流量表" class="headerlink" title="三、现金流量表"></a>三、现金流量表</h2><p>至此，企业的融资、投资、经营三个过程都已经完成了。那么，还有一张现金流量表，是做什么的呢？其实，现金流量表和前两张资产负债表与利润表，最大的不同，是两者的编撰视角。</p><p>在会计上，资产负债表与利润表是基于权责发生制的。什么意思呢？比如说两家公司之间签定了合同，A 公司向 B 公司售卖了 100 万元的手机，合同已经签定，手机已经交付收货，哪怕这时候 B 公司还没有付钱，A 公司已经可以确认收入了。也就是说，在这种视角下，权利和责任都已经产生了，剩下付钱只是迟早的一个步骤而已，企业统计资产、确认收入，都是以权利和责任确认的时间点为基础的。</p><p>而现金流量表则不同，它是基于收付实现制的，也就是说，它是以真的有钱进账，或钱款汇出的时间点进行统计的。在这个视角下，它会将经营、投资、融资三者按实际进入与流出的现金流进行调整，像之前提到的 100 万元只要还没有实际收到，都会从经营活动的现金流中剔除。</p><p>现金流量表的必要性，实际上是提供了一个额外的视角来观察企业。从现金的视角出发，首先能够辅助判断企业经营成果的真实性。想像一下，如果一个企业的利润表非常好看，但如果我们想知道这些利润到底只是账面上的数字，还是有实际的钱款进账，则可以使用现金流量表判断。其次，它有助于我们更好地审视企业的财务风险和短期偿债能力，毕竟，当别人向你要钱的时候，是需要你真金白银地掏出去的。</p><p>这三张报表，就是财务界的通用语言。当然，如果深挖下去，你又会发现，这门通用语言好像也不是那么通用，就像同样是中文，我们有各种各样的方言一样，不同类型和行业的公司，往往又有不同的解读视角和关注指标，感兴趣的话，可以自行多多了解。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务 </tag>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做支付需要了解哪些行业知识</title>
      <link href="/2020/02/14/post/%E5%81%9A%E6%94%AF%E4%BB%98%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%E8%A1%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/14/post/%E5%81%9A%E6%94%AF%E4%BB%98%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%E8%A1%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzI4MTY5MDk2MQ==&mid=100000070&idx=1&sn=c29702253a2ac1a7d73068be57c587ec&chksm=6ba417785cd39e6e18459cc0c472693f2b6adaf12cb4bd6f6951708162ee58eadf0359f09f46#rd">做支付需要了解哪些行业知识</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>这篇文章适合新手入门学几句黑话，老司机建议直接快进。</p><h2 id="二清"><a href="#二清" class="headerlink" title="二清"></a>二清</h2><p>即是二次清算。支付机构将资金结算给了平台，平台再自行将资金清算给下游的商户客户。如果平台没有清算资质（支付牌照），就算违规二清。管控二清行为主要是防范平台吸收资金后并且挪用资金进行高风险投资甚至卷款跑路。对于正经平台而言账户里沉淀了资金反而烫手。</p><p>“匹夫无罪，怀璧其罪”。</p><h2 id="支付牌照"><a href="#支付牌照" class="headerlink" title="支付牌照"></a>支付牌照</h2><p>  即《第三方支付的业务许可证》，央行颁发，受央行监管。</p><p>  主要分为三种牌照：银行卡收单(主要形式为POS机刷卡)、互联网支付、预付卡发行与受理。</p><p><img src="/images/%E6%94%AF%E4%BB%98%E8%A1%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/%E6%94%AF%E4%BB%98%E7%89%8C%E7%85%A7.webp" alt="支付牌照"></p><p>支付牌照之前抢手原因是申请门槛太高，需央行审核发照。更重要的是央行几乎停止发牌照了(吊销的牌照的比新发的还多)。全国仅存200家左右第三方支付公司，能做互联网支付的应该不到一百家了。备付金收归央行管理后，支付公司纯靠支付手续费躺着挣钱越来越难了。更多的支付公司指望能像支付宝一样将流量变现，做征信、理财、借贷、异业营销等。</p><h2 id="怎么避免二清"><a href="#怎么避免二清" class="headerlink" title="怎么避免二清"></a>怎么避免二清</h2><p>  电商(包括类似模式的)平台多如牛毛，有牌照的寥寥无几。虽然很多平台在这块都涉及违规操作，但估计是因为央行没工夫和这些规模不大的平台计较，也给行业新生企业一定的发展调整的空间和时间。</p><p>作为平台避免二清当然最好是有支付牌照。这里只说没有牌照的方式。</p><ol><li><p>第三方支付公司、有开发能力的银行都逐渐推出了自己的分账系统，交易资金不直接到平台，而是到平台以及下属商户在这些机构开立的托管账户中。平台方不触碰资金。</p><p> 有人说了，虽然托管账户的钱平台不能直接提现，但是分账的指令是平台发给机构的，信息流控制了资金流，这样还是能间接把资金清到平台的可提现户。</p><p> 是的，不过一是机构会有风控（如控制分账比例），二是如果平台连变造交易（变造信息流）这种事情都干得出来还接分账系统立这牌坊干啥？</p></li><li><p>微信分账系统，比起对接银行机构的分账系统，开发成本会小很多。尤其适合本身就基于微信生态的平台。</p></li></ol><h2 id="代收和代付"><a href="#代收和代付" class="headerlink" title="代收和代付"></a>代收和代付</h2><ol><li><p>代收，也叫代扣，免密支付。用户签署协议授权企业可以直接从用户账户里扣钱。常见场景：滴滴打车，高德打车下车即走自动扣款，买会员卡自动续期的时候要注意了。整个环节无需用户输密码或者手机验证码验证，接口过于敏感，一般支付宝微信也只向有深度合作的企业开放这类接口。</p></li><li><p>代付。一般是企业向下属用户或者商家付款。出款账户一般为在机构开立的备付金专户（注意支付机构不会直接操作对公银行卡账户）。常用于结算、提现等</p></li></ol><h2 id="T-1和D-1"><a href="#T-1和D-1" class="headerlink" title="T+1和D+1"></a>T+1和D+1</h2><ul><li><p>T+1到账：即今天交易的资金，下一个工作日到账。</p></li><li><p>D+1到账：即今天交易的资金，明天到账（不分工作日）</p></li></ul><h2 id="长款和短款"><a href="#长款和短款" class="headerlink" title="长款和短款"></a>长款和短款</h2><p>完善的支付系统都需要有对账系统的辅助，来及时发现系统的差错，核实资金。</p><p>对账的最终结果有两种：</p><ol><li><p>长款：钱收多了（比如订单被重复支付或其他系统bug）</p></li><li><p>短款：钱收少了（如跨日临界点的交易因为时间差导致的统计偏差）</p></li></ol><h2 id="重复支付和无效支付"><a href="#重复支付和无效支付" class="headerlink" title="重复支付和无效支付"></a>重复支付和无效支付</h2><p>很多人看到这个问题觉得这就是个很low的bug，但事实上有些场景重复支付无法从程序上避免。</p><p>举例1：我美团上下了一个订单，先选择支付宝支付，唤起支付宝收银台页面然后先不支付，打开美团订单页，选择微信支付完成支付。这时候打开支付宝会发现支付宝仍然停留在收银台页面就等着你输密码了，输入密码完成支付。结果是支付宝微信都支付成功了！有人说哪有这么傻的用户自己都不知道自己付了几次，其实是弱网环境下用户也不知道前一种支付方式有没有成功。</p><p>举例2：我在12306上下单占了一张二等座的票。提示座席被锁定订单需在10分钟内完成支付否则将自动关闭。选择支付宝支付，等待10分钟以后再点击支付完成。支付完成了。但是订单已经关闭了座位也没了。结果是付了钱没买到票。</p><p>这两者我都定义为无效支付。即“一手交钱，一手交货”只完成了一半。个人觉得这种场景无法杜绝，但需要有个兜底的方案：发起原路退款，根据实际业务场景决定退款是否需要人工审核。</p><h2 id="银联和网联"><a href="#银联和网联" class="headerlink" title="银联和网联"></a>银联和网联</h2><p>共同点：二者都为中国的支付清算组织，由中国人民银行批准成立。</p><p>主要差异：银联倾向于管理线下银行卡收单，网联倾向于管理支付宝微信等移动支付。</p><ul><li><p>银联：中国银联是中国银行卡联合组织，全国两千多家商业银行，银联搭建起了一个可以跨行交易清算的系统。当然雁过拔毛，比如线下POS刷卡的手续费，一般按找7:2:1的比例分别分给发卡行、收单机构、银联。（这里的收单机构可能是第三方支付公司或者银行，即如果发卡行和收单机构都为中国银行，那中国银行拿90%手续费）</p></li><li><p>网联：然而最初的支付宝是没有接入银联的，而是绕过银联直接和银行对接，当然不可能把两千家银行对接个遍，只是对接我们常见的一些大行，所以支持的银行卡有限，但对于C端消费者来说完全足够了。为了对此类交易和资金进行监管，央行批准成立网联。并且要求各第三方支付机构不再直接对接银行，而是由网联作为中间平台转接，即常说的断直连。</p></li></ul><p>网联的成员如下：</p><p><img src="/images/%E6%94%AF%E4%BB%98%E8%A1%8C%E4%B8%9A%E7%9F%A5%E8%AF%86/%E7%BD%91%E8%81%94%E6%88%90%E5%91%98.webp" alt="网联成员"></p><h2 id="需要规避的风险"><a href="#需要规避的风险" class="headerlink" title="需要规避的风险"></a>需要规避的风险</h2><ol><li><p>洗钱，需要平台对入驻商家或个人做好合法验证，建立对应的反洗钱体系，尤其对于电商平台《电商法》中规定了连带责任。</p></li><li><p>套现，譬如二手货平台，C端用户可以做买家也可以做卖家，自己注册两个账户，一个用花呗或者信用卡付，再从另一个账户提现。</p></li><li><p>赌博，比如曾经流行的一元抽奖，本身有赌博开庄性质，现在这种模式已不被允许，像拼多多搞的抽奖为了避免赌博嫌疑对未中奖的用户原路退款</p></li></ol><h2 id="财务领域知识"><a href="#财务领域知识" class="headerlink" title="财务领域知识"></a>财务领域知识</h2><ol><li><p>会计分录（借贷复式记账）</p></li><li><p>收支两条线</p></li><li><p>轧差</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付系统</title>
      <link href="/2020/02/14/architecture/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/14/architecture/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/fTNNKIpnsYViAeKY54V0eA">支付系统</a></p></blockquote><ul><li>概述</li></ul><p>支付系统是连接消费者、商家（或平台）和金融机构的桥梁，管理支付数据，调用第三方支付平台接口，记录支付信息（对应订单号，支付金额等），金额对账等功能，根据不同公司对于支付业务的定位不同大概有几个阶段：第一阶段：支付作为一个（封闭）的、独立的应用系统，为各系统提供支付功能支持。一般来说，这个系统仅限于为公司内部的业务提供支付支持，并且和业务紧密耦合。第二阶段：支付作为一个开发的系统，为公司内外部系统、各种业务提供支付服务，支付服务本身应该是和具体的业务解耦合。</p><p><em><strong>支付是电商系统中核心</strong></em></p><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.webp" alt="支付系统架构"></p><p>我们先来看一下用户完成一次购物需要进行那些操作：</p><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E7%94%A8%E6%88%B7%E8%B4%AD%E7%89%A9%E6%B5%81%E7%A8%8B.webp" alt="用户购物流程"></p><p>通常消费者在手机APP或者网站都会涉及到支付相关的业务场景，用户只需要简单点击支付按钮输入支付密码，就可以完成整个支付过程，那么我就和大家一起来看看一个完整的支付系统有什么功能组成和设计时需要考虑那些问题。</p><ul><li>支付系统的作用</li></ul><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%9C%E7%94%A8.webp" alt="支付系统的作用"></p><p>从上图中我们可以看出真实的资金流向。首先当用户产生支付行为时，资金从用户端流向支付系统，退款时则相反，从支付系统回流至用户端。因此在整个交易过程中用户端与支付系统是双向资金的流动方式。对于支付系统而言，资金有进有出。从支付系统到商户端就比较简单了，在清算完成后支付系统负责将代收的资金结算给商户，通常结算的操作可以在线上来完成（采用支付公司代付接口或者银企直连接口来完成），也可以由公司财务通过线下手工转账的方式来完成，因此这种资金流动的方式是单向的。出于资金安全考虑，大多数公司通常这部分采用线下方式实现。</p><p>真实的资金流由支付公司按照约定期限（通常 T+1 ）结算到平台公司对公账户中，然后再由平台公司再按照交易明细进行二次清算后结算给对应的商户。</p><ul><li>支付系统</li></ul><p>一个支付系统需要由哪些功能模块组成</p><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97.webp" alt="支付系统功能模块"></p><h2 id="01-完整的支付系统功能清单"><a href="#01-完整的支付系统功能清单" class="headerlink" title="01 完整的支付系统功能清单"></a>01 完整的支付系统功能清单</h2><ol><li>应用管理: 同时支持公司多个业务系统对接。</li><li>商户管理: 支持商户入驻，商户需要向平台方提供相关的资料备案。</li><li>渠道管理: 支持微信、支付宝、银联、京东支付等多种渠道。</li><li>账户管理: 渠道账户管理，支持共享账户（个人商户）及自有账户。</li><li>支付交易: 生成预支付订单、提供退款服务。</li><li>对账管理: 实现支付系统的交易数据与第三方支付渠道交易明细的自动核对（通常T+1），确保交易数据的准确性和一致性。</li><li>清算管理: 计算收款交易中商户的应收与支付系统收益。</li><li>结算管理: 根据清算结果，将资金划拨至商户对应的资金帐户中。</li></ol><h2 id="02-核心流程"><a href="#02-核心流程" class="headerlink" title="02 核心流程"></a>02 核心流程</h2><p>支付系统有几个关键的核心流程：支付流程、对账流程、结算流程</p><h3 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h3><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B.webp" alt="支付流程"></p><ul><li><p>支付流程说明</p><ol><li>用户在商城选购商品并发起支付请求；</li><li>商城将支付订单通过B2C网关收款接口传送至支付网关；</li><li>用户选择网银支付及银行，支付平台将订单转送至指定银行网关界面；</li><li>用户支付完成，银行处理结果并向平台返回处理结果；</li><li>支付平台接收处理结果，落地处理并向商户返回结果；</li><li>商城接收到支付公司返回结果，落地处理（更改订单状态）并通知用户。</li></ol><p>  一般而言支付系统会给商户设置有“可用余额”账户、“待结算”账户；系统在接收到银行返回支付成功信息会进行落地处理，一方面更改对应订单状态，另一方面在商户待结算账户记入一笔金额；该笔金额，系统会根据结算周期从待结算账户—&gt;“可用余额”账户。</p></li><li><p>退款流程说明</p><ol><li>用户在商户平台发起退款申请，商户核实退款信息及申请；</li><li>商户登录支付平台账户&#x2F;或者通过支付公司提供的退款接口向支付平台发起退款；</li><li>支付系统会对退款信息校验（退款订单对应的原订单是否支付成功？退款金额是否少于等于原订单金额？），校验商户账户余额是否充足等；校验不通过，则无法退款；</li><li>支付系统在商户可用余额账户扣除金额，并将退款订单发送至银行，银行完成退款操作。注意：对于网关收款的订单退款，各银行要求不一，有些银行提供的退款接口要求原订单有效期在90或180天，有些银行不提供退款接口；针对超期或者不支持接口退款的订单，支付公司通过代付通道完成退款操作。</li></ol><p>  对于收单金额未结算，还在“待结算”账户的订单，如果出现退款情况，业务流程和上述流程差不多，只是从待结算账户进行扣款。</p></li></ul><h3 id="对账流程"><a href="#对账流程" class="headerlink" title="对账流程"></a>对账流程</h3><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E5%AF%B9%E8%B4%A6%E6%B5%81%E7%A8%8B.webp" alt="对账流程"></p><ul><li><p>说明</p><p>  对账，我们一般称为勾兑，支付系统的对账，包含着两个层面：</p><ol><li>支付系统内部间的对账，支付系统一般是分布式的，整个支付系统被拆分成了多个子系统，如交易系统、账户系统、会计系统、账户系统，每个子系统在处理各自的业务，系统间的对账，就是以上系统的核对，用于修正内部系统的数据不一致。</li><li>支付系统与渠道的对账，这里的渠道泛指所有为支付系统提供代收付业务的渠道，如：第三方支付公司、银行、清算中心、网联、银联等。</li></ol><ul><li><p>支付系统与渠道间的对账</p><p>  系统间的对账比较好理解，这里主要讲支付系统与渠道间的对账。支付系统与渠道间的对账，又包含2个维度：</p><ol><li>信息流勾对：即业务对账／交易对账，主要是就收单交易的支付信息与银行提供的信息流文件进行勾兑。信息流的勾地能发现支付系统与银行系统间的掉单、两边由于系统间的原因导致的同一笔交易支付金额不一致（可能性很小）或者支付状态不一致。信息流勾兑一般用来恢复掉单数据，可通过补单或者具体系统问题排查解决。</li><li>资金流勾对：即资金对账，主要就收单交易的支付信息与银行提供的资金流信息进行勾兑。资金流的勾兑能发现支付系统在银行的帐户资金实际发生的变动与应该发生的变动的差异，比如长款（银行多结算给支付系统）和短款（银行少结算给支付系统）。</li></ol><p>  说了这么多，就出现来4个对账文件，支付系统信息流文件、支付系统资金流文件、银行信息流文件、银行资金流文件。业务对账（勾兑）就是支付系统的信息流文件与银行的信息流文件勾兑，资金对账即支付系统的资金流文件与银行的资金流文件勾兑。</p></li><li><p>核对的差异处理</p><ol><li><p>信息流勾对的差异处理</p><ul><li>支付系统信息流没有，而银行有的差异，可能是因为支付系统交易数据的丢失、银行的掉单，如果是银行的掉单，由支付公司的运营登录银行网银确认后，做补单处理，并将差异表中该记录核销。</li><li>支付系统信息流有，而银行没有的差异，此种情况一般不会发生，因为支付系统所有的交易数据都是取银行返回状态的数据。</li></ul></li><li><p>资金流勾对对差异处理</p><ul><li>支付系统资金流没有，而银行有的差异。可能原因如下：1、银行日切晚与支付系统核心账务系统；2、支付系统账务核心系统与其他系统间的掉单。一旦出现，则会出现长款（即银行不应该结算而实际结算）的现象，对于因日切导致的差异，在第二天的对账中系统会对平，其他原因的，需要技术排查。</li><li>支付系统资金流有，而银行没有的差异，可能是因为银行日切早于支付系统的核心账务系统，一旦出现，会出现短款（银行应结算而实际未结算）的现象，银行日切导致段差异，会在下一天与银行的勾对中，将此笔差异勾对上，如果是非日切导致的原因，就需要找银行追款了。</li></ul></li></ol><p>  总结就是，业务对账，即信息流对账，支付系统的交易流水与银行的交易流水间核对，保障支付交易完整入账。资金对账，即资金流对账，支付系统的入账流水与银行的结算流水间核对，保障银行入账流水与实际入账资金的匹配。</p></li></ul></li></ul><h3 id="结算流程"><a href="#结算流程" class="headerlink" title="结算流程"></a>结算流程</h3><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E7%BB%93%E7%AE%97%E6%B5%81%E7%A8%8B.webp" alt="结算流程"></p><p>在清结算部分，系统按照设定好的清结算规则自动将钱款结算给商户。完善的运营会计体系帮助财务进行精细化核算，提高财务效率。与支付渠道自动进行对账，确保账务正确，在异常情况下能及时定位问题并处理。系统更是能对商户进行个性化的费率配置或账期配置，方便灵活。系统的价值不仅体现在支付清结算方面，同时更是提升了运营管理效率。支付清结算系统可以有效帮助运营、财务、开发以及管理人员。对于运营人员，系统可帮助处理平台的运营工作，包括各类支付管理，商户、会员管理，营销活动的数据统计等，全面提高运营效率。针对财务人员，可以协助完成资金对账、会计处理，出入款管理，账务差错处理等，大部分工作由系统自动处理，减少人工处理，提高资金处理效率。一套灵活便捷的配置后台供开发人员快速调整系统以适应新的业务，并能方便对系统进行维护，如渠道接入、费率配置、账期调整等，提高开发效率。系统提供资金流转过程中各个环节的数据，能够从各个维度进行核算和分析，形成对管理人员的决策支持，从而提高决策效率。</p><h2 id="03-关键表设计"><a href="#03-关键表设计" class="headerlink" title="03 关键表设计"></a>03 关键表设计</h2><p><img src="/images/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E5%85%B3%E9%94%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1.webp" alt="关键表设计"></p><h2 id="04-支付系统要点"><a href="#04-支付系统要点" class="headerlink" title="04 支付系统要点"></a>04 支付系统要点</h2><p>在支付系统中，支付网关和支付渠道的对接是最繁琐重要的功能之一，其中支付网关是对外提供服务的接口，所有需要渠道支持的资金操作都需要通过网关分发到对应的渠道模块上。一旦定型，后续就很少，也很难调整。而支付渠道模块是接收网关的请求，调用渠道接口执行真正的资金操作。每个渠道的接口，传输方式都不尽相同，所以在这里，支付网关相对于支付渠道模块的作用，类似设计模式中的wrapper，封装各个渠道的差异，对网关呈现统一的接口。而网关的功能是为业务提供通用接口，一些和渠道交互的公共操作，也会放置到网关中。</p><p>支付系统对其他系统，特别是交易系统，提供的支付服务包括签约，支付，退款，充值，转帐，解约等。有些地方还会额外提供签约并支付的接口，用于支持在支付过程中绑卡。 每个服务实现的流程也是基本类似，包括下单，取消订单，退单，查单等操作。每个操作实现，都包括参数校验，支付路由，生成订单，风险评估，调用渠道服务，更新订单和发送消息这7步，对于一些比较复杂的渠道服务，还会涉及到异步同通知处理的步骤。</p><h3 id="01-网关前置"><a href="#01-网关前置" class="headerlink" title="01 网关前置"></a>01 网关前置</h3><p>支付网关前置是对接业务系统，为其提供支付服务的模块。它是所有支付服务接口的集成前置，将不同支付渠道提供的接口通过统一的方式呈现给业务方。这样接入方就只需要对接支付网关，增加和调整支付渠道对业务方是透明的。 支付网关前置的设计对整个支付系统的稳定性、功能、性能以及其他非功能性需求有着直接的影响。</p><p>在支付网关中需要完成大量的操作，为了保证性能，这些操作都尽量异步化来处理。支付网关前置应保持稳定，尽量减少系统重启等操作对业务方的影响。支付网关也避免不了升级和重启。这可通过基于Nginx的LBS(Load Balance System)网关来解决。LBS在这里有两个作用： 一个是实现负载均衡，一个是隔离支付网关重启对调用的影响。 支付网关也采用多台机器分布式部署，重启时，每个服务器逐个启动。某台服务器重启时，首先从LBS系统中取消注册，重启完成后，再重新注册到LBS上。这个过程对调用方是无感知的。</p><p>为了避免接口受攻击，在安全上，还得要求业务方通过HTTPS来访问接口，并提供防篡改机制。防篡改则通过接口参数签名来处理。现在主流的签名是对接口参数按照参数名称排序后，做加密和散列，参考微信的签名规范。</p><h3 id="02-参数校验"><a href="#02-参数校验" class="headerlink" title="02 参数校验"></a>02 参数校验</h3><ul><li>所有的支付操作，都需要对输入执行参数校验，避免接口受到攻击。</li><li>验证输入参数中各字段的有效性验证，比如用户ID,商户ID,价格，返回地址等参数。</li><li>验证账户状态。交易主体、交易对手等账户的状态是处于可交易的状态。</li><li>验证订单：如果涉及到预单，还需要验证订单号的有效性，订单状态是未支付。为了避免用户缓存某个URL地址，还需要校验下单时间和支付时间是否超过预定的间隔。</li><li>验证签名。签名也是为了防止支付接口被伪造。 一般签名是使用分发给商户的key来对输入参数拼接成的字符串做MD5 Hash或者RSA加密，然后作为一个参数随其他参数一起提交到服务器端。</li></ul><h3 id="03-路由选择"><a href="#03-路由选择" class="headerlink" title="03 路由选择"></a>03 路由选择</h3><p>根据用户选择的支付方式确定用来完成该操作的合适的支付渠道。用户指定的支付方式不一定是最终的执行支付的渠道。比如用户选择通过工行信用卡来执行支付，但是我们没有实现和工行的对接，而是可以通过第三方支付，比如支付宝、微信支付、易宝支付，或者银联来完成。那如何选择合适的支付渠道，就通过支付路由来实现。支付路由会综合考虑收费、渠道的可用性等因素来选择最优方案</p><h3 id="04-风险评估"><a href="#04-风险评估" class="headerlink" title="04 风险评估"></a>04 风险评估</h3><p>检查本次交易是否有风险。风控接口返回三种结果：阻断交易、增强验证和放行交易。</p><ul><li>阻断交易，说明该交易是高风险的，需要终止，不执行第5个步骤；</li><li>增强验证，说明该交易有一定的风险，需要确认下是不是用户本人在操作。这可以通过发送短信验证码或者其他可以验证用户身份的方式来做校验，验证通过后，可以继续执行该交易。</li><li>放行交易，即本次交易是安全的，可以继续往下走。</li></ul><h3 id="05-发送消息"><a href="#05-发送消息" class="headerlink" title="05 发送消息"></a>05 发送消息</h3><p>通过消息来通知相关系统关于订单的变更。风控，信用BI等，都需要依赖这数据做准实时计算。</p><h3 id="06-更新订单"><a href="#06-更新订单" class="headerlink" title="06 更新订单"></a>06 更新订单</h3><p>对于同步返回的结果，需要在主线程中更新订单的状态，标记是支付成功还是失败。对于异步返回的渠道，需要在异步程序中处理。</p><h3 id="07-异步通知"><a href="#07-异步通知" class="headerlink" title="07 异步通知"></a>07 异步通知</h3><p>其中涉及到调用远程接口，其延迟不可控。如果调用方一直阻塞等待，很容易超时。引入异步通知机制，可以让调用方在主线程中尽快返回，通过异步线程来得到支付结果。对于通过异步来获取支付结果的渠道接口，也需要对应的在异步通知中将结果返回给调用方。 异步通知需要调用方提供一个回调地址，一般以http或者https的方式。这就有技术风险，如果调用失败，还需要重试。而重试不能过于频繁，需要逐步拉大每一次重试的时间间隔。 在异步处理程序中，订单根据处理结果变更状态后，也要发消息通知相关系统。</p><h3 id="08-生成交易订单"><a href="#08-生成交易订单" class="headerlink" title="08 生成交易订单"></a>08 生成交易订单</h3><p>将订单信息持久化到数据库中。当访问压力大的时候，数据库写入会成为一个瓶颈。</p><h3 id="09-交易流水和记账"><a href="#09-交易流水和记账" class="headerlink" title="09 交易流水和记账"></a>09 交易流水和记账</h3><p>每一笔交易都需要记录流水，并登记到个人和机构的分户账户上，统计和分析也需要根据交易流水来更新相关数据。 而个人和机构账户总额更新、交易流水记录以及库存的处理，更是需要事务处理机制的支持。 从性能角度， 可以弱化了事务处理的要求，采用消息机制来异步化和交易相关的数据处理。</p><ul><li>在支付网关前置的主流程中，仅记录交易流水，即将当前的请求保存到数据库中。</li><li>完成数据记录后，发送MQ出来，记账、统计、分析，都是接收MQ来完成数据处理。</li><li>涉及到本地资金支付，比如钱包支付，会需要分布式事务处理，扣减账号余额，记账，扣减库存等，每个操作失败，都要回滚。阿里有很不错的分享，这里不详细描述。</li><li>当交易量上来后，需要考虑交易表的分表分库的事情。分表分库有两个策略，按照流水号或者交易主体id来走。后者可以支持按用户来获取交易记录。我们用的是前者。后者可以走elastic，确保数据库专用。风控，信用和统计所需要的数据，通过MQ同步到历史库里面。作为支付系统最有价值的数据，在存储上做到专库专用，无可厚非，毕竟存储成本还是廉价的。</li></ul><h3 id="10-支付路由"><a href="#10-支付路由" class="headerlink" title="10 支付路由"></a>10 支付路由</h3><p>支付路由是一个复杂的话题。对支付系统来说，能支持的支付方式越多越好，不能由于支付方式的不支持断了财路。现实中的支付方式多得难以置信。用户随时甩出一张你听都没听说过的卡。如果一个银行卡只有几个用户在用，那针对这个卡开发个对接有点得不尝失。现在第三方支付的爆发，确实给开发支付系统省了不少事。但是公司不可能只对接一个第三方支付，如果这个渠道出问题了，或者闹矛盾了，把链接给掐了，老板还不欲哭无泪。总之，得对接多个渠道。对于交易量大的银行，还得考虑直联。</p><h3 id="11-渠道接入"><a href="#11-渠道接入" class="headerlink" title="11 渠道接入"></a>11 渠道接入</h3><p>对于支付渠道，首先考虑的是接入哪些渠道。要对接的渠道按优先级有：</p><ul><li>第三方支付，对大部分应用来说，支付宝和微信支付都是必须的，一般来说，这两者可以占到90%以上的交易量。用户不需要绑卡，授权后直接支付就行。各种平台都支持，性能和稳定性都不错。对于一些特殊业务，比如游戏，企业支付，可以查看一些专用的第三方支付平台。</li><li>银联，它的存在，极大方便了和银行的对接。和第三方支付主要不同在两个地方一是需要绑卡，也就是用户先把卡号，手机，身份证号提供出来。这一步会折损不少用户。绑卡后，以后的支付操作就简单了，用户只需要输入密码就行。手机客户端不需要像第三方支付那样安装SDK，都在服务器端完成。当然，这是针对快捷支付。网银支付还是挺麻烦的。银联接入也需要ADSS认证。</li><li>银行：2018年2月9日银监会公布了最新权威数字：一共【4549家】开发性金融机构1家：国家开发银行；政策性银行2家：进出口银行、农业发展银行；5大国有银行：工、建、农、中、交；邮储银行1家；全国性股份制商业银行12家：招行、中信、兴业、民生、浦发、光大、广发、华夏、平安、浙商、渤海、恒丰；金融资产管理公司4家：信达、华融、长城、东方四大AMC；城商行134家；住房储蓄银行1家；民营银行17家，如网商银行；农商行1262家；农村合作银行33家；农村信用社965家；村镇银行1562家；贷款公司13家；农村资金互助社48家；外资法人银行39家；信托公司68家；金融租赁公司69家；企业集团财务公司247家；汽车金融公司25家；消费金融公司22家；货币经纪公司5家；其他金融机构14家。一般对接一个银行预计有3周左右的工作量，大部分银行需要专线接入，费用和带宽有关，一年也得几万费用。不同银行对接入环境有不同要求，这也是成本。</li><li>手机支付：比如苹果的In-App支付， 三星支付、华为支付等， 这些支付仅针对特定的手机型号， 支持NFC等，根据业务需要也可以接入。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>支付系统是一个繁杂的系统，其中涉及了各种错综复杂的业务流程，以上只是简单介绍了支付系统我们能看见的一些问题和设计，还有后续的系统保障没有写出来，没写出来的才是关键部分，比如：支付系统监控（业务监控分类、渠道监控、商户监控、账户监控）文章只是引子， 架构不是静态的，而是动态演化的。只有能够不断应对环境变化的系统，才是有生命力的系统。所以即使你掌握了以上所有的业务细节，仍然需要演化式思维，在设计的同时，借助反馈和进化的力量推动架构的持续演进。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>色彩体系</title>
      <link href="/2020/02/10/%E8%89%B2%E5%BD%A9%E4%BD%93%E7%B3%BB/"/>
      <url>/2020/02/10/%E8%89%B2%E5%BD%A9%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>在日常的工作中，我们经常会使用到色彩，主流的色彩体系有 Material Design、Ant Design 等等。这里将主流的色彩体系做一个汇总收录，方便查找和使用。</p><span id="more"></span><h2 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h2><p><a href="https://material.io/design/color/">Material Design</a><br><a href="https://material.io/design/color/dark-theme.html">Material Design Dark</a></p><h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p><a href="https://ant.design/docs/spec/colors-cn">Ant Design</a><br><a href="https://ant.design/docs/spec/dark-cn">Ant Design Dark</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 色彩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卓越的人和普通的人到底区别在哪？你根本想不到是它</title>
      <link href="/2020/02/08/post/%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BA%BA%E5%92%8C%E6%99%AE%E9%80%9A%E7%9A%84%E4%BA%BA%E5%88%B0%E5%BA%95%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%EF%BC%9F%E4%BD%A0%E6%A0%B9%E6%9C%AC%E6%83%B3%E4%B8%8D%E5%88%B0%E6%98%AF%E5%AE%83/"/>
      <url>/2020/02/08/post/%E5%8D%93%E8%B6%8A%E7%9A%84%E4%BA%BA%E5%92%8C%E6%99%AE%E9%80%9A%E7%9A%84%E4%BA%BA%E5%88%B0%E5%BA%95%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%EF%BC%9F%E4%BD%A0%E6%A0%B9%E6%9C%AC%E6%83%B3%E4%B8%8D%E5%88%B0%E6%98%AF%E5%AE%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/7xXtmQ31ZkaPcFXVej4Yeg">卓越的人和普通的人到底区别在哪？你根本想不到是它</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>在某些时刻，比如企业招聘的时候，比如你给上小学的儿子讲数学题的时候，再比如，你花了半小时跟某人辩论，最后却发现他根本不讲逻辑的时候，难免会在头脑中形成这样的问题：到底人和人之间的区别是什么？到底是什么东西导致了这些区别？</p><p>如果考察一下人的核心特质（或能力），下面这个清单很容易列出来：</p><ul><li>专业知识；</li><li>逻辑思考力；</li><li>持续学习能力；</li><li>沟通和表达能力；</li><li>决断能力；</li><li>冒险精神；</li><li>毅力；</li><li>……</li></ul><p>这些能力都很重要，但哪个才是最重要的能力？到底是其中的哪一个导致了人与人的不同？</p><p>这其实跟一个更宏大的课题有关。在这个世界上，大多数人碌碌无为，只有少数精英引领着这个世界前进。他们摘得诺贝尔奖的桂冠，他们写出不朽的作品，他们创造出伟大的科技公司，他们设计出家喻户晓的产品，深深地影响整个时代。他们是科学家、发明家、作家、企业家，以及各个专业领域的「大家」。总之，他们是「卓越的人」。</p><p>于是，前面的问题就演变成了：普通的人和卓越的人到底区别在哪？</p><p>在卓越的人身上，肯定具有某种不同凡响的能力和特质，是普通人所缺乏的。如果我们找到了它，是不是我们也能变得和他们一样卓越？</p><p>我们回顾一下前面的「能力」列表。专业知识，对于在具体领域获得成就不可或缺，但它是具体的知识，不可能是我们探寻的那个本质的东西；持续学习能力、沟通能力、决断能力，等等，它们属于习惯和技巧，是辅助的能力；逻辑思考力则不太一样，它决定了思维模式的根本，是人的思维的底层操作系统。</p><p>没错，我以前一直是这样认为的，逻辑思考力决定了人与人之间的不同。因为，做任何事都需要清晰的逻辑。一个缺乏逻辑思考力的人，几乎什么都做不好，甚至别人都不愿意跟他多说一句话，以免浪费时间。</p><p>然而，最近我改变了自己的看法。</p><p>不管是做研究，写小说，创企业，还是搞技术开发，能真正带来不同的那个东西，其实是<strong>想象力</strong>。想象力，是非常稀缺的一种特质；也<strong>只有想象力，才能让你的人生真正有质的飞跃</strong>。</p><hr><p>1991年，有一位名叫乔安娜的女人，在从曼彻斯特去伦敦的火车上突然冒出来一个念头，一个瘦弱的、戴着眼镜的黑发小巫师的形象闯进了她的脑海。于是，她的大脑好像决堤了一般，无数的念头与构思犹如奔腾的洪水。她连忙从包里掏出本子和笔，用潦草的字迹记下了这些想法，甚至由于太过兴奋紧张，她的手都有些颤抖。一个恢弘的魔法世界就这样在她脑中成形。</p><p>这个女人就是《哈利·波特》的作者J·K·罗琳。在那之前，她根本没有发表过任何作品。依靠卓越的想象力，她创造了一个超过4亿5千万册销量的奇迹。</p><p>平常我们经常会评论说，一个作家或写手，他的文笔如何如何。实际上呢，文笔属于我们前面讲过的「专业知识」的范畴，它对于一部成功的作品来说只能说是辅助。以写小说为例，一个不落窠臼的好故事，才是成功的关键，而这是想象力的功劳。有好故事，自然有好文笔；没有好故事，根本谈不上文笔如何。</p><p>有可能你会认为，作家或艺术家才需要想象力，科学研究和做技术就不需要了吧。那是大错特错了。</p><p>1974年，后来的图灵奖得主——帅气的Leslie Lamport老爷子，在那个时候还只有33岁。那一年，他注意到了他们家附近有一家生意很好的面包店。面包店里有好几个收银员，由于顾客很多，经常会有多位顾客同时去找一个收银员结账的情况发生。每当这个时候，那个收银员就会试图同时跟几位顾客说话，于是整个过程混乱不堪。Lamport意识到，面包店需要一个机制，来保证一个收银员在每个时刻只服务一位顾客。在计算机科学中，这是一个互斥访问的问题。</p><p>经过反复思考，Lamport获得了他的顿悟。于是，划时代意义的「面包店算法」诞生了。这个算法有点像现在银行网点的取号机，每位顾客在进入面包店的时候先拿一个号码，然后根据这个号码的顺序被分派给合适的收银员（实际算法细节还要复杂得多，想象一下，取号的过程仍然是个互斥问题）。</p><p>这是一个真正意义的「分布式」的互斥算法，完全不依赖共享变量和更底层的互斥原语。可以说，面包店算法开启了Lamport对于并发问题和分布式理论的研究之门，之后他的众多分布式相关的理论研究，都是以这个算法的思想作为基础。这简直是神来之笔！连Lamport自己都说：</p><blockquote><p>I feel that I did not invent the bakery algorithm, I discovered it.<br>（我觉得我并没有发明面包店算法，而只是发现了它。）</p></blockquote><p>怎么样，是不是颇有点“文章本天成，妙手偶得之”的意味？这与J·K·罗琳从一个简单想法出发构建起一个恢弘的魔法世界的故事，是不是如出一辙？</p><p>科学研究当然需要想象力。比如相对论和量子力学，都是想象力的绝好例子，它们突破了人类的想象力极限。连著名的科幻作家刘慈欣都认为，科学的想象力甚至要远比科幻更疯狂！</p><p>实际上，不管是文学创作还是科学研究，它们对于突破性进展的要求，跟公司内追求创造性价值没有什么本质的区别。都是要无中生有，打破原来的桎梏；都需要有一点想象力。</p><p>缜密的逻辑思考力，加上过硬的专业知识，可以让你胜任一份工作。但做得再好，也只是在做你本该做好的事情。比如，产品经理把需求落成产品方案，工程师接到需求实现出来，这都是最基本的要求。此为「守正」。按这种基本的思路，你就算再努力，也只能创造出按「常数增长」的价值。</p><p>而真正能创造出「指数增长」价值的事情，则需要我们插上想象力的翅膀，去开辟新的疆域。此为「出奇」。</p><p>一守一攻，合起来才能真正有所成就。这中间，想象力，才是从普通走向卓越的关键。</p><hr><p>想象力固然重要，但显然不是唯一有用的东西。想象力是更高层次的能力，它应该建立在坚实的基础之上。相当多的普通人，还处于逻辑思考力不够的状态，那么想象力也只能是空中楼阁。</p><p>在幼儿教育中，现在的教育观点经常会鼓励多多培养小孩子的想象力。比如，小孩子的绘画作品总是充满想象，小孩子提出的问题也往往天马行空。不要设置过多的条条框框，让小孩子释放更多天性，当然是没错的。但我们也要知道，小孩子的「想象力」和我们这里讲的想象力，有很大的不同。小孩子的「想象力」，其实说的是联想能力，一种常见的心理现象；而我们讲的想象力，则是一种高层次的思考力，是在充分掌握了尽可能多的客观信息之后，做出的超出常人的价值判断。这种价值判断以符合逻辑为前提，并与专业知识相结合，最终能带来真正的价值创造，是厚积薄发式的能量释放。否则就只是小孩子的儿戏罢了。</p><p>金庸笔下的杨过，从小聪明过人，孤傲狂放。很多读者应该都还记得，少年的杨过假装不会武功，想出种种点子戏耍全真教臭道士的情节。小时候的杨过是不是很有「想象力」呢？现在我们说，这并不是真正的想象力。真正富有想象力的一幕，乃是多年之后终成一代大侠的杨过，在黑龙潭受了瑛姑一记凌厉的「寒阴箭」掌力之后竟毫发无伤，而是朗声说道：“老前辈僻处荒地，或不知世间武学多端，诸家修为，各有所长。”</p><p>潜台词：你这老太婆，坐井观天！躲在这么个鸟不拉屎的地方练了门武功，就以为了不起啦？太缺乏想象力了，哈哈哈哈！</p><p>实际上，在基础的逻辑思考力不足的情况下，可能会陷入两种危险的状态：一种是循规蹈矩，思路僵化（思想的麻木状态），一种是坐井观天，高谈阔论（脱离现实的空中楼阁，没有价值的胡思乱想）。它们都是想象力的大敌。</p><hr><p>很多人都渴望成功。</p><p>但并不是说，你依靠类似成功学的那种东西，达到了很悲壮的一种状态，就能迅速获得突破。也不是说，你结识了多少多少厉害的人，自己就能变强。与厉害的人碰过再多次面，谈过再多次话，吃过再多次饭，甚至睡过一张床，也没有用。这些都不能让你变强。</p><p>真正能促使人突破和成功的，是经历深层次思考之后的冷静的想象力。这里的「冷静」，指的是客观的，符合逻辑的，有根基的，有实现路径的。同时，又是超出常规的。</p><p>最后，引用刘慈欣的话：想象力，可以像宇宙一样广阔！</p><p>继续加油！</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自学一个领域？这里有一份全指南</title>
      <link href="/2020/02/08/post/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E4%B8%80%E4%B8%AA%E9%A2%86%E5%9F%9F%EF%BC%9F%E8%BF%99%E9%87%8C%E6%9C%89%E4%B8%80%E4%BB%BD%E5%85%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/08/post/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E4%B8%80%E4%B8%AA%E9%A2%86%E5%9F%9F%EF%BC%9F%E8%BF%99%E9%87%8C%E6%9C%89%E4%B8%80%E4%BB%BD%E5%85%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/aCUIdDfgisasmE6kIBv5gw">如何自学一个领域？这里有一份全指南</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>以前写过不少跟学习相关的文章，但大都是集中于某个点，欠缺系统性。</p><p>今天，我想通过这篇详细的文章，把「学习」这个问题，简单梳理一下。</p><p>当然，这是一个巨大的话题，难免挂一漏万。以后有机会，再慢慢补充，形成一整个关于学习的系列。</p><p>希望能够帮到你。</p><p><img src="/images/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E4%B8%80%E4%B8%AA%E9%A2%86%E5%9F%9F/%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94.webp" alt="学习金字塔"></p><h2 id="1-框架"><a href="#1-框架" class="headerlink" title="1. 框架"></a>1. 框架</h2><p>不少读者朋友问过我「刚刚入门一个领域，什么都不懂，怎么学？」我的回答永远都是一样的：</p><p><strong>一定要先从搭框架开始。</strong></p><p>什么叫搭框架呢？简而言之，就是给你的大脑一个铺垫，让它准备好，告诉它：在未来的日子里，我们将会大量吸收这个领域的知识，请做好理解和储存它们的准备。</p><p>举个例子：当你撰写一份策划方案、报告时，你第一步是不是先有一个整体构思，列一个大纲：我先写什么，然后写什么，最后写什么 —— 接下去才开始动手？</p><p>学习也是一样的。<strong>如果缺少了框架，你所有获取的知识，就只是碎片信息而已</strong>。它们会孤零零地漂浮在记忆里，难以稳固存在，也难以被你所调用、组织、整合。</p><p>那么，如何搭建框架，令我们的学习更加体系化呢？</p><p>我建议的方法，是去搜寻这个领域相关的经典教材，大约3-5本。然后读一遍 —— 无需一字不漏地精读，这太花时间了。大致翻一遍、通读一遍，就可以。</p><p>在这个过程中，你需要思考和回答这三个问题：</p><ul><li>What：这个领域研究的对象是什么？有哪些主要流派和分支？有哪些常用的术语？</li><li>Why：这个领域存在的意义是什么？为了解决什么问题？现在进展到哪里？</li><li>How：这个领域的主要方法是什么？有哪些被广泛承认和应用的基本成果？</li></ul><p>举个例子。很多读者问「如何入门心理学」，我总会推荐几本大部头，像《心理学与生活》《社会心理学》《认知心理学》。很多人看到就会开始打退堂鼓：</p><p>「好几百页，什么时候才能看完，至少得看一年吧……」</p><p>其实你需要一页页把它们读完吗？当然不需要，也没有必要。你先读一下前两章，对它们的起源有一个初步了解，再大致翻一下其他章节，了解心理学有哪些分支、分别研究什么、目前有了哪些主要成果；再着重看里面加粗的、或是章末拎出来的术语，大致理解它们的意思。就可以了。</p><p>再比如，学习哲学，你没有必要一页页去翻完《大问题》《西方哲学导论》，你要做的是：整体通读一遍，了解哲学的起源是人对自然的怀疑，主要关注的问题是本体论、认识论和伦理学，大体上可以划分为古希腊哲学、经院哲学、近代哲学、现代哲学，每个阶段都有什么特点 —— 比如近代哲学受文艺复兴和启蒙运动影响，思辨的核心从宗教转变为人文，开始引入成熟的逻辑学、科学，开始变得多元化，等等 —— 就可以了。</p><p>这个阶段，你要做的是什么呢？是博观约取，<strong>在心里建立起一幅图景</strong>。不要把自己局限在「作者的脉络」里面，而是要以你心里的图景为主，缺什么就补什么。</p><p>这在心理学上面，就叫做 <strong>「图式」</strong> （Schema）。它是我们认知和理解事物的基础。</p><p>比如：你翻完了一本书，知道哲学研究的一个问题是认识论。但你不清楚什么叫认识论。那就再翻到相关的部分多看几遍，或是把书里所有提到认识论的内容整合起来。不必细究每个概念是什么意思、每个结论是怎么推出来的，知道它大概指什么即可。</p><p>这阶段的首要任务，是把这幅图景补全。一旦成功建立图景，它在你未来的学习里，会起到举足轻重的作用。</p><h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2. 概念"></a>2. 概念</h2><p>搭建完框架之后，你要做的，就是去把它精细化、补充完善。</p><p>在搭框架的过程里，你一定会碰到许多术语和概念，停留在「似懂非懂」的程度，很有可能存在偏差。那么，是时候把它们攻克掉了。</p><p>这个阶段，你要采取的方法，就不仅仅局限在经典教材里面了，而是广泛地搜索。</p><p>比如，学习哲学，你看到一个术语，叫「质料」，翻了一下，发现来自亚里士多德，但书里因为篇幅原因没有详述。那么，你就要自己去搜索这个术语，想办法把它弄通、弄透。</p><p>比如，你可以去找亚里士多德的哲学导论、解读，翻到相关的部分，去尝试着理解它准确的内涵。可以找书，可以在网上搜索，可以看公开课……不拘泥于一切形式。</p><p>你要做的是：<strong>快速定位到你存在疑惑的概念，用尽可能多的信息去攻克它。</strong></p><p>在这个过程中，你多半又会碰到新的概念，那么，不妨继续顺藤摸瓜，循着「质料」出发，把相关的概念都纳入进来，一起理解清楚。</p><p>很多朋友常见的困惑是：我怎么控制这个「度」呢？怎么避免自己不断延伸、跳转，陷入新的「概念海洋」里面？</p><p>我的建议就是：时时刻刻在心里自问一遍：<strong>「我是否能够用自己的话把这个概念解释清楚？」</strong>如果可以，并且不涉及新的概念，那就说明是时候停下来了。</p><p>比如：循着「质料」，你可能会看到「质料-形式」，跳到「四因说」……到这里就可以了。再继续深入，就已经跟「质料」没有太大关系了。</p><p>要时刻记住，自己出发的目的是什么。以目的为导向，给自己划定「边界」。</p><p>一旦你认为自己足够理解了一个概念，就将它放回到框架里，试着用自己的话去解释它，看是否通顺、合理。如果是，那很好，继续寻找下一个概念，以此类推。</p><p>慢慢的，当这些概念都弄通透了，你的整个框架，也就更加准确了。</p><h2 id="3-网络"><a href="#3-网络" class="headerlink" title="3. 网络"></a>3. 网络</h2><p>到了这一步，你就算是正式开始入门了。</p><p>经过框架搭建和概念澄清，你会发现，之前看不懂的东西，似乎能够大致理解了；之前想当然的地方，原来是自己的理解不够准确；之前觉得模糊的问题，也似乎有了一些思路了。</p><p>那么，这个阶段，就可以带着下面这个问题，去阅读、听课、学习了。</p><p>什么问题呢？始终带着「联系」的思想，时时刻刻思考：<strong>我学到了一个什么知识点？它可以跟别的什么知识点联系起来？如何构建这种联系？</strong></p><p>这才是学习的核心：<strong>知识的本质永远不是信息本身，而是信息之间的联系。</strong></p><p><strong>正是这种联系，涌现出了超越单个信息点总和的「系统性」。</strong></p><p>如何思考「联系」呢？我自己常用的方式，是把每个知识点看作一个「知识元」，它有三个突触，分别是 what、why 和 how。</p><ul><li>What：话题，结构，类别</li><li>Why：原理，原因，起源</li><li>How：应用，解释，结果</li></ul><p>举个例子。你读到笛卡尔的「我思故我在」，你发现，他是在解释「自我」—— 那么，就可以把它跟「自我」联系起来。</p><p>过了一段时间，你也许会读到丹尼尔·丹内特的「多重草稿模型」，你会发现，他从脑科学的角度，提出了一种全新的「自我」观念。那么，同样把它跟「自我」联系起来。</p><p>这时，你会发现，围绕着「自我」，「我思故我在」和「多重草稿模型」产生了某种联系。什么联系呢？显然，后者是在反驳前者，提出了一种非实体的、分布式的「自我」。那么，你就可以把这两者，建立起一种新的联系。</p><p>进一步，你还可以去思考：为什么他们的观点会有这样的差异呢？如果你把笛卡尔放回之前建立的「框架」里，不难从宗教和本体论去找到他思想的根基：他的身心二元论，本质上是一种对宗教和科学的调和 —— 那么，你又可以从 why 出发，去延伸下去。</p><p>同样，关于丹尼尔·丹内特的理论，从 why 出发，又可以延伸到脑科学、认知科学……</p><p>像这样，把浩瀚、繁多的概念节点组合起来，就能够组成一张网络。一张覆盖了种种学科、领域，从底层和表层，巨细靡遗的庞大网络。</p><p>这就是你的知识体系。</p><h2 id="4-主题"><a href="#4-主题" class="headerlink" title="4. 主题"></a>4. 主题</h2><p>在上面的例子中，如果我们把目光，聚焦到「自我」这个概念上，会怎么样呢？</p><p>你也许会想到「我思故我在」，想到「多重草稿」，想到休谟的「自我不过是一连串印象的集合」……这些被你嵌入知识网络中的节点，会全部显现出来，映入你的视野。</p><p>那么，你不妨去思考一下：围绕着这个主题，这些不同的人、不同的观点，能够如何整合起来？</p><p>他们的发展脉络是什么样的？彼此之间是什么样的关系？为何会产生这些差异点和共同点？</p><p>这就是「主题」—— <strong>聚焦到我们庞大知识网络中的某个细节，去拎出一个「局部网络」。</strong></p><p>像我在 <a href="http://mp.weixin.qq.com/s?__biz=MzAxNTY0NjEzNg==&mid=2247485686&idx=1&sn=a6717cf930c89d3dc86985f345372e3c&chksm=9b81a421acf62d3749c0223b88f8e082e6443a5f9268105bc3e96f62514dd9bf80c95887a24c&scene=21#wechat_redirect">大脑的漏洞：你是如何走向狭隘和顽固的？</a> 中所写的内容，「事实 → 结论 → 观念 → 信念」这么一个过程，就是我知识网络中，围绕着「偏见」这个主题，所构成的局部网络。</p><p>有哪本书直接提到这个过程吗？有哪本书提出过「过度简化」「孤立记忆」这两个词汇吗？其实没有。</p><p>它们并不是心理学中的固有知识。而是我围绕着「偏见」这个核心，把所有会导致偏见的过程，进行提炼、总结、归纳，再赋予它一个名字，所得出的成果。</p><p>同样，「证实偏差」和「信息茧房」，是同一个领域的知识吗？其实不是。前者属于心理学，后者属于传播学。但没有关系。在「偏见」这个主题下面，它们就是互相补充的。</p><p>这就是「主题」的力量。围绕一个主题，你可以把一个复杂的、抽象的过程提炼出来，变成一个新的节点；你同样可以把不同领域的知识点放到一起，按照它们内在的相似点和共性，去总结出一个新的、更高层次的结论。</p><p>打一个比方。如果说知识网络就像一栋房子，那么「主题」，就是你在这栋房子里面，可以进行的种种活动：聚会，工作，吃饭，看电影，等等。</p><p>这些种种主题，就构成了我们对世界的认知。</p><h2 id="5-迁移"><a href="#5-迁移" class="headerlink" title="5. 迁移"></a>5. 迁移</h2><p>终于说到了迁移。</p><p>如果说前四点，都属于「知识的积累」；那么到这里，就正式进入了「知识的应用」。</p><p>什么叫迁移？它的意思其实就是：<strong>把旧的、已知的规律、模式，迁移到新的问题、情境上面。</strong></p><p>这个阶段，最重要的是什么呢？是<strong>理解和拆解外部情境的能力。</strong></p><p>比如这个问题：<strong>博物馆着火了，你应该救一幅名画还是救一只猫？</strong>—— 当你看到这个问题时，就应该透过表象去思考它的实质：</p><p>这个问题的实质是什么呢？是一个两难选择。</p><p>两难之处在哪里？一端是价值（名画），一端是道德（生命）。</p><p>那么，你或许就会发现：它的本质是什么呢？其实就是被说滥的「电车难题」的变体而已。</p><p>再进一步，当我们面临道德和价值的两难抉择时，应该如何思考呢？我们不妨求助于伦理学。</p><p>伦理学有两个观点，分别是目的论和义务论。前者着眼于事物的「效用」和「价值」，后者着眼于行为的动机和行为本身，只要出发点是善的，行为就是善的。</p><p>那么很显然，把伦理学的知识迁移过来，我们就会知道：这类两难问题并不存在答案。但透过这类问题，我们可以做的是，反思自己的立场和观念。</p><p>比如，你是一位功利主义者，那么不妨想一想：你真的能接受一条生命在你面前消失吗？你是一位义务论者，那么不妨想一想，你的行为真的是发自内心的吗？是否会受到外界的影响和干预？</p><p>当然，如果你用别的知识去迁移，那得出的可能又会是别的结论。</p><p>这就是一种迁移。具体来说，就是三步：</p><ul><li>1）在前四步积累知识时，为知识预留出「接口」（参考第四点的 how 突触）</li><li>2）遇到新情境、新问题时，通过对问题进行拆解，找出它背后的核心。</li><li>3）把问题核心跟「接口」做对比，利用已有的知识，去应用到新问题上面。</li></ul><p>同样，假如你在学习编程，那么，最重要的一步是什么？就是对你想实现的效果去「拆解」，把它们用计算机能够理解的流程、模式，描述出来，再对应到自己积累的编程知识，去「调用」已有的知识来解决问题。</p><p>举个例子。假如我想在一群人里做一个「一对一匹配」的小活动，可以如何来拆解这个问题呢？</p><p>不妨思考，它最终的目的是什么？是使到相似的人尽可能地匹配上。那如何让电脑理解「相似」呢？我们知道，计算机是不理解语言的，它只能理解数字。所以，我们只能通过数字，来实现「相似」。</p><p>那么， 一个简单的思路就是：我们事先定义出若干个分类，再让参与活动的人做一个问卷，依据问卷结果，把他们分配到不同的分类里面（给每个人贴上一个1、2、3……的标签），再在同一个分类里随机选取。</p><p>进一步，你会发现，这其实跟推荐系统的算法也是相似的。只不过推荐算法的输入，换成了各种各样的用户行为数据，以及算法复杂了很多。</p><p>简而言之，结合这几个例子，我们有哪些进行「迁移」的方法呢？</p><ul><li>1）类比。可以去思考，这个问题跟哪些旧的问题、我们已知的问题相似，可以进行模仿和类推。</li><li>2）黑箱。不妨把这个问题视为一个黑箱，去思考：它的输入是什么，输出是什么。</li><li>3）抽象。不妨去掉具体情境，试着把它泛化、抽象化，提炼出它的结构和骨架，思考，它本质上是一个什么样的问题？</li></ul><h2 id="6-模型"><a href="#6-模型" class="headerlink" title="6. 模型"></a>6. 模型</h2><p>当你进入「迁移」的阶段之后，下一步，就是不断去练习。不断去寻找和发现新的情境，练习拆解和迁移。</p><p>在这个过程中，你也许会慢慢发现：</p><p>许多新问题之间，其实是存在一些共性的。<strong>它们虽然不同，但都可以用同一套知识模式去迁移解决。</strong></p><p>这时，你就创造出了一个「模型」。</p><p>这也是很多人缺乏的能力。他们或许知道怎么迁移，也不缺乏练习量，但缺的是，从解决问题的经验中，进行高层次的总结归纳、抽象出「模型」的能力。</p><p>许多我们所说的「专家」和「聪明的人」，其实比我们厉害的，也正是这一点：他们的优势并不在于知识量的储备 —— 那些都是静态的。他们的长处，是拥有大量的「模型」积累。</p><p>你会发现，面对一个新问题，他们总是能够很快把它进行拆解，并调用相关的知识来解决 —— 这就是模型起到的作用。</p><p>比如，我在第5点举的例子「救画还是救猫」中，用到的措辞是「这类问题」 —— 这其实就是一种「模型」。</p><p>再比如，我在以前的文章里，提到过很多次「动力-阻力」模型。这个模型有哪一本书提到过吗？其实没有。它完全是我原创的。</p><p>但是，通过这个模型，我就可以把许多相关的知识浓缩起来，去处理一系列跟决策、行为、习惯、政策……等等相关的问题，更好地思考它们和解决它们。</p><p>我常常说，要努力去创造自己的方法论。模型就是自己的方法论。你所有的知识，都是这个世界上已有的、已知的，唯有这些通过你的经验和实践，所得来的浓缩的「模型」，才是真正专属于你自己的财富。</p><p>你会发现，模型跟主题非常像。它们的区别是什么呢？主题是对内的，是你围绕知识网络中某个节点所展开的一系列「解释」；而模型是对外的，它是将主题迁移到一系列情境上面的结果。</p><p>简而言之，模型的本质，就是主题+情境；主题聚焦于「为什么」，而模型聚焦于「怎么做」。</p><p>当你能够打通前五层，并且从模型的角度看待新问题、解决新问题的时候，你就已经进入「专业」的领域了。</p><h2 id="7-更新"><a href="#7-更新" class="headerlink" title="7. 更新"></a>7. 更新</h2><p>最后一层，是更新。</p><p>学无止境。一个框架搭建起来，一个知识网络构建起来，它始终是「过去」。但人类的知识是在不断发展的。你必须时刻去更新它，去更新旧的节点，更新节点间的联系，才能让你的知识网络保持生命力。</p><p>如何更新呢？这里，就是碎片信息的作用了。我会在生活中，去看各种各样的网站、博客、杂志，看一些不长的、专注于某个点的文章，并用最新的结论和观点，去覆盖和修正我的旧观点。</p><p>同样，在生活中，如果我的旧观点受到挑战和质疑，我也会去想办法「寻找共识」，找到自己观点的不足和残缺点（正），把对方的观点整合起来（反），以达到一个更高层次的「合」。</p><p>这就是一个不断更新知识库、不断升级大脑操作系统的过程。</p><p>但很多人在这一层，也特别容易产生一个问题：封闭心态。</p><p>许多人会把不同的观点，当成是对自己的攻击，从而下意识地启动防卫机制，来维护自己的正确、稳定。</p><p>（具体的机制，我在 大脑的漏洞：你是如何走向狭隘和顽固的？ 写得很清楚了）</p><p>记住：只有开放的心态，能够让我们保持生命力。</p><p>当你的内心变得封闭，当你关上了接纳和共识的大门时，你才是真正地变「老」了。</p><hr><p>最后，简单提几个大家常见的问题。</p><p>1）有些人可能会觉得「我好像没有框架」。实际上，<strong>框架是一定存在的</strong>。你之所以觉得「没有框架」，只不过是因为它没有被你意识到而已。</p><p>但这样一来，就很容易造成什么结果呢？框架不完整，不准确，支离破碎。从而导致，你对新知识的接收和储存，也是破碎的。</p><p>所以，把自己的框架「显式化」，也是一种非常重要的能力。</p><p>2）这套理论适用于绝大多数的学习。只不过对不同领域的学习而言，<strong>每一层次的比重会有所不同</strong>。</p><p>比如，偏理论型的知识领域（比如哲学、历史、艺术），框架-概念-网络-主题的占比可能会重一些；而偏实践、技能型的知识领域（比如编程），框架-概念、迁移-模型的比重就会大一些。</p><p>3）大多数人的问题是什么呢？<strong>被动学习</strong>。</p><p>什么意思呢？打开一本书，从头看到尾，忙着去思考「作者讲了什么」「书的结构是什么」，全盘照收；听一门课，忙着把课程结构、脉络梳理出来，然后去记忆和背诵……</p><p>这样有用吗？也许有，但不大。你只是在复制别人的思想而已。学再多，你也只是在复述，很难真正能够「运用」。</p><p>不要觉得跟着别人走就是捷径。学习没有捷径。</p><p>4）很多人在前几层的时候会有困惑：可是，我怎么知道我搭的框架、理解的概念是否正确？万一错了呢？</p><p>其实不必过分担心。一方面，框架的搭建、概念的理解并非源于臆测 —— 你是要查阅资料来攻克它们的。这一点可以保证不会出现方向性的偏差。</p><p>另一方面，这是一个稳健的系统。框架和概念共同组合，彼此作用，如果偏差过大，那么这个框架一定是有内在矛盾的，也很容易被我们所发现。</p><p>最后，无需追求100%的正确，这既不必要也不可能。关键是，要保持开放的心态，在后面的学习中，时刻去检查和更新自己的知识。这就可以了。</p><p><strong>我们要追求的，永远不是「绝对正确」，而是「比过去的自己更好」。</strong></p><p>最后，再回顾一下这张图。</p><p><img src="/images/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E4%B8%80%E4%B8%AA%E9%A2%86%E5%9F%9F/%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94.webp" alt="学习金字塔"></p><p>马上就 2020 年了。希望能为你新的一年，注入一些动力。</p><p>新的一年，一起加油。: )</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jira基本概念</title>
      <link href="/2020/02/05/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/02/05/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Project（项目）"><a href="#Project（项目）" class="headerlink" title="Project（项目）"></a>Project（项目）</h2><p>Jira中的项目是一组问题单（issue）的集合，项目可以根据组织需求来定义，例如：软件研发项目，市场营销活动，服务台（helpdesk）系统，一个请假管理系统等等。每一个问题单属于一个项目。每个项目需要有一个名称（例如：Website Issues）和关键字（Key，例如WEB）。项目的关键字会成为项目问题单前缀，例如WEB-101，WEB-102等等。</p><span id="more"></span><h3 id="组件是什么（component）"><a href="#组件是什么（component）" class="headerlink" title="组件是什么（component）"></a>组件是什么（component）</h3><p>组件时项目中的问题单的一种逻辑分组。一个项目根据组织的需要可能会包括多种组件。</p><p>举例而言，一个软件开发项目可以包括如下组件：文档，后端，邮件子系统，界面。一个网站系统可能包括产品，联系方式等组件。在一个项目中，一个问题单可以归属于0到多个组件。</p><p>在Jira较新的版本中，组件被更名为模块。</p><h3 id="版本是什么（version）"><a href="#版本是什么（version）" class="headerlink" title="版本是什么（version）"></a>版本是什么（version）</h3><p>对于一些类型的项目，尤其是软件研发项目，把一个问题单关联到一个特定的项目版本（例如：1.0beta，1.0，1.2，2.。0）会非常有用。</p><p>问题单（Issues）有两个跟版本有关的字段：</p><ul><li>影响版本（Affects Version(s)）：这个是要说明受问题单影响的版本。举例而言，一个软件Bug可能影响1.1和1.2版本。</li><li>修复版本（Fix Version(s)）：这个是为了标明这个问题单在哪一个版本中被修复。继续上例，Bug的影响版本号是1.1和1.2，但是可能会在版本2.0中才被修复。没有修复版本号的问题单会被归类为未规划（Unscheduled）。</li></ul><p>版本可以是下面三种状态之一：发布（Released），未发布（Unreleased）和归档（Archived）。版本会有一个发布日期，并且如果在发布日期之后还没有按时发布，这个状态会自动变为国企状态（overdue）。</p><h2 id="Workflow（工作流）"><a href="#Workflow（工作流）" class="headerlink" title="Workflow（工作流）"></a>Workflow（工作流）</h2><p>Jira中的工作流由一系列的状态（statuses）和变迁（transitions）构成，一个问题单在其生命周期中会经过这些状态和变迁。下图为例：</p><p><img src="/images/Jira%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/Jira%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="Jira工作流"></p><h2 id="Issue（问题单）"><a href="#Issue（问题单）" class="headerlink" title="Issue（问题单）"></a>Issue（问题单）</h2><p>Jira的问题单非常灵活，页面可以定制，字段也可以定义。这里介绍一些内置的基本概念。</p><h3 id="Issue-Type（问题单类型）"><a href="#Issue-Type（问题单类型）" class="headerlink" title="Issue Type（问题单类型）"></a>Issue Type（问题单类型）</h3><p>Jira可以用来跟踪不同类型的问题单。默认类型如下，Jira的系统管理员也可能会定制这些类型。</p><ul><li>Bug：故障，功能失效</li><li>Improvement：提升，既有功能增强</li><li>New Feature：新功能</li><li>Task：任务</li><li>Custom Issue：根据需要客户化定制</li></ul><h3 id="Priority（优先级）"><a href="#Priority（优先级）" class="headerlink" title="Priority（优先级）"></a>Priority（优先级）</h3><p>优先级也可以自定义，系统默认优先级如下：</p><ul><li>Highest：最高级别，表明问题阻塞了业务流程正常进行</li><li>High：高级，表明问题引发明显故障，需要紧急关注</li><li>Medium：中级，表明问题有一个明显的影响</li><li>Low：低级，表明问题有一个轻微的影响</li><li>Lowest：最低级</li></ul><h3 id="Status（状态）"><a href="#Status（状态）" class="headerlink" title="Status（状态）"></a>Status（状态）</h3><p>每一个问题单都会有一个当前的状态。一个问题单开始阶段可能是Open状态，然后可以转移到Resolved或者Closed，依赖于系统流程配置的方式。内置的常见状态如下：</p><ul><li>Open：打开状态，表明问题单已经被创建，等待被分配到开始处理状态。</li><li>In Progress：处理中状态，表明问题已经被分配人激活，并处于被处理状态中。</li><li>Resolved：已解决状态，表明问题已经被处理完成，等待问题报告人的验证。从这个状态，问题单一般可以进一步变更为重新打开状态（Reopened）或关闭状态（Closed）。</li><li>Reopened：重新打开状态，问题经过验证发现没有被解决，就可以变更到这个状态。</li><li>Closed：关闭状态，问题被彻底解决就可以转为这个状态。</li></ul><h3 id="Resolution（解决结果）"><a href="#Resolution（解决结果）" class="headerlink" title="Resolution（解决结果）"></a>Resolution（解决结果）</h3><p>一个问题可以有多种解决结果，其中只有一种方法是修复。一个解决结果通常会砸状态变更时候被设置起来。系统默认的问题解决结果会有以下几种：</p><ul><li>Fixed：修复。</li><li>Won’t Fix：不用修复。例如这个问题所描述的现象已不再有影响了。</li><li>Duplicate：重复。同其它已经存在的问题重复了，推荐把相关的单子链接起来。</li><li>Incomplete：未完成。没有足够的信息继续完成这个问题。</li><li>Cannot Reproduce：不能重现。如果以后有更多信息可以继续可以重新打开这张单子。</li><li>Won’t Do：不做。类似于不用修复的方案，适用于软件项目的默认状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具整合</title>
      <link href="/2020/02/05/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/"/>
      <url>/2020/02/05/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="GitLab-CI整合SonarQube"><a href="#GitLab-CI整合SonarQube" class="headerlink" title="GitLab-CI整合SonarQube"></a>GitLab-CI整合SonarQube</h2><p>……</p><h2 id="GitLab整合Jira"><a href="#GitLab整合Jira" class="headerlink" title="GitLab整合Jira"></a>GitLab整合Jira</h2><h3 id="一、整合步骤"><a href="#一、整合步骤" class="headerlink" title="一、整合步骤"></a>一、整合步骤</h3><h4 id="1、打开项目页面，进入-设置-→-集成-→-项目服务-→-JIRA"><a href="#1、打开项目页面，进入-设置-→-集成-→-项目服务-→-JIRA" class="headerlink" title="1、打开项目页面，进入 设置 → 集成 → 项目服务 → JIRA"></a>1、打开项目页面，进入 设置 → 集成 → 项目服务 → JIRA</h4><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab-Jira.png" alt="GitLab-Jira"></p><h4 id="2、填写并保存JIRA配置"><a href="#2、填写并保存JIRA配置" class="headerlink" title="2、填写并保存JIRA配置"></a>2、填写并保存JIRA配置</h4><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab%E7%9A%84Jira%E9%85%8D%E7%BD%AE.png" alt="GitLab的Jira配置"></p><p>Username 统一使用 gitlab-admin。</p><h3 id="二、整合示例"><a href="#二、整合示例" class="headerlink" title="二、整合示例"></a>二、整合示例</h3><p>提交代码时在提交说明中填写Jira Issue的ID（如下图的 STUDYCLOUD-3）即可自动关联上Jira。</p><p><img src="/images/%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/GitLab-Jira%E6%95%B4%E5%90%88%E7%A4%BA%E4%BE%8B.png" alt="GitLab-Jira整合示例"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> Jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求分析</title>
      <link href="/2020/02/05/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/05/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、我们应当如何做需求分析？"><a href="#一、我们应当如何做需求分析？" class="headerlink" title="一、我们应当如何做需求分析？"></a>一、我们应当如何做需求分析？</h2><p>需求分析不是一蹴而就的，它应当贯穿整个开发周期，不断的分析确认的过程。这就是敏捷开发倡导的需求反馈。敏捷开发认为，需求分析阶段不可能解决所有的需求问题，因此在设计、开发、测试，直到最终交付客户，这整个过程都应当不停地用开发的成果与客户交流，及时获得反馈。只有这样才能及时纠正需求理解的偏差，保证项目的成功。</p><span id="more"></span><h2 id="二、我们应当怎样做需求调研？"><a href="#二、我们应当怎样做需求调研？" class="headerlink" title="二、我们应当怎样做需求调研？"></a>二、我们应当怎样做需求调研？</h2><p><img src="/images/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/%E9%9C%80%E6%B1%82%E8%B0%83%E7%A0%94%E6%B5%81%E7%A8%8B.png" alt="需求调研流程"></p><h3 id="1、初识"><a href="#1、初识" class="headerlink" title="1、初识"></a>1、初识</h3><p>我们对客户提出的需求进行深入理解以后，运用我们专业知识，提出比客户的原始需求更加合理、可操作的解决方案，让客户感觉你说的正是他们想要的。如果能够这样，客户不仅能够欣然接收你提出的方案，而且会感觉你非常专业，你在客户心目中的形象也会无形中提高，使你有更多的机会提出有利于开发的可行方案，降低开发的风险。这毫无疑问会形成一个良性循环，但要做到这一点并不容易，毫无疑问，在与客户接触初期的表现起到了极其关键的作用。</p><ol><li>高层领导关心的是宏观的目标，因此软件研发目标、宏观统计报表、决策支持功能，我们应该怎样做需求分析,应当与高层领导谈。</li><li>中层领导关心的是具体的效益，即软件给各个部门信息化管理方面带来的效益，因此，中层领导是各项业务流程、功能模块的需求决策者。他们关心功能的定义、业务流转的衔接、查询报表的设计，但不太关心一些具体的操作，以及一些具体业务流程的细节。</li><li>基层人员是每一项业务流程的操作者，也是软件今后真正的使用者。他们是真正了解你所要开发的软件的业务需求的领域专家，是你进行需求调研的重点对象。但是，基层人员往往受到自身视野的局限，可能只清楚自己工作涉及的十分狭小的一个范围，因此我们需要努力寻找那些业务涉及面广，经验丰富，又有一定大局观的真正的专家。另外 ，他们就是软件今后真正的使用者，让他们参加，会让他们成为今后软件推行的忠实支持者，对其他操作人员的指导者，益处多多。而他们关心的则是每项操作的细节。</li></ol><p>俗话说：万事开头难。如果你在项目开始的时候总感觉千头万绪不知如何着手，在这里我给大家的三点建议：</p><p>1）树立良好的职业威信；</p><p>2）进行详细角色分析，将与会各方代表对号入座；</p><p>3）从宏观上制订目标与方案。随后的工作，就是与各方代表建立联系，逐一拜访他们，将需求调研工作一步一步进行下去。</p><h3 id="2、拜访"><a href="#2、拜访" class="headerlink" title="2、拜访"></a>2、拜访</h3><p>需求调研不是一蹴而就的事情，是一件持续数月甚至数年的工作（假如项目还有后期维护） 。在这漫长的时间里，我们需要依靠客户这个群体的帮助，一步一步掌握真实可靠的业务需求 。不仅如此，技术这东西总有不如意甚至实现不了的地方，我们需要客户的理解与包容，这都需要有良好的客户关系。尽管如此，我们也不能总是期望客户中的所有人都能与我们合作，很多项目都不可避免地存在阻碍项目开展的人。</p><h3 id="3、研讨会"><a href="#3、研讨会" class="headerlink" title="3、研讨会"></a>3、研讨会</h3><ol><li>由于业务人员自身的局限 ，不可能对所有业务领域的细节全面掌握，往往总是有自己熟悉的部分，也有自己不熟悉的部<br>分。划分业务组，可以让业务人员分别在自己最熟悉的业务范围内参与讨论，可以有效提高业务讨论的质量；</li><li>集中式的业务研讨形式和分散式的业务研讨形式；</li><li>有效抑制个性化差异、分模块组织专项研讨会。</li></ol><h3 id="4、业务研讨"><a href="#4、业务研讨" class="headerlink" title="4、业务研讨"></a>4、业务研讨</h3><p>在需求分析过程中，客户存在的最大问题就是提不出正确的需求，这表现为几种形式：</p><ol><li>由于对软件不了解，客户提不出需求，不知道软件最终会做成什么样子。这类客户在需求讨论过程中，往往只能描述目前自己手工管理的方式是怎样的，不知道计算机会怎样管理。</li><li>能提出一些业务需求，但当软件做出来摆在自己面前时，需求就变了。这类客户，他们能熟练使用电脑，对信息化管理是清楚的。他们提出的业务需求从整体上应当是八九不离十的 。但是，由于没有实物，在软件中的一些具体操作并没有完全想清楚。</li><li>能非常详细地提出业务需求，甚至有时候该怎么做的提出来了。这类客户，参与过很多软件信息化建设，甚至有些还是软件开发的半专业人士。但是他们提出的业务需求过于具体 ，甚至怎样实现都说出来了，但这些有时候不是最佳设计方案、可能在技术上难于实现，甚至有些就是过于理想化而不可实现。</li></ol><p>解决办法：</p><ul><li>业务领域分析:客户现有的业务流程是什么样的，都有些什么操作？</li><li>客户在业务中都有些什么事物，什么专用名词，都是怎样定义的，相互之间的关系是什么？</li><li>客户在每一项操作中的目的是什么，为什么要这样做，他们制作的手工报表都说明了什么问题？</li></ul><p>(1)我们做需求分析，眼界不能仅仅停留在软件本身，应当更开阔一些，应当扩展到跟这个业务有关的那些领域知识中。</p><p>(2)在客户提出的所有原始需求中那些与业务实现有关的需求都是无效的需求，它们仅仅只能作为我们的一个参考。</p><p>(3)还有一些是技术难于实现或者根本就无法实现的需求，我们应当耐心地说服和引导客户，并给他提出一个更加合理的方案。</p><p>(4)需求分析不是一种简单的你说我记的收集活动，而是在大量业务分析与技术可行性分析基础上的分析活动。只有建立在这种分析基础上的软件研发，才能保证需求的正确与变更的可控。</p><h3 id="5、迭代"><a href="#5、迭代" class="headerlink" title="5、迭代"></a>5、迭代</h3><p>在第一次的需求分析阶段，我们在一段时期内需要与客户进行反复地讨论，这个过程往往是这样一个反复循环的过程：需求捕获-&gt;需求整理-&gt;需求验证-&gt;再需求捕获······</p><ol><li><p>需求捕获:就是我们与客户在一起开研讨会，讨论需求的活动,客户可能会描述他们的业务流程，这时我们在纸上绘制简单的流程草图，及时地记录下来；客户在描述业务的同时，可能会反复提到一些业务名词，详细询问这些名词的含义，以及它们与其它名词的关系，用类图或者对象图绘制简单的草图；客户在描述业务的同时，还会提出今后的软件希望实现的功能，如能够展示某个报表、能够导出文件，以需求列表的形式记录下来。一个功能，在需求列表中会有多个需求，而每个需求应当能够用 1、2 句话，在 20 个字以内就可以描述清楚 。需求列表是客户提出的最最原始的需求，他不掺杂任何分析设计，是我们的每项功能必须实现的内容。</p></li><li><p>需求整理:就是在需求研讨会后，需求分析人员对研讨内容的分析和整理的过程。首先，需求分析人员应当通过用例模型，划分整个系统的功能模块，以及各个模块的业务流程。用例模型分析是一个由粗到细的过程，这样一个过程也是符合人类认识世界的思维习惯的一个过程。最先，我们应当对整个系统绘制用例图，设计用例场景，并依次对这些用例进行用例描述、流程分析、角色分析等分析过程。当然，在整体用例分析的同时，我们还应当进行一个整体的角色分析，绘制一个角色分析图，进行一个流程分析，绘制一个流程分析图（可以是传统的流程图、UML 中的行动图，甚至一个简单的示意图，等等）,再在整体用例图的基础上，依次对每个用例绘制用例图。每个用例图中，会更细致地划分出多个用例，并依次进行用例描述、流程分析、角色分析等分析工作。如此这般地不断细化，直到我们认为需求已经描述清楚为止。</p></li><li><p>领域模型 :是对用户业务领域中相关事物、相互关系、相互行为操作的描述，它是以对象图和类图的形式表达的。需求人员对领域模型的分析，对业务理解的深度，对日后软件的设计，以及软件的功能扩展、升级演化，都起到了至关重要的作用。</p></li><li><p>需求验证:需求验证工作应当贯穿整个研发周期，并且在不同时期表现出不同的形式。首先，在需求分析阶段，需求验证工作表现为对需求理解是否正确的信息反馈。需求分析人员与客户再次坐在一起，一项一项描述我们对需求的整理和理解，客户则时不时地对一些问题进行纠正，或者更加深入地加以描述。我们则认真地记录，回来整理，并等待下一次的验证。在需求分析后期，我们还可以制作一些简单的原型，更加形象地描述我们对需求的理解，会使我们与客户的沟通更加顺畅。随后的设计开发阶段，我们则应当以迭代开发的形式进行。每开发完一个迭代周期，将开发的成果与客户反馈。这样做的结果是，客户可以及时地提出我们对需求理解的偏差，或者及时提出对我们设计不满意的地方，使我们存在的问题得到及时地发现与解决。问题及时的解决，使我们修复问题的代价得以降至最小。</p></li></ol><h3 id="6、需求捕获"><a href="#6、需求捕获" class="headerlink" title="6、需求捕获"></a>6、需求捕获</h3><p>经过深入分析我们会发现，从客户嘴中说出来的需求，只是整个软件需求中的冰山一角，还有两类需求需要我们自己去挖掘：客户嘴中没有说出来的需求 ，和客户压根儿就没有想到的需求。</p><ol><li><p>什么是客户嘴中没有说出来的需求：并不是客户故意卖弄官子不愿说出来，而是在客户所在业务领域已经约定俗称，在他们看来已经是天经地义，根本就不用说出来的业务规则。然而 ，作为刚刚涉足该领域的需求人员，他们是不了解这些规则的。如果采用被动的方式去仅仅记录客户说出来的需求，毫无疑问会遗失这部分需求，这就是为什么直到项目后期，软件被研发出来即将交付使用，客户才提出说这不是我想要的软件，并提出大量变更需求的原因。要求我们在需求分析的整个过程，不断进行业务领域知识的学习。在我做需求访谈的初期，我往往不是跟客户谈需求，而是先跟客户谈业务。你们是怎样操作的？都经过些什么流程？谁来完成这些操作的？为什么这样操作？注意，在所有这些问题中，最后一个问题是最重要的。客户业务领域中的所有操作、所有流程都是有它存在的意义的，它体现了其内部的原因与作用。多问为什么，可以让我们深入地理解这些领域知识 。站在客户的视角去思考问题，进而深入地理解客户为什么要提出他们的那些业务需求。</p></li><li><p>另一种就是客户压根儿没有想到的需求：在需求分析阶段，虽然客户压根儿没有想到，但需求分析人员是软件研发领域的专业人员，他们应当在深入理解业务领域与需求的基础上，通过分析提前发现这些需求。作为需求分析人员，他们应当站在客户的角度去思考，我们的软件应当设计成什么样子，每个需求的真实意图是什么。站在这个基础上，再运用专业知识去整理、分析与设计。我前面谈到，客户描述的最原始的需求是编写在需求列表中的，而经过需求分析人员的整理、分析与设计，经过用例分析、领域建模，最终形成产品需求说明书（或称为产品规格说明书）。先在一些非正式的场合单独跟客户聊，产生第一手资料，最后将这些需求在比较正式的场合，如各部门参加的业务讨论会、有用户代表参加的需求评审会、需求定稿签字确认会等等，以比较正式的形式讨论和确定下来。</p></li></ol><p>参考文档：</p><ul><li><a href="https://wenku.baidu.com/view/1e2bab73f46527d3240ce0cb.html">我们应该怎样做需求分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目决策</title>
      <link href="/2020/02/05/%E9%A1%B9%E7%9B%AE%E5%86%B3%E7%AD%96/"/>
      <url>/2020/02/05/%E9%A1%B9%E7%9B%AE%E5%86%B3%E7%AD%96/</url>
      
        <content type="html"><![CDATA[<p>在结果还没出现之前，一个决策的好坏似乎是无法判定的。但是当结果出现之后，再依据结果判定这个决策好坏，是否又为时已晚？判断决策优劣并非是为了以结果论英雄，更多的是为达到某个既定结果所进行的决策预判。</p><p>不论在军事还是商业，或者是生活上，一个好的决策一定是在其决策周期及决策目标下，基于确定性边界条件及核心逻辑演绎下的结果。也只有这样的决策才能算是一个好的决策。</p><p>决策有三个基础：决策目标、决策条件、决策逻辑。</p><p>一个好的决策一定是由对应的决策条件来做支撑，并且基于这些决策条件，以及想要达成的决策目标，有一套核心而正确的决策逻辑来实现。这三个决策基础实际上形成一个决策链条，环环相扣，任何一个环节的不利都将直接导致整个决策失效。</p><span id="more"></span><h2 id="决策目标"><a href="#决策目标" class="headerlink" title="决策目标"></a>决策目标</h2><p>在我们做决策的过程中，我们都会预先假设了这么一个决策目标，这也是一个成功决策首先要具备的条件。如果决策目标都改变了，那么这个决策当下就已经宣告无效。</p><p>决策目标包含两个作用：</p><ul><li>评价作用：评价作用主要体现在决策目标作为一个确定标准，能够对决策逻辑和决策条件进行定性，通过否定决策逻辑和决策条件来否定自身。</li><li>指导作用：在具体的决策过程中，指导作用能够帮助我们选择正确的决策逻辑去分析，并基于正确的逻辑去检视决策条件是否成立。</li></ul><p>在我们做决策时，是很难一开始就能够用最有效的决策逻辑去分析这个决策问题的，我们往往会采用一惯性且直观的逻辑去分析问题，但这些决策逻辑往往并不是正确的，对于很多决策，它们对应的决策逻辑通常很生僻，不容易在一开始就能够想到。</p><h2 id="决策条件"><a href="#决策条件" class="headerlink" title="决策条件"></a>决策条件</h2><p>商业活动需要资源，而决策活动则需要条件。没有条件的决策无异于空中楼阁。但并不是任何条件都能够最终成为决策条件，而成为决策条件的也不同等重要。</p><p>决策条件需要同时包含以下三个特点：完整性、确定性和持续性。</p><ol><li>完整性<ol><li>决策条件组合完整性：决策条件组合是一个决策成立所需要条件的集合，这个集合至少包含一个子条件，这些子条件对于决策目标的达成都是不可或缺的。比如我们要达到一个决策目标D，需要这么一个决策条件集合(A,B,C)。表达为A+B+C→D。那么这个条件组合中的任何一个子组合缺失，都将达不到决策目标D。</li><li>决策子条件的完整性：一个决策条件组合内包含多个子条件，而每个子条件又必须完成一个自证过程，也就是说它们必须依靠自身的完整性来证明自己是这么一个子条件。比如对于决策目标D，对应这么一个决策条件集合(A,B,C)，这解决的是一个需要什么而有什么的问题。而对于决策子条件的完整性，是A&#x3D;a1+a2+a3的一个逻辑，解决的是一个要什么而是什么的问题。</li></ol></li><li>确定性：确定性是决策条件需要具备的又一个特性，而且大部分决策失败都是由决策条件的确定性不够而造成的，因为人总是会主观的判断条件的确定性程度，在决策条件都具备的前提下，主观的高估条件的确定性往往会给决策目标的达成带来很大的潜在风险。</li><li>持续性：对于一个决策，往往对应着一个周期。在这个决策周期内，决策条件还需要具备一定的持续性，这也是很多决策失败的重要原因，人们在做决策的时候，往往都只是注意到决策的当下，而忽略决策是有周期的这个事实，基于当下决策的条件如果不能在决策周期内保持着一种持续性，很有可能在决策实施的后期，因为决策条件缺失而无法进行。</li></ol><p><strong>决策条件是决策目标达成的根基，对于这样一个根基而言，无论是完整性、确定性还是持续性都将直接影响到决策目标的达成。没有条件的完整性，决策执行过程中将无法推进，如果没有条件的确定性不高，将影响目标达成的概率，而条件持续性的缺失相当于在决策执行过程中埋下夭折的伏笔。</strong></p><h2 id="决策逻辑"><a href="#决策逻辑" class="headerlink" title="决策逻辑"></a>决策逻辑</h2><p>决策逻辑是决策中尤为重要的一环，这也是最能体现决策能力的地方。优秀的决策逻辑在一定程度上能够弥补决策条件的不足，同时又能更有效率的实现决策目标。</p><p>决策逻辑是基于一定决策条件，并为达成预设决策目标而产生的一系列思维。在同样的决策条件和决策目标下，决策逻辑的不同直接影响到决策目标是否成立的判断。</p><p>不同的决策范围，对应的具体决策逻辑是不相同的，军事有军事的决策逻辑、商业有商业的决策逻辑。</p><p>决策逻辑分为两个维度：通用逻辑、专用逻辑。</p><ol><li>决策的通用逻辑：通用逻辑，通俗点说那就是用之四海而皆通的逻辑。通用逻辑更多的需要通过将不同专用逻辑比较提炼而得到，通过这些专用逻辑提炼出来的逻辑便是基于这些专用逻辑的通用逻辑，而这些专用逻辑对应的对象将构成通用逻辑所适用的“四海”。</li><li>决策的专用逻辑：在很多时候，我们做一个决策除了要基于一定的通用逻辑外，还要基于决策对象所特有的逻辑。专用逻辑由于具有特定对象差异性，所以它更多的是一种经验性质的逻辑，无法通过通用逻辑来弥补，所以仅仅知道通用逻辑，而忽略专用逻辑，也是很难在具体的决策过程中做出非常正确的决策的。那如何拥有这样的专用逻辑呢，这里有两种方法，第一种方法那就是不断拓展专业逻辑的储备，这更依赖于实践和学习，第二种方法那就是不断深化你的通用逻辑，让专业逻辑尽最大可能的变成通用逻辑。两种方法的配合将会促进这一过程发展。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>做好决策要基于三个基础：决策条件、决策逻辑与决策目标。这三个基础环环相扣，构成决策的系统。</li><li>决策条件需要满足三个条件：完整性、确定性及持续性。</li><li>决策逻辑有两个维度：通用逻辑和专用逻辑，对于一个具体决策，需要这两个维度的逻辑来综合分析。</li><li>决策目标不同于执行目标，它更多的是一种评价和指导，通过评价和指导来确定自身是否成立。</li></ol><p>参考资料：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/29583983">如何好做一个决策</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目规范</title>
      <link href="/2020/02/05/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
      <url>/2020/02/05/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p><img src="/images/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="软件生命周期"></p><p>在日常工作中，使用wiki和jira进行协作的一般流程为：</p><ol><li>调研、收集资料，并形成相关文档记录在wiki上。</li><li>组织相关人员进行文档评审会议，指定与会人员进行会议记录，并形成行动项。</li><li>项目管理人员将行动项转换成jira的问题，指派问题的经办人，指定任务时间。</li><li>问题的报告人和经办人根据实际的执行情况修改jira问题的详情、状态等。</li><li>项目负责人周期性的对问题的执行情况进行跟踪反馈，并制定后续的行动策略。</li></ol><span id="more"></span><p>以下简称为<strong>一般流程</strong>。</p><h2 id="立项"><a href="#立项" class="headerlink" title="立项"></a>立项</h2><ol><li>完成《行业分析报告》、《竞品分析报告》、《技术可行性分析报告》、《成本与效益报告》、《项目计划》等文档的一般流程。</li><li>《项目计划》完成之后，会根据具体的项目计划内容形成多个jira史诗，每个史诗可以继续细分成多个故事或任务。jira故事（即常说的“用户故事”）一般需要编写相应的需求设计，而任务则会转化成具体的方案设计、开发任务等。</li></ol><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>根据用户故事进行需求分析，需求分析包含以下内容：<ol><li>明确基本需求</li><li>挖掘隐含需求</li><li>扩展需求</li><li>业务架构（前端流程、后台处理流程、资金链）</li><li>筛选不合理需求</li></ol></li><li>编写软件产品《需求设计》文档，并完成《需求设计》文档的一般流程。</li><li>需求设计完成之后关闭对应的jira故事。</li></ol><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ol><li>在明确了软件产品的需求之后，需要对系统的业务模块进行划分并记录为jira模块。</li><li>完成各个模块的《详细设计》文档的一般流程，《详细设计》文档中一般包含了功能详细设计、原型设计和交互设计。</li></ol><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ol><li>根据《详细设计》创建jira开发任务，指定开发人员和开发周期。</li><li>开发人员按要求完成开发任务并修改jira开发任务状态。</li><li>项目代码托管在GitLab上，通过Git Flow模型进行代码版本管理。</li><li>开发人员提交代码后，平台会先确定代码能通过编译并进行静态代码检查，还会检查代码是否通过所有测试。</li><li>项目的主程序员完成代码审核，并执行分支合并操作。</li><li>完成代码的检查、测试和审核后，平台会对应用进行打包并发布到Nexus私服或者Harbor镜像仓库，并将应用部署至测试环境供测试人员进行测试。</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h2><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不好意思，你的辛劳并不等于酬劳</title>
      <link href="/2020/02/05/post/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%EF%BC%8C%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/"/>
      <url>/2020/02/05/post/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%EF%BC%8C%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/ODfSR-_dxpNiMUj8UOPY5A">不好意思，你的辛劳并不等于酬劳</a> <mark class="hl-label green">转载</mark> </p></blockquote><p><img src="/images/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/1.webp" alt="1"></p><p>今天的文章算是“996”系列的最后一篇，来聊聊时间和报酬的问题。</p><p>很多人抱怨说自己工作时间长加班多，为什么获得的薪酬还那么少。</p><p>那是因为你还没有了解职场上的游戏规则：</p><p><em><strong>职场上升的本质，是一个不断把初级资源转化成高级资源的过程。</strong></em></p><p>你所获得的回报，绝不应该以时间来计量，否则一辈子都是受人剥削的打工仔。</p><p>为什么这么说？且听我慢慢道来。</p><p>如果把我们漫长几十年的职场生涯比作一场竞技游戏，那么大部分普通人在大学毕业的初始阶段，时间和精力就是最初级，也是最重要的资源。</p><p>我们往后的人生，实质上比拼的就是你怎么利用这些初级资源。</p><p>3年前我曾用小号在知乎上发起过一个很火的问题，叫<strong>为什么毕业三四年之后，人和人的差别变得如此巨大？</strong></p><p><img src="/images/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/2.webp" alt="2"></p><p>除了少数幸运儿天生自带身份、背景、家庭社会地位所带来的光环加持，更多普通人三四年后的差异，完全取决于他怎么去利用初级资源，也就是时间。</p><p>有的人懂得将时间进行高阶置换，用时间去换知识，换技能，换人脉，换名声，换一系列能在往后职场通关打怪中帮到自己的高级资源；</p><p>而有的人并没有意识到这一点，在一无所有的年纪用时间去换所谓的“快乐”，去换夜夜笙歌的开心，去换本不属于现在的自己但渴望提前过上的“精致生活”。</p><p>到头来知道的都是哪里的夜店好玩，哪里的酒吧精彩，什么牌子的包是新款，什么车是名牌。</p><p>可除了这些，任何工作事业上的提升想法都没有，也不知道怎样做才能让自己变得更强大。只能看那些不知所云的烂大街鸡汤，暂时麻痹自己。</p><p>于是差别就这么出来了。</p><p><strong>你怎么利用资源，体现的是你对自己人生的战略思考。</strong>越早懂得用初级资源换取高级资源，就越早能上升到新的层次。</p><p><img src="/images/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/3.webp" alt="3"></p><p>上图基本上囊括了一个人职业生涯成长中三种资源的高低属性。</p><p>最初级的时间资源前面说过，每个刚毕业的人，拥有最多的就是时间。</p><p><strong>人与人的第一次差别，就体现在初级资源（时间）向中级资源（技能）的转化过程中。</strong></p><p><img src="/images/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/4.webp" alt="4"></p><p>光这一阶段就能刷掉一大半不合格的人。</p><p>对于工作技能的磨练，并不是所有人都能做到精益求精，我们大多数人的专业功夫，或多或少都是掺杂了水分的。</p><p>任何一个行业都遵循正态分布的原则，能做到顶尖的人少之又少。大部分人都维持在七八十分的中部水平就足以应付手上的工作。</p><p>这其中有个人主观能动性的原因。</p><p>比如有的人就是懒，不愿意精进自己的工作技能。</p><ul><li>像设计师不愿提高自己的审美能力；</li><li>程序员只满足写好手上的代码而不愿去学习新的编程语言；</li><li>销售不懂得用新的网络工具来提升自己的客户管理能力等等。</li></ul><p>“我不想学，现在的工资挺好，又不累，干嘛费劲去和别人争个头破血流。”</p><p>这样想的人，大有人在。</p><p>除了个人原因，当然还有公司、平台甚至行业的制约因素存在。</p><p>比如在一个发展前景受限的行业，或者公司给到的学习机会和资源只能让你停留在行业60分的水平。</p><p>像过去几年很多被互联网冲击严重的传统行业，因为行业知识结构没有跟上时代的变化，导致“旧知识不能用，新知识学不会”的断层现象出现。</p><p>许多化工、运输、快消、营销甚至IT行业，都面临着类似的问题。越是庞大的企业，转型越是困难。</p><p>一些新技能新职位例如数据银行分析，人工智能开发，媒介程序化购买等，许多公司在战略层面上也并不完全了解，无法快速应用到日常业务中。</p><p>落实到每个员工个体，想要学习新知识但没地方去学，这才带来如今众多知识付费平台兴起的机会。</p><p>以上这些，共同导致在“工作技能提升”这一项上，许多人就参差不齐。接下来这就直接反映在薪酬水平上。</p><p>如今的职场，并不是你花时间越多，加班越多，就理应拿到更高的薪酬（加班费不算）。而是<strong>你的知识和技能更专业先进，更符合企业的战略发展目标，才有可能拿到超过行业平均水准的酬劳。</strong></p><p>这和你的辛劳程度有关，但并不是完全正相关。</p><p>举个例子。</p><p>我有个开广告公司的朋友，跟我说他下面最近新招了个策划，一个月给他2万，但写出来的方案被客户屡屡投诉。</p><p>用客户的原话说：</p><p>“这是小学生写出来的东西。”</p><p>我知道他那个客户要求很高，不好搞。但平心而论，虽然人家要求高，但提出来的观点还是很站得住脚的。</p><p>比如语句用词缺乏洞察，对行业的理解不够深，对竞品的分析太流于表面，对公司的业务线梳理太过混乱……</p><p>那个策划写的方案我也给看过，坦白说确实够不上月薪2万的水准。我朋友想开除他，可那个策划却说自己扑在方案上一个多月时间，不眠不休加班，费劲琢磨，没有功劳也有苦劳吧。</p><p>我朋友下不了决心，来问我意见。我直言不讳跟他说，你要是还让这人做下去，就准备丢客户吧。</p><p>没有功劳也有苦劳，这话只能自我安慰，千万别说出来。</p><p>任何一个行业，一份工作，都有苦劳。区别是苦劳过后产生的价值到底有多少，这并不是用时间来衡量的。</p><p>我见过几句话就把客户说得服服帖帖的人，也见过写了百十张PPT依然被打回来重做的人。前者花的时间不过几分钟，后者可能要花几个星期，可最后结果却是反过来的。</p><p>为什么会这样？</p><p><strong>专业技能水平的差别</strong>。薪酬拿得高的人并不是时间花得多，而是解决的问题价值大。</p><p>同样是百来页PPT，麦肯锡这种咨询公司能卖几百万，你却被客户打回来几百次，大家花的时间都差不多，为什么你的时间这么不值钱？</p><p>这个问题值得深思。</p><p>讲完了第一层的资源转化，接着讲第二层。</p><p>即，由专业技能向社会资源转化的阶段。</p><p><img src="/images/%E4%B8%8D%E5%A5%BD%E6%84%8F%E6%80%9D%E4%BD%A0%E7%9A%84%E8%BE%9B%E5%8A%B3%E5%B9%B6%E4%B8%8D%E7%AD%89%E4%BA%8E%E9%85%AC%E5%8A%B3/5.webp" alt="5"></p><p>这时候，凭的是你长袖善舞的本事。</p><p><strong>如何把自己的专业才能贩卖给社会上更需要它的人或组织，从而获得等价交换的筹码，进而开始编织自己的社会资源关系网？</strong></p><p>这才是该阶段的核心问题。</p><p>此刻你的身价不再只是技能，而是你背后所携带的社会资源的总和。</p><p>举个例子。</p><p>很多人都曾跟我抱怨，说自己老板啥事儿不干，每天在办公室打电话聊天就行，可他交的税都比自己工资高。为什么自己吭哧吭哧忙得要死，每个月就只拿几千块？</p><p>我年轻的时候也这样想过，直到有一次我无意间听见老板打电话，才彻底打消了这个念头。</p><p>那次说来也巧，中午大家都出去吃饭了，只剩我在办公室里忙着搜集项目资料，隔壁不远处我的老板正在打电话。</p><p>当时门开着，我隐约听到老板在电话里讲的事情，是最近公司的一个大客户项目。</p><p>这个项目在前期准备工作中遇到了供应商资源不到位的问题，导致工期被延长，客户来投诉。结果我老板一个电话直接打给供应商公司的头儿，三两句话就让对方答应尽全力配合。</p><p>这要是让我们去找供应商谈，一个多月都谈不下来。</p><p>后来听同事八卦说，那家供应商公司在成立之初就受到过我老板的照顾，一步步生意做到今天。之前他们不知道我老板有管这个项目，后面出事了才晓得严重性，赶紧过来赔不是。</p><p>可以说没有那个关键的电话，这个价值几千万的项目不可能进行得如此顺利。</p><p>现在回过头来看，表面上一个简简单单的电话不过5分钟，可这背后却是我老板几十年的社会资源积累。</p><p>同样一个电话，我去打对方根本不会鸟我，三天三夜把嘴巴说干都没用。原因很简单，我的话没有分量。</p><p>而分量，来自于你身上携带资源的质量，而不是夜以继日的辛劳。</p><p>想清楚了这一点，就要赶紧行动起来，用专业技能去编织自己的社会资源网。如何去做？两个方面供大家参考：</p><ol><li><p>找到你的“火箭船”</p><p> 一定要尽量加入能对公司产生重大影响的工作，并在里面发挥作用。</p><p> 比如重大项目的竞标，核心客户的拓展，关键技术的研发等等。套用Facebook 的COO 桑德伯格的话来说：</p><p> “如果你觉得这是一艘火箭，那就赶紧跳上去，而不要计较坐在什么位置。”</p><p> 工作也是如此，用你的专业技能和敏锐嗅觉，找到那些堪称“火箭”的高价值工作，并在团队中扮演好自己的角色。</p><p> 你的所作所为会被周围所有人看在眼里，记在心里。随着时间的推移，你的个人名声会被建立起来，你的名字会被传颂到各个地方。</p><p> 这都是在为你后面的职场成长铺路。</p></li><li><p>把技能展示给更有影响力的人</p><p> 谁是更有影响力的人？</p><p> 往近了说，你的直属老板，部门老板，公司大老板；往远了说，你的客户，你竞争公司的老板，行业的领军人物，猎头甚至媒体。</p><p> 套用广告行业的一个词来说，这些人都是传播你名声的“关键节点”。<strong>你要去影响那些能够影响别人的人。</strong></p><p> 把你的专业技能，适当展示在这些人面前，让他们对你产生好感印象。无论是行业交流采访，喝咖啡聊天还是面试，都要和这些人保持良好的联系。假以时日，他们有需求的时候会自动来找你。</p><p> 我身边有许多堪称传奇的职场跃迁，都是从一次不经意的喝咖啡开始。</p><p> 当你在公司的地位越高，就越应该走出去看看别的公司在做什么，这个行业在做什么。时刻保持信息互通，用你的专业见解去征服别人，让人记住你。</p><p> 如果你没钱没背景没资源，空有一身时间，以上这些方法或许能够帮助到你。</p><p> 总之，今天讲的这些就是一个基本的职场成长路径。篇幅有限，只能说大框架，无法解释每一个细节，也希望对大家有所启示。</p></li></ol><p>最后再讲一个误区。</p><p>资源转化是一个循序渐进的过程，普通人的路径只能按照<strong>“时间-技能-社会资源”</strong>这一条路走，绝不能跨越。</p><p>你不可能把时间直接转化成社会资源。这就是为什么我强烈反对刚毕业的大学生闷头去创业的原因。</p><p>创业考察的是你对社会资源的整合能力。背景、人脉、资金、技术、产品、运营甚至法务你都要触及。当你的单一能力都没有修炼好的时候，就去盲目做所谓的“整合”，到头来很容易碰一鼻子灰。</p><p>分清楚自己在哪个阶段，才能更有策略性地给职业生涯做出规划。</p><p>有的是时间，那就多学几门技能，专精一两项工作，先保证自己能在公司同事，行业同行里做到前列水平。如果时间花了很多，能力却没提高多少，那就先从自己身上找原因。</p><p>有了技能傍身，再去想怎么把它贩卖给欣赏或者需要它的人。记住，你的本事才是你职场社交的资本。当你和不同的社会资源成功建立了联系，你的身价才会慢慢涨上去。</p><p>从这些角度去思考，再来审视自己的辛劳，你才知道什么是有效辛劳，什么是无效辛劳。</p><p>今天的内容就到这里，感谢大家的耐心阅读。</p><p>共勉 &#x3D;）</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API Security Checklist</title>
      <link href="/2020/02/05/architecture/APISecurityChecklist/"/>
      <url>/2020/02/05/architecture/APISecurityChecklist/</url>
      
        <content type="html"><![CDATA[<h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><ul><li>不要使用Basic Auth，使用标准的认证协议（如JWT，OAuth）。</li><li>不要再造Authentication，token generating，password storing这些轮子，使用标准的。</li><li>在登录中使用Max Retry和自动封禁功能。</li><li>加密所有的敏感数据。</li></ul><h2 id="JWT（JSON-Web-Token）"><a href="#JWT（JSON-Web-Token）" class="headerlink" title="JWT（JSON Web Token）"></a>JWT（JSON Web Token）</h2><ul><li>使用随机复杂的密钥（JWT Secret）以增加暴力破解的难度。</li><li>不要在请求体中直接提取数据，要对数据进行加密（HS256或RS256）。</li><li>使token的过期时间尽量的短（TTL，RTTL）。</li><li>不要在JWT的请求体中存放敏感数据，它是可破解的。</li></ul><h2 id="OAuth-授权或认证协议"><a href="#OAuth-授权或认证协议" class="headerlink" title="OAuth 授权或认证协议"></a>OAuth 授权或认证协议</h2><ul><li>始终在后台验证redirect_uri，只允许白名单的URL。</li><li>每次交换令牌的时候不要加token（不允许response_type&#x3D;token）。</li><li>使用state参数并填充随机的哈希数来防止跨站请求伪造（CSRF）。</li><li>对不同的应用分别定义默认的作用域和各自有效的作用域参数。</li></ul><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><ul><li>限制流量来防止DDos攻击和暴力攻击。</li><li>在服务端使用HTTPS协议来防止MITM攻击。</li><li>使用HSTS协议防止SSLStrip攻击。</li></ul><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><ul><li>使用与操作相符的HTTP操作函数，GET（读取），POST（创建），PUT（替换&#x2F;更新）以及DELETE（删除记录），如果请求的方法不适用与请求的资源则返回405 Method Not Allowed。</li><li>在请求头中的content-type字段使用内容验证来只允许支持的格式（如application&#x2F;xml，application&#x2F;json等等）并在不满足条件的时候返回406 Not Acceptable。</li><li>验证用户输入来避免一些普通的易受攻击缺陷（如XSS，SQL注入，远程代码执行等等）。</li><li>不要再URL中使用任何敏感的数据（credentials，Passwords，security tokens，or API keys），而是使用标准的认证请求头。</li><li>使用一个API Gateway服务来启用缓存、访问速率限制（如Quota，Spike Arrest，Concurrent Rate Limit）以及动态地部署APIs resources。</li></ul><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><ul><li>检查是否所有的终端都在身份认证之后，以避免破环了认证体系。</li><li>避免使用特有的资源id。使用&#x2F;me&#x2F;orders替代&#x2F;user&#x2F;654321&#x2F;orders。</li><li>使用UUID代替自增长的id。</li><li>如果需要解析XML文件，确保实体解析（entity parsing）使关闭的以避免XXE攻击。</li><li>如果需要解析XML文件，确保实体拓展（entity expansion）使关闭的以避免通过指数实体扩展攻击实现的Billion Laughs&#x2F;XML Bomb。<br>在文件上传中使用CDN。</li><li>如果需要处理大量的数据，使用Workers和Queues来快速响应，从而避免HTTP阻塞。</li><li>不要忘了把DEBUG模式关掉。</li></ul><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li>发送X-Content-Type-Options: nosniff头。</li><li>发送X-Frame-Options: deny头。</li><li>发送Content-Security-Policy: default-src ‘none’头。</li><li>删除指纹头X-Powered-By，Server，X-AspNet-Version等等。</li><li>在响应中强制使用content-type，如果你的类型是application&#x2F;json，那么你的content-type就是application&#x2F;json。</li><li>不要返回敏感的数据，如credentials，Passwords，security tokens。</li><li>在操作结束时返回恰当的状态码。（如200 OK，400 Bad Request，401 Unauthorized，405 Method Not Allowed等等）</li></ul><h2 id="持续集成和持续部署"><a href="#持续集成和持续部署" class="headerlink" title="持续集成和持续部署"></a>持续集成和持续部署</h2><ul><li>使用单元测试和集成测试来审计你的设计和实现。</li><li>引入代码审查流程，不要自行批准更改。</li><li>在推送到生产环境之前确保服务的所有组件都用杀毒软件静态地扫描过，包括第三方库和其他依赖。</li><li>为部署设计一个回滚方案。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Checklist </tag>
            
            <tag> API Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Review Checklist</title>
      <link href="/2020/02/05/architecture/CodeReviewChecklist/"/>
      <url>/2020/02/05/architecture/CodeReviewChecklist/</url>
      
        <content type="html"><![CDATA[<h2 id="代码作者应该关注的列表"><a href="#代码作者应该关注的列表" class="headerlink" title="代码作者应该关注的列表"></a>代码作者应该关注的列表</h2><p>作为代码的作者，应该保证：</p><ul><li>代码编译成功并且通过静态检查（没有警告）</li><li>代码通过所有的测试（单元测试、集成测试和系统测试）</li><li>你已经仔细检查了拼写错误，并做了处理（注释、todo等）</li><li>概述代码修改的原因以及修改了哪些地方</li></ul><p>除此之外，作为代码作者，也应该在提交审查之前，按照代码审查者的列表对自己的代码进行审查。</p><h2 id="代码审查者应该关注的列表"><a href="#代码审查者应该关注的列表" class="headerlink" title="代码审查者应该关注的列表"></a>代码审查者应该关注的列表</h2><p>作为代码审查者，你的任务是寻找最重要的问题。评论代码的结构性或逻辑性问题会更有价值，即使有时候会显得挑剔。</p><p>你应该知道什么是好的代码反馈。另外需要注意，最好的代码审查反馈不是点评，而是建议。所以不要说“变量名称应该是removeObject”，最好说“调用变量removeObject怎么样？”。</p><p>下面这份列表足够帮助你提出好的代码审查反馈了。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>此代码更改会执行它应该做的事情吗？</li><li>这种解决方法是最简单的吗？</li><li>这个更改有引入一些不需要的编译时或运行时的依赖吗？</li><li>是否使用了不应该使用的框架、API、库、服务？</li><li>是否存在可以提升解决方法的未使用的框架、API、库、服务？</li><li>代码是否处于正确的抽象级别？</li><li>代码的模块化是否做的足够好？</li><li>你是否有其他的解决方案，该方案在代码可维护性、可读性、性能、安全方面表现更好？</li><li>是否已经存在类似功能的函数？如果有，为什么不复用？</li><li>是否有最佳实践、设计模式或特定语言模式可以优化代码？</li><li>代码是否遵循面向对象的分析和设计原则，例如单一职责原则，开闭原则，里氏替换原则，接口隔离，依赖注入？</li></ul><h3 id="逻辑错误或Bug"><a href="#逻辑错误或Bug" class="headerlink" title="逻辑错误或Bug"></a>逻辑错误或Bug</h3><ul><li>你能想到代码不按预期运行的任何用例吗？</li><li>你能想到任何可能破坏代码的输入或外部事件吗？</li></ul><h3 id="错误处理和日志"><a href="#错误处理和日志" class="headerlink" title="错误处理和日志"></a>错误处理和日志</h3><ul><li>错误都被正确处理了吗？</li><li>是否有需要增加或删除的日志&#x2F;debug信息？</li><li>错误消息对用户是否友好？</li><li>是否有足够的日志，它们的编写方式是否是易于调试的？</li></ul><h3 id="可用性和可访问性"><a href="#可用性和可访问性" class="headerlink" title="可用性和可访问性"></a>可用性和可访问性</h3><ul><li>从可用性角度触发，所提出的解决方案是否设计合理？</li><li>API文档是否足够好？</li><li>提出的解决方案是否具备可访问性？</li><li>API&#x2F;UI是否直观易用？</li><li>测试与可测试性</li><li>代码是否达到可测试标准？</li><li>是否有足够的自动化测试（单元测试&#x2F;集成测试&#x2F;系统测试）？</li><li>现有测试是否合理覆盖代码变更？</li><li>是否有额外的测试用例、输入或边界用例以供测试？</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><ul><li>如果这个修改需要更新代码以外的文件，例如更新文档，配置，README文件。是否完成了这些更新？</li><li>这个修改是否会对系统其他地方造成影响？是否能向后兼容？</li></ul><h3 id="安全和隐私数据"><a href="#安全和隐私数据" class="headerlink" title="安全和隐私数据"></a>安全和隐私数据</h3><ul><li>这段代码是否打开软件的安全漏洞？</li><li>权限和身份验证是否被正确处理？</li><li>是否安全处理了敏感数据，例如用户数据、信用卡信息等？是否正确使用加密方法？</li><li>代码更改是否显露了一些私密信息（如迷药、用户名等）？</li><li>代码处理用户输入时，是否解决了跨站点脚本，SQL注入等安全漏洞，是否进行了输入清洗和验证？</li><li>从外部API或库中获得的数据是否进行了相应的检查？</li></ul><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul><li>这段代码修改是否会对系统性能产生负面影响？</li><li>是否可以进一步提升代码性能？</li></ul><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul><li>代码是否容易理解？</li><li>哪一部分使你困惑，为什么？</li><li>可以通过减小方法来提高代码可读性吗？</li><li>可以通过使用不同的函数&#x2F;方法或变量名称来提升代码可读性吗？</li><li>代码是否存放在正确的文件&#x2F;目录&#x2F;包？</li><li>你是否认为方法应该重构以拥有更直观的控制流程？</li><li>数据流是否可理解？</li><li>是否有多余的注释？</li><li>某些注释是否可以更好的传达信息？</li><li>是否可以补充更多的注释使你的代码更容易理解？</li><li>是否可以移出一些注释，通过提升代码可读性来理解代码？</li><li>是否存在注释掉的代码？</li></ul><h3 id="专家意见"><a href="#专家意见" class="headerlink" title="专家意见"></a>专家意见</h3><ul><li>你是否认为特定专家（如安全专家或可用性专家）应该先检查代码，然后再提交代码？</li><li>这个代码修改会影响其他团队吗？他们也应该发表意见吗？</li></ul><h3 id="代码风格和约定"><a href="#代码风格和约定" class="headerlink" title="代码风格和约定"></a>代码风格和约定</h3><p>你的团队或公司必须拥有清晰的编码风格指南，这一点很重要。因为这是在代码库中实施唯一性的唯一方法。并且一致性会使代码审查更快，使人们可以轻松地更改项目，并保持你代码的可读性和可维护性。</p><h3 id="尽可能自动化"><a href="#尽可能自动化" class="headerlink" title="尽可能自动化"></a>尽可能自动化</h3><p>确定了代码风格以后，请花一些时间正确安装和配置工具，以便一键格式化代码。</p><p>另外还有很多事情可以做。例如使用静态检查来代替部分人工审核。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Checklist </tag>
            
            <tag> Code Review </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年“互联网女皇”报告重磅出炉：你想要的干货全在这里！</title>
      <link href="/2020/02/05/post/2019%E5%B9%B4%E2%80%9C%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E2%80%9D%E6%8A%A5%E5%91%8A%E9%87%8D%E7%A3%85%E5%87%BA%E7%82%89%EF%BC%9A%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E5%B9%B2%E8%B4%A7%E5%85%A8%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81/"/>
      <url>/2020/02/05/post/2019%E5%B9%B4%E2%80%9C%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E2%80%9D%E6%8A%A5%E5%91%8A%E9%87%8D%E7%A3%85%E5%87%BA%E7%82%89%EF%BC%9A%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E5%B9%B2%E8%B4%A7%E5%85%A8%E5%9C%A8%E8%BF%99%E9%87%8C%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/fsurBgd2EMUf_RRcCa4F2g">2019年“互联网女皇”报告重磅出炉：你想要的干货全在这里！</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>导读：北京时间6月12日凌晨，“互联网女皇”玛丽·米克尔发布了《2019年互联网趋势报告》。报告中关于中国互联网发展的内容由高瓴资本撰写，这也是“互联网女皇”自2014年开始，连续第六年与高瓴资本合作。今年中国部分的报告里有哪些值得关注的重要趋势？我们为您总结出以下精华亮点。</p></blockquote><h2 id="宏观经济长期稳健"><a href="#宏观经济长期稳健" class="headerlink" title="宏观经济长期稳健"></a>宏观经济长期稳健</h2><p>中国宏观经济走势将保持长期稳健，尽管短期内企业和消费者信心有所波动，但伴随着服务业的持续发展和城镇化进程的不断推进，长期宏观经济增速仍然可观。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/1.webp" alt="1"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/2.webp" alt="2"></p><h2 id="中国互联网用户-x2F-时长持续增长-短视频成为重要驱动力"><a href="#中国互联网用户-x2F-时长持续增长-短视频成为重要驱动力" class="headerlink" title="中国互联网用户&#x2F;时长持续增长 短视频成为重要驱动力"></a>中国互联网用户&#x2F;时长持续增长 短视频成为重要驱动力</h2><p>近年来，中国互联网行业始终保持着较快的增速。2018年，中国移动互联网用户已达到8.2亿，移动互联网数据流量同比增长189%，其中，短视频对中国互联网流量和使用时长的增长功不可没。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/3.webp" alt="3"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/4.webp" alt="4"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/5.webp" alt="5"></p><h2 id="中国原发创新——游戏改变生活"><a href="#中国原发创新——游戏改变生活" class="headerlink" title="中国原发创新——游戏改变生活"></a>中国原发创新——游戏改变生活</h2><p>线上游戏正日益改变着中国的支付、电商、零售、教育以及更多行业，通过游戏化和数字化为传统行业赋能的新模式正在重构人们的消费体验。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/6.webp" alt="6"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/7.webp" alt="7"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/8.webp" alt="8"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/9.webp" alt="9"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/10.webp" alt="10"></p><h2 id="互联网驱动的产品和商业模式创新领先世界"><a href="#互联网驱动的产品和商业模式创新领先世界" class="headerlink" title="互联网驱动的产品和商业模式创新领先世界"></a>互联网驱动的产品和商业模式创新领先世界</h2><p>以微信为代表的及时通讯软件,通过小程序等形式大大促进了产品交易与服务的创新发展;众多海外互联网公司纷纷效仿微信策略。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/11.webp" alt="11"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/12.webp" alt="12"></p><p>电子商务的持续发展使得部分单一功能APP进化为集多种功能于一身的超级APP，用户活跃度和交易频次得到进一步提升。例如，始于团购的美团，聚合了“吃喝玩乐”等多种本地交易服务；以电子钱包起家的支付宝现已拥有超过20万小程序、10亿全球用户，深入渗透并改变着人们的日常生活。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/13.webp" alt="13"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/14.webp" alt="14"></p><p>从线上到线下，再到全渠道的零售创新重构了消费者的购物体验，以数字化、信息化、个性化为主要特征的“新零售”赋予传统零售行业以崭新的生机和活力。 </p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/15.webp" alt="15"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/16.webp" alt="16"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/17.webp" alt="17"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/18.webp" alt="18"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/19.webp" alt="19"></p><p>教育和政府服务向线上延伸，逐步实现线上线下一体化，极大地提高了服务的便利性和多样性。</p><p><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/20.webp" alt="20"><br><img src="/images/2019%E5%B9%B4%E4%BA%92%E8%81%94%E7%BD%91%E5%A5%B3%E7%9A%87%E6%8A%A5%E5%91%8A/21.webp" alt="21"></p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>90后走入焦虑时代：没房没车没京户，还要梦想着财务自由</title>
      <link href="/2020/02/05/post/90%E5%90%8E%E8%B5%B0%E5%85%A5%E7%84%A6%E8%99%91%E6%97%B6%E4%BB%A3%EF%BC%9A%E6%B2%A1%E6%88%BF%E6%B2%A1%E8%BD%A6%E6%B2%A1%E4%BA%AC%E6%88%B7%EF%BC%8C%E8%BF%98%E8%A6%81%E6%A2%A6%E6%83%B3%E7%9D%80%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1/"/>
      <url>/2020/02/05/post/90%E5%90%8E%E8%B5%B0%E5%85%A5%E7%84%A6%E8%99%91%E6%97%B6%E4%BB%A3%EF%BC%9A%E6%B2%A1%E6%88%BF%E6%B2%A1%E8%BD%A6%E6%B2%A1%E4%BA%AC%E6%88%B7%EF%BC%8C%E8%BF%98%E8%A6%81%E6%A2%A6%E6%83%B3%E7%9D%80%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/MAxqJxqNpTbqlalaJJX1Nw">90后走入焦虑时代：没房没车没京户，还要梦想着财务自由</a> <mark class="hl-label green">转载</mark> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是新零售</title>
      <link href="/2020/02/05/post/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/"/>
      <url>/2020/02/05/post/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/EHpkJNsbL1zckK_ilO5KZA">什么是新零售（上）</a>，<a href="https://blog.csdn.net/onehao/article/details/94517763">什么是新零售（下）</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="什么是零售"><a href="#什么是零售" class="headerlink" title="什么是零售"></a>什么是零售</h2><p><strong>人</strong>，为什么商家要给购物中心支付租金？租金的本质是什么？为什么租金和人流量正相关？</p><p>购物中心之所以收商家的租金，是因为购物中心为商家带来了流量，人流量是真正的核心价值。租金的本质，是购物中心把人流量折算成一个价格，卖给商家。</p><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%9B%B6%E5%94%AE.webp" alt="零售"></p><p>怎么吸引流量，然后将流量变现的能力。</p><p>流量经济，就是要研究销售漏斗公式：</p><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%94%80%E5%94%AE%E6%BC%8F%E6%96%97%E5%85%AC%E5%BC%8F.webp" alt="销售漏斗公式"><br><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%94%80%E5%94%AE%E6%BC%8F%E6%96%97%E5%85%AC%E5%BC%8F%E8%AF%B4%E6%98%8E.webp" alt="销售漏斗公式"></p><p><strong>货</strong>，可以归纳为D-M-S-B-b-C</p><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E8%B4%A7.webp" alt="货"></p><ul><li>D&#x3D;Design（设计），指产品款式的设计过程；</li><li>M&#x3D;Manufacture（制造商），也有人称其为工厂；</li><li>S&#x3D;Supply Chain（供应链），通常指的是总代理、省代理、分销商、经销商等机构；</li><li>B&#x3D;Business（大B，商场），指的是大卖场、超市、连锁店等；</li><li>b&#x3D;business（小b，商店），指的是夫妻店、地摊、微商等个人销售者；</li><li>C&#x3D;Consumer（消费者），也就是最终端的客户。</li></ul><blockquote><p>以皮鞋为例，设计师（D）研究市场、研究人体、研究时尚，设计出一双皮鞋，然后把设计卖给制造商；制造商（M）开模具，购买原材料、设备，雇人把鞋子做出来；皮鞋通过总代理、省级代理、市级代理等供应链企业（S），通过物流完成在全国的铺货，建立存库；皮鞋陈列在大商场（B），或是微商的朋友圈（b），抵达消费者；最终，消费者（C）下单购买。</p><p>整个商品供应链，每个环节都有其独特的价值，并为此获得自己的利润。但一般来说，我们把“D— M”称为创造价值，做鞋子；把“S—B—b”称为传递价值，卖鞋子。</p></blockquote><p><strong>场</strong></p><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E5%9C%BA.webp" alt="场"></p><p>零售的本质，是链接“人”与“货”的“场”；而“场”的本质，是信息流，资金流，物流的万千组合。</p><h2 id="新零售"><a href="#新零售" class="headerlink" title="新零售"></a>新零售</h2><p>优化商品在人、货、场之间的有效传递方式，就是新零售。</p><p>第一个逻辑是“坪效革命”。坪效是每一平方米场地产生的营业额。简单地说，就是如何高效地为顾客提供最有价值的货品，如何提高转化率、客单价、复购率。</p><p>第二个逻辑是“数据赋能”。通过比较线上、线下孰优孰劣，研究如何利用线上、线下各自的优势来提升零售效率。</p><p>第三个逻辑是“短路经济”。定倍率过高，就是因为中间环节太多，在传统零售模式下，要经过总代理、一级代理、二级代理等，才能进入商场。在这种情况下，商场其实扮演的是“二房东”，环节过多、效率过低。短路经济，就是通过短路中间不必要的环节，从而提升效率。</p><p>新零售就是更高效率的零售。用数据赋能，提升“场”的效率；用坪效革命，提升“人”的效率；用短路经济，提升“货”的效率。</p><h2 id="数据赋能"><a href="#数据赋能" class="headerlink" title="数据赋能"></a>数据赋能</h2><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E6%95%B0%E6%8D%AE%E8%B5%8B%E8%83%BD.webp" alt="数据赋能"></p><p><strong>信息流：高效性vs.体验性</strong></p><p>互联网擅长信息流的高效维度，更快，更全，更便宜，线下擅长信息流的“体验维度”，更复杂、更多感、更立体。新零售的方向是结合互联网的高效性与线下信息流的体验性。</p><p><strong>资金流：便携性vs.可信性</strong></p><p>互联网的资金流，相比于线下，缺乏可信性，利用大数据赋能，将京东白条，蚂蚁借呗给历史信用良好的用户使用，让用户买东西之前不用付款，让共享单车让信用好的用户免押金骑走。数据赋能让零售不在在便携性和可行性之间做选择题。</p><p><strong>物流：跨度性vs.即得性</strong></p><p>衡量跨度性最重要的指标是快，衡量即得性最重要的指标是近。</p><p>从人找货，到货找人，利用大数据分析，可能需要哪些货物，全世界的货物向你奔来，这就是电商物流跨度性的优势。</p><p>但是线下就没有优势了吗？恰恰相反，线下物流，依然是传统零售在“三流”中最大的优势 – 即得性。小区遛弯，突然想喝酸奶，雪糕，忍受不了网上第二天到。</p><p>让线下商品离你更近，或者让互联网的物流更快，都是新零售的机会。</p><h2 id="坪效革命"><a href="#坪效革命" class="headerlink" title="坪效革命"></a>坪效革命</h2><p>这套逻辑，设计上就是“销售漏斗公式”。</p><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%94%80%E5%94%AE%E6%BC%8F%E6%96%97%E5%85%AC%E5%BC%8F.webp" alt="销售漏斗公式"><br><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%94%80%E5%94%AE%E6%BC%8F%E6%96%97%E5%85%AC%E5%BC%8F%E8%AF%B4%E6%98%8E.webp" alt="销售漏斗公式"></p><p>不过，销售公式可以用来衡量销售额，却无法衡量销售的效率，如何来衡量销售的效率呢？根据成本结构的不同通常分为“人效”或者“坪效”。</p><p>线上互联网成本结构和员工人数基本相关，所以重视人效，即每个员工创造的年收入。</p><p><code>人效 = （流量 * 转化率 * 客单价 * 复购率） /  人数</code></p><p>线下零售的成本结构和店铺面积基本正相关，一般用每平方米的年收入额来衡量 – 坪效。</p><p><code>坪效 = （流量 * 转化率 * 客单价 * 复购率） /  店铺面积</code></p><p>传统的方法，尽量接近坪效的极限，这需要用户思维和产品思维，但是要突破刘润老师提到了要突破坪效极限，唯有依靠交易结构思维，用时代赋予的高效率工具，才能做到。</p><ul><li><p>流量 – 一切与消费者的触点。要进入新零售企业要做的第一件事，就是用“流量思维”取代“旺铺思维”。旺铺思维是坐在那里，等着消费者来；流量思维是用户在哪里，就跑到哪里去。</p></li><li><p>转化率 – 提高转化率，找到社群很重要。一群有共同兴趣、认知、价值观的用户更容易抱团，形成群峰效应，在一起互动、交流、协作。</p></li><li><p>客单价 – 更透析数据，更洞察用户。提高客单的传统方法，是“连带率”。当遇到流量天花板，需要寻找新的流量，提高转化率，增加客单价。</p></li><li><p>复购率 – 体现忠诚度。在小米的案例的时候提到了：</p><ol><li>爆品战略 + 大数据选品。爆品战略的好处是可以在单品上倾注更多的心血，并且可以带来巨大的销量进而带来供应链成本的降低。</li><li>提高连带率 + 增加体验感，连带率就是卖了一样东西，顺便多买了其他几样。</li><li>强化品牌认知 + 打通全渠道。米家有品，小米商城，小米之家。</li></ol><p>  另外，在盒马鲜生案例中提到了，做好“顶层设计”。定义了盒马鲜生的本质，其实是获取流量的方式，用户最终的留存是在网上，复购率也是在网上。</p></li></ul><h2 id="短路经济：环节越短，效率越高"><a href="#短路经济：环节越短，效率越高" class="headerlink" title="短路经济：环节越短，效率越高"></a>短路经济：环节越短，效率越高</h2><p>商品供应链，人与货不必在商场相见，书中提到了一个定倍率，类似的意思是服装业接过来的一个概念，一个商品的价格，直接乘以一个倍数，其中包括设计一个产品的成本，未来卖出去，可能要不同的号码，渠道，所以你买的服装可能是同时付了几个号码的钱，服装可能相比手机更复杂，分型号，款式，号码，不同号码不通用，进而带来库存，所以有存在了奥特莱斯这种工厂店，用来售出冗余的号码。</p><p><strong>定倍率越低，效率越高。</strong></p><p>还要考虑消费频率，化妆品属于低频消费，长时间卖出不去多少，但零售商要付出同样的租金、员工工资等，所以化妆品的定倍率一般很高。</p><p>短路经济，德鲁克说过，当今企业之间的竞争，不是产品时间的竞争，而是商业模式之间的竞争。</p><p>什么是商业模式？商业模式，就是利益相关者的交易结构。</p><p>新零售不仅要有用户思维，产品思维，还要有交易结构思维，优化自己的商业模式。</p><p>短路经济主要体现在两个方面：</p><p>缩短环节，如百货商场和链条反向，如团购。</p><h3 id="a-缩短环节"><a href="#a-缩短环节" class="headerlink" title="a. 缩短环节"></a>a. 缩短环节</h3><ul><li>Costco， M2B模式，尽可能减少中间环节，做到更高效的零售。</li></ul><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/M2B%E6%A8%A1%E5%BC%8F.png" alt="M2B模式"></p><ul><li>名创优品，店面都比较小，选址很好，一种介于直营和加盟之间的开店模式，叫做“直管”。直营，就是自己投资，自己管理；加盟，就是别人投资，别人管理；而直管，就是别人投资，自己管理。</li></ul><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/M2b.png" alt="M2b"></p><ul><li>闲鱼，瓜子二手车：C2C。</li></ul><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/C2C.png" alt="C2C"></p><ul><li>天猫小店：S2b。</li></ul><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/S2b.png" alt="S2b"></p><h3 id="b-链条反向"><a href="#b-链条反向" class="headerlink" title="b. 链条反向"></a>b. 链条反向</h3><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/%E9%93%BE%E6%9D%A1%E5%8F%8D%E5%90%91.png" alt="链条反向"></p><p>如果能能拿到真实需求，按需生产，较少库存。</p><ul><li><p>海尔的无灯工厂、上汽大通C2B智能选配：C2B</p></li><li><p>必要商城，C2M， 反向定制本质，是反向，不是定制。一端连着消费者，一端连着制造商，不但反向，还短路掉b，B，S等一切不必要的环节，砍掉所有不必要的成本，用高质低价吸引消费者，用零库存吸引顶级制造商。</p></li></ul><p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B0%E9%9B%B6%E5%94%AE/C2M.png" alt="C2M"></p><p>C2M的优势，通过反向定制，取消了中间环节，做到零库存。如上文提到，过去一件衣服有很大成本是为库存买单的。</p><p>总结一下，什么是新零售？</p><ol><li>零售的本质，是连接“人”和“货”的“场”；</li><li>“场”，是信息流、资金流和物流的万千组合；</li><li>“人”，会通过“流量 * 转化率 * 客单价 * 复购率”的层层过滤，接触“货”；</li><li>“货”，要经历D-M-S-B-b-C的千山万水，抵达“人”。</li></ol><p>如何提高新零售的效率？</p><ol><li>用“数据赋能”，优化信息流、资金流、物流的组合；</li><li>用“坪效革命”，提升流量、转化率、客单价、复购率的效率；</li><li>用“短路经济”，缩短D-M-S-B-b-C的路径。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新零售 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建一个5G基站，到底要花多少钱？</title>
      <link href="/2020/02/05/post/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%EF%BC%8C%E5%88%B0%E5%BA%95%E8%A6%81%E8%8A%B1%E5%A4%9A%E5%B0%91%E9%92%B1%EF%BC%9F/"/>
      <url>/2020/02/05/post/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%EF%BC%8C%E5%88%B0%E5%BA%95%E8%A6%81%E8%8A%B1%E5%A4%9A%E5%B0%91%E9%92%B1%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/26BHCsWXCLPDUhRqXOpYBw">建一个5G基站，到底要花多少钱？</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>自从国内5G正式宣布商用之后，全国各地的5G网络建设速度明显加快了。</p><p>5G基站的身影，出现在越来越多的城市、角落。5G信号的覆盖范围，也在不断扩大。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/1.webp" alt="1"></p><p>这意味着，5G的投资已经全面启动，并且在不断增加。</p><p>一直以来，“5G究竟要花多少钱”，是人们普遍关心的话题。有人说，5G的投资将会是4G的2~3倍。也有人说，5G的总投资将到达惊人的1.5万亿元。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/2.webp" alt="2"></p><p>根据最新的《2020中国5G经济报告》，国内2020-2025年的5G网络总投资额是0.9~1.5万亿元。</p><p>这笔投资的最大一部分，将花在5G基站的建设上。</p><p>那么，作为5G投资的重要对象，5G基站，它的成本究竟是由哪些部分组成的呢？这些成本，有没有下降的可能性呢？</p><p>今天，小枣君就来做一次5G基站的建设成本分析。</p><p>我之前曾经介绍过，基站一般可以分为宏基站和微基站。室外那种大铁塔的，是宏基站。目前我们国内正在规模建设的5G基站，也是宏基站为主。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/3.webp" alt="3"></p><p>宏基站</p><p>我们就先从<strong>宏基站</strong>开始说。</p><p>一个5G宏基站，目前通常包括以下组成部分：</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/5g-base-station.webp" alt="5g-base-station"></p><p>下图是4G宏基站的组成部分，放在一起对比：</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/4g-base-station.webp" alt="4g-base-station"></p><p>可以看出，相比4G宏基站，5G时代，RRU（射频拉远单元）和天线馈线“合并”，变成了AAU（有源天线单元），通过光纤和BBU（基带处理单元）相连。（注意：BBU按真正5G来说，是变成DU和CU的，如下图所示。但是目前国内建设还没有到那个阶段，还是BBU+AAU为主。）</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/4g-vs-5g.webp" alt="4g-vs-5g"></p><p>4G基站和5G基站的区别</p><p>5G宏基站的成本，一般来说，是由<strong>主设备、动力配套设备设施、土建施工</strong>共同组成。</p><p>像BBU、AAU、传输设备这些，就是主设备。像电源、电池、空调、监控这些，就是动力配套。而机房这些，当然就是土建施工了。</p><p><strong>先看主设备。</strong></p><p>目前5G还处于刚起步的阶段，各个设备商的5G主设备价格还存在变动。而且，单买一个设备的价格，和运营商集团采购（集采）的价格，存在巨大的差距。</p><p>举个例子来说，目前，某设备商的标配（1个BBU+3个AAU），只算硬件的价格，报给国内运营商大约是20万元人民币（以下如未特殊说明，单位都是人民币）。而在国外，可以报到30-40万人民币的价格。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/AAU-price.webp" alt="AAU-price"></p><p>网友透露的AAU价格，差不多。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/5g-AAU.webp" alt="5g-AAU"></p><p>5G AAU</p><p>如果你作为个人去找设备商，<strong>1BBU+1AAU</strong>，对方敢报80万。非主流厂商也敢报30万。（别问我怎么知道的，因为我刚去问过。）</p><p>所以说，主设备的报价差距是非常悬殊的。我们暂且还是以国内运营商购买的价格来算，大约<strong>20~25万</strong>吧。</p><p>BBU一般包括基带板、主控板、电源模块等。基带板价格最贵，占成本的大头（1~2万）。主控板和电源啥的，不值钱，几千块。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/BBU.webp" alt="BBU"></p><p>同时支持4G和5G的BBU</p><p>顺便说说4G主设备的价格，一般BBU1<del>2万，RRU1万左右，天线1</del>5千不等。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/antenna-price.webp" alt="antenna-price"></p><p>国内天线价格，仅供参考</p><p><strong>再来看看动力配套的费用。</strong></p><p>动力配套设备为基站提供电力和降温保障，是一个基站正常运行的前提。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/base-station-room.webp" alt="base-station-room"></p><p>基站站房内景</p><p>根据不同的基站配置，所需的动力配套设备数量和规格也有很大不同。下表是动力配套相关设备设施的一个范例：</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/4.webp" alt="4"></p><p>一个室外机柜，大约5000元&#x2F;个。电源柜一般也是5000~10000元。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/5.webp" alt="5"></p><p>基站室外机柜</p><p>蓄电池是基站市电意外中断后，提供应急电力的。普通铅酸电池价格是1<del>2元&#x2F;Ah。磷酸铁锂电池是4元以上&#x2F;Ah。电池分为机柜式安装和铁架式安装，规格是48V100Ah</del>48V1000Ah等。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/6.webp" alt="6"><br><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/7.webp" alt="7"></p><p>基站蓄电池，是小偷的主要目标</p><p>基站站房还配有空调，价格几千到一万不等。</p><p>此外还有一些防雷设施设备和防盗监控的设备，价格都不是很贵，就不单列了。</p><p>动力配套的硬件成本，算下来大约是<strong>3~5万元</strong>。</p><p><strong>接下来是站房的土建施工费用。</strong></p><p>这个费用就有点复杂了。有的时候是自建物业，有的时候是租用业主物业，根据所处的地域不同，价格存在很大的差别。</p><p>你说北京闹市区高档写字楼租一个机房，价格和四五线城市当然是不能比的。一线城市的场租有时候都要5-6万。</p><p>铁塔方面，前几天小枣君刚好介绍过，分为单管塔、角钢塔、景观塔、抱杆等好多种。不同的铁塔类型，价格差异也很大。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/8.webp" alt="8"></p><p>通信塔桅的分类</p><p>例如，一个普通的三管塔，重量在8.5吨左右，造价约9万元。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/9.webp" alt="9"></p><p>三管塔</p><p>根据手头上的资料，我大概估算了一下各类型铁塔的价格，如下表所示：</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/10.webp" alt="10"></p><p>铁塔建造成本参考<br>注：铁塔价格随钢材价格有较大波动，以上成本仅供参考。</p><p>土建这块涉及的杂七杂八的费用多种多样，有时候还包括地勘费、建设用地及综合赔补费、外电引入施工费用、选址费等。我今天并不是真正要去做工程概预算，就不一个一个抠了。通过上面的表格，大家心里大概有个数。</p><p>一般来说，机房基建相关的工作，都是中国铁塔公司负责。铁塔承担成本之后，再向运营商收取租金。收租的方式，一般根据设备的体积和占用的空间来计算。例如铁塔上挂AAU，就会根据AAU的数量，占用的天面资源，来计算租金。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/11.webp" alt="11"></p><p>以上所说的费用，就是建设一个基站需要支出的硬件相关的成本和费用。</p><p><strong>除了硬件费用之外，再加上（主设备）软件费用，安装耗材等等，七七八八加在一起，不算租金和人工的话，如果新建一个5G宏基站，大约是30万。如果把租金和人工算上，平均下来估计是40~50万。</strong></p><p>需要注意的是，目前运营商建设5G宏基站，只有很少部分是全新建设，大部分都是在现有2&#x2F;3&#x2F;4G站址下，新增5G主设备。可能涉及到的费用，就是主设备成本、机房改造、电源扩容，还有就是新增5G设备所需要交的租金等。这个费用远远低于新建一个基站的费用。</p><p>前面说的是宏基站。微基站的话，和宏基站有较大不同。微基站本身的价格肯定没有宏基站高，但是在城市人口密集场所，租金、入场费往往会比较贵，而且室内施工（布线、安装）的成本也比较贵。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/12.webp" alt="12"></p><p>5G微基站</p><p>目前国内5G建设还是宏基站为主，相对比较容易。后期进入深度覆盖，开始拼命建微基站，运营商的压力就会越来越大了。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/13.webp" alt="13"></p><p>宏站主要负责广域覆盖，微站和室分负责深度覆盖和容量吸收。</p><p><strong>5G除了建设成本（CAPEX）之外，更可怕的是后期的维护和使用成本（OPEX）。</strong></p><p>以前我曾经和大家说过，5G基站的功耗远远大于4G基站，目前大约是3<del>3.5KW，约是4G基站的2</del>3倍。电费将是5G时代运营商最不可忽视的现实威胁。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/14.webp" alt="14"></p><p>当然，国家应该会在电费方面给予一定的补贴。而且，随着技术的不断改进，5G基站的功耗也会显著下降，这是后话。</p><p><img src="/images/%E5%BB%BA%E4%B8%80%E4%B8%AA5G%E5%9F%BA%E7%AB%99%E8%B4%B9%E7%94%A8/15.webp" alt="15"></p><p>如果5G的行业应用迟迟不能爆发，如果运营商不能通过5G建设获得投资回报，那么，势必影响后续5G的投资热情，也会影响5G的最终成败。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>核心员工要离职，怎么办？</title>
      <link href="/2020/02/05/post/%E6%A0%B8%E5%BF%83%E5%91%98%E5%B7%A5%E8%A6%81%E7%A6%BB%E8%81%8C%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
      <url>/2020/02/05/post/%E6%A0%B8%E5%BF%83%E5%91%98%E5%B7%A5%E8%A6%81%E7%A6%BB%E8%81%8C%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/AZST2yKglnRXDydoxQXgWw">核心员工要离职，怎么办？</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>最近身边有几个小伙伴要离开，且已经吃了散伙饭。有要离职的，有要内部转岗的，也有要回老家的。</p><p>每年绩效期和晋升期结束后，都会有这样一波情况发生。今年好像有点多，所以趁着这个机会，利用四象限图来协助分析下。</p><h2 id="核心员工要离职，怎么办？"><a href="#核心员工要离职，怎么办？" class="headerlink" title="核心员工要离职，怎么办？"></a>核心员工要离职，怎么办？</h2><p>先看下为什么要走，今天我们不从“要么钱没给够，要么心累了”谈，而是从两个新的视角来看这个问题</p><ol><li>因为<em>组织的原因</em>要离开</li><li>因为<em>个人的原因</em>要离开</li></ol><p>根据这俩维度，我们可以切分为4个象限，四象限如下：</p><p><img src="/images/%E6%A0%B8%E5%BF%83%E5%91%98%E5%B7%A5%E8%A6%81%E7%A6%BB%E8%81%8C/%E5%9B%9B%E8%B1%A1%E9%99%90.webp" alt="4-quadrants"></p><h3 id="总体来看上图"><a href="#总体来看上图" class="headerlink" title="总体来看上图"></a>总体来看上图</h3><ul><li><p>红色：</p><ol><li>是最严重的情况</li><li>这个人必走无疑，没得劝</li><li>外部因“团队和组织”想走，内部从“自身职业发展”角度也要离开</li></ol></li><li><p>黄色：</p><ol><li>有挽留空间</li><li>通过一定的努力，有可能让这个人留下来</li><li>但要理解，员工和这个团队的关系已产生裂痕，需要警惕即使这次挽留住了，只是暂时的明火扑灭，更大的火情只是暂时被隐埋</li></ol></li><li><p>绿色：</p><ol><li>人生就是缘分，兄弟一场，好聚好散</li><li>有条件的情况下，顺水推舟再送一波</li></ol></li></ul><h3 id="从象限分布来看"><a href="#从象限分布来看" class="headerlink" title="从象限分布来看"></a>从象限分布来看</h3><ul><li><p>象限1：必走</p><ol><li>象限1的员工，这种情况是一定会离开的，<strong>团队待得已经令他郁闷至极，开口就是解脱，离开就是新开始</strong>。</li><li>会因某个case，触发提离职的最后一根稻草，比如一次年终奖的发放。</li><li>从自己的个人情况来说，当前工作情况，对生活、职业、家庭的规划，已感知到非常明显的节奏不匹配。</li></ol></li><li><p>象限2：Leader要反省</p><ol><li>象限2的员工，主要是因为团队当前问题导致的想离开</li><li>情况比较复杂，也是挑战Leader管理能力的时候，有扳回的可能性</li><li>可能是下属和领导的理念不对头</li><li>可能是当前所做的事情，挑战性不够，感觉不到成长</li><li>可能是只看到了<strong>外面诱惑的好地方</strong>（机会、薪资），但却看不到<strong>未知的风险</strong>（不确定性、大饼、坑）</li></ol></li><li><p>象限3：帮他分析上下文关系</p><ol><li>象限3的员工，从概率上讲，往往不是核心高潜力员工，能被安排着干活，但不扛事</li><li>综合素质也一般，对组织没有较高诉求，能随大流发工资，年底涨工资就行</li><li>因认知及竞争力有限，因某些小的利益点超出现有岗位，就会提出离开</li><li>这个时候，需要Leader对其进行梳理当下的情况，并给予一些新挑战与激励，往往都能留得住</li><li>但能落到这个象限的员工，其实并不是我们希望看到的</li><li><strong>自我认知和专业技能往往达不到“高潜”，作为团队的管理者，要少招聘这样的员工，或将这部分员工进行“激活与激发”</strong>。</li></ol></li><li><p>象限4：祝福，并给予真诚的帮助</p><ol><li>象限4的员工，是比较可惜的，往往是团队重点培育的“骨干种子”</li><li>具有独立人格与职业规划，不一定是待得不爽了，而是对生活规划有自己决策</li><li>通常是经过深思熟虑后开口提出的，<strong>且“开弓没有回头箭”，是无法挽回的</strong></li><li>独立思考力的员工，会明白“工作与生活”，“工作与家庭”，“工作与人生”的关系</li><li>他们有更长远的布局和考虑，“打鸡血式”的激励，往往对他们是无效的。</li><li>所以这样的员工，大家兄弟一场，当他提出要走的时候，应该<strong>真心的祝福他，并给予掏心窝子的帮助与建议</strong>。</li><li>圈子太小，以后一定会再次碰到，有缘曾经一起战斗过，就是未来的<strong>一种财富</strong></li></ol></li></ul><h2 id="当下能怎么办-vs-未来该怎么办"><a href="#当下能怎么办-vs-未来该怎么办" class="headerlink" title="当下能怎么办?   vs  未来该怎么办?"></a>当下能怎么办?   vs  未来该怎么办?</h2><p>在业务如此缺人，招人困难的当下，看似是要解决员工想离开的问题，我们想着怎么挽留，怎么分析原因。实际上，更应该跳出这个事情，借事修人。</p><p>作为团队的领导者，通过下属的离职或离开，反思组织当前存在的问题，反思目前的管理方式，以及自己的行事方式是否存在严重问题，以后是否会再次因同样原因的事情。如果未来会发生，对团队现在的氛围、组织结构、技术架构应该做什么调整。</p><ul><li><p><strong>作为Leader，不光要对业务敏感，还要为团队内每一个人成长负责</strong></p><p>  从业务结构及专业领域，设计合理的天花板及挑战空间，Leader要懂得给兄弟们挖“坑”（褒义），帮助他们成长。</p></li><li><p><strong>要让团队要有奔头</strong></p><p>  这奔头既是Leader要刻意设计的，背后是艺术。也是团队核心骨干要实际践行的，背后是执行力。最后才是普通员工被“耳濡目染”，背后是氛围。</p></li></ul><p>最后，祝福最近要离开的那几位一起共事过的兄弟</p><p>在以后的日子里，一切顺利~</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫谈哲学与编程</title>
      <link href="/2020/02/05/post/%E6%BC%AB%E8%B0%88%E5%93%B2%E5%AD%A6%E4%B8%8E%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/02/05/post/%E6%BC%AB%E8%B0%88%E5%93%B2%E5%AD%A6%E4%B8%8E%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://link.zhihu.com/?target=https://keelii.com/2019/08/25/philosophy-and-programming/">漫谈哲学与编程</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>谈到哲学，多数人都会直觉性的认为它是很高深的一门学问。实际上大多数情况并非如此，哲学研究的往往是非常简单的一些命题，而这些命题在常人看来可能并没有现实意义。</p><p>比如说：到底是先有鸡还是先有蛋的问题；比如说：一个号称只给不能给自己理发的人理发的理发师到底能不能给自己理发的问题。当然本文的目的并不在于讨论这两个问题，我们来聊聊几个稍微简单一些的概念：</p><h2 id="哲学中的理性与感性"><a href="#哲学中的理性与感性" class="headerlink" title="哲学中的理性与感性"></a>哲学中的理性与感性</h2><blockquote><p>理性是超越的，本质在于追求无限</p></blockquote><p><strong>超越</strong>的意思是说理性本身不依赖任何现实或者经验社会中的任何对象，<strong>无限</strong>实际上就是说理性本身需要达到的某种理想状态。</p><p>比方说：<strong>「100%的金」</strong> 就是一种无限状态。我们不使用任何经验就可以判断出 100% 的金是必然有的，概念上没人能否定这一点。</p><p>但是运用在经验社会中的知识来判断，这个命题就是不正确的，或者说不具有普遍的正确性。因为我们知道无论人类的技术如何高超也无法制造出来 100% 的金。即使到 99.99% 逻辑上也没到达 100%。</p><p>这个时候人们对于类似的事情就会产生了不同的反应。有的人会因为理想状态达不到而<strong>反向</strong>地认为原来的命题是错误的；有的人内心则有一种说不清道不明的东西指引着他，不会因为到达不到无限状态而肯定整个命题。</p><p>这个问题也一直困扰了我很久，因为在现实生活中在你看来很多明显正确的事情忽出现了一个反例，结果就会有一堆人来告诉你你错了。</p><p>德国哲学家康德在<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/%25E7%25BA%25AF%25E7%25B2%25B9%25E7%2590%2586%25E6%2580%25A7%25E6%2589%25B9%25E5%2588%25A4">《纯粹理性批判》</a>这本书中给出了一种解释：</p><blockquote><p>理性的调节性是引导经验去追求无限，追求绝对，但是永远也达不到。达不到也有作用 — 它使得经验科学不断的前进，并且有了明确的目的和方向…</p></blockquote><p>类似的哲学观点好就好在一但明白了其中的本质和它阐述的真理以后，它就可以在某种层次上解释经验世界的各种现象。这或许就是大家说的哲学是任何其它学科的奠基，是第一学科的原因。</p><p>对应的在编程领域也有一些无限的概念，对于多数前端工程师来讲「实现一个无限级的下拉菜单」似乎也在表达着一种无限状态。当然用户在使用的时候根本不可能用到无限级的菜单，无限级的菜单在交互方面也也是极其反人类的，一步可以做到的事情没人愿意多增加一步。但是为什么程序员们热衷于实现这种类似的无限状态。实际上这就是理性的力量，总有一种说不清楚的力量在引导着你，你也没法解释。</p><p>理解了这一点你就会有一个很简单的评判程序好坏的论点，即：程序或者代码是否表现了某种<strong>无限</strong>状态？如果你的程序函数里面只是几个简单的 <strong>if else</strong>，那你有没有考虑过如果当输入不断的增加或者变化时，原来的代码是否还可以正常返回。或者说在不考虑硬件等客观条件的前提下，你的程序是否存在极限状态。</p><p>我们经常在知乎或者其它论坛上争论一些问题，本质上讲大家都没有区分清楚自己对于一个论点的<strong>逻辑认知</strong>和<strong>情感认知</strong>。太多人喜欢用自己的感情认知去否定逻辑事实，以至于争来争去谁也没能说服谁，试图用唯心观点去解释唯物的现象或者相反，这是极其不正确的。</p><p>一个典型的问题是我不久之前在知乎上回答的一个问题：<a href="https://www.zhihu.com/question/309891718">谁能大致说下vue和react的最大区别之处？</a>我的回答简单总结就两句话：Vue 有一种设计层面追求的简洁感性之美，React 则是一种数学层面的逻辑一致之美。本质上讲没有什么好坏之分。但是诸如些类的一些前端框架问题正在变成一种帮派化的「站队」风气。</p><h2 id="编程中的低阶（low-level）与高阶（hight-level）"><a href="#编程中的低阶（low-level）与高阶（hight-level）" class="headerlink" title="编程中的低阶（low-level）与高阶（hight-level）"></a>编程中的低阶（low-level）与高阶（hight-level）</h2><p>注意这里讲的 low&#x2F;hight level 并不是计算机术语中特定的某种形式。</p><p>有个笑话是这么讲的：</p><blockquote><p>一个程序员去相亲，程序员自己介绍说「我是做嵌入式C语言底层开发的」，妹子反问「那啥时候做到高层开发呢」？</p></blockquote><p>程序员们内心都有一个做底层开发的梦，因为这才是一个真正的程序员的追求与理想。</p><p>但是现实往往相反，大多数程序员每天都在写业务代码（重复的 CRUD）。所以很多程序员得出来一个结论就是：越底层的东西越重要，越高层的东西越肤浅。通常这也会行成一条鄙视链，他们会不由自主地忽略高层的东西。</p><p>注意这里有两个问题：</p><ol><li><p>业务代码有没有价值？</p><p> 当然有了，业务部分的代码是系统的最终结果。从结果导向上讲底层代码如何优雅、实现如何科学我们根本不关心，我们更关心整个系统层面的稳定与健壮。这是一种领导的高层次视角。</p></li><li><p>底层的东西就一定重要？</p><p> 并不一定，这里说的不一定不是要完全否定底层的重要性。恰恰相反，软件领域一些特别优秀或者说伟大的软件底层并不是那么的如人意。比方说微软开发的 VSCode 代码编辑器。要是从底层去讨论它的构架合理性那确实挺像一个笑话的。因为本质上讲 VSCode 基于 electron，它把编辑器放在了一个 webview 中去运行，但是 webview 是用来浏览网页的，而且 electron 居然把 NodeJS 运行时也整合进去，以至于最小的一个应用解压完也有上百兆。</p><p> 这感觉就像是上学的时候你很期待一个数学教授教你数学课，但是实际上你的数学课却是一个体育老师带的，这不是可不可以的问题对吧。</p><p> 然而 VSCode 这样做的结果是：它还真的成功了，而且编辑器的性能比很多原生软件做的都要好，以至于周围所有人都在使用它，VSCode 在 Github 上名列前茅，也改变了很多程序员对于微软的刻板印象。</p></li></ol><p>如果我们再回过头从哲学的角度去思考这个问题，实际上计算机中的<strong>底层</strong>与<strong>高层</strong>正好对应着哲学中的<strong>理性</strong>与<strong>感性</strong>。</p><ul><li>底层更注重逻辑严谨，因为这是构建高层建筑的基础，它面向的是理论</li><li>高层更注重表现形式，因为高层的部分呈现出来的是一个完整的系统，它面向的对象是人。是人，那需求就是多样化的，因为人的想法总是特别的感性</li></ul><p>理性的认知是有对错可以批判的，但是感性的直观是没有对错的，因为即使是同一种声音、颜色对不同人观感都是不一样的。</p><p>比如说你在火车上看书，对面的人说话声音太大吵到了你。你说：你们说话小声点可以吗？对方会说：车上这么多人说话为啥就我们吵到你了？你说：因为就你们声音最大。对方说：我咋没觉得？</p><h2 id="现实中的主观与客观"><a href="#现实中的主观与客观" class="headerlink" title="现实中的主观与客观"></a>现实中的主观与客观</h2><p>现实生活中我们经常会遇到一些对于论点的评价：主观还是客观。但是很多人没搞清楚这两个词的关系。多数人都觉得客观的观点就是好的，主观的就是臆断的。</p><p>主观和客观的关系就像是主人与客人的关系一样，有的人会认为应该主随客便，有的人则认为应该是客随主便。</p><ul><li>如果一个人表达的观点全是主观的，那我们会认为这些观点是不可以讨论与评判的，不经过讨论批判的观点是站不住脚的。</li><li>如果一个人表达的观点全是客观的，那似乎也不对，因为这些观点全是别人的，你可能忽略了自己的意识，最终只能游走在别人的规则中。<br>任何语言中都有那么一些词语是成对儿出现的，像因果、主客、高低，这些词在被造出来的时候就是成对出现的，缺一不可。没有前者，后者将不会单独存在。它们之间没有绝对性的对于错。如果有，那对方就没有了存在的意义，反过来自己也将不存在。</li></ul><p>当有人抛出一个观点的时候我的经验是一定要听清楚对方说的是「我觉得」还是「我认为」。「我觉得」那必然就是人家的主观感受，这种观点我们就没必要讨论了。你应该回复：「嗯，没错，确实是这样的。」。如果对方说「我认为」那你要是有不同的观点就完全可以和他讨论，因为说「我认为」的观点必然是有一些客观事实做为依据的，有事实有逻辑，那就可以有对错。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>哲学中的知识并不能完全解释现实中的事物，因为哲学研究的终点是一些没有结论的东西：上帝、自由、灵魂不朽。这些东西并非常人能理解的，但是人们对于无限真理的追求驱使着大家去研究它，很多人会觉得既然研究不出来结果那是不是就没意义了，当然不是。事实恰恰相反，如果我们把所有的事物本质都研究清楚了，那我们的存在也将失去意义。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30个CEO，烧了42亿，告诉我这9个真相</title>
      <link href="/2020/02/05/post/30%E4%B8%AACEO%EF%BC%8C%E7%83%A7%E4%BA%8642%E4%BA%BF%EF%BC%8C%E5%91%8A%E8%AF%89%E6%88%91%E8%BF%999%E4%B8%AA%E7%9C%9F%E7%9B%B8/"/>
      <url>/2020/02/05/post/30%E4%B8%AACEO%EF%BC%8C%E7%83%A7%E4%BA%8642%E4%BA%BF%EF%BC%8C%E5%91%8A%E8%AF%89%E6%88%91%E8%BF%999%E4%B8%AA%E7%9C%9F%E7%9B%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/5SqrPjKwB12_zhgJ3rsbRw">30个CEO，烧了42亿，告诉我这9个真相</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>昨天看到亦冶的《<a href="http://mp.weixin.qq.com/s?__biz=MzA3MjQ1ODcxOQ==&mid=2652648930&idx=1&sn=297cefa0dae87ee8dd4834bf98177d5b&chksm=84f69d52b38114447f63dc400a1e8090bdf58a782948bd73b0c0bda7c1eeb422fc014872a671&scene=21#wechat_redirect">在赢之前，你要先学会输几次</a>》，感叹这个浮躁的社会还有人不断思考沉淀创业经验，并且乐于系统性输出，于是占了TNBT一个版面，聊聊曾经的「输家」，聊聊「<strong>创业失败</strong>」。</p><p>经过与懒癌的抗争，重新翻阅了上半年对30位有失败经历的互联网创业者（至少融资超过1000万人民币）的访谈记录以及自己今年的毕业论文（《Failure Factors of Internet Startups: Analysis of China – Based on Surveys of 30 entrepreneurs》），曾经答应很多创始人的总结终于磨了出来。</p><p>因为一直在互联网领域创业，之后也会继续，因此在「创业失败」的对象前加了「互联网」的这个标签，一来研究会更聚焦一些，二来自己会更感同深受。结合当时自己在VC的工作学习以及之前的创业经历，也更容易与创业者交流。</p><p><em><strong>访谈案例概览</strong></em></p><p>从2012年到2018年成立的互联网企业，接受过天使轮以上融资但已关闭的项目共计691个，其中天使轮关闭项目占64%左右，A轮占30%，B轮占4%，C轮及以上占2%，具体见文末附表（数据来源于IT桔子）。除了天使轮关闭项目，样本存量本身不是很大，最终我通过各种方法找到97位有A轮或大天使轮经历，有项目失败经历的创始人的联系方式，与62位创始人取得联系，其中37位接受了采访，最终挑选30位进入我的研究案例。</p><p>他们几乎涵盖这5年所有互联网初创公司的行业，包括<strong>在线教育、电子商务、出行服务、餐饮、社交、互金、物流、人力资源、文娱、新零售等，总计融资额达到42亿</strong>。</p><p>比较可惜的是，在得到联系方式的97位互联网初创公司创始人中，只有8位女性创业者，其中只有一位女性创业者愿意接受采访，因此，本次研究中忽略性别的维度，<strong>不对女性创业者话题展开讨论</strong>。</p><p>感谢超慧、宇神、吴幽同学热心帮我联系，感谢潘（庆中）院长的指导，感谢各位创业者在百忙之中耐心与我交流平均90分钟以上。</p><p><strong>希望本文会对“在路上”的大家一些启发</strong>。</p><h2 id="1、如果年轻，不要选择风口创业，风口创业垄断为王，考验的是资本加速下的综合能力"><a href="#1、如果年轻，不要选择风口创业，风口创业垄断为王，考验的是资本加速下的综合能力" class="headerlink" title="1、如果年轻，不要选择风口创业，风口创业垄断为王，考验的是资本加速下的综合能力"></a>1、如果年轻，不要选择风口创业，风口创业垄断为王，考验的是资本加速下的综合能力</h2><p>风口指的是，当商业模式初步被验证，大量资本就会涌入的行业，例如这几年出现的互联网金融、区块链、共享经济（O2O）、直播。在访谈的30位创始人中，共有10家风口型的创业公司，所有的10家企业的创始人都提到了「<strong>财政耗空原因</strong>」或是在「<strong>竞争中败出</strong>」这两个中至少一个失败的原因。<strong>纷纷提到在快速扩张过程中，所有管理能力的不足都被迅速放大，每一个决定都决定成败，因此非常考验综合能力</strong>。</p><p>风口型的企业要在每一个方面都要足够强才有这个资格去拼，无论是合作方的选择、市场营销、品牌推广、产品设计、供应链，没有一个环节可以侥幸。因此，风口型创业企业的失败率极高，不能走错一步。</p><p>风口创业热钱涌进，在访谈的10家风口型企业其平均存在时常为1.78年，而非风口型创业的平均存续时间为3.24年。<strong>风口型企业能够很快验证成败</strong>。在这么短的时间内，虽然年轻人有激情、精力旺盛，但在资本加速下，往往在管理上不具备足够的能力，扩张中犯错几率大而错失最佳时机。</p><h2 id="2、互联网创业者首先要是个商人，并且具备销售型人格，创始人的认知黑洞以及个人能力，会成为企业天花板"><a href="#2、互联网创业者首先要是个商人，并且具备销售型人格，创始人的认知黑洞以及个人能力，会成为企业天花板" class="headerlink" title="2、互联网创业者首先要是个商人，并且具备销售型人格，创始人的认知黑洞以及个人能力，会成为企业天花板"></a>2、互联网创业者首先要是个商人，并且具备销售型人格，创始人的认知黑洞以及个人能力，会成为企业天花板</h2><p>时代给予的机遇就是有「风口上的猪」的错觉，在访谈过程中包括后来接触的项目，特别是社交型项目，有不少创始人坦诚说到当时拿到钱就想找流量，到后来钱不够的时候才意识到没有变现，以为自己的产品是上一个QQ。但就如<strong>同人不同命，不同产品出生的时间点不同，命运也会不一样</strong>，QQ的孕育时长和14年左右的互联网产品的孕育时长也不可同日而语。</p><p>有时候会有一个偏执的想法，程序产品或者记者出身，当时看起来是流量调动天才的创业者，他们的专业就是在流量本身，而并不是商业本身，而这样的创业者除非在高点换主，投资人奔着早日被并购的心态投资，如果期望成为一个伟大的企业，概率非常低。</p><p>「不赚钱是犯罪」，这是对于辜负无数期待的罪恶，是谋杀自己的罪恶。<strong>一个优秀的创业者首先要是一个商人，敏感，重视现金流，对盈利点的直觉以及必要的防备之心，最好还能合纵连横，游走各路资源节点之间，若不是，越多钱的投入，就会南辕北辙</strong>。</p><p>这一定不是合伙人或者商业化总监什么的能够完全弥补的，如果创始人连认知都没有，任何人都帮不了。也就是说创始人的认知和个人能力，是否能够跟随企业的发展而快速提升，这是决定公司天花板的关键。</p><h2 id="3、不追风口的情况下，各方面条件背景合适的创业者，总能够慢慢找到适合好商业模式，取得阶段性胜利"><a href="#3、不追风口的情况下，各方面条件背景合适的创业者，总能够慢慢找到适合好商业模式，取得阶段性胜利" class="headerlink" title="3、不追风口的情况下，各方面条件背景合适的创业者，总能够慢慢找到适合好商业模式，取得阶段性胜利"></a>3、不追风口的情况下，各方面条件背景合适的创业者，总能够慢慢找到适合好商业模式，取得阶段性胜利</h2><p>到17年我才反应过来，原来自己也当了一次「风口少年」，实际上在风口期，上升期时没有多少人意识到自己在风口，当所有人都在讨论的时候往往已经不是风口。<strong>因此想要追风口，也是一件很难的事情</strong>。</p><p>如果不去思考风口的问题，而是发自内心问自己「自己是谁」，能够为这个社会创造什么「价值」，是否提升任何「效率」，怎么样的事情能够平衡个人价值和社会价值，同时在个人能力、管理能力、行业选择、宏观环境等方面没有特别大的缺点的时候，如果给予一些时间，总能够慢慢找到适合好商业模式，取得阶段性胜利。</p><p>例如在访谈中有一位自主招生上北大的创始人，响应双创号召，毕业创业做大学生求职平台，绕了几个弯总是无法突破用户规模十分郁结甚至关停了该业务线，经过近2年折腾，壮士断腕转到自己熟悉的「自主招生」领域，开创了「自主招生」中介服务，收入在16年到了500万，17年到了2000多万，18年不到1亿，从全职几个人到了200多人，品类也不断扩张。</p><p>这个例子就是早期投资，<strong>投项目不如投人</strong>的标准案例了，其实身边还有不少这样的例子，刚出来创业时候的商业计划书和后来做的就不是一样事情，但后来的都跑了出来，甚至还有朋友即将上市。</p><h2 id="4、兴趣是坚持的根本，如果不爱，如何度过漫长的寒冬，创业是一个需要情怀和浪漫主义的事情"><a href="#4、兴趣是坚持的根本，如果不爱，如何度过漫长的寒冬，创业是一个需要情怀和浪漫主义的事情" class="headerlink" title="4、兴趣是坚持的根本，如果不爱，如何度过漫长的寒冬，创业是一个需要情怀和浪漫主义的事情"></a>4、兴趣是坚持的根本，如果不爱，如何度过漫长的寒冬，创业是一个需要情怀和浪漫主义的事情</h2><p>在访谈中，有一个创业者之前经历过创业失败，但是重新开始找到自己热爱的「二次元」方向创业，目前已经到了B轮融资，公司现金流良好，创始人如鱼得水。另外一位创始人极度热爱舞蹈，在经历一次创业失败经历后，重新开始建立了几千万注册用户的舞蹈社区，C端做培训，B端逐渐成为知名综艺、汇演不可替代的合作方。</p><p>因为喜欢，对一件事情有足够的热情就会坚持，这种喜欢是发自心底的爱：说玄一些，在基本条件满足（比如管理能力，融资能力，商业逻辑完善）的情况下，爱能够战胜所有困境，<strong>要是真的爱，可以给予无尽的热情和坚持，同理心以及奉献</strong>，但是真爱难得，于事于人皆如此，这样想想，这是一件多么需要情怀以及浪漫主义的事情。</p><p>最近我在和别的投资人朋友沟通自己的想法的时候，经常会说到「<strong>缓慢而忠诚</strong>」这五个字，「缓慢」不是说不进步，而是不那么着急追赶，害怕错过，是一种恰到好处的节奏感，是一种内心的踏实和安定感，因为这样的「慢」，才有「忠诚」，<strong>无论是用户还是创业者的内心</strong>。</p><h2 id="5、创业失败经历是人生大课，不是每个人都有机会听取，创业需练习要趁早"><a href="#5、创业失败经历是人生大课，不是每个人都有机会听取，创业需练习要趁早" class="headerlink" title="5、创业失败经历是人生大课，不是每个人都有机会听取，创业需练习要趁早"></a>5、创业失败经历是人生大课，不是每个人都有机会听取，创业需练习要趁早</h2><p>由于采访对象都为至少是有过1000万以上的融资经历的创始人，虽然项目失败了，也属于「成功的失败者」，就算是在14、15年资本狂热阶段，1000万人民币的真金白银也不是小数目，每一笔钱的背后都是30%以上年化回报率的期待。这样的机会相当于给创始团队的培训费用，只有非常少的人有这样的机会接受失败的培训。</p><p>在做每一个决定花每一笔钱的时候更了解自己：是否优柔寡断，是否可以优化运营结构，为什么没有找到破局的方法，是否在下一次可以做更好。</p><p>角色转变中的调整心态：原来的高管或者初出茅庐的学生，创业经验都是从0开始的，从执行者变成一个执掌大权的保姆式人物，要修炼得能屈能伸，从被人求到处处跪地求人，心态上需要很大转变；每天可以自如转变各个对手方面前的状态，<strong>在投资人面前星辰大海仿佛能够征服宇宙，在政府面前马首是瞻政治正确，在员工面前就要回归现实，天天想着用户增长</strong>。</p><p>在访谈的30位创业者中，共有12名30岁以上创立公司，其中有10位毕业于一线名校，例如MIT，UC Berkley，香港理工大学，清华等，11位有在知名公司超过5年的相关工作经历或者相关创业经历。而18名30岁以下创立公司的创业者，仅7位毕业于一线名校，另外有3位从海外名校辍学回国创业，没有一名有知名公司工作经历。</p><p>这说明的是<strong>随着年龄的增长，社会对于创业者的容错率越低</strong>，只有非凡背景的创业者才能得到资本青睐，因此在经济环境较好的情况下，如果有想法的年轻人要趁早，才有可能有更多机会和锻炼，<strong>创业的经历最能锻炼创业的能力</strong>。</p><h2 id="6、某些明星项目是做局者（Rainmaker）的作品，茶余饭后津津乐道，但与常规创业者无关，没有参考价值"><a href="#6、某些明星项目是做局者（Rainmaker）的作品，茶余饭后津津乐道，但与常规创业者无关，没有参考价值" class="headerlink" title="6、某些明星项目是做局者（Rainmaker）的作品，茶余饭后津津乐道，但与常规创业者无关，没有参考价值"></a>6、某些明星项目是做局者（Rainmaker）的作品，茶余饭后津津乐道，但与常规创业者无关，没有参考价值</h2><p>在14年左右这资本狂热的阶段，那些喧嚣尘上明星项目，那些茶余饭后被人津津乐道奉为圭皋的资本名言，到底是局中人之剧本还是真理，有时候真假难分。</p><p><strong>创业维艰，风起是运，风落是常态</strong>，那些百年一遇的大运后面的故事，并不会公开报道，那些错综复杂的人物关系以及利益线条。这些案例也许能够成为一些早期投资人一生的光鲜足迹，对于普通创业者而言，几乎没有参考价值。</p><h2 id="7、没有建立起壁垒就容易在竞争中失败，一定要反复思考项目，核心壁垒是什么，如何建立壁垒"><a href="#7、没有建立起壁垒就容易在竞争中失败，一定要反复思考项目，核心壁垒是什么，如何建立壁垒" class="headerlink" title="7、没有建立起壁垒就容易在竞争中失败，一定要反复思考项目，核心壁垒是什么，如何建立壁垒"></a>7、没有建立起壁垒就容易在竞争中失败，一定要反复思考项目，核心壁垒是什么，如何建立壁垒</h2><p>互联网创业，特别是年轻创业者互联网创业，几乎商业模式本身没有壁垒，虽然在访谈中，所有创始人都提到了自己项目没有核心壁垒类似的描述导致失败，但后来我又接触了上百个互联网项目后，发现其实大多数商业模式是没有壁垒的，甚至说<strong>绝大部分商业开始都是没有壁垒的</strong>，是在后期如何建立壁垒形成商业的护城河，说到底在互联网创业里就是<strong>规模效应的壁垒，如何占领市场认知的壁垒</strong>，这是创业者需要反复思考的要点。</p><p>如果没有竞争，反而要思考是这个领域本身是不是就没有市场，在产品模式和功能无法创新太多的情况下，最应该思考的是如何<strong>在运营上走最快也可能最难走的路</strong>。</p><h2 id="8、资本和政府都是好朋友或者是恋人，不是亲爹亲妈，都不能过于依赖"><a href="#8、资本和政府都是好朋友或者是恋人，不是亲爹亲妈，都不能过于依赖" class="headerlink" title="8、资本和政府都是好朋友或者是恋人，不是亲爹亲妈，都不能过于依赖"></a>8、资本和政府都是好朋友或者是恋人，不是亲爹亲妈，都不能过于依赖</h2><p>在访谈中其中有一个创业者的生鲜配送项目得到了阿里系的战略投资，在接受投资的时候口头约定在供应链上会极力支持，但是后来与创业公司对接的阿里系同事并非高管，在资源衔接上明显比较迟缓，没过多久生鲜配送领域杀出了很多家创业公司，形成了极度红海的竞争格局，每家都拿到了大额融资。</p><p>该项目因为过度依赖阿里供应链，而阿里系并没有给予足够快速支持，而错失了最佳的跑马圈地时期。其原因是创始团队在签订TS的时候只看到了阿里系投资但没有对支持的具体方式进行约束，从而导致项目进度无法保证。因此在创业过程中，<strong>关键的节点要落实在纸上，或者就该自己做</strong>，例如京东自建物流等，不然几乎难以执行。</p><p>创业是条孤独的路，在这条路上，能够完全信任的人少而又少，反过来说，<strong>在这个天下熙熙皆为利来与往的世界，如何加强所有连结，去绑定形成利益共同体，本来就是作为一个合格创业者要深刻认知的事项。「依赖」在任何场景下都有代价，「共生血盟」才能顽强成长</strong>。</p><h2 id="9、中国互联网创业不得不与政策博弈，限制与否成功与否都是一念之间"><a href="#9、中国互联网创业不得不与政策博弈，限制与否成功与否都是一念之间" class="headerlink" title="9、中国互联网创业不得不与政策博弈，限制与否成功与否都是一念之间"></a>9、中国互联网创业不得不与政策博弈，限制与否成功与否都是一念之间</h2><p>政策对于创业成败有决定性影响。政策包括了全民性「大众创新万众创业」的全民创业鼓励政策，也包括了各细分行业中具体的政策法规。</p><p>在访谈的30位创业者无一例外都提到了双创对自身创业的影响。其中有两名曾是阿里高管的创业者都因为国家政策原因（主要涉及食品安全以及海淘限制方面）直接导致融资遇冷，销售量断崖式下跌，导致企业破产。</p><p>这里就是创业者面临的风险。政策就犹如达摩克利斯剑，我们无法预知政策在何时何地降落，以怎么样的方式落向何人。<strong>在发现好的模式的同时，赌的是命，是运</strong>。</p><h2 id="这些人二次创业在做什么？"><a href="#这些人二次创业在做什么？" class="headerlink" title="这些人二次创业在做什么？"></a>这些人二次创业在做什么？</h2><p>在这30位访谈对象中，其中17位为第一次创业，6名为第二次创业，7位为连续创业者；总融资金额超过42亿人民币，中位数为2250万人民币；做此项目的原因中有17位是因为以往工作经验；4人有有成功人士或投资人指点；8人表示为兴趣所在，另外的直言是被双创氛围带动。</p><p>其中有意思的是，<strong>兴趣所在的几位创业者虽然有失败经历，但是其中4名后来做了转型或者重新创业做了相关项目，都取得了不错的成绩</strong>。</p><p>该次创业后有只有2位在大公司当职业经理人，有2位到了投资行业，21位开始了新的项目，5位正在选择创业方向，而继续创业的21位创始人中16位选择了<strong>教育、企业服务、总经销商等不需要大量融资公司就可以运作，并且有稳定现金流的行业</strong>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后，想用采访中某一位创始人，同时也是连续创业者的感悟作为结语：创业需要有“8 Ps”——<strong>purpose、problem、passion、positivity、people、product、positioning、persistence</strong>。</p><ul><li>Purpose，目的是非常重要的，这决定了企业能够走多远；</li><li>Problem，问题是要深入思考创始人可以解决什么样的问题；</li><li>Passion ，激情是关键，有了这种激情，创业者就能成为这个行业的专家，无论多么困难，也能比别人更聪明。他可以不断地与人见面。无论遇到什么障碍，都要找到解决办法；</li><li>Positivity，乐观就是在成功的路上保持积极的心态。即使在创业者看到了不利的一面，他也能积极地看到有利的一面；</li><li>People，人，作为一个创业者，不能仅仅靠自己成功，他应该得到投资者成为他的合作伙伴，让员工听从他的指示；</li><li>Product，产品，公司应该让产品尽快上市，并得到反馈改进，而不是等到产品完美再上线；</li><li>Positioning，定位，讲一个人们能记住的故事，识别品牌。不仅仅是为了消费者和其他人；</li><li>Persistence，坚持，创业是一段漫长的旅程，创业者应该坚持不懈，灵活多变，有足够的资金和耐心走向成功。即使99%的人都失败了，也有必要重复这些事情直到成功。市场比你想象中更慢成熟。</li></ul><p><strong>虽然「灵魂只能独行」，愿在这场孤独的修行中，为你点一盏灯。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悟空转世，黑客之王</title>
      <link href="/2020/02/05/post/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%EF%BC%8C%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/"/>
      <url>/2020/02/05/post/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%EF%BC%8C%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/r8utpmkg5NX8HczbuAt6qg">悟空转世，黑客之王</a> <mark class="hl-label green">转载</mark> </p></blockquote><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/1.webp" alt="1"></p><p>先讲个在黑客圈流传的故事。</p><p>2018年，沙特人从以色列黑客手里买了一个iPhone的漏洞。花了5000万美金。沙特人用这个漏洞破解了记者卡舒吉的手机。得知他在跟人合谋要推翻沙特王储。然后卡舒吉因故进了土耳其的沙特大使馆。被肢解。</p><p>黑客是最神似于侠客的一种存在。</p><p>侠客，上天入地，来去无踪，千军之中砍上将人头如探囊取物。</p><p>最近三十年，程序员这群人给人类从无到有搭建起来一个不断膨胀、甚至吞噬一切的虚拟世界。先是电脑，然后是互联网，现在是万物互联，甚至包括人的脑袋。人天生是有缺陷的，所以他们创造的东西也是有漏洞的。黑客就是那群对这些漏洞了如指掌的人。于是在虚拟世界里，黑客像侠客一样能上天入地，来去无踪。</p><p>今天的黑客已经不是旧印象中盗用QQ号或者信用卡挣点零钱的小毛贼。他们已经是国家间网络战争的中坚力量。</p><p>他们干的事，比如攻入华为的邮件系统，瘫痪整个俄罗斯的电力，攻击伊朗核设施，潜入伊拉克作战指挥系统，甚至在2天内攻破美国主力战斗机F-15系统。由这些已经冒出水面的冰山一角，可以试着想象一下真实的对战里会发生些什么。</p><p>再没有所谓“和平时代”。每一天，每一秒，每一个联网的电脑、手机、汽车、电视、包括脑袋，都是战场。不能因为没有看得见的炮火和鲜血，就只当它们不存在。</p><p>今天最顶级的黑客已经完成了向“大侠”的转变。侠之大者，为国为民。</p><p>下面要介绍的这位。是侠中之侠。其实，呈现古往今来的侠客，金庸和古龙都彻底输给了吴承恩。从大闹天宫到被压在五指山下五百年，再到西天取经，孙悟空才是侠客的巅峰。</p><p>郑文彬，业内更熟悉的名字是MJ0011。MJ是马甲的意思，早年在论坛里怼人的专用id。87年生人，一直是乖小孩。转变发生在中考这一年。</p><p>中考前父母承诺，考上重点高中就买一台电脑，可事后没兑现。这把郑文彬的“野性”一下子点燃了。他反而把学业全抛开，一不做二不休，彻底痴迷于编程。黑了当时手里唯一一台可以编程的东西，文曲星。随意改程序、删词库、下游戏。在学校和bbs里成了名人。文曲星还请他去上班。</p><p>大一就辍学创业，不愁钱花。19岁时被周鸿祎亲自出马说动，加入360。自此从“在野”转为“在朝”。现在是360首席安全技术官。2014年创建360核心黑客团队Vulcan。</p><p>2016年，郑文彬带领360Vulcan参加世界顶级黑客大赛Pwn2Own，成为首个攻破号称“史上最难”的Chrome浏览器的中国团队。2017年，他们凭借63分的总积分加冕比赛总冠军，获得“Master of Pwn（破解大师）”称号。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/2.webp" alt="2"></p><p>中间是郑文彬，左四是古河</p><p>2019年微软发布全球最具价值安全精英榜（MSRC），360共有10人登榜，有7人进了前50，全球第一。其中古河和招啟汛包揽前两名。招啟汛还成为12年来第一个拿到The Pwnie Awards大奖的中国人，这相当于“全球白帽黑客奥斯卡”。</p><p>这些入榜的黑客，他们都有同一个boss，也是同一个良师益友：郑文彬。</p><p>我在互联网安全大会现场见到了郑文彬。见缝插针跟他聊了55分钟。</p><p>卢泓言：自我介绍下。我77年的，比你大10岁。高中时最喜欢的是写作文和写程序。两个都得了乐山市一等奖。后来选择码字，忍痛放下了程序，算是个未尽的梦。</p><p>郑文彬：我也是小时候很喜欢写作文，那时看萌芽杂志和新概念作文。还学了十几年画画。公司里的PR稿有时候我也会跟他们切磋应该怎么写。</p><p>卢泓言：码程序跟作文、画画有没有相通的地方。</p><p>郑文彬：有。有本书叫「黑客和画家」。黑客是个偏艺术性的工作。都需要天赋，靠灵感。</p><p>卢泓言：成就一个顶尖黑客，天赋占比多少。</p><p>郑文彬：占比很高。比如我第二欣赏的黑客，韩国的lokihardt。我们都去世界上打比赛，他是一个人打我们一个team。有一次我问他，你到底有什么秘诀。他说，他就是打开代码，看一眼那个名字，就知道有没有漏洞。哈哈。当时我就想把他打一顿。有时候我看他发现的那些漏洞，觉得不可思议，居然还能那样去想。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/3.webp" alt="3"></p><p>lokihardt是不是很帅</p><p>卢泓言：所谓天赋，是别人难以理解的。你能理解lokihardt吗。</p><p>郑文彬：他来参加我们举办的比赛。从早上9点到第二天，除了上厕所，就一直坐在那里，不吃东西，基本不喝水。我问他你不饿吗。他说当在做这些事情的时候，没有任何感觉。</p><p>卢泓言：想起来有句话叫“精诚所至，金石为开。”名将李广有个典故。有天晚上在前线巡游，忽然大风，林里似乎有动静。李广搭弓射了一箭，匆匆离开。第二天再来，发现那只箭深深射入一个巨石。李广再搭弓射箭，却再也射不进去。因为没有了当晚“林暗草惊风”的情境，于是心神不再能聚焦。</p><p>郑文彬：专注的境界。</p><p>卢泓言：你最欣赏的黑客是谁。</p><p>郑文彬：geohot。一个美国黑客。他比我还小两岁。第一个破解了iPhone，换了三部iPhone和一辆保时捷。后来又破解了playstation，索尼告他，法庭判他永远不能再碰索尼的机器。然后全世界的黑客把索尼的服务器打瘫了。大家都很崇拜他。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/4.webp" alt="4"></p><p>少年geohot</p><p>卢泓言：为什么说黑客的巅峰在25岁以前。</p><p>郑文彬：脑力和精力在25岁之前最强。他们可以连续熬夜一个月还能保持最强的状态。然后其实年轻人的思路是比较不一样的。他们是新鲜的。</p><p>卢泓言：lokihardt跟geohot打会怎么样。</p><p>郑文彬：geohot最厉害的时候是16岁。我见他时他已经25岁了。他就说，跟lokihardt第一次交手以后，就想退休了。lokihardt比geohot小5岁。geohot说，如果年轻几岁，还有机会跟他打，可是自己已经“老了”，没机会赢了。</p><p>卢泓言：年轻和脑力只是一个维度。但有些职业是越老越有能量。</p><p>郑文彬：年轻人在高强度的解决一线的问题上有优势。但在经验的积累和方向的把握上不一定。</p><p>卢泓言：你自己是主要靠逻辑还是靠灵感。</p><p>郑文彬：我的天赋占一点，但跟最顶级的还是有差距。我觉得自己主要还是靠努力，靠逻辑。不过那些天赋很高的人是主要靠灵感。</p><p>卢泓言：我一直觉得自己码字靠逻辑。但后来觉得其实是靠灵感。有效的逻辑有很多，相互矛盾的逻辑同时成立，为什么我选了这个逻辑而不是其他。这个其实是灵感。</p><p>郑文彬：逻辑还是基础。没有长期的训练，灵感也出不来。</p><p>卢泓言：漏洞一定存在吗。</p><p>郑文彬：一定存在。毕竟是人写的嘛。人都是有漏洞的。网络战是超限战，无所不用。即使你跟网络隔离了，只用刻录光盘传数据，可是光盘、硬盘可能一出厂就带着病毒。有些国家甚至在运输途中拦截你的电子产品植入后门。并且人性也有漏洞，人会被收买和威胁。防不胜防。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/5.webp" alt="5"></p><p>几年前的郑文彬</p><p>卢泓言：如果你自己加上你最好的团队，写的系统也会有漏洞吗。</p><p>郑文彬：也会有。好的黑客不一定是好的工程师。固有的漏洞模式可以避免，但总会有不知道的模式。</p><p>卢泓言：黑客是进攻，写系统是防守。我觉得码字也是一样。有的人是进攻型的，见缝插针。有的人是防守型的，全守全攻。</p><p>郑文彬：90年代时候微软有全世界最好的程序员，还有NASA的工程师，素质是非常高的。但他们的东西也是有漏洞。05年，微软吃了之前“冲击波”的亏，决定把业务停下来，专心做一个安全的系统，他们觉得vista是坚不可摧的。可一年以后还是被攻破了。</p><p>卢泓言：潜伏或者攻击一定会留下痕迹吗。</p><p>郑文彬：今天老周讲的，纽约时报有个报道，说美国网军在俄罗斯电网系统里植入了恶意代码。美国人如果不说，俄罗斯人根本不知道，这是网络攻击的最高境界。</p><p>卢泓言：哲学上讲，“凡走过，必留下痕迹。”能不能看见其实是能力问题。有那个能力，就可以“不出门，治天下。”</p><p>郑文彬：360可以说有能力看到别人看不见的世界。世界上几个网战强国，我们能抓到它的影子。我们已经发现了40起针对我国的APT（高级持续性威胁）攻击。今天的思路是，不是让别人打不进来，没有攻不破的网络，但我要有能力看见它的蛛丝马迹。然后才有可能反制。</p><p>卢泓言：脑机接口会带来什么。</p><p>郑文彬：马斯克的脑机接口是用机器把东西缝进大脑里。但是另一个美国教授刚发布的方式是，贴个东西上去就行，不用扎针。这样的话，马斯克的方式就没市场了。不过不管哪一种，未来的人脑袋里的情报、意识，会有严重的安全问题。</p><p>卢泓言：我下一个指令，你脑袋里就有了某种情绪或者想法。有这个可能吧。</p><p>郑文彬：有。</p><p>卢泓言：怎么看马斯克。</p><p>郑文彬：geohot跟lokihardt交手后就退休了。扎克伯格请他去Facebook。geohot说这家公司用AI去多卖广告，操纵人的思想，pure evil。马斯克又请他去做无人驾驶。他去干了一段，说马斯克太商业化，把一辆车改装成无人驾驶要价太高，就走了。然后自己搞了一个，把一辆车改装成无人驾驶只要3000美金。不过后来被美国交通部给叫停了。</p><p>卢泓言：技术越进步，安全越脆弱吗。</p><p>郑文彬：不一定。安全技术也在升级，巨头在大量投入，比如攻击iPhone比之前难了。在网战没有公开打的时候，普通人受到的损失是在减少。但国与国之间的差距在拉大，如果弱国在理念上没到位，投入不足，就很被动。大国才有足够的投入和人才做出像核武器这样的东西。比如大家都知道NSA（美国国家安全局）是最强的网络攻击的组织，它是06年就开始布局。其他国家晚了很多年。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/6.webp" alt="6"></p><p>现在的郑文彬</p><p>卢泓言：技术越发达，权力越掌握在少数人手里。比如冷兵器时代，一个人拿刀可以砍十个人。热兵器时代，一个人拿枪可以打一百个人。核武器就是几百万人。这也是一种脆弱性。</p><p>郑文彬：这个角度说也有道理。有点像核武器，少数人掌握，一旦爆发很多人会被影响。被影响的深度也在加强，以前被黑客也就是拿走一点资料，现在可能是电也停了，汽车发动不了，钱取不出来。</p><p>卢泓言：是“魔高一尺道高一丈”还是“道高一尺魔高一丈”。</p><p>郑文彬：个人觉得是“魔高一丈”。之前vista就被攻陷了。后来苹果出xs max，是最安全的一代手机。当时我们做越狱的团队就觉得没戏了。可是一年后还是被民间破解了。</p><p>卢泓言：现在的黑客为什么都是战队形式，集体作战。</p><p>郑文彬：以前都是黑客一个人就给你黑了。个人英雄。但趋势是技术越复杂，工程量越大。一般的攻击链需要连续搞定很多点，涉及方方面面的技术，工作量也大。当然除非特别天才的人，比如lokihardt，他能发现别人发现不了的问题，也很专注。拉斯维加斯那个黑客比赛，他带韩国队得过一次冠军和两次亚军。他退出之后韩国队就垫底了。</p><p>卢泓言：你意思是，技术越发展，个人英雄主义会减弱。</p><p>郑文彬：因为技术越来越复杂，需要团队和系统。一个人比较难把所有事都做到位。</p><p>卢泓言：进攻也是防守的手段吗。万一守不了，只能打过去。就像核武器，相互震慑。</p><p>郑文彬：以攻为守。不过这个太敏感了。国与国之间可能是这样。</p><p>卢泓言：漏洞是其中的关键吗。</p><p>郑文彬：漏洞既能攻又能防。这几年我们一共提交了2000多个漏洞，质量是全球第一的。另一方面，老周一直在呼吁，我们的漏洞不要出境或者被国外利用。</p><p>卢泓言：什么是黑客精神。</p><p>郑文彬：看到不爽的事，用自己的技术去把它搞正确。我高中的时候觉得文曲星很慢，就去把他的程序改了，快很多，又把它的词库删了，往里面装我喜欢的游戏和小说。</p><p>卢泓言：你父母说考上重点高中就给你买电脑，但后来没兑现。然后你就不好好学习了，所有时间都玩编程。这也是黑客精神吧。</p><p>郑文彬：本质上也是，用行动来抗议。这几天我在住的酒店，想放音乐。可是酒店的机器放不了，我就把它的线给改了。这是一个习惯吧，看到不爽的就立刻动手。</p><p>卢泓言：孙猴子知道了自己只被封了个喂马的芝麻官，然后大闹天宫。</p><p>郑文彬：有个台湾人叫朱邦复，仓颉输入法的发明人，他是我的精神启蒙导师。他写了本书叫「汇编语言与禅」。他讲，现在电脑的性能越来越高，烂程序也能跑，但你也要用尽你的能力把程序尽量写的优雅和简洁。这也是黑客精神，不管环境如何，一直追述极致，精简。</p><p>卢泓言：现在我们面对面。听说最强的黑客能够把旁边的人银行卡和手机里的信息都拿走。真能做到吗。</p><p>郑文彬：那是违法的。其实对个人来说，如果你的系统都升级到最新，不乱开东西，密码都设好，黑你的成本太高了。沙特从以色列买的那个漏洞很高级，只要知道手机号码就能黑进去，不过就很贵，5000万美金。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/7.webp" alt="7"></p><p>务必确认下眼神</p><p>卢泓言：你们拯救的财富有多少。</p><p>郑文彬：2016年我做过一个ppt，说我们一年挖出的漏洞得到多少百万美金的奖励。如果把这些漏洞拿到黑市上去卖，可以是很多倍。</p><p>卢泓言：一个漏洞值多少钱，取决于谁买它，用来做什么。比如沙特那个。</p><p>郑文彬：老周今天会上说，以色列人说确实卖了一个漏洞给沙特，不过他们觉得5000万美金太便宜了。有些特别稀缺的漏洞，就算花钱也买不到。</p><p>卢泓言：你在会上把NSA的武器存量称作“核爆”。</p><p>郑文彬：它的武器存量就像巨型冰山，冰山之下是冰山之上的十倍。冰山之上有人尽皆知的两次“核爆”。一件是2010年，利用“震网”病毒让伊朗核计划流产。一件是2017年，“永恒之蓝”从NSA武器库流出，迅速席卷150个国家和地区。20万台电脑被感染，直接经济损失500多亿人民币。NSA是不惜成本、不择手段。比如2004年它花了1000万美元收买RSA公司，植入算法后门。</p><p>卢泓言：打网络战，中国的缺陷在哪里。</p><p>郑文彬：我们的技术虽然不是最强，但前三是没问题的。相对还是弱在理念。中国在安全上的投入是信息化的1%，美国是10%。NSA每年花750亿美金，其中有个攻击性的绝密黑客部门TAO，花100多亿。韩国有个best of best计划，从学校选种子，一千人里选一个，选出来就不用服兵役，拿大企业的offer。有群众基础，才有天才。像足球一样。</p><p>卢泓言：天赋是先天的。选拔和培养是后天的。这两者是不是有矛盾。</p><p>郑文彬：没矛盾。你不去选拔和激发，过了黄金期，他就永远埋没了。比如F1，中国这么多人，只出了一两个。人家是六七岁就去开了。错过这个时间，就算有天赋也出不来了。</p><p>卢泓言：种子确实是那个种子。可是如果没有阳光雨露，它长不出来。</p><p>郑文彬：嗯。其实我们也有lokihardt这样的人。比如MSRC排名第二的招啟汛。他23岁。我们招人，也看他们的思维方式，如果没有天赋再努力也很难。</p><p>卢泓言：从代码和攻防上能不能看出各国的差异。</p><p>郑文彬：东欧和俄罗斯的黑客很喜欢用算法，他们数学很强。美国人也喜欢用算法，卡巴斯基就把NSA叫做“方程式”，NSA是全世界单独雇佣最多数学、计算机和语言专家的机构。不同的国家做事方式不同。我们一般拿到一个东西，就大概能看出来是谁的特点。</p><p>卢泓言：你干活儿的时候会听音乐吗。</p><p>郑文彬：一般会听。</p><p>卢泓言：那音乐对于你干活儿是个什么东西。我会觉得是骚扰。</p><p>郑文彬：不是骚扰。是一个状态。伴随进入一种状态。</p><p>卢泓言：黑客都是孙猴子。你怎么管他们。</p><p>郑文彬：各有各的性格，天才都比较任性。只要不违背公司大的原则，尽量满足他们，比如想说点啥，干点啥。好像现在业内只有360的黑客出去打比赛挣的奖金全部自己拿。其他公司是要分一部分给集体的。</p><p>卢泓言：为什么让一个人全拿。</p><p>郑文彬：如果他不在360，也一样可以出去打比赛拿奖金。360vulcan从2014年到现在，核心团队没有一个人离开。这是很罕见的，外面也有公司高薪挖他们。</p><p>卢泓言：为什么你们能留住人，而且取得最好的成绩。</p><p>郑文彬：360专注。其它大公司也会养一些安全的人，但不是它的主业。有时候也会让他们做一些业务，很难持续保持做这一件事。其实这些人虽然很“独”，但他们也非常享受跟和自己一样的人在一起玩一个事情的氛围。</p><p><img src="/images/%E6%82%9F%E7%A9%BA%E8%BD%AC%E4%B8%96%E9%BB%91%E5%AE%A2%E4%B9%8B%E7%8E%8B/8.webp" alt="8"></p><p>面见黑客之王</p><p>卢泓言：管人这几年，你自己有变化吗。</p><p>郑文彬：以前是自己想怎么样就怎么样。现在我跟他们谈心的时间甚至比做技术研究的时间还多。</p><p>卢泓言：哈哈。孙悟空变成唐僧了。那周鸿祎是怎么管你的。</p><p>郑文彬：他可能会觉得我比较难搞吧。哈哈。其实老周一直是个黑客。他身上的黑客精神很突出。他知道黑客需要什么。</p><p>卢泓言：我觉得3Q大战是真正黑客干的事。</p><p>郑文彬：他大学时卖杀毒卡。后来在方正也是觉得你们做的事不行，我就自己出去做一个。</p><p>卢泓言：你19岁那年老周怎么说动你的。</p><p>郑文彬：他们把我叫到北京。老周坐在我对面，说，你在论坛里帮助的人是有限的，加入我们，能帮更多的人。</p><p>卢泓言：打动孙猴子还是靠讲道义，不能硬来。</p><p>郑文彬：老周还说他要做什么事，说我可以帮他。</p><p>卢泓言：你从他身上学到什么。</p><p>郑文彬：老周对我个人性格影响挺大的。我19岁就跟他一起，12年了。老周很直接。他不受条条框框的限制，他会直接跨过去。我有时候可能急躁，看到什么不对的事就直接说了，不拐弯。</p><p>卢泓言：老周这两年外界感觉变化很大，能收敛住。其实过往皆为序章，大闹天宫和各种挫折只是练手。网络战争、国家安全，这是你们的西天取经。</p><p>郑文彬：我也是在改变。前几年在论坛里怼人，人家说我不留情面，锋芒太盛了，不敢来认识我。我其实在现实里是很随和的。他们认识我之后说我跟线上完全不是一个人。</p><p>卢泓言：我也是这样。你说错了，我给你指出来，是一种关心，恨铁不成钢。</p><p>郑文彬：这种性格，喜欢你的人特别喜欢，不喜欢你的人就特别不喜欢。</p><p>卢泓言：人都是有缺陷的。这些文化人、媒体人抓住人心智里的漏洞去植入负面的情绪和观点。另外一些人就去清除这些情绪和观点。码字的和拍片的人也都是黑客，都分正邪。</p><p>郑文彬：有人，就有攻防。</p><p>卢泓言：无人机会给安全什么新隐患。</p><p>郑文彬：整个东京都不让放无人机。西藏也不让。我买了一个无人机。可是北京六环里不让飞了。我就去潭柘寺，到了看到一块牌子，不准放无人机。无人机是个蛮大的隐患。在机场已经有无人机让飞机不能起飞。</p><p>卢泓言：5G给安全带来什么新变数。</p><p>郑文彬：老周今天说的，5G实际上是为物联网准备的。物联网设备的数目有可能是电脑数目的几百倍。这让攻的可能性更多，守的难度更大，任何一个5G接入设备都可能成为攻击点。</p><p>卢泓言：之前虚拟世界就是虚拟世界。可物联网把物理世界也变成了虚拟世界的一部分。</p><p>郑文彬：物理设备被攻击之后，可能造成的是物理伤害。这反过来说明为什么网络战会是战争的首选。网络战一样可以摧毁电站、交通、基础设施，成本低、烈度可控、效果可能比扔导弹更好。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资深技术Leader曹乐：如何成为技术大牛</title>
      <link href="/2020/02/05/post/%E8%B5%84%E6%B7%B1%E6%8A%80%E6%9C%AFLeader%E6%9B%B9%E4%B9%90%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%8A%80%E6%9C%AF%E5%A4%A7%E7%89%9B/"/>
      <url>/2020/02/05/post/%E8%B5%84%E6%B7%B1%E6%8A%80%E6%9C%AFLeader%E6%9B%B9%E4%B9%90%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%8A%80%E6%9C%AF%E5%A4%A7%E7%89%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/QaBTm_9AJC01Isr3LLR3aw">资深技术Leader曹乐：如何成为技术大牛</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>双生说：曹乐是典型学霸，清华本硕，多年互联网大厂研发经验，所以“资深”。我刚到新部门的时候，约各位合作部门的Leader请教，也算帮我做新岗位入职的“平稳降落”。印象最深的，就是作为技术Leader的曹乐，一点都不像技术——他和我谈对业务的理解，各个维度的见解与想法，让人印象深刻。然后，他很热情的帮我安排了他团队几个同学的1-1，帮助我了解了更多从技术视角对业务与技术团队协同、共创的思考。后来，开始深入合作，发现合作的技术同学，不仅仅技术上追求精进，而且是真正的也能够跳出来去看业务全局。能跳出来，能跳进去。</p><p>这封信，是曹乐写给团队的。如何成为技术大牛（来自另一学霸同事的评论，感谢）：寻找范式、刻意练习、及时反馈；垂直打透、横向迁移、深度复盘；聪明人要下笨功夫。</p><p>Enjoy~</p></blockquote><p>很多同学都有关于工程师该如何成长的问题，大家普遍对如何成长为牛人，如何获得晋升，如何在繁忙的工作中持续学习充满了困惑，这其实是每一位同学成长过程中必经之路。最近几次1-1也和同学聊过这方面的问题。在这里也想跟大家分享一下我的一些心得。</p><p>同学们普遍对成长充满了焦虑感。工作太忙没时间学习，需求太多太琐碎感觉自己没什么进步，做技术是不是做到35岁以后就没人要了，等等，都是对成长焦虑的体现。在这里我想说的是，这种焦虑是正常的，所有的渴望，在内心的投射其实都是焦虑。任何一个渴望成长的人，不管处于什么阶段，一线工程师，架构师，还是总监，副总裁，其实内心中都是充满了焦虑的，无一例外。对于这种焦虑，我们所要做的是接纳，而不需要过度担忧。这种焦虑并不是说，想明白如何成长了就会没有了，到了某个阶段就会没有了的。成长的脚步和期待一刻不止，内心的焦虑也一刻不会停歇。正是这种焦虑感，驱使你写代码追查问题到星夜，驱使你牺牲休息娱乐的时间和一本本厚厚枯燥的书作伴，驱使你不断努力向前，不舍昼夜。相反的，如果内心中没有这种焦虑，反而是值得担忧的。这可能说明已经习惯呆在自己的舒适区了。在现在这样一个高速发展的社会，以及我们这样一个高速发展和变化的行业，失去对成长的渴望和焦虑反而是一个非常危险的信号。</p><p>所谓的程序员35岁危机，其实背后的根本原因是，有太多太多人在工作几年以后，就觉得自己什么都会了，之后的十几年工作只不过是头2-3年的简单重复而已。在我们这样一个行业里，在招聘的时候，如果摆在管理面前的两个人，一个是初出茅庐或刚工作2-3年，充满了对成长的渴望；另一个工作十多年了但水平和工作2-3年的人差不多，只是更熟练一些，不过在舒适区已经躺了十年了。如果负责招聘的是你，你会做出什么样的选择？</p><p>而另一方面，其实是高端人才在行业内的极度极度稀缺。大家可以想一想，我们部门上一次招聘到D10及以上的同学是什么时候？从业务平台部2016年中成立到现在，一个都没有过。D9同学也是凤毛麟角，一年能招到1-2个就足够可以偷着乐了。面试碰到牛人的时候，就如同相亲碰到女神一样激动。这其实在行业内是非常普遍的现象，真正的大牛太稀缺了。在这样一个行业里，如果一个人能够持续成长，能力和工作年限成正比的持续提升，这样的人，任何时候在行业里都是被疯抢，怎么可能会遇到任何年龄的危机呢？</p><p>每一个业务平台技术部的同学，都应该立志成为这样的大牛，持续学习和成长。</p><p>如何学习，其实是有方法论的，那就是刻意练习。所谓的10000小时成为大牛的理论是片面的，如果只是简单重复10000小时，是不可能成为大牛的。刻意练习包含了三个步骤。第一，找到你要学习的这个领域体系的范式（pattern）；第二，针对每个范式刻意的反复学习和练习；第三，及时反馈。</p><p>大家在过往的工作和学习生活中，或多或少都在实践着刻意练习。拿面临高考的中学生举例子，好的学生通常是把一门功课拆成了很多知识点（寻找pattern），然后针对知识点以及他们的排列组合，有针对性的反复做各种难度的题（刻意练习），每次做完题都对一下答案看看正确与否，如果错了就思考，记录，复盘（持续及时反馈）。这样的学习方法就是事半功倍的。而事倍功半的学习方法，就是不分青红皂白拿起一本习题或卷子就拼命做，我上学的时候身边不少同学非常勤奋但成绩并不好，多半都是这个原因。再举一个我最近在学打羽毛球的例子，正确的学习方法是把打羽毛球拆解成步法和手上动作，小碎步，米字步，正反手挑球，放网，正手和头顶高远球吊球杀球等（寻找pattern），然后针对每一个动作反复练习（刻意练习），然后请教练或者录下来看视频纠正自己的动作（及时反馈）；而错误的学习方法是，上来就盲目找人打比赛，以赛代练，这样的进步是很慢的，而且错误的动作形成习惯以后未来反而很难纠正。</p><p>当学习方法不正确的时候，刻苦的学习常常只是看起来很勤奋，并没有应有的效果。当接触一个陌生领域的时候，错误的学习方法是不带目的性，上来就找一堆相关的大部头开始啃。而正确的学习方法应该是快速梳理该领域的知识点，形成框架体系（寻找pattern），这里有些小窍门可以快速构建起一个领域的知识点体系，例如看一些该领域的综述性或开创性的文章（看论文，别瞎看网上的文章），或者找本该领域综述性的教科书看它的目录（注意，好的教科书的目录往往就是这个领域的知识框架，内容倒不一定非要看下去）。然后，针对每个知识点，找书里的相关章节，该领域相关paper里的相关section深入学习，建立起自己对这个知识点的理解（刻意练习）。最后，再把知识点和现实工作中的情况（自己工作，或其他公司相关的工作）进行对照（及时反馈），从而建立对一个知识点的深度理解，最后融会贯通建立对一个领域的理解。这样说可能有点抽象，拿我当年学习分布式存储的过程为例子，先结合自己的工作内容梳理出需要深入了解的知识点（例如，元信息组织，Meta Server设计和HA，副本组织和管理，Recovery，Rebalance，单机存储引擎，数据&#x2F;元信息流，纠删码，一致性，多租户，存储介质，网络环境和IDC等等），同时看很多综述性的材料，梳理分布式存储的知识点（有网上各种整理的比较好的文章，也有从各种系统实现的paper里抽出），不断迭代构建分布式存储领域的知识点（寻找pattern，这是最难的一个过程）；然后针对每一个知识点，找相关材料进行深度学习，例如，对于分布式一致性，需要阅读CAP理论，Paxos的论文，Raft的论文等等以及周边的很多材料（刻意练习）；然后找各种系统实现的论文或文章，比如GFS，Dynamo，Aurora，OceanBase，Ceph，Spanner等等，看看和对比它们在一致性上是如何考虑和取舍的，当然，最重要的是结合自己工作中的反复实践和所学知识点进行比对（及时反馈）。这三个阶段并不是割裂的，而是周而复始的，经常会在刻意练习和及时反馈的学习过程中，发现自己遗漏的知识点，或者发现自己梳理的两个知识点其实是重合的。通过这种交叉比对，以及在实践中不断检验的方式建立的知识点是非常可落地的，而不会看了几篇论文以后就人云亦云。拿分布式存储的一致性举例子，如果不是反复对比、思考和反复实践，你不会发现GFS论文里最难的一段，多个Writer对一个文件进行append的逻辑，在实践中根本没用；你也不会发现看起来优雅而学术的CAP三选二的理论，实践中压根不是这么完美，很多时候只能三选一；你也不会发现Dynamo论文里的Vector Clock，网上有无数文章摇头晃脑的解读，但在Amazon的应用场景里是个典型的over design，Cassandra在这点就务实很多。</p><p>这时候大家可能会有个疑问，工作本身就如此繁忙了，哪里能抽出足够多的时间去学习？</p><p>其实工作和学习本身，是不应该被割裂的。工作本来就应该是学习的一部分，是学习中的实践和及时反馈的部分。学习如果脱离工作的实践，其实是非常低效的。因此每个同学应该对自己工作所在的这个技术和业务领域进行系统性的学习，并在工作中反复实践和验证。不同的领域之间其实是融汇贯通的，当你对一个领域精通并总结出方法论以后，很容易就能上手别的领域。因此花几年实践彻底研究透一个领域，对于刚工作几年的同学来说，是非常重要，甚至是必须的，也只有在一个领域打透之后才谈得上跨领域迁移，去拓展自己的知识面。更直接的说，对于一个领域还未完全掌握的同学，深度是最重要的，不用想广度的事情，等掌握了一个领域之后，再去拓展广度就变得很容易了。这里一个常见的误区是，学习的内容和工作的领域没有太多直接的关系。例如，我以前曾经花了非常大的功夫去读Linux内核的源代码以及很多相关的大部头，几乎花掉了我将近两年的所有空闲时间，然而在我这些年的工作里，几乎是没有用处的，最多就是有一些“启发”，ROI实在是太低了，现在也忘得差不多了。更重要的，软件工程是一门实践科学，从书本上得到的知识如果没有在实践中应用和检验，基本上是没有用处的。举一个例子，很多优秀的架构师，尽管日常工作中可能反复在用，但未必说得出开闭原则，里氏替换原则，迪米特法则等等，反过来，对面向对象设计这7大原则出口成章的人，很多其实离真正的架构师还远得很，有些甚至只是博客架构师而已。实践远远比看书，看文章重要得多，上文所述的我构建自己分布式存储知识体系的过程，看起来好像都是看材料，看论文，而实际上80%的收获都来源于带着理论的实践，和从实践中总结沉淀的理论。因此，彻底搞明白自己工作所在的技术和业务领域，是最务实高效的做法，工作和学习割裂，会导致工作和学习都没做好。</p><p>这时候大家可能会有另一个疑问，感觉日常工作非常琐碎，学不到什么东西，怎么办？</p><p>如果把学习分成从书本中学，和从工作中学这两种的话，那毫无疑问，工作中的“知识密度”，比起书本的“知识密度”，肯定是要低很多的，因为书本里的知识，那都是人家从他们的工作中抽象总结出来的。这也是为什么大家普遍觉得日常工作“琐碎”。然而工作中每个点滴的琐事与平凡，都是可以抽象总结成为方法论的，更别说工作所在的领域自身的博大精深了。从日常工作中学习的秘诀，就是“行动中思考”。</p><p>对于每一个软件工程师，最重要的两个能力，是写代码的能力和trouble shooting的能力。并且，要成为优秀的架构师，出色的开发能力和追查问题的能力是一切的基础。提高写代码的能力的核心，首先在于坚持不断的写，但更重要的，在于每天，每周，持续不断的review自己之前的代码；同时，多review牛人写的代码，比如是团队里你觉得代码写的比你好的同事，比如社区里以代码漂亮著称的开源代码（作为一个C++程序员，当年我的榜样之一是boost库）。一旦觉得自己之前的代码不够好，就立刻复盘，立刻重构。更重要的是，多思考自己代码和好的代码之间不同之处背后的为什么，通常这就是为什么这些代码更好的背后的秘密。特别要说明的是，代码规范除了知道是什么外，要格外重视思考每一个代码规范背后的为什么。代码规范的每一句话，背后无一例外都是一片江湖上的血泪史。要提高trouble shooting的能力，关键在于要深度复盘自己遇到的每一个问题，包括线上的，包括测试发现的，寻找每一个问题，每一次事故背后的root cause，并且思考后续如何避免同类问题，如何更快的发现同类问题。要对团队内外遇到的所有问题都要保持好奇心，关注一下周边的事故、问题背后的root cause。Trouble shooting能力的提高是几乎无法从书本上得到的，完全来源于对每一个问题的深度思考，以及广泛积累每一个问题。对于架构师而言，可能未必在一线写代码了，但看团队中一个架构师是否真正牛逼的一个很重要标准，就是看他是否能够追查出团队其他同学查不出来的问题。我见过的一个真正牛逼的架构师，对于系统中疑难杂症，通常问几个问题，就能大致猜出是哪里出的问题，以及可能的原因是什么，准确程度如同算命，屡试不爽，令人叹为观止。</p><p>对于一个架构师，除了更加优秀的代码能力和trouble shooting能力外，需要构建相对完整的当前技术领域的知识体系，需要有体系化的思维能力，需要对技术所服务的业务要有非常深入的了解。体系化的思维能力，来源于两个方面。一方面是在日常工作中，对每一个接口设计，每一个逻辑，每一个模块，子系统的拆分和组织方式，每一个需求的技术方案，每一个系统的顶层设计，都要反复思考和推敲，不断的复盘。另一方面，需要大量广泛的学习行业内相似系统的架构设计，这其实就是开天眼，只是技术相对来说，行业内的交流更加频繁，淘宝、美团、百度、Google、Facebook、Amazon等各个公司介绍系统架构的论文和PPT铺天盖地，需要带着问题持续学习。除了技术领域本身外，架构师需要非常了解业务上是如何使用我们的系统的，否则非常容易over design，陷入技术的自嗨中，这也是为什么我说Amazon Dynamo论文里讲的Vector Clock是个over design的原因。另一方面，很多时候技术上绕不过去的坎，可能非常复杂的实现，往往只需要上层业务稍微变通一下，就完全可以绕过去，这也是为什么我说GFS论文里，多个Writer同时Append同一个文件是个根本没用的设计（实际上Google内部也把这个功能去掉了）。这也是为什么我在咱们部门内反复强调大家需要深入了解业务，因为达到同样的业务目标，可能稍微改一下产品方案就可以让需求的技术实现变得无比简单。只有真正知道上层业务是如何使用系统的，才可能真正做好架构。 深入了解业务并不难，对于每个同学，只要对于每一个接到的需求，对于每一个需求评审中的需求，对于周边同学或团队要做的需求，都深入思考为什么业务要提出这个需求，这个需求解决了业务的什么问题，有没有更好的方案。遇到不明白的多和周边同学、产品、运营同学请教。最怕的是自己把自己限定为纯粹的研发，接到需求就无脑做，这等于放弃了主动思考。衡量一个人是不是好的架构师，也有一个方法。对于一个需求，如果他给出了好几个可行的方案，说这些方案也可以，那些方案也可以，往往说明他在架构师的路上还没有完全入门。架构师的难点不在于给出方案，而在于找到唯一的那一个最简单优雅的方案。</p><p>总结起来看，行动中思考，就是始终保持好奇，不断从工作中发现问题，不断带着问题回到工作中去；不断思考，不断在工作中验证思考；不断从工作中总结抽象，不断对工作进行复盘，持续不断把工作内容和全领域的知识交叉验证，反复实践的过程。</p><p>在工作所在的技术和业务领域中刻意练习，加上行动中思考，就是成为技术大牛的秘诀。</p><p>看起来方法也不复杂，为什么大牛还是非常稀少？</p><p>尽管我们通篇都在讲方法，但其实在成为技术大牛的路上，方法反而是没那么重要的。真正困难的，在于数年，数十年如一日的坚持。太多人遇到挫折，遇到瓶颈，就觉得手头的事情太乏味枯燥，就想要换一个方向，换一个领域，去学新的技术，新的东西。而真正能够成为大牛的，必须是能够青灯古佛，熬得住突破瓶颈前长时间的寂寞的，必须是肯下笨功夫的聪明人。因此，和坚持相比，方法其实并没有那么重要。</p><p>和大家共勉。</p><p>（完）</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Full GC排查流程</title>
      <link href="/2020/02/04/FullGC%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/02/04/FullGC%E6%8E%92%E6%9F%A5%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>针对之前出现过的full gc情况，这里给出排查的流成性建议，以后如果出现此类事件的时候，希望能够按照流程一步一步排查，防止手忙脚乱～（勿喷）</p><p><strong>A.</strong> 为了第一手确定full gc情况，先立即申请某一台主机权限。如果自己有dump的权限的话，先快速进行dump日志来观察一下具体的情况。 </p><p><strong>B.</strong> 10-20分钟无法找到原因并解决问题的话，联系PE协助。full gc频繁的话往往是因为内存的问题，但是有时候也可能某些线程运行不当出现代码BUG导致，所以如果此时没有解决问题的话需要快速重启服务器，但是需要保留2台问题机器，以便继续跟踪问题。</p><p><strong>C.</strong> 拿到jmap和jstack的dump信息之后按照以下流程进行排解：<br>    1.针对jstack的日志，需要确认是否有正在执行循环的线程，因为循环过程往往容易出现过多的中间数据对象。<br>    2.针对jmap日志，基本上只要看top的几个信息就行，如果top1和top2的大小差一个数量级的话，基本上top2就不用看了，直接关注最大的即可。在基本了解了内存的对象情况之后开发自行确认能否立即定位问题。 </p><p><strong>D.</strong> 如果此时依然无法定位问题，查看监控平台，从自己服务的provider和consumer信息中查看是否有异常的调用情况（平均RT突增，调用曲线跟发生full gc的时间曲线吻合，响应异常突增等。），如果此时发现了异常的调用，则跟进异常的接口信息，从代码逻辑分析其与jmap日志的内存情况是否有直接关联。如果能从这里基本定位业务代码，则立马与相关的业务方开发进行联系，确定以下具体的影响面，如果影响不大的话考虑里面在SOA上先把服务禁掉，以保证自身服务的可用性，然后在降低影响的情况下自己再另行修改。如果影响比较大的话，则需要立马快速修改代码，并在修改点做好开关，防止修改引起的BUG，然后立马通知主管，联系PE上线发布。</p><p><strong>E.</strong> 如果通过步骤C依然无法定位问题，则需要在D进行的同时并发执行另外一个操作，通过Eclipse Ememory Analyer查看更加详细的运行信息，然后结合D中分析到的内容进行问题排查。</p><p><strong>F.</strong> 基本上到这里问题都能找到，然后优化后续的操作是必经的逻辑。最后容易遗漏的一点是，检查现在的JVM参数是否可以优化，因为JVM参数往往关系着full gc 的频率问题，如果参数合理的话可以有效的减少一些STW引起的停顿时间，所以这一步还是有必要进行的。</p><p>基本上在出现线上问题的时候容易慌乱，对于jvm的一些命令页容易生疏，网页上查找的各式各样的命令容易眼花缭乱，这里就总结一下在以上过程中可能用到的命令情况： </p><ul><li>查看内存中占用量前10的对象情况： jmap -histo:live pid | head -n 10 </li><li>生成堆内的dump文件：jmap -dump:live,format&#x3D;b,file&#x3D;&#x2F;tmp&#x2F;dump.hprof pid 如果dump文件过大不利用传输的话需要进行压缩，压缩命令：tar czvf &#x2F;tmp&#x2F;dump.tar &#x2F;tmp&#x2F;dump.hprof 解压命令：tar zxvf &#x2F;tmp&#x2F;dump.tar</li><li>查看线程日志：jstack pid | grep -i “Deadlock” –color&#x3D;auto 着重查看是否有死锁线程或者Waiting on condition（等待唤醒）或者Blocked（阻塞）或者Waiting on monitor entry（等待获取锁）线程。</li><li>如果对于监控平台监控的细节比较模糊，可以使用jstat 命令监控详细的内存各个区域情况，下面给出参考性脚本（见下）：</li><li>在从远程服务器往本地拷贝文件的时候需要使用scp命令： scp username@remoteIp:&#x2F;tmp&#x2F;dump.hprof &#x2F;temp&#x2F;dump.hprof</li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Full GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-CI环境搭建与SpringBoot项目CI配置总结</title>
      <link href="/2020/02/04/GitLab-CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8ESpringBoot%E9%A1%B9%E7%9B%AECI%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/04/GitLab-CI%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8ESpringBoot%E9%A1%B9%E7%9B%AECI%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="GitLab-CI环境搭建"><a href="#GitLab-CI环境搭建" class="headerlink" title="GitLab-CI环境搭建"></a>GitLab-CI环境搭建</h2><h3 id="运行GitLab-Runner容器"><a href="#运行GitLab-Runner容器" class="headerlink" title="运行GitLab Runner容器"></a>运行GitLab Runner容器</h3><blockquote><p>参考<a href="https://docs.gitlab.com/runner/install/docker.html#docker-image-installation-and-configuration">Run GitLab Runner in a container - Docker image installation and configuration</a></p></blockquote><p>执行下述命令运行gitlab-runner容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="注册GitLab-Runner"><a href="#注册GitLab-Runner" class="headerlink" title="注册GitLab Runner"></a>注册GitLab Runner</h3><blockquote><p>参考<a href="https://docs.gitlab.com/runner/register/index.html#gnu-linux">Registering Runners</a></p></blockquote><p>使用 <code>docker exec -it gitlab-runner /bin/bash</code> 命令进入 gitlab-runner 容器命令行环境。</p><p>执行 <code>gitlab-runner register</code> 命令开始注册一个 runner。</p><p>注册时只有输入共享Runner的注册令牌（token）才能注册为共享Runner。关于Runner executor的介绍可以查看 <a href="https://docs.gitlab.com/runner/executors/README.html">Executors</a>。Runner executor选择Docker时会要求填写要使用的默认docker镜像。</p><h2 id="SpringBoot项目的CI配置"><a href="#SpringBoot项目的CI配置" class="headerlink" title="SpringBoot项目的CI配置"></a>SpringBoot项目的CI配置</h2><h3 id="安全变量"><a href="#安全变量" class="headerlink" title="安全变量"></a>安全变量</h3><p>GitLab CI&#x2F;CD的安全变量有两种，群组安全变量和项目安全变量，群组安全变量可作用于当前群组下所有项目以及子群组项目，递归继承；项目安全变量只作用当前项目。</p><p>实际项目配置的群组变量有：CI_REGISTRY（本地Docker Registry的地址），项目变量有：CI_REGISTRY_IMAGE（项目构建的docker镜像名称）</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-jre</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> target/discovery-server-1.0.0.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">10030</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djava.security.edg=file:/dev/./urandom&quot;</span>, <span class="string">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>, <span class="string">&quot;-Xmx128m&quot;</span>, <span class="string">&quot;-Xms64m&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p>.gitlab-ci.yml文件可以使用的变量除了手动配置的安全变量外，默认还可以使用预定义变量（详情见<a href="https://docs.gitlab.com/ee/ci/variables/">GitLab CI&#x2F;CD Variables</a>）。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker:dind</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;--insecure-registry=172.17.0.1:5000&quot;</span>]    <span class="comment"># 将本地Docker Registry私服设置为insecure，避免registry默认需要https才能访问</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">maven-package:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5-jdk-8-alpine</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">install</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">target/*.jar</span>    <span class="comment"># 将maven构建成功的jar包作为构建产出导出，可在下一个stage的任务中使用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE&quot;</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE&quot;</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG&quot;</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">&quot;$CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG&quot;</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="Runner容器的配置"><a href="#Runner容器的配置" class="headerlink" title="Runner容器的配置"></a>Runner容器的配置</h2><p>将maven构建runner容器使用的maven仓库使用数据卷方式进行共享，解决容器每次构建时都要重新下载依赖的问题。具体方法为使用 <code>docker exec -it gitlab-runner /bin/bash</code> 进入gitlab-runner容器，编辑 <code>/etc/gitlab-runner/config.toml</code> 文件，在maven构建runner下的volumes加上 <code>/root/.m2</code> 本地仓库的数据卷映射关系。</p><p>docker构建runner的privileged设置为true，以root用户身份进入容器进行构建任务，避免了由于权限不足无法访问&#x2F;var&#x2F;run&#x2F;docker.sock的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">concurrent = 6</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public docker runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;5223e807ba2c42b18e2aadeceb0e0b&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    registry_mirrors = [&quot;https://ub9x5g6o.mirror.aliyuncs.com/&quot;]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;docker:latest&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public maven runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;b97734914a435c7f3409bea71e122a&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;maven:3.5-jdk-8-alpine&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;, &quot;/home/maven/.m2:/root/.m2&quot;]</span><br><span class="line">    pull_policy = &quot;if-not-present&quot;</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public node runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;e0dea1b0cb42a8d2e1df94ee442b82&quot;</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    extra_hosts = [&quot;git.yupaits.com:172.17.0.1&quot;]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;node:8-alpine&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = [&quot;/cache&quot;]</span><br><span class="line">    shm_size = 0</span><br><span class="line">  [runners.cache]</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;public ssh runner&quot;</span><br><span class="line">  url = &quot;http://172.17.0.1:800/&quot;</span><br><span class="line">  token = &quot;266dc28d04f012a5ead3987c1f004e&quot;</span><br><span class="line">  executor = &quot;ssh&quot;</span><br><span class="line">  [runners.ssh]</span><br><span class="line">    user = &quot;root&quot;</span><br><span class="line">    password = &quot;password&quot;</span><br><span class="line">    host = &quot;172.17.0.1&quot;</span><br><span class="line">    port = &quot;22&quot;</span><br><span class="line">    identity_file = &quot;/root/.ssh/id_rsa&quot;</span><br><span class="line">  [runners.cache]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab-CI </tag>
            
            <tag> GitLab </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java枚举类实例</title>
      <link href="/2020/02/04/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E4%BE%8B/"/>
      <url>/2020/02/04/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.ibm.com/developerworks/cn/java/j-lo-enum/index.html">Java 语言中 Enum 类型的使用介绍</a></p><p>枚举类型（Enumerated Type） 很早就出现在编程语言中，它被用来将一组类似的值包含到一种类型当中。而这种枚举类型的名称则会被定义成独一无二的类型描述符，在这一点上和常量的定义相似。不过相比较常量类型，枚举类型可以为申明的变量提供更大的取值范围。</p><span id="more"></span><h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p>在 Java 中通过常量方式定义彩虹的七种颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RainbowColor</span> &#123;</span><br><span class="line">    <span class="comment">// 红橙黄绿青蓝紫 其中颜色的常量定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ORANGE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">YELLOW</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CYAN</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PURPLE</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，可以在程序中直接引用这些常量。但是，这种方式还是存在着一些问题。</p><ul><li><p>类型不安全</p><p>  由于颜色常量的对应值是整形，所以程序执行过程中很有可能给颜色变量传入一个任意的整数值，导致出现错误。</p></li><li><p>没有命名空间</p><p>  由于颜色常量只是类的属性，当你使用的时候不得不通过类来访问。</p></li><li><p>一致性差</p><p>  因为整形枚举属于编译期常量，所以编译过程完成后，所有客户端和服务端引用的地方，会直接将整数值写入。这样，当你修改旧的枚举整数值后或增加新的枚举值后，所有引用地方代码都需要重新编译，否则运行时就会出现错误。</p></li><li><p>类型无指意性</p><p>  由于颜色枚举值仅仅是一些无任何含义的整数值，如果在运行期调试时，你就会发现日志中有许多魔术数字，但除了程序员本身，其他人很难明白其奥义。</p></li></ul><h2 id="如何定义-Enum-类型"><a href="#如何定义-Enum-类型" class="headerlink" title="如何定义 Enum 类型"></a>如何定义 Enum 类型</h2><p>为了改进 Java 语言在上述方面的不足， 5.0 版本 SDK 发布之后，在语言层面上增加了枚举类型。枚举类型的定义也非常简单，用 enum 关键字加上名称和大括号包含起来枚举值体即可，上面的彩虹颜色可以用 enum 方式进行定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">RainbowColor</span> &#123;</span><br><span class="line">    RED, ORANGE, YELLOW, GREEN, CYAN, BLUE, PURPLE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义-Enum-类型"><a href="#定义-Enum-类型" class="headerlink" title="定义 Enum 类型"></a>定义 Enum 类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一周七天的枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WeekDayEnum</span> &#123;</span><br><span class="line">    Mon, Tue, Wed, Thu, Fri, Sat, Sun</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取当天的信息</span></span><br><span class="line"><span class="type">WeekDayEnum</span> <span class="variable">today</span> <span class="operator">=</span> readToday();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据日期来选择进行活动</span></span><br><span class="line"><span class="keyword">switch</span> (today) &#123;</span><br><span class="line">    Mon: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Tue: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Wed: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Thu: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Fri: <span class="keyword">do</span> something; <span class="keyword">break</span>;</span><br><span class="line">    Sat: play sports game; <span class="keyword">break</span>;</span><br><span class="line">    Sun: have a rest; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这些枚举的日期，JVM 都会在运行期构造成一个简单的对象实例一一对应。这些对象都有唯一的 identity，类似整形数值一样，switch 语句就是据此来执行跳转。</p><h2 id="如何定制-Enum-类型"><a href="#如何定制-Enum-类型" class="headerlink" title="如何定制 Enum 类型"></a>如何定制 Enum 类型</h2><p>除了以上这种最常见的枚举定义形式外，如果需要给枚举类型增加一些复杂功能，也可以通过类似 class 的定义来给枚举进行定制。比如要给 enum 类型增加属性，可以像下面这样定义：</p><h3 id="定制枚举类型"><a href="#定制枚举类型" class="headerlink" title="定制枚举类型"></a>定制枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 RSS(Really Simple Syndication) 种子的枚举类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">NewsRSSFeedEnum</span> &#123;</span><br><span class="line">    YAHOO_TOP_STORIES(<span class="string">&quot;http://rss.news.yahoo.com/rss/topstories&quot;</span>), </span><br><span class="line">    CBS_TOP_STORIES(<span class="string">&quot;http://feeds.cbsnews.com/CBSNewsMain?format=xml&quot;</span>), </span><br><span class="line">    LATIMES_TOP_STORIES(<span class="string">&quot;http://feeds.latimes.com/latimes/news?format=xml&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String rss_url;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">NewsRSSFeedEnum</span><span class="params">(String rss)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rss_url = rss;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRssURL</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.rss_url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面头条新闻的枚举类型增加了一个 RSS 地址的属性，记录头条新闻的访问地址。同时，需要外部传入 RSS 访问地址的值，因而需要定义一个构造方法来初始化此属性。此外，还需要想外提供 getter 方法读取 RSS 地址。</p><h2 id="如何避免错误使用-Enum"><a href="#如何避免错误使用-Enum" class="headerlink" title="如何避免错误使用 Enum"></a>如何避免错误使用 Enum</h2><p>在使用 Enum 的时候有几个地方需要注意：</p><ul><li><p>enum类型不支持 public 和 protected 修饰的构造方法，因此构造函数一定要是 private 或 friendly 的。正因如此，枚举对象无法在程序中通过直接调用其构造方法来初始化。</p></li><li><p>定义 enum 类型的时候，如果是简单类型，那么最后一个枚举值就不用跟任何一个符号；但如果有定制方法，那么最后一个枚举值与后面代码要用分号 ; 隔开，不能用逗号或空格。</p></li><li><p>由于 enum 类型的值实际上是通过运行期构造处对象来表示，所以在 cluster(集群) 环境下，每个虚拟机都会构造出一个同义的枚举对象。因而在做比较操作时需要注意，如果直接用等号（&#x3D;&#x3D;）操作符，这些看似一样的枚举值一定不相等，因为这不是同一个对象实例。</p></li></ul><h3 id="避免错误使用-Enum-示例"><a href="#避免错误使用-Enum-示例" class="headerlink" title="避免错误使用 Enum 示例"></a>避免错误使用 Enum 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个一周七天的枚举类型</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WeekDayEnum</span> &#123; </span><br><span class="line">   Mon(<span class="number">1</span>), Tue(<span class="number">2</span>), Wed(<span class="number">3</span>), Thu(<span class="number">4</span>), Fri(<span class="number">5</span>), Sat(<span class="number">6</span>), Sun(<span class="number">7</span>); </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> index; </span><br><span class="line"></span><br><span class="line">   WeekDayEnum(<span class="type">int</span> idx) &#123; </span><br><span class="line">       <span class="built_in">this</span>.index = idx; </span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">()</span> &#123; </span><br><span class="line">       <span class="keyword">return</span> index; </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端程序，将一个枚举值通过网络传递给服务器端</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException; </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream; </span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream; </span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress; </span><br><span class="line"><span class="keyword">import</span> java.net.Socket; </span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumerationClient</span> &#123; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> UnknownHostException, IOException &#123; </span><br><span class="line">       <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(); </span><br><span class="line"> <span class="comment">// 建立到服务器端的连接</span></span><br><span class="line">       socket.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8999</span>)); </span><br><span class="line">   <span class="comment">// 从连接中得到输出流</span></span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream(); </span><br><span class="line">       <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os); </span><br><span class="line"> <span class="comment">// 将星期五这个枚举值传递给服务器端</span></span><br><span class="line">       oos.writeObject(WeekDayEnum.Fri); </span><br><span class="line">       oos.close(); </span><br><span class="line">       os.close(); </span><br><span class="line">       socket.close(); </span><br><span class="line">   &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端程序，将从客户端收到的枚举值应用到逻辑处理中</span></span><br><span class="line"><span class="keyword">package</span> example.enumeration.codes; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*; </span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket; </span><br><span class="line"><span class="keyword">import</span> java.net.Socket; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumerationServer</span> &#123; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123; </span><br><span class="line">       <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8999</span>); </span><br><span class="line"> <span class="comment">// 建立服务器端的网络连接侦听</span></span><br><span class="line">       <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept(); </span><br><span class="line"> <span class="comment">// 从连接中获取输入流</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream(); </span><br><span class="line">       <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is); </span><br><span class="line"> <span class="comment">// 读出客户端传递来的枚举值</span></span><br><span class="line">       <span class="type">WeekDayEnum</span> <span class="variable">day</span> <span class="operator">=</span> (WeekDayEnum) ois.readObject(); </span><br><span class="line"> <span class="comment">// 用值比较方式来对比枚举对象</span></span><br><span class="line">       <span class="keyword">if</span> (day == WeekDayEnum.Fri) &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is same as server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (day.equals(WeekDayEnum.Fri)) &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is equal to server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">           System.out.println(<span class="string">&quot;client Friday enum value is not same as server&#x27;s&quot;</span>); </span><br><span class="line">       &#125; </span><br><span class="line">       </span><br><span class="line"> <span class="comment">// 用 switch 方式来比较枚举对象</span></span><br><span class="line">       <span class="keyword">switch</span> (day) &#123; </span><br><span class="line">           <span class="keyword">case</span> Mon: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Monday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Tue: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Tuesday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Wed: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Wednesday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Thu: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Thursday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Fri: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Friday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Sat: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Saturday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> Sun: </span><br><span class="line">               System.out.println(<span class="string">&quot;Do Sunday work&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">default</span>: </span><br><span class="line">               System.out.println(<span class="string">&quot;I don&#x27;t know which is day&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">       &#125; </span><br><span class="line">       </span><br><span class="line">       ois.close(); </span><br><span class="line">       is.close(); </span><br><span class="line">       socket.close(); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client Friday enum value is same as server&#x27;s </span><br><span class="line">Do Friday work</span><br></pre></td></tr></table></figure><p>通过程序执行结果，我们能够发现在分布式条件下客户端和服务端的虚拟机上都生成了一个枚举对象，即使看起来一样的 Fri 枚举值，如果使用等号‘ &#x3D;&#x3D; ’进行比较的话会出现不等的情况。而 switch 语句则是通过 equal 方法来比较枚举对象的值，因此当你的枚举对象较复杂时候，你就需要小心 override 与比较相关的方法，防止出现值比较方面的错误。</p><h2 id="Enum-相关工具类"><a href="#Enum-相关工具类" class="headerlink" title="Enum 相关工具类"></a>Enum 相关工具类</h2><p>DK5.0 中在增加 Enum 类的同时，也增加了两个工具类 EnumSet 和 EnumMap，这两个类都放在 java.util 包中。EnumSet 是一个针对枚举类型的高性能的 Set 接口实现。EnumSet 中装入的所有枚举对象都必须是同一种类型，在其内部，是通过 bit-vector 来实现，也就是通过一个 long 型数。EnumSet 支持在枚举类型的所有值的某个范围中进行迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (WeekDayEnum day : EnumSet.range(WeekDayEnum.Mon, WeekDayEnum.Fri)) &#123;</span><br><span class="line">    System.out.println(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mon </span><br><span class="line">Tue </span><br><span class="line">Wed </span><br><span class="line">Thu </span><br><span class="line">Fri</span><br></pre></td></tr></table></figure><p>EnumSet 还提供了很多个类型安全的获取子集的 of 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EnumSet&lt;WeekDayEnum&gt; subset = EnumSet.of(WeekDayEnum.Mon, WeekDayEnum.Wed);</span><br><span class="line"><span class="keyword">for</span> (WeekDayEnum day : subset) &#123;</span><br><span class="line">    System.out.println(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mon</span><br><span class="line">Wed</span><br></pre></td></tr></table></figure><p>与 EnumSet 类似，EnumMap 也是一个高性能的 Map 接口实现，用来管理使用枚举类型作为 keys 的映射表，内部是通过数组方式来实现。EnumMap 将丰富的和安全的 Map 接口与数组快速访问结合到一起，如果你希望要将一个枚举类型映射到一个值，你应该使用 EnumMap。</p><h3 id="EnumMap-示例"><a href="#EnumMap-示例" class="headerlink" title="EnumMap 示例"></a>EnumMap 示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 EnumMap 对象，映射表主键是日期枚举类型，值是颜色枚举类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;WeekDayEnum, RainbowColor&gt; schema = </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;WeekDayEnum, RainbowColor&gt;(WeekDayEnum.class); </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123; </span><br><span class="line">    <span class="comment">// 将一周的每一天与彩虹的某一种色彩映射起来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; WeekDayEnum.values().length; i++) &#123; </span><br><span class="line">        schema.put(WeekDayEnum.values()[i], RainbowColor.values()[i]); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">System.out.println(<span class="string">&quot;What is the lucky color today?&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;It&#x27;s &quot;</span> + schema.get(WeekDayEnum.Sat));</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What is the lucky color today? </span><br><span class="line">It&#x27;s BLUE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符instanceof的用法</title>
      <link href="/2020/02/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6instanceof%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/02/04/Java%E8%BF%90%E7%AE%97%E7%AC%A6instanceof%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Java 中的 instanceof 运算符用来在运行时指出对象是否是特定类的一个实例。本文简要介绍下 instanceof 运算符的用法和注意事项。</p><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = object <span class="keyword">instanceof</span> class</span><br></pre></td></tr></table></figure><p>参数：</p><p>result - boolean 类型</p><p>object - 必选项，任意对象实例</p><p>class - 任意已定义的对象类</p><p>说明：</p><p>如果 object 是 class 的一个实例，则 instanceof 运算符返回 true，反之若 object 不是指定 class 的一个实例或 object 为 null，则返回 false。</p><p>例子：</p><p>以下示例展示了实现、继承关系的类实例使用 instanceof 运算符的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;null instanceof A:&quot;</span> + (a <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;null instanceof B:&quot;</span> + (b <span class="keyword">instanceof</span> A));</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">b = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;a instanceof A:&quot;</span> + (a <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;a instanceof B:&quot;</span> + (a <span class="keyword">instanceof</span> B));</span><br><span class="line">System.out.println(<span class="string">&quot;b instanceof A:&quot;</span> + (b <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;b instanceof B:&quot;</span> + (b <span class="keyword">instanceof</span> B));</span><br><span class="line"></span><br><span class="line"><span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> (C) <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof A:&quot;</span> + (b2 <span class="keyword">instanceof</span> A));</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof B:&quot;</span> + (b2 <span class="keyword">instanceof</span> B));</span><br><span class="line">System.out.println(<span class="string">&quot;b2 instantceof C:&quot;</span> + (b2 <span class="keyword">instanceof</span> C));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">null instanceof A:false</span><br><span class="line">null instanceof B:false</span><br><span class="line">a instanceof A:true</span><br><span class="line">a instanceof B:true</span><br><span class="line">b instanceof A:true</span><br><span class="line">b instanceof B:true</span><br><span class="line">b2 instantceof A:true</span><br><span class="line">b2 instantceof B:true</span><br><span class="line">b2 instantceof C:true</span><br></pre></td></tr></table></figure><h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><ol><li>null instanceof 任何类结果均为 false</li><li>对象类不包含 int、double 等基本类型</li><li>大多数情况下 instanceof 并不是推荐的做法，更推荐利用多态及方法重载</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java递归的实践</title>
      <link href="/2020/02/04/Java%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/04/Java%E9%80%92%E5%BD%92%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>递归指的是方法或函数自身调用自身，适用于一个功能被重复使用，而每一次使用时的参数是由上次的结果来确定的情况。本文介绍了递归在实际工作场景中的应用。</p><span id="more"></span><p>以下是将一个多层结构数据转换成树形结构的实例，该实例能够很好的展示递归的使用方式。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li>原始数据</li></ul><table><thead><tr><th align="center">id</th><th align="center">parentId</th><th align="center">value</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">one</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">two</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">three</td></tr><tr><td align="center">4</td><td align="center">2</td><td align="center">four</td></tr><tr><td align="center">5</td><td align="center">2</td><td align="center">five</td></tr><tr><td align="center">6</td><td align="center">3</td><td align="center">six</td></tr><tr><td align="center">7</td><td align="center">4</td><td align="center">seven</td></tr><tr><td align="center">8</td><td align="center">4</td><td align="center">eight</td></tr><tr><td align="center">9</td><td align="center">4</td><td align="center">nine</td></tr><tr><td align="center">10</td><td align="center">5</td><td align="center">ten</td></tr><tr><td align="center">11</td><td align="center">6</td><td align="center">eleven</td></tr><tr><td align="center">12</td><td align="center">9</td><td align="center">twelve</td></tr></tbody></table><ul><li>层级结构</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;one&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;two&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;four&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;seven&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eight&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nine&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;twelve&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;five&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ten&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;three&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;six&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eleven&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;nodes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Java递归的实现"><a href="#Java递归的实现" class="headerlink" title="Java递归的实现"></a>Java递归的实现</h2><h3 id="递归得到树形结构"><a href="#递归得到树形结构" class="headerlink" title="递归得到树形结构"></a>递归得到树形结构</h3><ul><li>Model类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getParentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParentId</span><span class="params">(Integer parentId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">getNodes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNodes</span><span class="params">(List&lt;Item&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from table where parentId = #&#123;parentId:INTEGER&#125;&quot;)</span></span><br><span class="line">    List&lt;Item&gt; <span class="title function_">getSubItemsByParentId</span><span class="params">(Integer parentId)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select id from table where parentId = #&#123;parentId:INTEGER&#125;&quot;)</span></span><br><span class="line">    List&lt;Integer&gt; <span class="title function_">getSubItemIds</span><span class="params">(Integer parentId)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select(&quot;select * from table where id = #&#123;id:INTEGER&#125;&quot;)</span></span><br><span class="line">    Item <span class="title function_">getItemById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Service类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ItemService</span> &#123;</span><br><span class="line">    Item <span class="title function_">getItemTree</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; <span class="title function_">getSubItemIds</span><span class="params">(Integer itemId)</span>;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; <span class="title function_">getParentItemIds</span><span class="params">(Integer itemId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ItemService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">getItemTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Item</span> <span class="variable">rootItem</span> <span class="operator">=</span> itemMapper.getItemById(<span class="number">1</span>);</span><br><span class="line">        setItemTree(<span class="number">1</span>, rootItem);</span><br><span class="line">        <span class="keyword">return</span> rootItem;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setItemTree</span><span class="params">(Integer itemId, Item item)</span> &#123;</span><br><span class="line">        List&lt;Item&gt; subItems = itemMapper.getSubItemsByParentId(itemId);</span><br><span class="line">        <span class="keyword">if</span> (subItems != <span class="literal">null</span> &amp;&amp; subItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Item subItem : subItems) &#123;</span><br><span class="line">                setItemTree(subItem.getId(), subItem);</span><br><span class="line">            &#125;</span><br><span class="line">            item.setNodes(subItems);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归获取指定item所有父item-ID的集合"><a href="#递归获取指定item所有父item-ID的集合" class="headerlink" title="递归获取指定item所有父item ID的集合"></a>递归获取指定item所有父item ID的集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ItemService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getParentItemIds</span><span class="params">(Integer itemId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getParentItemIds(itemId, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getParentItemIds</span><span class="params">(Integer itemId, ArrayList&lt;Integer&gt; resultIds)</span> &#123;</span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> itemMapper.getItemById(itemId);</span><br><span class="line">        <span class="keyword">if</span> (item != <span class="literal">null</span> &amp;&amp; item.getParentId() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultIds.add(item.getParentId());</span><br><span class="line">            getParentItemIds(item.getParentId(), resultIds);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归获取指定item下所有子item-ID的集合"><a href="#递归获取指定item下所有子item-ID的集合" class="headerlink" title="递归获取指定item下所有子item ID的集合"></a>递归获取指定item下所有子item ID的集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;itemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ItemService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getSubItemIds</span><span class="params">(Integer itemId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSubItemIds(itemId, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">getSubItemIds</span><span class="params">(Integer itemId, ArrayList&lt;Integer&gt; resultIds)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; subItemIds = itemMapper.getSubItemIds(itemId);</span><br><span class="line">        <span class="keyword">if</span> (subItemIds != <span class="literal">null</span> &amp;&amp; subItemIds.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            resultIds.addAll(subItemIds);</span><br><span class="line">            <span class="keyword">for</span> (Integer subItemId : subItemIds) &#123;</span><br><span class="line">                getSubItemIds(subItemId, resultIds);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合杂谈</title>
      <link href="/2020/02/04/Java%E9%9B%86%E5%90%88%E6%9D%82%E8%B0%88/"/>
      <url>/2020/02/04/Java%E9%9B%86%E5%90%88%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>Java 中的集合类在开发过程中经常被使用，本文介绍了集合相关的一些知识。</p><span id="more"></span><h4 id="ArrayList-的-remove-方法"><a href="#ArrayList-的-remove-方法" class="headerlink" title="ArrayList 的 remove 方法"></a>ArrayList 的 remove 方法</h4><p>我们首先从一个常见的面试题切入，代码如下：</p><p>代码1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】这里的 foreach 循环实际上等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = a.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>《Java核心技术》中有写道：</p><blockquote><p>“for each” 循环可以与任何实现了 Iterable 接口的对象一起工作，这个接口只包含一个方法：<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterable</span>&lt;E&gt; &#123;</span><br><span class="line">    Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Collection 接口扩展了 Iterable 接口。因此，对于标准类库中的任何集合都可以使用 “for each” 循环。</p></blockquote><p>那么这段代码的运行结果是什么呢？结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br></pre></td></tr></table></figure><p>以下是该题的另外两段代码：</p><p>代码2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">a.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String temp : a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(temp)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1---&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        a.remove(temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;2---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果分别是：</p><p>代码2运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:851)</span><br></pre></td></tr></table></figure><p>代码3运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1---</span><br><span class="line">2---</span><br></pre></td></tr></table></figure><p>首先看 ArrayList.remove() 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】System.arraycopy() 方法可以实现数组之间的复制。依次接收四个参数 Object src（源数组）, int srcPos（源数组要复制的起始位置）, Object dest（目的数组）, int destPos（目的数组放置的起始位置）, int length（复制的长度）。该方法可以实现自己到自己复制，其实现过程为：先生成一个长度为 length 的临时数组，将源数组中 srcPos 到 srcPos + length - 1 之间的数组拷贝到临时数组中，再执行 System.arraycopy(临时数组,srcPos,数组,destPos,length)。需要注意的是源数组和目的数组必须是同类型或是可以进行类型转换的数组。</p><p>然后是 ArrayList 中 iterator() 方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.size;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源码之后可以发现 代码1 和 代码3 的运行逻辑：<br><code>a.remove()</code> -&gt; <code>fastremove()</code> 会使得 a 的 size 减 1，而此时的 cursor 已经等于 size - 1 了，继续循环调用 iterator.hasNext() 方法会返回 false 导致循环结束。</p><p>代码2 的运行逻辑：<br><code>modCount</code> 用于记录 iterator 的操作次数，成功调用 iterator 的 remove 方法会将 expectedModCount 与 modCount 进行同步。<code>a.remove()</code> 调用的并不是 iterator 的 remove() 方法，而是 ArrayList 的 remove() 方法，remove 之后并没有将 expectedModCount 进行更新，此时继续调用 iterator.next() 会触发 checkForComodification() 检查从而抛出 ConcurrentModificationException异常。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合类 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装Confluence</title>
      <link href="/2020/02/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Confluence/"/>
      <url>/2020/02/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85Confluence/</url>
      
        <content type="html"><![CDATA[<h2 id="Confluence简介"><a href="#Confluence简介" class="headerlink" title="Confluence简介"></a>Confluence简介</h2><p>Confluence是一个专业的企业知识管理与协同软件，也可以用于构建<strong>企业wiki</strong> 。通过它可以实现团队成员之间的协作和知识共享。</p><p>Confluence为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p><p>Confluence使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。</p><span id="more"></span><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>进入Confluence官网</p><p> 浏览<a href="https://www.atlassian.com/software/confluence">Confluence官网</a>，进入<a href="https://www.atlassian.com/software/confluence/download">下载页面</a>，选择 <strong>Linux 64Bit</strong> 版本进行下载，复制<a href="https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.3.2-x64.bin">下载地址</a>。</p></li><li><p>远程连接阿里云服务器实例。</p></li><li><p>下载Confluence</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.atlassian.com/software/confluence/downloads/atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>向安装文件添加执行权限</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>执行安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./atlassian-confluence-6.3.2-x64.bin</span><br></pre></td></tr></table></figure></li><li><p>填写配置信息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ125p3eqb4fw3Z data]<span class="comment"># ./atlassian-confluence-6.3.1-x64.bin </span></span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line">Aug 04, 2017 11:31:41 AM java.util.prefs.FileSystemPreferences<span class="variable">$2</span> run</span><br><span class="line">INFO: Created system preferences directory <span class="keyword">in</span> java.home.</span><br><span class="line"></span><br><span class="line">This will install Confluence 6.3.1 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o</span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (uses default settings) [1], </span><br><span class="line">Custom Install (recommended <span class="keyword">for</span> advanced <span class="built_in">users</span>) [2, Enter], </span><br><span class="line">Upgrade an existing Confluence installation [3]</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Where should Confluence 6.3.1 be installed?</span><br><span class="line">[/opt/atlassian/confluence]</span><br><span class="line">/data/atlassian/confluence</span><br><span class="line">Default location <span class="keyword">for</span> Confluence data</span><br><span class="line">[/var/atlassian/application-data/confluence]</span><br><span class="line">/data/atlassian/application-data/confluence</span><br><span class="line">Configure <span class="built_in">which</span> ports Confluence will use.</span><br><span class="line">Confluence requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is <span class="built_in">where</span> you will access</span><br><span class="line">Confluence through your browser. The Control port is used to Startup and</span><br><span class="line">Shutdown Confluence.</span><br><span class="line">Use default ports (HTTP: 8090, Control: 8000) - Recommended [1, Enter], Set custom value <span class="keyword">for</span> HTTP and Control ports [2]</span><br><span class="line">1</span><br><span class="line">Confluence can be run <span class="keyword">in</span> the background.</span><br><span class="line">You may choose to run Confluence as a service, <span class="built_in">which</span> means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install Confluence as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                        </span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> we configure Confluence.</span><br><span class="line">Installation of Confluence 6.3.1 is complete</span><br><span class="line">Start Confluence now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> Confluence starts up.</span><br><span class="line">Launching Confluence ...</span><br><span class="line">Installation of Confluence 6.3.1 is complete</span><br><span class="line">Your installation of Confluence 6.3.1 is now ready and can be accessed via</span><br><span class="line">your browser.</span><br><span class="line">Confluence 6.3.1 can be accessed at http://localhost:8090</span><br><span class="line">Finishing installation ...</span><br></pre></td></tr></table></figure></li><li><p>完成安装，在浏览器中打开 <code>http://&#123;host&#125;:8090</code> 访问Confluence</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Confluence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/2020/02/04/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/02/04/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.cnblogs.com/laov/p/3541414.html#Linux">【Linux】Linux中常用操作命令</a></p><p>本文列举了一些Linux下比较常用的操作命令，方便日常查看和使用。</p><span id="more"></span><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ls        显示文件或目录  </span><br><span class="line">    -l      列出文件详细信息l(list)  </span><br><span class="line">    -a      列出当前目录下所有文件及目录，包括隐藏的a(all)  </span><br><span class="line">mkdir     创建目录  </span><br><span class="line">    -p      创建目录，若无父目录，则创建p(parent)  </span><br><span class="line">cd        切换目录  </span><br><span class="line">touch     创建空文件  </span><br><span class="line">echo      创建带有内容的文件  </span><br><span class="line">cat       查看文件内容  </span><br><span class="line">cp        拷贝  </span><br><span class="line">mv        移动或重命名  </span><br><span class="line">rm        删除文件  </span><br><span class="line">    -r      递归删除，可删除子目录及文件  </span><br><span class="line">    -f      强制删除  </span><br><span class="line">find      在文件系统中搜索某文件  </span><br><span class="line">wc        统计文本中行数、字数、字符数  </span><br><span class="line">grep      在文本文件中查找某个字符串  </span><br><span class="line">rmdir     删除空目录  </span><br><span class="line">tree      树形结构显示目录，需要安装tree包  </span><br><span class="line">pwd       显示当前目录  </span><br><span class="line">ln        创建链接文件  </span><br><span class="line">more、less 分页显示文本文件内容  </span><br><span class="line">head、tail 显示文件头、尾内容  </span><br><span class="line">ctrl+alt+F1   命令行全屏模式  </span><br></pre></td></tr></table></figure><h2 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">stat      显示指定文件的详细信息，比ls更详细  </span><br><span class="line">who       显示在线登陆用户  </span><br><span class="line">whoami    显示当前操作用户  </span><br><span class="line">hostname  显示主机名  </span><br><span class="line">uname     显示系统信息  </span><br><span class="line">top       动态显示当前耗费资源最多进程信息  </span><br><span class="line">ps        显示瞬间进程状态 ps -aux  </span><br><span class="line">du        查看目录大小 du -h /home带有单位显示目录信息  </span><br><span class="line">df        查看磁盘大小 df -h 带有单位显示磁盘信息  </span><br><span class="line">ifconfig  查看网络情况  </span><br><span class="line">ping      测试网络连通  </span><br><span class="line">netstat   显示网络状态信息  </span><br><span class="line">man       命令不会用了，找男人  如：man ls  </span><br><span class="line">clear     清屏  </span><br><span class="line">alias     对命令重命名 如：alias showmeit=&quot;ps -aux&quot; ，另外解除使用unaliax showmeit  </span><br><span class="line">kill      杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程 </span><br></pre></td></tr></table></figure><h2 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gzip</span><br><span class="line">bzip2</span><br><span class="line">tar         打包压缩  </span><br><span class="line">    -c      归档文件  </span><br><span class="line">    -x      压缩文件  </span><br><span class="line">    -z      gzip压缩文件  </span><br><span class="line">    -j      bzip2压缩文件  </span><br><span class="line">    -v      显示压缩或解压缩过程 v(view)  </span><br><span class="line">    -f      使用档名  </span><br></pre></td></tr></table></figure><p>例： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf /home/abc.tar /home/abc        只打包，不压缩</span><br><span class="line">tar -zcvf /home/abc.tar.gz /home/abc    打包，并用gzip压缩</span><br><span class="line">tar -jcvf /home/abc.tar.bz2 /home/abc   打包，并用bzip2压缩</span><br></pre></td></tr></table></figure><p>当然，如果想解压缩，就直接替换上面的命令  tar -cvf  &#x2F; tar -zcvf  &#x2F; tar -jcvf 中的“c” 换成“x” 就可以了。</p><h2 id="关机-x2F-重启"><a href="#关机-x2F-重启" class="headerlink" title="关机&#x2F;重启"></a>关机&#x2F;重启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown  </span><br><span class="line">   -r       关机重启  </span><br><span class="line">   -h       关机不重启  </span><br><span class="line">   now      立刻关机  </span><br><span class="line">halt        关机  </span><br><span class="line">reboot      重启  </span><br></pre></td></tr></table></figure><h2 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a>Linux管道</h2><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;close&quot; /home/* | more       在home目录下所有文件中查找，包括close的文件，并分页输出。</span><br></pre></td></tr></table></figure><h2 id="Linux软件包管理"><a href="#Linux软件包管理" class="headerlink" title="Linux软件包管理"></a>Linux软件包管理</h2><ul><li><p><strong>dpkg</strong> (Debian Package)管理工具，软件包名以.deb后缀。这种方法适合系统不能联网的情况下。</p><p>  比如安装tree命令的安装包，先将tree.deb传到Linux系统中。再使用如下命令安装。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i tree_1.5.3-l_i386.deb  安装软件</span><br><span class="line">sudo dpkg -r tree                   卸载软件</span><br></pre></td></tr></table></figure><p>  注：将tree.deb传到Linux系统中，有多种方式。VMwareTool，使用挂载方式；使用winSCP工具等；</p></li><li><p><strong>APT</strong>（Advanced Packaging Tool）高级软件工具。这种方法适合系统能够连接互联网的情况。</p><p>  依然以tree为例</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tree           安装tree</span><br><span class="line">sudo apt-get remove tree            卸载tree</span><br><span class="line">sudo apt-get update                 更新软件</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>将.rpm文件转为.deb文件</p><p>  .rpm为RedHat使用的软件格式。在Ubuntu下不能直接使用，所以需要转换一下。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo alien abc.rpm</span><br></pre></td></tr></table></figure></li></ul><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p><p>命令模式下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:q                      退出</span><br><span class="line">:q!                     强制退出</span><br><span class="line">:wq                     保存并退出</span><br><span class="line">:set number             显示行号</span><br><span class="line">:set nonumber           隐藏行号</span><br><span class="line">/apache                 在文档中查找apache 按n跳到下一个，shift+n上一个</span><br><span class="line">yyp                     复制光标所在行，并粘贴</span><br><span class="line">h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</span><br></pre></td></tr></table></figure><h2 id="用户及用户组管理"><a href="#用户及用户组管理" class="headerlink" title="用户及用户组管理"></a>用户及用户组管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd     存储用户账号</span><br><span class="line">/etc/group      存储组账号</span><br><span class="line">/etc/shadow     存储用户账号的密码</span><br><span class="line">/etc/gshadow    存储用户组账号的密码</span><br><span class="line">useradd 用户名</span><br><span class="line">userdel 用户名</span><br><span class="line">adduser 用户名</span><br><span class="line">groupadd 组名</span><br><span class="line">groupdel 组名</span><br><span class="line">passwd root     给root设置密码</span><br><span class="line">su root</span><br><span class="line">su - root </span><br><span class="line">/etc/profile    系统环境变量</span><br><span class="line">bash_profile    用户环境变量</span><br><span class="line">.bashrc         用户环境变量</span><br><span class="line">su user         切换用户，加载配置文件.bashrc</span><br><span class="line">su - user       切换用户，加载配置文件/etc/profile ，加载bash_profile</span><br></pre></td></tr></table></figure><ul><li>更改文件的用户及用户组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown [-R] owner[:group] &#123;File|Directory&#125;</span><br></pre></td></tr></table></figure>例如：还以jdk-7u21-linux-i586.tar.gz为例，属于用户hadoop，组hadoop</li></ul><p>要想切换此文件所属的用户及组。可以使用命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root jdk-7u21-linux-i586.tar.gz</span><br></pre></td></tr></table></figure><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><p>三种基本权限  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R   读       数值表示为4</span><br><span class="line">W   写       数值表示为2</span><br><span class="line">X   可执行     数值表示为1</span><br></pre></td></tr></table></figure><p><img src="http://images.cnitblog.com/blog/352072/201402/091549405142313.png" alt="linux文件权限"></p><p>如图所示，jdk-7u21-linux-i586.tar.gz文件的权限为-rw-rw-r–</p><p>-rw-rw-r–一共十个字符，分成四段。</p><p>第一个字符“-”表示普通文件；这个位置还可能会出现“l”链接；“d”表示目录</p><p>第二三四个字符“rw-”表示当前所属用户的权限。   所以用数值表示为4+2&#x3D;6</p><p>第五六七个字符“rw-”表示当前所属组的权限。      所以用数值表示为4+2&#x3D;6</p><p>第八九十个字符“r–”表示其他用户权限。              所以用数值表示为2</p><p>所以操作此文件的权限用数值表示为662 </p><ul><li>更改权限  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]   目录名 </span><br></pre></td></tr></table></figure>例如：有一个文件filename，权限为“-rw-r—-x” ,将权限值改为”-rwxrw-r-x”，用数值表示为765  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod u+x g+w o+r  filename</span><br></pre></td></tr></table></figure>上面的例子可以用数值表示  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 765 filename</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统设置静态IP</title>
      <link href="/2020/02/04/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
      <url>/2020/02/04/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/</url>
      
        <content type="html"><![CDATA[<p>在日常工作中，常常会由于动态IP分配导致指定主机或者服务器的内网IP发生变化，造成很多不便，通过设置静态IP可以有效解决此问题。本文简单介绍如何在CentOS 7和Ubuntu 18.04系统中设置静态IP。</p><span id="more"></span><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><h3 id="1-通过ifconfig命令查看当前的网络设置"><a href="#1-通过ifconfig命令查看当前的网络设置" class="headerlink" title="1. 通过ifconfig命令查看当前的网络设置"></a>1. 通过ifconfig命令查看当前的网络设置</h3><p><img src="/images/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF.png" alt="获取网卡信息"></p><h3 id="2-修改网卡配置"><a href="#2-修改网卡配置" class="headerlink" title="2. 修改网卡配置"></a>2. 修改网卡配置</h3><p>找到 <code>/etc/sysconfig/network-scripts/</code> 目录下网卡xxx的配置文件并修改为如下内容：</p><p><img src="/images/Linux%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="网卡配置文件"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;p8p1&quot;</span><br><span class="line">UUID=&quot;d7fcxxxx-xxxx-xxxx-xxxx-xxxx4d87xxxx&quot;</span><br><span class="line">DEVICE=&quot;p8p1&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.1.101&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br><span class="line">DNS2=&quot;192.168.1.1&quot;</span><br><span class="line">PREFIX=&quot;24&quot;</span><br><span class="line">IPV6_PRIVACY=&quot;no&quot;</span><br><span class="line">ZONE=</span><br></pre></td></tr></table></figure><p>其中 <code>IPADDR</code> 即是我们设置的静态IP地址。</p><h3 id="3-重启network服务"><a href="#3-重启network服务" class="headerlink" title="3. 重启network服务"></a>3. 重启network服务</h3><p>修改配置文件之后，执行 <code>service network restart</code> 命令重启network服务即可让配置生效。</p><h2 id="Ubuntu-18-04"><a href="#Ubuntu-18-04" class="headerlink" title="Ubuntu 18.04"></a>Ubuntu 18.04</h2><h3 id="1-修改网卡配置"><a href="#1-修改网卡配置" class="headerlink" title="1. 修改网卡配置"></a>1. 修改网卡配置</h3><p>找到 <code>/etc/netplan/</code> 目录下的 <code>yaml</code> 格式配置文件，修改配置文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">networK:</span><br><span class="line">    ethernets:</span><br><span class="line">        p8p1:</span><br><span class="line">            dhcp4: no</span><br><span class="line">            addresses: [192.168.1.101/24]</span><br><span class="line">            optional: true</span><br><span class="line">            gateway4: 192.168.1.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: [114.114.114.114, 192.168.1.1]</span><br><span class="line">    version: 2</span><br></pre></td></tr></table></figure><h3 id="2-配置生效"><a href="#2-配置生效" class="headerlink" title="2. 配置生效"></a>2. 配置生效</h3><p>执行 <code>sudo netplan apply</code> 命令使配置生效。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2020/02/04/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/04/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>引用自：Te_Lee的 <a href="http://www.jianshu.com/p/1e402922ee32">Markdown——入门指南</a></p><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p><span id="more"></span><h2 id="语法简要规则"><a href="#语法简要规则" class="headerlink" title="语法简要规则"></a>语法简要规则</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effeaclhiyj20eh09cwez.jpg" alt="Markdown标题"></p><p>每篇文章都离不开标题，层次分明的标题可以让文章的结构清晰明了，让读者能快速抓住行文脉络。</p><p><code># 一级标题</code><br><code>## 二级标题</code><br><code>### 三级标题</code></p><p>以此类推，最多可以到六级标题，#号后的空格可加可不加，规范的写法是加上一个空格。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><img src="http://ww4.sinaimg.cn/large/6aee7dbbgw1effew5aftij20d80bz3yw.jpg" alt="Markdown列表"></p><p>无序列表在文字需要前加上 <code>-</code> 或者 <code>*</code>；而有序列表则需要在文字前加上 <code>1. </code> ，注意空格，这里的数字1并不是固定写死的，使用任意数字都可以。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effezhonxlj20e009c3yu.jpg" alt="Markdown引用"></p><p>当你需要引用其他地方的一段文字时，需要用到引用的格式，在文本前加上 <code>&gt;</code>。</p><blockquote><p>青年的朝气倘已消失，前进不己的好奇心已衰退以后，人生就没有意义。 ——穆勒</p></blockquote><h3 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h3><p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" alt="Markdown图片与链接"></p><p>插入链接与插入图片的语法很相似，区别在一个 <code>!</code> 号。<br>图片： <code>![描述](url)</code><br>链接： <code>[描述](url)</code></p><p>图片的地址一般需要<strong>图床</strong>工具或服务生成URL地址。</p><h3 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h3><p>用两个<code>*</code>包含一段文本即可显示该段文本的黑体，类似的，用一个<code>*</code>或者<code>_</code>包含则可以显示斜体。</p><p><strong>粗体</strong> <em>斜体</em></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>用两个<code>~</code>包含一段文本即可在该段文本上显示删除线。</p><p><del>标记删除的文本</del> </p><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effg1lsa97j20lt0a8dgs.jpg" alt="Markdown代码框"></p><p>用两个 &#96; 把中间的代码段包裹起来即可让代码段显示在代码框里。</p><p><code>Hello, world!</code></p><p>多行代码可以用三个 &#96; 前后包裹，加上编程语言类型可以使代码正确地显示语法高亮。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>tab</code>进行缩进。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要三个<code>*</code>号。</p><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>下面上表格语法的一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h3 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h3><p>使用 <code>&lt;details&gt;</code> 标签表示一个可以折叠的块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;折叠块展示的标题&lt;/summary&gt;</span><br><span class="line">    &lt;p&gt;折叠块的内容&lt;/p&gt;</span><br><span class="line">    Hello, Wrold!</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><details>    <summary>折叠块展示的标题</summary>    <p>折叠块的内容</p>    Hello, Wrold!</details><h3 id="GitHub的checkbox列表"><a href="#GitHub的checkbox列表" class="headerlink" title="GitHub的checkbox列表"></a>GitHub的checkbox列表</h3><p>在列表符号（即 <code>-</code> 或者 <code>*</code>）后面加上 <code>[x]</code> 或者 <code>[ ]</code>（注意中间的空格） 表示选中或者未选中的checkbox。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- [x] Java</span><br><span class="line">- [x] JavaScript</span><br><span class="line">- [x] HTML</span><br><span class="line">- [x] CSS</span><br><span class="line">- [ ] C++</span><br><span class="line">- [ ] Go</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> Java</li><li><input checked="" disabled="" type="checkbox"> JavaScript</li><li><input checked="" disabled="" type="checkbox"> HTML</li><li><input checked="" disabled="" type="checkbox"> CSS</li><li><input disabled="" type="checkbox"> C++</li><li><input disabled="" type="checkbox"> Go</li></ul><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h4><ul><li><a href="http://markdownpad.com/">MarkdownPad</a></li><li><a href="http://mouapp.com/">Mou</a></li><li><a href="http://cloose.github.io/CuteMarkEd">CuteMarkEd</a></li><li><a href="http://code52.org/DownmarkerWPF/">MarkPad</a></li><li><a href="http://pad.haroopress.com/user.html">Haroopad</a></li></ul><h4 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h4><ul><li><a href="http://droplr.com/">Droplr</a>  </li><li><a href="http://www.getcloudapp.com/">Cloudapp</a>  </li><li><a href="https://itunes.apple.com/cn/app/yi-xiang/id672522335?mt=12&uo=4">ezShare for Mac</a>  </li><li><a href="http://weibotuchuang.sinaapp.com/">围脖图床修复计划</a></li></ul><p>下图介绍了图床的用途。</p><p><img src="https://pic2.zhimg.com/v2-f0c54b4b142546767d920f7fb488cf81_b.jpg" alt="图床"></p><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><blockquote><p>官方文档<br><a href="http://daringfireball.net/projects/markdown/syntax">创始人 John Gruber 的 Markdown 语法说明</a><br><a href="http://wowubuntu.com/markdown/">Markdown 中文版语法说明</a></p></blockquote><ul><li><a href="http://www.jianshu.com/p/qqgjln">为什么作家应该用 Markdown 保存自己的文稿</a>  </li><li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html">Markdown写作浅谈</a>  </li><li><a href="http://www.appinn.com/markdown-tools/">Markdown 工具补完</a>  </li><li><a href="http://jianshu.io/p/63HYZ6">Drafts + Scriptogr.am + Dropbox 打造移动端 Markdown 风格博客</a>  </li><li><a href="http://news.cnblogs.com/n/139649/">为什么我们要学习Markdown的三个理由</a>  </li><li><a href="http://ibuick.me/?p=4093">Markdown 语法写作入门指南 by ibuick</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装部署及常见问题</title>
      <link href="/2020/02/04/RabbitMQ%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/04/RabbitMQ%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://www.cnblogs.com/zhjh256/p/5922562.html">centos&#x2F;rhel 6.5（更新至centos 7）下rabbitmq安装（最简单方便的方式）</a>，<a href="http://www.cnblogs.com/junrong624/p/4121656.html">rabbitMQ windows 安装 入门</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>从<a href="https://www.rabbitmq.com/download.html">RabbitMQ官方下载页面</a>下载对应版本的安装包，执行安装包的时候会提示安装 <strong>Erlang</strong> 并打开 Erlang 的官方下载页面，下载安装 Erlang，之后 RabbitMQ会继续安装完成。</p><span id="more"></span><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>windows系统下 RabbitMQ 会作为服务安装并设置为自启动，因此无需进行额外的设置。在开始菜单中可以找到服务的启动、停止控制。</p><p><img src="http://img.blog.csdn.net/20131227171128312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV9famF2YV9fX0E=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="RabbitMQ服务启动、停止控制"></p><p>进入 RabbitMQ 安装目录下的 sbin 文件夹，在控制台下执行下述命令启用 RabbitMQ 的web管理工具，在浏览器中访问 <a href="http://localhost:15672/">http://localhost:15672/</a> 即可进行管理，默认 <strong>用户名 | 密码</strong> 是 <strong>guest | guest</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="启用控制台"><a href="#启用控制台" class="headerlink" title="启用控制台"></a>启用控制台</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dev-server ~]# rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  mochiweb</span><br><span class="line">  webmachine</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  amqp_client</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@dev-server... started 6 plugins.</span><br></pre></td></tr></table></figure><p>在某些情况下，可能会出现如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: The following plugins could not be found:</span><br><span class="line">  rabbitmq_management</span><br></pre></td></tr></table></figure><p>此时是因为rabbitmq查找插件的路径不正确所致。可按照如下方式解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/rabbitmq</span><br><span class="line">vi /etc/rabbitmq/rabbitmq-env.conf </span><br></pre></td></tr></table></figure><p>这个是 rabbitmq 环境变量的配置文件,这个文件的位置是确定和不能改变的，位于：**&#x2F;etc&#x2F;rabbitmq** 或 <strong>$RABBITMQ_HOME&#x2F;etc&#x2F;rabbitmq</strong> 目录下（视具体的安装方式而定）,具体可参考<a href="http://www.rabbitmq.com/configure.html%E3%80%82">http://www.rabbitmq.com/configure.html。</a></p><p>增加如下配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_MNESIA_BASE=/usr/local/rabbitmq/data</span><br><span class="line">RABBITMQ_LOG_BASE=/usr/local/rabbitmq/log</span><br><span class="line">RABBITMQ_PLUGINS_DIR=/usr/local/rabbitmq/plugins</span><br></pre></td></tr></table></figure><p>或者也可以在 <strong>sbin&#x2F;rabbitmq-env</strong> 中增加。</p><p>重启rabbitmq，问题解决。</p><p>PS：rabbitmq 的标准配置文件是 <strong>rabbitmq.config</strong>,它既有默认的目录，也可以在 <strong>rabbitmq-env.conf</strong> 文件中配置。具体可参考<a href="http://www.rabbitmq.com/configure.html%E3%80%82">http://www.rabbitmq.com/configure.html。</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot和Vue单页面前后端分离项目的整合与构建</title>
      <link href="/2020/02/04/SpringBoot%E5%92%8CVue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E6%9E%84%E5%BB%BA/"/>
      <url>/2020/02/04/SpringBoot%E5%92%8CVue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%95%B4%E5%90%88%E4%B8%8E%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>日常开发前后端分离应用时，通常会使用到Spring Boot开发后台服务，Vue.js开发前端SPA，而在部署时通常将后台服务和前端应用分开部署，使用nginx反向代理或者后台配置cors解决前后端的跨域问题。这样的方式在部署环节时稍显繁琐，本文介绍一种在构建环节直接将前端SPA直接打包进后台服务的jar包，只用部署jar包即可访问前端页面的方法。</p><span id="more"></span><p>以<a href="https://gitee.com/yupaits/ultimate-spider">ultimate-spider</a>为例说明该方法是如何实现将SPA打进后台服务jar包的。</p><p><strong>ultimate-spider</strong>是采用IDEA的project + modules的方式进行开发的，该项目有两个module：spider-server，后台服务；spider-web，前端SPA。以下是相关的pom.xml文件的内容。</p><ul><li>ultimate-spider的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Ultimate Spider Application<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spider-web<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spider-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spider-server的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spider-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>22.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy frontend content<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>src/main/resources/public<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.parent.basedir&#125;/spider-web/target/dist<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>static/<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spider-web的pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ultimate-spider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits.us<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spider-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frontend-maven-plugin.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">frontend-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;frontend-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v8.1.3<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>5.7.1<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm set registry<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>config set registry https://registry.npm.taobao.org<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm set non-strict ssl<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>config set strict-ssl false<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm run build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>run build<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方法的大致流程如下：</p><p>1）在ultimate-spider下执行<code>mvn clean install</code>；</p><p>2）spider-web使用<code>frontend-maven-plugin</code>插件进行构建并生成<code>target/dist</code>目录；</p><p>3）spider-server使用<code>spring-boot-maven-plugin</code>插件构建基于Spring Boot的可执行jar文件；</p><p>4）spider-server使用<code>maven-resources-plugin</code>插件将spider-web下的<code>target/dist</code>复制到<code>resources/public</code>，<code>resources/public</code>作为资源文件会被打进Spring Boot的可执行jar文件中；</p><p>5）执行基于Spring Boot的可执行jar之后，访问<code>/</code>会默认跳转到<code>public</code>目录下的<code>index.html</code>。</p><p>该方法的核心就在于基于maven构建的配置文件pom.xml，这里对pom.xml里的几个关键配置项进行说明。</p><ol><li><p>spider-web采用了maven的前端应用构建插件<code>frontend-maven-plugin</code>实现了基于npm的SPA项目的构建，这里是该插件的<a href="https://github.com/eirslett/frontend-maven-plugin">GitHub地址</a>。</p></li><li><p>ultimate-spider中<code>&lt;modules&gt;</code>标签中必须是前端SPA模块spider-web在前，后台服务模块spider-server在后。</p></li><li><p>在执行<code>npm run build</code>构建之前必须执行<code>npm install</code>下载依赖项。</p></li><li><p><code>maven-resources-plugin</code>注意配置<code>&lt;overwirte&gt;true&lt;/overwirte&gt;</code>，构建时覆盖掉之前的构建结果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String.format的用法</title>
      <link href="/2020/02/04/String-format%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2020/02/04/String-format%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自 <a href="http://www.open-open.com/lib/view/open1388316512922.html">Java中String.format的使用</a></p></blockquote><span id="more"></span><p>String类的format()方法用于创建格式化的字符串一级连接多个字符串对象。format()方法有两种重载形式。</p><ul><li><code>format(String format, Object... args)</code> 新字符串使用本地语言环境，根据字符串格式和参数生成格式化的新字符串。</li><li><code>format(Locale locale, String format, Object... args)</code> 使用制定的语言环境，根据字符串格式和参数生成格式化的字符串。</li></ul><h2 id="转换符"><a href="#转换符" class="headerlink" title="转换符"></a>转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>字符串类型</td></tr><tr><td>%c</td><td>字符类型</td></tr><tr><td>%b</td><td>布尔类型</td></tr><tr><td>%d</td><td>十进制整数</td></tr><tr><td>%x</td><td>十六进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%f</td><td>浮点类型</td></tr><tr><td>%a</td><td>十六进制浮点类型</td></tr><tr><td>%e</td><td>指数类型</td></tr><tr><td>%g</td><td>通用浮点类型（f和e类型中较短的）</td></tr><tr><td>%h</td><td>散列码</td></tr><tr><td>%%</td><td>百分号</td></tr><tr><td>%n</td><td>换行符</td></tr><tr><td>%tx</td><td>日期与时间类型（x代表不同的日期与时间转换符）</td></tr></tbody></table><h2 id="搭配转换符的标志"><a href="#搭配转换符的标志" class="headerlink" title="搭配转换符的标志"></a>搭配转换符的标志</h2><table><thead><tr><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号</td></tr><tr><td>−</td><td>左对齐</td></tr><tr><td>0</td><td>数字前面补0</td></tr><tr><td>空格</td><td>在整数之前添加指定数量的空格</td></tr><tr><td>,</td><td>以“,”对数字分组</td></tr><tr><td>(</td><td>使用括号包含负数</td></tr><tr><td>#</td><td>如果是浮点数则包含小数点，如果是16进制或8进制则添加0x或0</td></tr><tr><td>&lt;</td><td>格式化前一个转换符所描述的参数</td></tr><tr><td>$</td><td>被格式化的参数索引</td></tr></tbody></table><h2 id="日期与时间转换符"><a href="#日期与时间转换符" class="headerlink" title="日期与时间转换符"></a>日期与时间转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td></tr><tr><td>F</td><td>“年-月-日”格式</td></tr><tr><td>D</td><td>“月&#x2F;日&#x2F;年”格式</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式（12时制）</td></tr><tr><td>T</td><td>“HH:MM:SS”格式（24时制）</td></tr><tr><td>R</td><td>“HH:MM”格式（24时制）</td></tr></tbody></table><h2 id="日期转换符"><a href="#日期转换符" class="headerlink" title="日期转换符"></a>日期转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>b或者h</td><td>月份简称</td></tr><tr><td>B</td><td>月份全称</td></tr><tr><td>a</td><td>星期的简称</td></tr><tr><td>A</td><td>星期的全称</td></tr><tr><td>C</td><td>年的前两位数字（不足两位前面补0）</td></tr><tr><td>y</td><td>年的后两位数字（不足两位前面补0）</td></tr><tr><td>Y</td><td>4位数字的年份（不足4位前面补0）</td></tr><tr><td>j</td><td>一年中的天数（即年的第几天）</td></tr><tr><td>m</td><td>两位数字的月份（不足两位前面补0）</td></tr><tr><td>d</td><td>两位数字的日（不足两位前面补0）</td></tr><tr><td>e</td><td>月份的日（前面不补0）</td></tr></tbody></table><h2 id="时间转换符"><a href="#时间转换符" class="headerlink" title="时间转换符"></a>时间转换符</h2><table><thead><tr><th>转换符</th><th>说明</th></tr></thead><tbody><tr><td>H</td><td>2位数字24时制的小时（不足2位前面补0）</td></tr><tr><td>I</td><td>2位数字12时制的小时（不足2位前面补0）</td></tr><tr><td>k</td><td>2位数字24时制的小时（前面不补0）</td></tr><tr><td>l</td><td>2位数字12时制的小时（前面不补0）</td></tr><tr><td>M</td><td>2位数字的分钟（不足2位前面补0）</td></tr><tr><td>S</td><td>2位数字的秒（不足2位前面补0）</td></tr><tr><td>L</td><td>3位数字的毫秒（不足3位前面补0）</td></tr><tr><td>N</td><td>9位数字的毫秒数（不足9位前面补0）</td></tr><tr><td>p</td><td>小写字母的上午或下午标记</td></tr><tr><td>z</td><td>相对于GMT的RFC822时区的偏移量</td></tr><tr><td>Z</td><td>时区缩写字符串</td></tr><tr><td>s</td><td>1970-1-1 00:00:00 到现在所经过的秒数</td></tr><tr><td>Q</td><td>1970-1-1 00:00:00 到现在所经过的毫秒数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Todo-Tomato技术解读</title>
      <link href="/2020/02/04/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/"/>
      <url>/2020/02/04/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>Todo-Tomato 是一款融合待办事项管理和番茄工作法，用于高效处理工作事务的工作利器，本文对 Todo-Tomato 使用的技术进行简要解读。</p><span id="more"></span><p>话不多说，先放上Todo-Tomato的界面截图。</p><p><img src="/images/Todo-Tomato%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/Todo-Tomato%E7%95%8C%E9%9D%A2.png" alt="Todo-Tomato界面"></p><p>本文的技术解读基于<a href="https://gitee.com/yupaits/todo-tomato/tree/v1.0.0/">Todo-Tomato v1.0.0版本</a>。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>使用目前比较流行的前后端分离进行开发：</p><ul><li><p>前端技术栈：Vue.js + vue-router + vuex + axios + element-ui</p></li><li><p>后端技术栈：Spring Boot + Spring JPA + MySQL + druid + Redis</p></li><li><p>部署：阿里云ECS + Ubuntu16.04 + Nginx + OpenJDK8 + HTTPS</p></li></ul><p>由于使用的技术比较繁杂，这里选取一些个人觉得比较有记录价值的技术点进行说明。</p><h2 id="后端技术点"><a href="#后端技术点" class="headerlink" title="后端技术点"></a>后端技术点</h2><h3 id="Log4j2日志配置"><a href="#Log4j2日志配置" class="headerlink" title="Log4j2日志配置"></a>Log4j2日志配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Configuration:</span></span><br><span class="line">  <span class="attr">status:</span> <span class="string">warn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Properties:</span></span><br><span class="line">    <span class="attr">Property:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.console</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.com.yupaits.todotomato</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">info</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.base</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">/root/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">project.name</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">todo-tomato</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.pattern</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">&quot;%d - $&#123;project.name&#125; - %p [%t] [%C&#123;0&#125;:%M] - %c - %m%n&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Appenders:</span></span><br><span class="line">    <span class="attr">Console:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">CONSOLE</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">SYSTEM_OUT</span></span><br><span class="line">      <span class="attr">ThresholdFilter:</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">$&#123;sys:log.level.console&#125;</span></span><br><span class="line">        <span class="attr">onMatch:</span> <span class="string">ACCEPT</span></span><br><span class="line">        <span class="attr">onMismatch:</span> <span class="string">DENY</span></span><br><span class="line">      <span class="attr">PatternLayout:</span></span><br><span class="line">        <span class="attr">pattern:</span> <span class="string">$&#123;log.pattern&#125;</span></span><br><span class="line">    <span class="attr">RollingFile:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ROLLIING_FILE</span></span><br><span class="line">        <span class="attr">ignoreExceptions:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">fileName:</span> <span class="string">$&#123;log.base&#125;/$&#123;project.name&#125;.log</span></span><br><span class="line">        <span class="attr">filePattern:</span> <span class="string">&quot;$&#123;log.base&#125;/$&#123;project.name&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span></span><br><span class="line">        <span class="attr">PatternLayout:</span></span><br><span class="line">          <span class="attr">pattern:</span> <span class="string">$&#123;log.pattern&#125;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">          <span class="attr">TimeBasedTriggeringPolicy:</span></span><br><span class="line">            <span class="attr">interval:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">modulate:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">SizeBasedTriggeringPolicy:</span></span><br><span class="line">            <span class="attr">size:</span> <span class="string">&quot;10 MB&quot;</span></span><br><span class="line">        <span class="attr">DefaultRolloverStrategy:</span></span><br><span class="line">          <span class="attr">max:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Loggers:</span></span><br><span class="line">    <span class="attr">Root:</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">      <span class="attr">AppenderRef:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">CONSOLE</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ROLLIING_FILE</span></span><br><span class="line">    <span class="attr">Logger:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log.level.com.yupaits.todotomato</span></span><br><span class="line">        <span class="attr">additivity:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">level:</span> <span class="string">$&#123;sys:log.level.com.yupaits.todotomato&#125;</span></span><br><span class="line">        <span class="attr">AppenderRef:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">CONSOLE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">ref:</span> <span class="string">ROLLIING_FILE</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>filePattern</code> 和 <code>PatternLayout.pattern</code> 配置，当存在 <code>%d</code>、<code>%i</code> 等日志专用变量地时候，yaml配置文件需要加上 “”，否则配置不会被正确读取。</p><h3 id="AuthorizationInterceptor鉴权拦截器"><a href="#AuthorizationInterceptor鉴权拦截器" class="headerlink" title="AuthorizationInterceptor鉴权拦截器"></a>AuthorizationInterceptor鉴权拦截器</h3><ul><li>WebConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">AuthorizationInterceptor</span>(objectMapper)).addPathPatterns(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AuthorizationInterceptor.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">AuthorizationInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AuthorizationInterceptor</span><span class="params">(ObjectMapper objectMapper)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">authorized</span> <span class="operator">=</span> (Boolean) httpServletRequest.getSession().getAttribute(Constants.AUTHORIZED_KEY);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasAuth</span> <span class="operator">=</span> authorized != <span class="literal">null</span> &amp;&amp; authorized;</span><br><span class="line">    <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">        httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        httpServletResponse.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">        objectMapper.writeValue(httpServletResponse.getWriter(), ResultCode.UNAUTHORIZED.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasAuth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BaseEntity-JPA实体类基类"><a href="#BaseEntity-JPA实体类基类" class="headerlink" title="BaseEntity JPA实体类基类"></a>BaseEntity JPA实体类基类</h3><ul><li>BaseEntity.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EntityListeners(AuditingEntityListener.class)</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span>&lt;ID <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> ID id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_at&quot;)</span></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date createAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_by&quot;)</span></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_modified_at&quot;)</span></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> Date lastModifiedAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_modified_by&quot;)</span></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="keyword">private</span> String lastModifiedBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    createAt = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    lastModifiedAt = createAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreUpdate</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    lastModifiedAt = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>EntityAuditorAware.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EntityAuditorAware</span> <span class="keyword">implements</span> <span class="title class_">AuditorAware</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentAuditor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Constants.ADMINISTRATOR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Task.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tdtmt_task&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column( name = &quot;todo_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer todoId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;task_desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String taskDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;is_done&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">done</span> <span class="operator">=</span> Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">boolean</span> withPk)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> ValidateUtils.validId(todoId) &amp;&amp; StringUtils.isNotBlank(taskDesc);</span><br><span class="line">    <span class="keyword">return</span> withPk ? ValidateUtils.validId(<span class="built_in">this</span>.getId()) &amp;&amp; isValid : isValid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端技术点"><a href="#前端技术点" class="headerlink" title="前端技术点"></a>前端技术点</h2><h3 id="axios自定义实例配置"><a href="#axios自定义实例配置" class="headerlink" title="axios自定义实例配置"></a>axios自定义实例配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Api</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://***.***.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Api</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(<span class="string">&#x27;logout&#x27;</span>);</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Api</span></span><br></pre></td></tr></table></figure><h3 id="router-beforeEach路由钩子"><a href="#router-beforeEach路由钩子" class="headerlink" title="router.beforeEach路由钩子"></a>router.beforeEach路由钩子</h3><p>前端项目主观上只有两个界面，登录页和主页。因此在路由 <strong>beforeEach</strong> 钩子函数中的鉴权逻辑比较简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> hasAuth = store.<span class="property">getters</span>.<span class="property">hasAuth</span>;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasAuth) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasAuth) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局Api"><a href="#全局Api" class="headerlink" title="全局Api"></a>全局Api</h3><p>在 <code>main.js</code> 中加入如下代码，将自定义的axios实例 <strong>Api</strong> 注入到<strong>全局Vue</strong>对象中，之后在Vue组件中就可以使用 <code>this.Api.get()</code> 的方式进行http请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Api</span> = <span class="title class_">Api</span></span><br></pre></td></tr></table></figure><h2 id="部署技术点"><a href="#部署技术点" class="headerlink" title="部署技术点"></a>部署技术点</h2><h3 id="申请免费SSL证书用于站点HTTPS化"><a href="#申请免费SSL证书用于站点HTTPS化" class="headerlink" title="申请免费SSL证书用于站点HTTPS化"></a>申请免费SSL证书用于站点HTTPS化</h3><p><a href="https://letsencrypt.org/getting-started/">Let’s Encrypt</a> 提供了免费SSL证书的申请服务。推荐使用With Shell Access方式，使用命令行工具 <a href="https://certbot.eff.org/">Certbot</a> 申请证书。</p><p>完成证书申请之后，使用 <code>certbot renew --dry-run</code> 测试更新证书，可以正常更新的话，添加如下的 <strong>cron</strong> 任务定期更新证书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 每天3:00更新证书</span><br><span class="line">0 3 * * * certbot renew &gt;&gt; ~/cron/cert.log --renew-hook &quot;/usr/sbin/nginx -s reload&quot;</span><br></pre></td></tr></table></figure><p>使用 <code>--renew-hook</code> 才能保证使用的是最新的证书。</p><h3 id="Nginx-HTTPS反向代理"><a href="#Nginx-HTTPS反向代理" class="headerlink" title="Nginx HTTPS反向代理"></a>Nginx HTTPS反向代理</h3><p>Nginx配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    </span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line">  types_hash_max_size 2048;</span><br><span class="line">    </span><br><span class="line">  include /etc/nginx/mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">  access_log /var/log/nginx/access.log;</span><br><span class="line">  error_log /var/log/nginx/error.log;</span><br><span class="line">    </span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_disable &quot;msie6&quot;;</span><br><span class="line">    </span><br><span class="line">  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">  include /etc/nginx/conf.d/*.conf;</span><br><span class="line">  include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name jenkins.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/jenkins.***.com-0001/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/jenkins.***.com-0001/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name rabbit.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/rabbit.***.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/rabbit.***.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:15672;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name todo-tomato.***.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/todo-tomato.***.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/todo-tomato.***.com/privkey.pem;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    root /usr/share/todo-tomato;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /checkVisitCode &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /signOut &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:***;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置同时将服务器上的 <code>Jenkins</code> 和 <code>RabbitMQ</code> 也进行了HTTPS反向代理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code常用插件记录</title>
      <link href="/2020/02/04/VSCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/02/04/VSCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="语言包"><a href="#语言包" class="headerlink" title="语言包"></a>语言包</h2><ul><li>Chinese (Simplified) Language Pack for Visual Studio Code</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>Smile Theme</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>IntelliJ IDEA Keybindings</li></ul><h2 id="Project-Manage"><a href="#Project-Manage" class="headerlink" title="Project Manage"></a>Project Manage</h2><ul><li>Project Manager</li><li>Todo Tree</li></ul><h2 id="HTML-CSS-JS"><a href="#HTML-CSS-JS" class="headerlink" title="HTML CSS JS"></a>HTML CSS JS</h2><ul><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Beautify</li><li>HTML CSS Support</li><li>Path Autocomplete</li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li>npm</li></ul><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ul><li>Vetur</li><li>Ant Design Vue helper</li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li>Markdown PDF</li><li>Markdown TOC</li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>GitLens</li><li>Git History</li><li>Git Graph</li></ul><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul><li>Go</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li>Python</li></ul><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul><li>Flutter</li><li>Dart</li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li>Docker</li></ul><h2 id="远程工具"><a href="#远程工具" class="headerlink" title="远程工具"></a>远程工具</h2><ul><li>Remote - WSL</li></ul><h2 id="Properties-File"><a href="#Properties-File" class="headerlink" title="Properties File"></a>Properties File</h2><ul><li>Better TOML</li><li>YAML</li></ul><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><ul><li>FreeMarker</li></ul><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><ul><li>Bracket Pair Colorizer</li><li>Highlight Matching Tag</li><li>TODO Highlight</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron语法简单总结</title>
      <link href="/2020/02/04/cron%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/04/cron%E8%AF%AD%E6%B3%95%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="http://chinaxxren.iteye.com/blog/839630">cron 表达式的格式</a></p><p>Quartz cron 表达式的格式十分类似于 UNIX cron 格式，但还是有少许明显的区别。区别之一就是 Quartz 的格式向下支持到秒级别的计划，而 UNIX cron 计划仅支持至分钟级。许多我们的触发计划要基于秒级递增的(例如，每45秒)，因此这是一个非常好的差异。</p><span id="more"></span><p>在 UNIX cron 里，要执行的作业（或者说命令）是存放在 cron 表达式中的，在第六个域位置上。Quartz 用 cron 表达式存放执行计划。引用了 cron 表达式的CronTrigger 在计划的时间里会与 job 关联上。</p><p>另一个与 UNIX cron 表达式的不同点是在表达式中支持域的数目。UNIX 给出五个域(分、时、日、月和周)，Quartz 提供七个域。表 5.1 列出了 Quartz cron 表达式支持的七个域。</p><table><thead><tr><th align="center">名称</th><th align="center">是否必须</th><th align="center">允许值</th><th align="center">特殊字符</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">是</td><td align="center">0-59</td><td align="center">,-*&#x2F;</td></tr><tr><td align="center">分</td><td align="center">是</td><td align="center">0-59</td><td align="center">,-*&#x2F;</td></tr><tr><td align="center">时</td><td align="center">是</td><td align="center">0-23</td><td align="center">,-*&#x2F;</td></tr><tr><td align="center">日</td><td align="center">是</td><td align="center">1-31</td><td align="center">,-*?&#x2F;L W C</td></tr><tr><td align="center">月</td><td align="center">是</td><td align="center">1-12 或 JAN-DEC</td><td align="center">,-*&#x2F;</td></tr><tr><td align="center">周</td><td align="center">是</td><td align="center">1-7 或 SUN-SAT</td><td align="center">,-*?&#x2F;L C #</td></tr><tr><td align="center">年</td><td align="center">否</td><td align="center">空 或 1970-2099</td><td align="center">,-*&#x2F;</td></tr></tbody></table><p>月份和星期的名称是不区分大小写的。FRI 和 fri 是一样的。</p><p>域之间有空格分隔，这和 UNIX cron 一样。无可争辩的，我们能写的最简单的表达式看起来就是这个了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * ? * *</span><br></pre></td></tr></table></figure><p>这个表达会每秒钟(每分种的、每小时的、每天的)激发一个部署的 job。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>同 UNIX cron 一样，Quartz cron 表达式支持用特殊字符来创建更为复杂的执行计划。然而，Quartz 在特殊字符的支持上比标准 UNIX cron 表达式更丰富了。</p><h3 id="星号"><a href="#星号" class="headerlink" title="* 星号"></a>* 星号</h3><p>使用星号(*) 指示着你想在这个域上包含所有合法的值。例如，在月份域上使用星号意味着每个月都会触发这个 trigger。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 * 17 * * ?</span><br></pre></td></tr></table></figure><p>意义：每天从下午5点到下午5:59中的每分钟激发一次 trigger。它停在下午 5:59 是因为值 17 在小时域上，在下午 6 点时，小时变为 18 了，也就不再理会这个 trigger，直到下一天的下午5点。</p><p>在你希望 trigger 在该域的所有有效值上被激发时使用 * 字符。</p><h3 id="问号"><a href="#问号" class="headerlink" title="? 问号"></a>? 问号</h3><p>? 号只能用在日和周域上，但是不能在这两个域上同时使用。你可以认为? 字符是 “我并不关心在该域上是什么值。” 这不同于星号，星号是指示着该域上的每一个值。? 是说不为该域指定值。</p><p>不能同时这两个域上指定值的理由是难以解释甚至是难以理解的。基本上，假定同时指定值的话，意义就会变得含混不清了：考虑一下，如果一个表达式在日域上有值11，同时在周域上指定了WED。那么是要 trigger 仅在每个月的11号，且正好又是星期三那天被激发？还是在每个星期三的11号被激发呢？要去除这种不明确性的办法就是不能同时在这两个域上指定值。</p><p>只要记住，假如你为这两域的其中一个指定了值，那就必须在另一个字值上放一个 ?。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10,44 14 ? 3 WEB</span><br></pre></td></tr></table></figure><p>意义：在三月中的每个星期三的下午 2:10 和 下午 2:44 被触发。</p><h3 id="逗号"><a href="#逗号" class="headerlink" title=", 逗号"></a>, 逗号</h3><p>逗号 (,) 是用来在给某个域上指定一个值列表的。例如，使用值 0,15,30,45 在秒域上意味着每15秒触发一个 trigger。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0,15,30,45 * * * ?</span><br></pre></td></tr></table></figure><p>意义：每刻钟触发一次 trigger。</p><h3 id="x2F-斜杠"><a href="#x2F-斜杠" class="headerlink" title="&#x2F; 斜杠"></a>&#x2F; 斜杠</h3><p>斜杠 (&#x2F;) 是用于时间表的递增的。我们刚刚用了逗号来表示每15分钟的递增，但是我们也能写成这样0&#x2F;15。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0/15 0/30 * * * ?</span><br></pre></td></tr></table></figure><p>意义：在整点和半点时每15秒触发 trigger。</p><h3 id="中划线"><a href="#中划线" class="headerlink" title="- 中划线"></a>- 中划线</h3><p>中划线 (-) 用于指定一个范围。例如，在小时域上的 3-8 意味着 “3,4,5,6,7 和 8 点。” 域的值不允许回卷，所以像 50-10 这样的值是不允许的。</p><p>表达式样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 45 3-8 ? * *</span><br></pre></td></tr></table></figure><p>意义：在上午的3点至上午的8点的45分时触发 trigger。</p><h3 id="L-字母"><a href="#L-字母" class="headerlink" title="L 字母"></a>L 字母</h3><p>L 说明了某域上允许的最后一个值。它仅被日和周域支持。当用在日域上，表示的是在月域上指定的月份的最后一天。例如，当月域上指定了JAN 时，在日域上的L 会促使 trigger 在1月31号被触发。假如月域上是SEP，那么 L 会预示着在9月30号触发。换句话说，就是不管指定了哪个月，都是在相应月份的时最后一天触发 trigger。</p><p>表达式 <code>0 0 8 L * ?</code> 意义是在每个月最后一天的上午 8:00 触发 trigger。在月域上的 * 说明是 “每个月”。</p><p>当 L 字母用于周域上，指示着周的最后一天，就是星期六 (或者数字7)。所以如果你需要在每个月的最后一个星期六下午的 11:59 触发 trigger，你可以用这样的表达式0 59 23 ? * L。</p><p>当使用于周域上，你可以用一个数字与 L 连起来表示月份的最后一个星期 X。例如，表达式 <code>0 0 12 ? * 2L</code> 说的是在每个月的最后一个星期一触发 trigger。</p><blockquote><p>不要让范围和列表值与 L 连用，虽然你能用星期数(1-7)与 L 连用，但是不允许你用一个范围值和列表值与 L 连用。这会产生不可预知的结果。</p></blockquote><h3 id="W-字母"><a href="#W-字母" class="headerlink" title="W 字母"></a>W 字母</h3><p>W 字符代表着平日 (Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。例如，日域中的15W 意味着 “离该月15号的最近一个平日。” 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一（这个例子中是17号）离15号更近。（译者Unmi注：不会在17号触发的，如果是15W，可能会是在14号(15号是星期六)或者15号(15号是星期天)触发，也就是只能出现在邻近的一天，如果15号当天为平日直接就会当日执行）。W 只能用在指定的日域为单天，不能是范围或列表值。</p><h3 id="井号"><a href="#井号" class="headerlink" title="# 井号"></a># 井号</h3><p># 字符仅能用于周域中。它用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为6#3，它意思是某月的第三个周五 (6&#x3D;星期五，#3意味着月份中的第三周)。另一个例子2#1 意思是某月的第一个星期一 (2&#x3D;星期一，#1意味着月份中的第一周)。注意，假如你指定#5，然而月份中没有第 5 周，那么该月不会触发。</p><p>此处的 Cron 表达式 cookbook 旨在为常用的执行需求提供方案。尽管不可能列举出所有的表达式，但下面的应该为满足你的业务需求提供了足够的例子。</p><h2 id="分钟的-Cron-表达式"><a href="#分钟的-Cron-表达式" class="headerlink" title="分钟的 Cron 表达式"></a>分钟的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>每天的从 5:00 PM 至 5:59 PM 中的每分钟触发</td><td>0 * 17 * * ?</td></tr><tr><td>每天的从 11:00 PM 至 11:55 PM 中的每五分钟触发</td><td>0 0&#x2F;5 23 * * ?</td></tr><tr><td>每天的从 3:00 至 3:55 PM 和 6:00 PM 至 6:55 PM 之中的每五分钟触发</td><td>0 0&#x2F;5 15,18 * * ?</td></tr><tr><td>每天的从 5:00 AM 至 5:05 AM 中的每分钟触发</td><td>0 0-5 5 * * ?</td></tr></tbody></table><h2 id="日-的-Cron-表达式"><a href="#日-的-Cron-表达式" class="headerlink" title="日 的 Cron 表达式"></a>日 的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>每天的 3:00 AM</td><td>0 0 3 * * ?</td></tr><tr><td>每天的 3:00 AM (另一种写法)</td><td>0 0 3 ? * *</td></tr><tr><td>每天的 12:00 PM (中午)</td><td>0 0 12 * * ?</td></tr><tr><td>在 2005 中每天的 10:15 AM</td><td>0 15 10 * * ? 2005</td></tr></tbody></table><h2 id="周和月的-Cron-表达式"><a href="#周和月的-Cron-表达式" class="headerlink" title="周和月的 Cron 表达式"></a>周和月的 Cron 表达式</h2><table><thead><tr><th>用法</th><th>表达式</th></tr></thead><tbody><tr><td>在每个周一,二, 三和周四的 10:15 AM</td><td>0 15 10 ? * MON-FRI</td></tr><tr><td>每月15号的 10:15 AM</td><td>0 15 10 15 * ?</td></tr><tr><td>每月最后一天的 10:15 AM</td><td>0 15 10 L * ?</td></tr><tr><td>每月最后一个周五的 10:15 AM</td><td>0 15 10 ? * 6L</td></tr><tr><td>在 2002, 2003, 2004, 和 2005 年中的每月最后一个周五的 10:15 AM</td><td>0 15 10 ? * 6L 2002-2005</td></tr><tr><td>每月第三个周五的 10:15 AM</td><td>0 15 10 ? * 6#3</td></tr><tr><td>每月从第一天算起每五天的 12:00 PM (中午)</td><td>0 0 12 1&#x2F;5 * ?</td></tr><tr><td>每一个 11 月 11 号的 11:11 AM</td><td>0 11 11 11 11 ?</td></tr><tr><td>三月份每个周三的 2:10 PM 和 2:44 PM</td><td>0 10,44 14 ? 3 WED</td></tr></tbody></table><h2 id="创建一个即刻触发的-Trigger"><a href="#创建一个即刻触发的-Trigger" class="headerlink" title="创建一个即刻触发的 Trigger"></a>创建一个即刻触发的 Trigger</h2><p>有时候，你需要立即执行一个 job。例如，想像一下，你正在构建一个 GUI 程序并允许用户能立刻执行。另一个例子，你或许已经检测到了某个 Job 未执行成功，因此你想要即刻重跑一次。在 Quartz 1.5，有几个方法被加入到了TriggerUtils 类中，使得实现那些事很容易了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flatten-maven-plugin插件配置说明</title>
      <link href="/2020/02/04/flatten-maven-plugin%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/02/04/flatten-maven-plugin%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自：<a href="https://my.oschina.net/liyuj/blog/874929">使用flatten-maven-plugin对发布的POM进行精简</a></p></blockquote><p>使用maven开发的模块化应用，可以发布出去供他人使用，比如各种开源库，使用时，要么是继承，要么是以依赖的形式引入。但我们看各种库的pom.xml文件，通常都比较简单，一般只有一些必要的依赖信息，作为开发者，通常认为使用者也就需要这些信息。但是真正开发时，对应模块的pom可能比较复杂，可能要使用各种插件，引用各种依赖，组件间有继承关系，甚至根据不同的参数走不同的分支，即使用profile机制等，maven默认在部署时，会保留对应模块中的pom的所有信息，不会做改动。这样就给模块的发布带来了一定的麻烦，如果直接发布这样的pom.xml，是可能给使用者造成干扰的，出了问题又很难进行定位。</p><p>解决这个问题有很多的做法，比如构建两个工程，一个用于开发，一个用于版本发布，两个工程的pom是不同的，这样看上去也更符合软件开发的常规流程，另外，也可以考虑禁用maven默认的deloy过程，然后直接调用 <code>deploy:deploy-file</code> 单独部署某个文件。总之，不管怎样，办法肯定是有的。</p><p>而本文的目的，是想介绍一种新的方式，来优雅地解决这个问题，也许实际开发中并不需要这样做。</p><span id="more"></span><p>具体做法是，使用社区专门针对这个问题开发的插件，即Maven Flatten Plugin，这个插件使用起来非常简单，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flatten-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个插件的作用是，生成一个压缩版的pom.xml文件，然后在install和deploy阶段使用压缩后的pom.xml文件，替换原来的pom.xml文件，具体压缩策略如下：</p><ul><li>和构建有关的元素会被删除；</li><li>和开发有关的元素默认会被删除；</li><li>只包含构件的使用者必须的一些信息；</li><li>变量会被解析；</li><li>上级关系会被解析，然后被压缩删除；</li><li>构建时实际使用的profile会被评估，视情况处理；</li><li>由JDK或者OS驱动的profile会被保留，需要时可以动态地控制依赖。</li></ul><p>在默认的压缩逻辑下，插件如何处理各种元素，可以看这里。 下面会重点介绍如何通过各种参数来控制压缩的过程：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>embedBuildProfileDependencies</td><td>Boolean</td><td>由OS或者JDK的不同而触发的profile，可能根据环境的不同而产生不同的依赖，但是由属性等触发的profile，就不确定了，如果属性设置为true，profile中的依赖会直接写入生成的pom中，如果设置为false，所有的profile信息都会保留,默认是false。</td></tr><tr><td>flattenMode</td><td>FlattenMode</td><td>插件预定义了若干种压缩模式，下面会详述。</td></tr><tr><td>flattenedPomFilename</td><td>String</td><td>生成的压缩后的<code>pom.xml</code>文件的文件名，默认为<code>.flattened-pom.xml</code>。</td></tr><tr><td>outputDirectory</td><td>File</td><td>生成的压缩后的<code>pom.xml</code>文件的存放位置，默认为<code>$&#123;project.basedir&#125;</code>。</td></tr><tr><td>pomElements</td><td>FlattenDescriptor</td><td>该元素定义了如何处理额外的元素，如果可能，尽量使用<code>flattenMode</code>，这个元素仅仅用于进一步提高灵活性，它可以控制具体的某个元素是保留还是删除，比如要指定删除repositories，可以这样：<code>&lt;pomElements&gt;&lt;repositories&gt;flatten&lt;/repositories&gt;&lt;/pomElements&gt;</code>。</td></tr><tr><td>updatePomFile</td><td>Boolean</td><td>插件默认只会处理packaging属性为非pom的，如果要处理packaging为pom的，可将本属性值设置为true。</td></tr></tbody></table><p>插件预定义了若干种模式，可以满足若干种常见的场景，这些模式定义在org.codehaus.mojo.flatten.FlattenMode枚举中，具体可以看代码，本文简单描述如下：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>minimum</td><td>不推荐使用，会展开<code>pluginRepositories</code>。</td></tr><tr><td>bom</td><td>会保留<code>dependencyManagement</code>，展开<code>properties</code>。</td></tr><tr><td>oss</td><td>推荐开源项目使用，会展开<code>ciManagement</code>、<code>contributors</code>、<code>distributionManagement</code>、<code>inceptionYear</code>、<code>issueManagement</code>、<code>mailingLists</code>、<code>organization</code>、<code>prerequisites</code></td></tr><tr><td>ossrh</td><td>会展开<code>name</code>、<code>description</code>、<code>url</code>、<code>scm</code>、<code>developers</code></td></tr><tr><td>defaults</td><td>会展开<code>repositories</code></td></tr><tr><td>clean</td><td>删除全部可选元素</td></tr></tbody></table><p>具体可以看<a href="https://www.mojohaus.org/flatten-maven-plugin/apidocs/index.html">FlattenMode的javadoc</a>。</p><table><thead><tr><th>pomElement处理方式</th><th>描述</th></tr></thead><tbody><tr><td>expand</td><td>Take the element from the effective POM.</td></tr><tr><td>flatten</td><td>Flatten the element.</td></tr><tr><td>interpolate</td><td>Take the element from the interpolated POM (original POM with variables interpolated).</td></tr><tr><td>keep</td><td>Take the element untouched from the original POM.</td></tr><tr><td>remove</td><td>Remove the element entirely so it will not be present in flattened POM.</td></tr><tr><td>resolve</td><td>Take the element from the resolved POM.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weixin-java-tools微信JavaSDK开发工具包</title>
      <link href="/2020/02/04/weixin-java-tools%E5%BE%AE%E4%BF%A1JavaSDK%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/"/>
      <url>/2020/02/04/weixin-java-tools%E5%BE%AE%E4%BF%A1JavaSDK%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://github.com/Wechat-Group/weixin-java-tools/wiki">微信Java SDK开发文档</a></p><p><a href="https://github.com/Wechat-Group/weixin-java-tools">weixin-java-tools</a> 是一款开源的微信 Java SDK 工具，对微信接口封装的比较全，简单配置即可使用，正式版的更新频率是两个月，是 Java 开发微信项目的利器。此文主要介绍使用过程中遇到的的一些 wiki 中没有详细介绍的地方。</p><span id="more"></span><h2 id="CP-如何调用未支持的接口"><a href="#CP-如何调用未支持的接口" class="headerlink" title="CP_如何调用未支持的接口"></a>CP_如何调用未支持的接口</h2><blockquote><p><a href="https://github.com/wechat-group/weixin-java-tools/wiki/CP_%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E6%9C%AA%E6%94%AF%E6%8C%81%E7%9A%84%E6%8E%A5%E5%8F%A3">CP_如何调用未支持的接口</a></p></blockquote><p>使用 <code>wxCpService.get(url, queryParam)</code> 和 <code>wxCpService.post(url, postData)</code> 方法时 url 和 queryParam 不用附带 accessToken 参数，因为该参数在实际调用微信接口时已经封装在 url 的 queryParam 里了。post 方法中的 postData 是 stringify 处理之后的 JSON 字符串 而不是 JSON 对象。</p><h2 id="MP-js-api"><a href="#MP-js-api" class="headerlink" title="MP_js_api"></a>MP_js_api</h2><blockquote><p><a href="https://github.com/Wechat-Group/weixin-java-tools/wiki/MP_js_api">MP_js_api</a></p></blockquote><p>微信企业号服务获取JS-SDK需要的证书信息可以调用 <code>wxCpService.createJsapiSignature(url)</code>，其中 url 必须是调用 JS-SDK 页面的全路径（包括?后的 queryString）中第一个#之前的字符串。例如当前的页面全路径是 <code>http://www.yupaits.com/hello?text=world&amp;next=config#wechat</code>，则 url 应该是 <code>http://www.yupaits.com/hello?text=world&amp;next=config</code>。</p><p>页面上可以<a href="http://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3#.E6.AD.A5.E9.AA.A4.E4.BA.8C.EF.BC.9A.E9.80.9A.E8.BF.87config.E6.8E.A5.E5.8F.A3.E6.B3.A8.E5.85.A5.E6.9D.83.E9.99.90.E9.AA.8C.E8.AF.81.E9.85.8D.E7.BD.AE">通过config接口注入权限验证配置</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，企业号的唯一标识，此处填写企业号corpid</span></span><br><span class="line">    <span class="attr">timestamp</span>: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    <span class="attr">nonceStr</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    <span class="attr">signature</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    <span class="attr">jsApiList</span>: [] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>两者结合的实例。点击页面上的“扫码”按钮，调用 js 中的 <code>scan()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/jssdk&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsSdkPage</span><span class="params">(HttpServletRequest request, Model model)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().append(StringUtils.isNotBlank(HttpUtil.getRequest().getQueryString()) ? <span class="string">&quot;?&quot;</span> + HttpUtil.getRequest().getQueryString() : <span class="string">&quot;&quot;</span>).toString();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;jsApiSignature&quot;</span>, JSON.toJSONString(wxCpService.createJsapiSignature(url)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;获取JS-API的签名出错，&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;weixin/jssdk&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsapisignature = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;$&#123;jsApiSignature&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scan</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">appId</span>: jsapisignature.<span class="property">appid</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: jsapisignature.<span class="property">timestamp</span>,</span><br><span class="line">        <span class="attr">nonceStr</span>: jsapisignature.<span class="property">noncestr</span>,</span><br><span class="line">        <span class="attr">signature</span>: jsapisignature.<span class="property">signature</span>,</span><br><span class="line">        <span class="attr">jsApiList</span>: [</span><br><span class="line">            <span class="string">&#x27;scanQRCode&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        wx.<span class="title function_">scanQRCode</span>(&#123;</span><br><span class="line">            <span class="attr">needResult</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;恭喜你&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.<span class="property">errMsg</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;function_not_exist&#x27;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&#x27;版本过低请升级&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.<span class="title function_">error</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;微信JS接口验证失败，无法调用相关接口&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub和Jenkins自动构建并部署静态页面</title>
      <link href="/2020/02/04/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/02/04/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>随着DevOps的日趋成熟，CI&#x2F;CD的概念已经慢慢为广大开发运维人员所熟知和认同，本文记录了GitHub结合Jenkins自动构建和部署静态页面的方法，并从中窥见CI&#x2F;CD之一二，同时也是做一个备忘记录。</p><span id="more"></span><h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>创建任务时选择<strong>构建一个自由风格的软件项目</strong>。</p><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/jenkins%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1.png" alt="jenkins创建任务"></p><h2 id="配置Jenkins任务"><a href="#配置Jenkins任务" class="headerlink" title="配置Jenkins任务"></a>配置Jenkins任务</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-General.png" alt="任务配置-General"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.png" alt="任务配置-源码管理"></p><p>填写源码的git地址，用于下载源码到jenkins的工作空间，以便后续进行构建操作。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="任务配置-构建触发器"></p><p><a href="https://github.com/YupaiTS/yupaits-work/settings/hooks">进入GitHub的相应项目中配置webhook</a>，webhook的<code>Payload URL</code>填写格式为<code>http://jenkins所在的domain或者ip:port/github-webhook/</code>。完成配置后，github接收特定的事件之后会触发请求该url。jenkins接收到请求之后会触发任务执行构建。</p><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83.png" alt="任务配置-构建环境"></p><p>在<code>Console Output</code>中加入时间戳，将<code>nodejs</code> 和 <code>npm</code>命令加入PATH，方便进行全局执行。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA.png" alt="任务配置-构建"></p><p>首先执行<code>npm install</code>安装依赖包，再执行<code>npm run build</code>进行构建。</p><p><strong>YupaitsWork.sh</strong>脚本用于将构建生成的页面覆盖掉nginx的静态页面，实现自动更新nginx主页的效果，其内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/www/html/**</span><br><span class="line"><span class="built_in">cp</span> -rf /var/lib/jenkins/workspace/YupaitsWork/dist/** /var/www/html</span><br></pre></td></tr></table></figure><p>需要注意的是，默认的jenkins用户是没有<code>/var/www/html</code>目录的操作操作权限的，需要使用<code>chown -R jenkins:jenkins /var/www/html</code>更改该目录的所有者为jenkins用户。</p><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="/images/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CJenkins%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E5%90%8E%E6%93%8D%E4%BD%9C.png" alt="任务配置-构建后操作"></p><p>将构建后的<code>dist</code>文件夹内容进行归档。</p><h2 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h2><p>完成任务的创建和配置之后，进入任务页面点击<strong>立即构建</strong>即可完成nginx主页的构建和覆盖部署。当然也可以通过push代码实现自动构建和部署。</p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gitee+Jenkins+Docker完成前后端分离项目的CI/CD</title>
      <link href="/2020/02/04/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/"/>
      <url>/2020/02/04/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitee-Webhook配置"><a href="#Gitee-Webhook配置" class="headerlink" title="Gitee Webhook配置"></a>Gitee Webhook配置</h2><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/Webhook%E9%85%8D%E7%BD%AE.png" alt="Webhook配置"></p><p>URL的格式为 <code>http://[username]:[password或者jenkins的api_token]@www.yupaits.com:8080/generic-webhook-trigger/invoke</code> 。</p><p>webhook请求提交的数据参考<a href="http://git.mydoc.io/?t=154711">码云平台帮助文档</a>。</p><span id="more"></span><h2 id="Jenkins插件安装、环境配置"><a href="#Jenkins插件安装、环境配置" class="headerlink" title="Jenkins插件安装、环境配置"></a>Jenkins插件安装、环境配置</h2><h3 id="必需插件"><a href="#必需插件" class="headerlink" title="必需插件"></a>必需插件</h3><p>Jenkins需要安装以下插件：</p><ul><li>Generic Webhook Trigger Plugin</li><li>Git Plugin</li><li>NodeJS Plugin</li></ul><h3 id="全局环境"><a href="#全局环境" class="headerlink" title="全局环境"></a>全局环境</h3><p>Jenkins需要配置以下全局工具：</p><ul><li>JDK</li><li>Git</li><li>Maven</li><li>NodeJS</li></ul><h2 id="Jenkins任务配置"><a href="#Jenkins任务配置" class="headerlink" title="Jenkins任务配置"></a>Jenkins任务配置</h2><h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-General.png" alt="任务配置-General"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.png" alt="任务配置-源码管理"></p><p>填写Gitee代码仓库地址，选择需要构建的分支。</p><h3 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="任务配置-构建触发器"></p><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A81.png" alt="任务配置-构建触发器1"></p><p>配置触发器参数和触发过滤条件。这里选择了分支名称和项目名称作为构建时的过滤条件。<code>Expression</code>里的<code>$</code>是webhook请求中的请求体JSON数据对象，而<code>Variable</code>中的ref则是Jenkins触发器的变量名，在<code>Optional filter</code>中可以通过<code>$ref</code>来引用该变量。</p><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83.png" alt="任务配置-构建环境"></p><p>由于<code>Todo-Tomato</code>项目里有基于<code>vue-loader</code>的前端SPA，所以构建时需要<code>nodejs</code>和<code>npm</code>环境。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA.png" alt="任务配置-构建"></p><p>构建分三步：构建前执行脚本；maven构建；构建后执行脚本。</p><ul><li>构建前脚本：停止相关docker容器；安装npm依赖；npm构建；dist文件夹移入后台Spring Boot项目的resources&#x2F;public资源文件目录下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker stop todo-tomato</span><br><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/workspace/TodoTomato/todo-tomato-web</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line"><span class="built_in">mkdir</span> -p ../todo-tomato-server/src/main/resources/public</span><br><span class="line"><span class="built_in">rm</span> -rf ../todo-tomato-server/src/main/resources/public/**</span><br><span class="line"><span class="built_in">cp</span> -rf dist/** ../todo-tomato-server/src/main/resources/public</span><br></pre></td></tr></table></figure><ul><li>构建后脚本：将构建生成的Jar包和DockerFile移入目标文件夹；停止相关docker容器并删除相关docker镜像；构建docker镜像；运行基于docker镜像的容器。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/lib/jenkins/workspace/TodoTomato/todo-tomato-server/target/docker</span><br><span class="line"><span class="built_in">cd</span> /var/lib/jenkins/workspace/TodoTomato/todo-tomato-server/target</span><br><span class="line"><span class="built_in">cp</span> -f todo-tomato-server-*.jar docker</span><br><span class="line"><span class="built_in">cp</span> -f ../src/main/docker/DockerFile docker</span><br><span class="line"><span class="built_in">cd</span> docker</span><br><span class="line">docker stop todo-tomato</span><br><span class="line">docker <span class="built_in">rm</span> todo-tomato</span><br><span class="line">docker rmi yupaits/todo-tomato:latest</span><br><span class="line">docker build -f DockerFile -t yupaits/todo-tomato:latest .</span><br><span class="line">docker run -d -p 6060:6060 --restart always --name todo-tomato -v /root/todo-tomato/logs:/root/logs yupaits/todo-tomato:latest</span><br></pre></td></tr></table></figure><h3 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h3><p><img src="/images/%E4%BD%BF%E7%94%A8Gitee-Jenkins-Docker%E5%AE%8C%E6%88%90%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E7%9A%84CI-CD/%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE-%E6%9E%84%E5%BB%BA%E5%90%8E%E6%93%8D%E4%BD%9C.png" alt="任务配置-构建后操作"></p><p>构建完成后，将生成的Jar包和DockerFile进行归档。</p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Gitee </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布jar包到Maven中央仓库</title>
      <link href="/2020/02/04/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2020/02/04/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/">发布jar包到maven中央仓库</a></p></blockquote><p>在 maven 中引入第三方 jar 包是非常简单的，只需使用 groupId + artifactId + version 就能从 Maven 仓库中下载对应的 jar 包。</p><p>例如：引入 guava 的 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gruopId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>25.0-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本文就介绍如何将自己的 jar 包发布到 Maven 中央仓库。</p><span id="more"></span><h2 id="创建issue"><a href="#创建issue" class="headerlink" title="创建issue"></a>创建issue</h2><p>首先需要在 <a href="https://issues.sonatype.org/secure/Dashboard.jspa">https://issues.sonatype.org/secure/Dashboard.jspa</a> 注册一个账号，创建一个新项目的 issue 并提交。</p><p><img src="/images/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/%E5%88%9B%E5%BB%BAissue.png" alt="创建issue"></p><ul><li>Project 选择 Community Support，Issue type 选择 New Project。</li><li>注意 Group Id，如果有对应域名的话则使用域名对应的 Group Id（例如 netty 项目的域名是 netty.io，则 Group Id 为 io.netty），没有自己的域名最好就填 com.github.xxx，因为在 issue 里审核员会询问你是否拥有 Group Id 对应的域名并且要求你进行技术验证，没有的话审核会不通过，而托管在 github 上的话就可以直接使用 github 的域名来完成审核。</li></ul><h2 id="issue审核"><a href="#issue审核" class="headerlink" title="issue审核"></a>issue审核</h2><p>创建成功后等 1-2 个小时左右就会有工作人员评论 issue，问你是否持有域名。</p><p><img src="/images/%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/issue%E5%AE%A1%E6%A0%B8.png" alt="issue审核"></p><p>如果是用com.github.xxx的 Group Id，就回复要使用com.github.xxx作为你的域名，否则有域名就回复有就好,接着等待工作人员确认(我等了一天)，确认成功之后 issue 的状态就会变成RESOLVED，这个时候就有资格上传 jar 包到 maven 仓库了。</p><h2 id="gpg管理密钥"><a href="#gpg管理密钥" class="headerlink" title="gpg管理密钥"></a>gpg管理密钥</h2><p>在上传 jar 包之前，先要使用 gpg 工具生成 RSA 密钥对，并把公钥上传到公共密钥服务器，这样在发布 jar 包时能校验用户的身份。</p><ol><li><p>下载 gpg 工具，<a href="https://www.gnupg.org/download/index.html">下载地址</a>，下载对应操作系统的版本然后进行安装。</p></li><li><p>验证安装和上传生成的公钥</p><ul><li><p>验证 gpg 是否安装成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure></li><li><p>生成 RSA 密钥对</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpgp --gen-key</span><br></pre></td></tr></table></figure><p>  接着需要填写名字和邮箱等等基本信息，这些都不是重点，最主要的是有个 <code>Passphase</code> 的选项在填完之后记下来，到时候发布 jar 包的时候要用到。</p></li><li><p>查看生成的密钥，并上传至密钥服务器</p><p>  需要上传到服务器的就是 pub 里的公钥串 <code>DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------</span><br><span class="line">pub   rsa2048 2019-03-08 [SC] [expires: 2021-03-08]</span><br><span class="line">    DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br><span class="line">uid           [ultimate] yupaits &lt;ts495606653@hotmail.com&gt;</span><br><span class="line">sub   rsa2048 2019-03-08 [E] [expires: 2021-03-08]</span><br></pre></td></tr></table></figure><p>  上传公钥至密钥服务器，国内可以用这个服务器 <code>hkp://keyserver.ubuntu.com:11371</code>。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br></pre></td></tr></table></figure><p>  上传完成后验证是否成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --receive-keys DA4832CAE9C6100EBD5CB4D1AF21758121E778AE</span><br></pre></td></tr></table></figure><p>  验证成功</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><ol><li><p>修改项目中的pom.xml文件，添加部署相关配置，以下是个人项目 <code>project-commons</code> 的 pom.xml 示例：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yupaits<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;revision&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>project-commons<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>项目通用commons<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons.git<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>MIT License<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits/project-commons/blob/master/LICENSE<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>yupaits<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/yupaits<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>ts495606653@hotmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">revision</span>&gt;</span>1.0.12<span class="tag">&lt;/<span class="name">revision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-annotation<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-extension<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-jpa<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>commons-mybatis<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">additionalOption</span>&gt;</span>-Xdoclint:none<span class="tag">&lt;/<span class="name">additionalOption</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">additionalOptions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flatten-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>flatten<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">updatePomFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updatePomFile</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">flattenMode</span>&gt;</span>bom<span class="tag">&lt;/<span class="name">flattenMode</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">pomElements</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">parent</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>resolve<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">properties</span>&gt;</span>interpolate<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">pomElements</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把之前创建 issue 时注册的账号配置到 maven 的配置文件里，找到 maven 的 setting.xml文件，在 <code>&lt;servers&gt;</code> 标签里添加。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="部署jar包"><a href="#部署jar包" class="headerlink" title="部署jar包"></a>部署jar包</h2><ol><li><p>使用下面的命令行将项目打包构建并上传至maven仓库。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -Dgpg.passphrase=YourPassphrase</span><br></pre></td></tr></table></figure></li><li><p>使用创建 issue 时的账号登录到 <a href="https://oss.sonatype.org/%EF%BC%8C%E7%84%B6%E5%90%8E%E7%9C%8B%E5%9B%BE%E6%93%8D%E4%BD%9C%E3%80%82">https://oss.sonatype.org/，然后看图操作。</a></p><p> <img src="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/1532339455164.png" alt="Close Staging Repository"></p></li><li><p>Close 完了系统会验证 jar 包，点击刷新可以看到最新的进度，当全部验证通过的时候，状态会变成 <code>closed</code>，然后再选中文件 <code>Release</code> 就发布完成了。然后等个几个小时就可以在中央仓库搜索到自己发布的 jar 包了。</p><p> <img src="https://monkeywie.github.io/2018/07/23/publish-jar-to-maven/1532339866124.png" alt="Realease"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源项目License的介绍</title>
      <link href="/2020/02/04/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AELicense%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/04/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AELicense%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://gitee.com/oschina/git-osc/wikis/License">《开源许可证的一些介绍》</a></p></blockquote><p>当我们在github、gitee上新建项目的时候，往往不知道到该如何选择一个合适的开源许可证，本文引用gitee上的License介绍对常见的License做一个简单的介绍。</p><span id="more"></span><h1 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h1><h2 id="Apache-v2-License"><a href="#Apache-v2-License" class="headerlink" title="Apache v2 License"></a><a href="http://opensource.org/licenses/Apache-2.0">Apache v2 License</a></h2><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p><ol><li>需要给代码的用户一份Apache Licence</li><li>如果你修改了代码，需要再被修改的文件中说明。</li><li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li></ol><p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布&#x2F;销售。</p><h2 id="MIT-License"><a href="#MIT-License" class="headerlink" title="MIT License"></a><a href="http://opensource.org/licenses/MIT">MIT License</a></h2><p>MIT许可证之名源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称「X条款」（X License）或「X11条款」（X11 License）</p><p>MIT内容与三条款BSD许可证（3-clause BSD license）内容颇为近似，但是赋予软体被授权人更大的权利与更少的限制。</p><p>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软体及软体的副本。</p><p>被授权人可根据程式的需要修改授权条款为适当的内容。</p><p>在软件和软件的所有副本中都必须包含版权声明和许可声明。</p><p>此授权条款并非属copyleft的自由软体授权条款，允许在自由&#x2F;开放源码软体或非自由软体（proprietary software）所使用。</p><p>此亦为MIT与BSD（The BSD license, 3-clause BSD license）本质上不同处。</p><p>MIT条款可与其他授权条款并存。另外，MIT条款也是自由软体基金会（FSF）所认可的自由软体授权条款，与GPL相容。</p><h2 id="GPL-v2"><a href="#GPL-v2" class="headerlink" title="GPL v2"></a><a href="http://opensource.org/licenses/GPL-2.0">GPL v2</a></h2><p>GPL 是GNU通用公共许可协议(GNU General Public License)的简称，我们很熟悉的 Linux 和 Git 就是采用了 GPL，该协议力图保障你分享和修改某程序全部版本的权利——确保自由软件对其用户来说是自由的。</p><p>所谓自由软件，强调自由，而非免费。GNU通用公共许可协议设计用于确保你享有分发自由软件的自由（你可以为此服务收费），确保你可以在需要的时候获得这些软件的源码，确保你可以修改这些软件或者在新的自由软件中复用其中某些片段，并且确保你在这方面享有知情权。</p><p>自由权利包括复制、分发和修改。源码是指所有修改作品及生成、安装、运行（对可执行作品而言）目标码所需的源码，包括控制上述行为的脚本，但其中不包括系统库、通用工具。</p><p>简而言之，如果你分发自由软件的副本，那么副本中必须包含许可协议和版权声明，并确保接收者能够获取到该副本的源代码及其依赖库的源码。</p><h2 id="Artistic-License-2-0"><a href="#Artistic-License-2-0" class="headerlink" title="Artistic License 2.0"></a><a href="http://opensource.org/licenses/Artistic-2.0">Artistic License 2.0</a></h2><p>Artistic License，又称艺术许可协议（英语：Artistic License），通常指最初的艺术许可协议（1.0版），是一个自由软件授权条款，主要用在官方发布的Perl解释器和大部分CPAN模块的授权。原始的艺术许可协议是由Perl的创始人Larry Wall编写发布的。</p><h2 id="BSD-2-Clause-license"><a href="#BSD-2-Clause-license" class="headerlink" title="BSD 2-Clause license"></a><a href="http://opensource.org/licenses/BSD-2-Clause">BSD 2-Clause license</a></h2><p>BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。</p><p>BSD鼓励代码共享的同时，要求尊重代码作者的著作权。</p><p>使用BSD协议，需要遵守以下规则：</p><ol><li>再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li><li>如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档那个和版权声明中包含原来代码中的BSD协议。</li></ol><h2 id="Affero-GPL"><a href="#Affero-GPL" class="headerlink" title="Affero GPL"></a><a href="http://opensource.org/licenses/AGPL-3.0">Affero GPL</a></h2><p>是一个广泛被使用的自由软件特许条款，最初由Affero, Inc撰写。此特许条款最新版本为“第3版”（v3），2007年11月发布。Affero 通用公众特许条款是改自GNU通用公众特许条款，并加入额外条款，其目的是为了Copyleft条款应用于在网络上运行的应用程式（如Web应用），从而避免有人以应用服务提供商方式逃避GNU通用公众特许条款。</p><h2 id="LGPL-v2-1"><a href="#LGPL-v2-1" class="headerlink" title="LGPL v2.1"></a><a href="http://opensource.org/licenses/LGPL-2.1">LGPL v2.1</a></h2><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用&#x2F;修改&#x2F;衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p>GPL&#x2F;LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p><h2 id="BSD-3-Clause-License"><a href="#BSD-3-Clause-License" class="headerlink" title="BSD (3-Clause) License"></a><a href="http://opensource.org/licenses/BSD-3-Clause">BSD (3-Clause) License</a></h2><p>BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。</p><p>BSD鼓励代码共享的同时，要求尊重代码作者的著作权。</p><p>使用BSD协议，需要遵守以下规则：</p><ol><li>再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li><li>如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档那个和版权声明中包含原来代码中的BSD协议;</li><li>不可以用开源代码的“作者&#x2F;机构的名字”或“原来产品的名字”做市场推广。</li></ol><h2 id="Eclipse-Public-License-v1-0"><a href="#Eclipse-Public-License-v1-0" class="headerlink" title="Eclipse Public License v1.0"></a><a href="http://opensource.org/licenses/EPL-1.0">Eclipse Public License v1.0</a></h2><p>EPL允许使用者任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。</p><p>使用EPL协议，需要遵守以下规则：</p><ol><li>当一个代码贡献者将源码的整体或部分再次开源发布的时候,必须继续遵循EPL开源协议来发布,而不能改用其他协议发布.除非你得到了原“源码”拥有者的授权；</li><li>EPL协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,或者当你再发布的是二进制文件的时候,你必须声明它的源代码是可以获取的,而且要告知获取方法；</li><li>当你需要将EPL下的源码作为一部分跟其他私有的源码混和着成为一个Project发布的时候,你可以将整个Project&#x2F;Product以私人的协议发布,但要声明哪一部分代码是EPL下的,而且声明那部分代码继续遵循EPL；</li><li>独立的模块(Separate Module),不需要开源。</li></ol><h2 id="LGPL-v3"><a href="#LGPL-v3" class="headerlink" title="LGPL v3"></a><a href="http://opensource.org/licenses/LGPL-3.0">LGPL v3</a></h2><p>相对于LGPL v2，不仅要求用户公布修改的源代码，还阻止了其他一些私有化的方式，例如：不得将产品内的软件“tivo化”或“锁定”，或者（用行业内的话来说）“安全启动”，也就是说，不得以任何形式阻止用户修改产品内的以 GPL 许可协议发布的软件。</p><h2 id="Mozilla-Public-License-Version-2-0"><a href="#Mozilla-Public-License-Version-2-0" class="headerlink" title="Mozilla Public License Version 2.0"></a><a href="http://opensource.org/licenses/MPL-2.0">Mozilla Public License Version 2.0</a></h2><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对 源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p><ul><li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个 豁口。 </li><li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。 </li><li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是 专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。 </li><li>对源代码的定义<br>而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择 取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始 源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。” </li><li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li></ul><h2 id="GPL-v3"><a href="#GPL-v3" class="headerlink" title="GPL v3"></a><a href="http://opensource.org/licenses/GPL-3.0">GPL v3</a></h2><p>GPL v3与GPL v2类似。区别在于，不仅要求用户公布修改的源代码，还阻止了其他一些私有化的方式，例如：不得将产品内的软件“tivo化”或“锁定”，或者（用行业内的话来说）“安全启动”，也就是说，不得以任何形式阻止用户修改产品内的以 GPL 许可协议发布的软件。</p><h2 id="Public-Domain"><a href="#Public-Domain" class="headerlink" title="Public Domain"></a><a href="http://fairuse.stanford.edu/overview/public-domain/welcome/">Public Domain</a></h2><p>Public Domain 是人类的一部分作品与一部分知识的总汇，可以包括文章、艺术品、音乐、科学、发明等等。对于领域内的知识财产，任何个人或团体都不具所有权益（所有权益通常由版权或专利体现）。这些知识发明属于公有文化遗产，任何人可以不受限制地使用和加工它们（此处不考虑有关安全、出口等的法律）。创立版权制度的初衷是借由给予创作者一段时期的专有权利作为（经济）刺激以鼓励作者从事创作。当专有权利期间届止，作品便进入公有领域。公有领域的作品由于没有专属权利人，因此公众有权自由使用它们。  </p><h1 id="选择合适的License"><a href="#选择合适的License" class="headerlink" title="选择合适的License"></a>选择合适的License</h1><p>GitHub的使用帮助中对<a href="https://help.github.com/articles/licensing-a-repository/">如何授权一个项目</a>有着详细介绍，着重关注一下其推荐的<a href="https://choosealicense.com/">Choose an open source license</a>和<a href="https://opensource.guide/legal/">The Legal Side of Open Source</a>，按需选择适合自己项目的开源License。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> License </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号管理平台的实现</title>
      <link href="/2020/02/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>微信公众号管理平台是对多个公众号统一配置管理的平台，本文介绍了该平台的实现方案。项目地址：<a href="https://gitee.com/yupaits/wechat-admin">wechat-admin</a>，该项目尚未开放，待对项目中的内容进行脱敏之后会公开。</p><span id="more"></span><h2 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h2><p><em><strong>多个公众号如何复用同一个消息接口、同一套消息处理逻辑？</strong></em></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>微信Java开发工具包<a href="https://github.com/Wechat-Group/weixin-java-tools">weixin-java-tools</a>中的公众号开发工具<strong>weixin-java-mp</strong>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li><p>多个公众号使用统一的消息接收接口，并附带公众号在管理平台的id作为标识；</p></li><li><p>统一消息接收接口获取id，<strong>动态配置</strong>仅用于本次消息处理的消息路由；</p></li><li><p>消息路由根据实际接收到的消息事件做出响应。</p></li></ol><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h3><ul><li>WxPortalController.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/portal/WxMpAccount/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPortalController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpServiceHelper wxMpServiceHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENCRYPT_TYPE_AES</span> <span class="operator">=</span> <span class="string">&quot;aes&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(produces = &quot;text/plain; charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">authGet</span><span class="params">(<span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">                          <span class="meta">@RequestParam(&quot;echostr&quot;)</span> String echostr)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;\n接收到来自微信服务器的认证消息：[&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]&quot;</span>, signature, timestamp, nonce, echostr);</span><br><span class="line">        <span class="keyword">if</span> (wxMpServiceHelper.wxMpService(id).checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;非法请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(produces = &quot;application/xml; charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">post</span><span class="params">(<span class="meta">@PathVariable</span> Long id,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestBody</span> String requestBody,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(name = &quot;msg_signature&quot;,required = false)</span> String msgSignature)</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;\n接收微信请求：[signature=[&#123;&#125;], encType=[&#123;&#125;], msgSignature=[&#123;&#125;], timestamp=[&#123;&#125;], nonce=[&#123;&#125;], &quot;</span> +</span><br><span class="line">                <span class="string">&quot;requestBody=[\n&#123;&#125;\n] &quot;</span>, signature, encType, msgSignature, timestamp, nonce, requestBody);</span><br><span class="line">        <span class="keyword">if</span> (!wxMpServiceHelper.wxMpService(id).checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法请求，可能属于伪造的请求！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">out</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (encType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">WxMpXmlMessage</span> <span class="variable">inMessage</span> <span class="operator">=</span> WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">            <span class="type">WxMpXmlOutMessage</span> <span class="variable">outMessage</span> <span class="operator">=</span> wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</span><br><span class="line">            out = outMessage == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : outMessage.toXml();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ENCRYPT_TYPE_AES.equalsIgnoreCase(encType)) &#123;</span><br><span class="line">            <span class="type">WxMpXmlMessage</span> <span class="variable">inMessage</span> <span class="operator">=</span> WxMpXmlMessage.fromEncryptedXml(requestBody,</span><br><span class="line">                    wxMpServiceHelper.wxMpService(id).getWxMpConfigStorage(), timestamp, nonce, msgSignature);</span><br><span class="line">            logger.debug(<span class="string">&quot;\n消息解密后内容为：\n&#123;&#125;&quot;</span>, inMessage.toString());</span><br><span class="line">            <span class="type">WxMpXmlOutMessage</span> <span class="variable">outMessage</span> <span class="operator">=</span> wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</span><br><span class="line">            out = outMessage == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : outMessage.toEncryptedXml(wxMpServiceHelper.wxMpService(id).getWxMpConfigStorage());</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">&quot;\n回复信息：&#123;&#125;&quot;</span>, out);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信消息统一接收接口，此处最核心的就是<code>wxMpServiceHelper.wxMpMessageRouter(id).route(inMessage);</code>。</p><ul><li>WxMpServiceHelper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxMpServiceHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpAccountRepository wxMpAccountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubscribeHandler subscribeHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxEventHandlers handlers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MsgHandler msgHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BaseWxServiceImpl <span class="title function_">wxMpService</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseWxServiceImpl</span>(id, wxMpAccountRepository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WxMpMenuServiceImpl <span class="title function_">wxMpMenuService</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WxMpMenuServiceImpl</span>(wxMpService(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WxMpMessageRouter <span class="title function_">wxMpMessageRouter</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">WxMpMessageRouter</span> <span class="variable">router</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WxMpMessageRouter</span>(wxMpService(id));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录所有事件的日志</span></span><br><span class="line">        router.rule().handler(<span class="keyword">new</span> <span class="title class_">LogHandler</span>(id)).next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关注公众号</span></span><br><span class="line">        router.rule().async(<span class="literal">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(WxConsts.EventType.SUBSCRIBE).handler(subscribeHandler.getHandler(id)).end();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义处理逻辑</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String, WxMpMessageHandler&gt; mpHandlerMap = (Map&lt;String, WxMpMessageHandler&gt;) MapUtils.getMap(handlers.getHandlerMap(), id);</span><br><span class="line">        <span class="keyword">if</span> (MapUtils.isNotEmpty(mpHandlerMap)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, WxMpMessageHandler&gt; handler : mpHandlerMap.entrySet()) &#123;</span><br><span class="line">                router.rule().async(<span class="literal">false</span>).msgType(WxConsts.XmlMsgType.EVENT).event(handler.getKey()).handler(handler.getValue()).end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动回复消息</span></span><br><span class="line">        router.rule().async(<span class="literal">false</span>).handler(msgHandler.getHandler(id)).end();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据传入微信公众号在公众号管理平台中的id，动态获取该公众号的配置参数、消息类型与处理类路径的对应关系列表，并以此生成该公众号的消息路由。消息路由根据实际传入的消息事件作出响应。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建OpenLDAP服务</title>
      <link href="/2020/02/04/%E6%90%AD%E5%BB%BAOpenLDAP%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/02/04/%E6%90%AD%E5%BB%BAOpenLDAP%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自 <a href="https://segmentfault.com/a/1190000014683418">我花了一个五一终于搞懂了OpenLDAP</a></p></blockquote><blockquote><p>轻型目录访问协议（英文：Lightweight Directory Access Protocol，缩写：LDAP）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p></blockquote><p>大部分企业级工具都支持LDAP协议，我们可以搭建OpenLDAP服务使得这些企业级工具共享同一套用户名和密码来进行认证授权。</p><span id="more"></span><h2 id="安装OpenLDAP"><a href="#安装OpenLDAP" class="headerlink" title="安装OpenLDAP"></a>安装OpenLDAP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openldap openldap-clients openldap-servers</span><br></pre></td></tr></table></figure><p>启动OpenLDAP服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service slapd start</span><br></pre></td></tr></table></figure><h2 id="配置OpenLDAP"><a href="#配置OpenLDAP" class="headerlink" title="配置OpenLDAP"></a>配置OpenLDAP</h2><h3 id="root-ldif"><a href="#root-ldif" class="headerlink" title="root.ldif"></a>root.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dn: olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=admin,dc=example,dc=com</span><br><span class="line">-</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=example,dc=com</span><br><span class="line">-</span><br><span class="line">replace: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;RLFdZ/Ym/O9TODUMNAPh8a7F5DzDaG5P</span><br></pre></td></tr></table></figure><p>修改RootDN，使用指令<code>ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f root.ldif</code></p><h3 id="org-ldif"><a href="#org-ldif" class="headerlink" title="org.ldif"></a>org.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dn: dc=example,dc=com</span><br><span class="line">dc: example</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: rootobject</span><br><span class="line"></span><br><span class="line">dn: ou=Group,dc=example,dc=com</span><br><span class="line">ou: Group</span><br><span class="line">description: Groups</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line"></span><br><span class="line">dn: ou=People,dc=example,dc=com</span><br><span class="line">ou: People</span><br><span class="line">description: People</span><br><span class="line">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure><p>使用指令<code>ldapadd -H ldapi:/// -D &quot;cn=admin,dc=example,dc=com&quot; -x -w $&#123;password&#125; -f org.ldif</code>。注意将<code>$&#123;password&#125;</code>替换为实际的密码。</p><p>以下三个文件以同样方式执行命令。</p><h3 id="memberof-config-ldif"><a href="#memberof-config-ldif" class="headerlink" title="memberof_config.ldif"></a>memberof_config.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=module,cn=config</span><br><span class="line">cn: module</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">olcModuleLoad: memberof</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcMemberOf</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: memberof</span><br><span class="line">olcMemberOfDangling: ignore</span><br><span class="line">olcMemberOfRefInt: TRUE</span><br><span class="line">olcMemberOfGroupOC: groupOfNames</span><br><span class="line">olcMemberOfMemberAD: member</span><br><span class="line">olcMemberOfMemberOfAD: memberOf</span><br></pre></td></tr></table></figure><h3 id="refint1-ldif"><a href="#refint1-ldif" class="headerlink" title="refint1.ldif"></a>refint1.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br></pre></td></tr></table></figure><h3 id="refint2-ldif"><a href="#refint2-ldif" class="headerlink" title="refint2.ldif"></a>refint2.ldif</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dn: olcOverlay=&#123;1&#125;refint,olcDatabase=&#123;2&#125;bdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: &#123;1&#125;refint</span><br><span class="line">olcRefintAttribute: memberof member manager owner</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLDAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过开启swap分区解决小内存阿里云服务器的运行瓶颈</title>
      <link href="/2020/02/04/%E9%80%9A%E8%BF%87%E5%BC%80%E5%90%AFswap%E5%88%86%E5%8C%BA%E8%A7%A3%E5%86%B3%E5%B0%8F%E5%86%85%E5%AD%98%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%93%B6%E9%A2%88/"/>
      <url>/2020/02/04/%E9%80%9A%E8%BF%87%E5%BC%80%E5%90%AFswap%E5%88%86%E5%8C%BA%E8%A7%A3%E5%86%B3%E5%B0%8F%E5%86%85%E5%AD%98%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%BF%90%E8%A1%8C%E7%93%B6%E9%A2%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自：<a href="https://blog.csdn.net/u012203437/article/details/49737365">ECS Linux开启swap（虚拟内存）</a></p></blockquote><p>阿里云在2018年春节前后通过一系列的促销活动向新老顾客推广云服务器，在诱人的价格面前笔者贡献了口袋里最后的可支配人民币，但实际使用下来，发现1核2G内存的ECS服务器的性能实在有限，特别是最近在上面部署docker容器的时候明显感觉到内存吃紧。思来想去，发现可以通过开启swap分区来解决内存瓶颈。</p><span id="more"></span><h2 id="swap分区大小设置"><a href="#swap分区大小设置" class="headerlink" title="swap分区大小设置"></a>swap分区大小设置</h2><p>阿里云的linux云服务器默认是没有启用swap分区（交换分区）的。一般情况下swapswap分区的大小可以参考以下规则进行设定：</p><table><thead><tr><th>内存大小</th><th>swap大小</th></tr></thead><tbody><tr><td>MEM_SIZE &lt;&#x3D; 4G</td><td>最小2G</td></tr><tr><td>4G &lt; MEM_SIZE &lt;&#x3D; 16G</td><td>最小4G</td></tr><tr><td>16G &lt; MEM_SIZE &lt;&#x3D; 64G</td><td>最小8G</td></tr><tr><td>64G &lt; MEM_SIZE &lt;&#x3D; 256G</td><td>最小16G</td></tr></tbody></table><h2 id="启用swap分区"><a href="#启用swap分区" class="headerlink" title="启用swap分区"></a>启用swap分区</h2><h3 id="创建用于交换分区的文件"><a href="#创建用于交换分区的文件" class="headerlink" title="创建用于交换分区的文件"></a>创建用于交换分区的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/mnt/swap bs=block_size count=number_of_block</span><br></pre></td></tr></table></figure><p>其中<code>block_size</code>和<code>number_of_block</code>的大小可以自定义，例如<code>bs=1M count=2048</code>代表2G大小的swap分区。</p><h3 id="设置交换分区文件"><a href="#设置交换分区文件" class="headerlink" title="设置交换分区文件"></a>设置交换分区文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap /mnt/swap</span><br></pre></td></tr></table></figure><h3 id="立即启用交换分区文件"><a href="#立即启用交换分区文件" class="headerlink" title="立即启用交换分区文件"></a>立即启用交换分区文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapon /mnt/swap</span><br></pre></td></tr></table></figure><h3 id="设置开机自动启用swap分区"><a href="#设置开机自动启用swap分区" class="headerlink" title="设置开机自动启用swap分区"></a>设置开机自动启用swap分区</h3><p>在<code>/etc/fstab</code>中增加swap配置行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/mnt/swap   swap    swap    defaults    0   0</span><br></pre></td></tr></table></figure><h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><p>设置完成之后可以通过linux的<code>free -m</code>命令查看swap分区的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Linux服务器格式化和挂载数据盘</title>
      <link href="/2020/02/04/%E9%98%BF%E9%87%8C%E4%BA%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E7%9B%98/"/>
      <url>/2020/02/04/%E9%98%BF%E9%87%8C%E4%BA%91Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://help.aliyun.com/document_detail/25426.html">Linux 格式化和挂载数据盘</a></p><span id="more"></span><h2 id="操作须知"><a href="#操作须知" class="headerlink" title="操作须知"></a>操作须知</h2><p>单独购买的数据盘需要先挂载数据盘，然后才能格式化。</p><p>随实例时一起购买的数据盘，无需挂载，直接格式化。</p><p>您需要知道挂载到实例的数据盘的设备名：您可以通过 <strong>ECS 管理控制台</strong> &gt; <strong>磁盘详情</strong> &gt; <strong>磁盘挂载信息</strong> 查到数据盘的设备名。数据盘的设备名由系统默认分配，从 <strong>&#x2F;dev&#x2F;xvdb</strong> 开始往后顺序排列，分布范围包括 <code>/dev/xvdb−/dev/xvdz</code>。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>远程连接实例。</p></li><li><p>运行 <code>fdisk -l</code> 命令查看实例是否有数据盘。如果执行命令后，没有发现 <code>/dev/vdb</code>，表示您的实例没有数据盘，无需格式化数据盘，请忽略本文后续内容。</p><p> 如果您的数据盘显示的是 <code>dev/xvd?</code>，表示您使用的是非 I&#x2F;O 优化实例。<br> 其中 ? 是 a−z 的任一个字母。</p></li><li><p>创建一个单分区数据盘，依次执行以下命令：</p><ol><li><p>运行 <code>fdisk /dev/vdb</code>：对数据盘进行分区。</p></li><li><p>输入 <code>n</code> 并按回车键：创建一个新分区。</p></li><li><p>输入 <code>p</code> 并按回车键：选择主分区。因为创建的是一个单分区数据盘，所以只需要创建主分区。</p><blockquote><p>如果要创建 4 个以上的分区，您应该创建至少一个扩展分区，即选择 <code>e</code>。</p></blockquote></li><li><p>输入分区编号并按回车键。因为这里仅创建一个分区，可以输入 1。</p></li><li><p>输入第一个可用的扇区编号：按回车键采用默认值 1。</p></li><li><p>输入最后一个扇区编号：因为这里仅创建一个分区，所以按回车键采用默认值。</p></li><li><p>输入 <code>wq</code> 并按回车键，开始分区。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># fdisk /dev/vdb</span></span><br><span class="line">Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x5f46a8a2.</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">After that, of course, the previous content won<span class="string">&#x27;t be recoverable.</span></span><br><span class="line"><span class="string">Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span></span><br><span class="line"><span class="string">WARNING: DOS-compatible mode is deprecated. It&#x27;</span>s strongly recommended to</span><br><span class="line">switch off the mode (<span class="built_in">command</span> <span class="string">&#x27;c&#x27;</span>) and change display units to</span><br><span class="line">sectors (<span class="built_in">command</span> <span class="string">&#x27;u&#x27;</span>).</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Command action</span><br><span class="line">e   extended</span><br><span class="line">p   primary partition (1-4)</span><br><span class="line">p</span><br><span class="line">Partition number (1-4): 1</span><br><span class="line">First cylinder (1-41610, default 1): 1</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-41610, default 41610):</span><br><span class="line">Using default value 41610</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): wq</span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure></li></ol></li><li><p>查看新的分区：运行命令 <code>fdisk -l</code>。如果出现以下信息，说明已经成功创建了新分区 <code>/dev/vdb1</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/vda: 42.9 GB, 42949672960 bytes</span><br><span class="line">255 heads, 63 sectors/track, 5221 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00053156</span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1   *           1        5222    41942016   83  Linux</span><br><span class="line">Disk /dev/vdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">16 heads, 63 sectors/track, 41610 cylinders</span><br><span class="line">Units = cylinders of 1008 * 512 = 516096 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x5f46a8a2</span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vdb1               1       41610    20971408+  83  Linux</span><br></pre></td></tr></table></figure></li><li><p>在新分区上创建一个文件系统：运行命令 <code>mkfs.ext4 /dev/vdb1</code>。</p><blockquote><p>本示例要创建一个 ext4 文件系统。您也可以根据自己的需要，选择创建其他文件系统，例如，如果需要在 Linux、Windows 和 Mac 系统之间共享文件，您可以使用 <code>mkfs.vfat</code> 创建 VFAT 文件系统。</p></blockquote><blockquote><p>创建文件系统所需时间取决于数据盘大小。</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># mkfs.ext4 /dev/vdb1</span></span><br><span class="line">mke2fs 1.41.12 (17-May-2010)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS <span class="built_in">type</span>: Linux</span><br><span class="line">Block size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Fragment size=4096 (<span class="built_in">log</span>=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">1310720 inodes, 5242852 blocks</span><br><span class="line">262142 blocks (5.00%) reserved <span class="keyword">for</span> the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=4294967296</span><br><span class="line">160 block <span class="built_in">groups</span></span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">    4096000</span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line">This filesystem will be automatically checked every 37 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br></pre></td></tr></table></figure></li><li><p>（建议）备份 <strong>etc&#x2F;fstab</strong>：运行命令 <code>cp /etc/fstab /etc/fstab.bak</code>。</p></li><li><p>向 <strong>&#x2F;etc&#x2F;fstab</strong> 写入新分区信息：运行命令 <code>echo /dev/vdb1 /mnt ext3 defaults 0 0 &gt;&gt; /etc/fstab</code>。</p><blockquote><p>注意：Ubuntu 12.04 不支持 barrier，所以对该系统正确的命令是：<code>echo &#39;/dev/vdb1 /mnt ext3 barrier=0 0 0&#39; &gt;&gt; /etc/fstab</code>。</p></blockquote><blockquote><p>如果需要把数据盘单独挂载到某个文件夹，比如单独用来存放网页，可以修改以上命令中的 <code>/mnt</code> 部分。</p></blockquote></li><li><p>查看 <strong>&#x2F;etc&#x2F;fstab</strong> 中的新分区信息：运行命令 <code>cat /etc/fstab</code>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># cat /etc/fstab</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Thu Feb 23 07:28:22 2017</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">UUID=3d083579-f5d9-4df5-9347-8d27925805d4 /                       ext4    defaults        1 1</span><br><span class="line">tmpfs                   /dev/shm                tmpfs   defaults        0 0</span><br><span class="line">devpts                  /dev/pts                devpts  gid=5,mode=620  0 0</span><br><span class="line">sysfs                   /sys                    sysfs   defaults        0 0</span><br><span class="line">proc                    /proc                   proc    defaults        0 0</span><br><span class="line">/dev/vdb1 /mnt ext3 defaults 0 0</span><br></pre></td></tr></table></figure></li><li><p>挂载文件系统：运行命令 <code>mount /dev/vdb1 /mnt</code>。</p></li><li><p>查看目前磁盘空间和使用情况：运行命令 <code>df -h</code>。如果出现新建文件系统的信息，说明挂载成功，可以使用新的文件系统了。</p><blockquote><p>挂载操作完成后，不需要重启实例即可开始使用新的文件系统。</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iXXXXXXX ~]<span class="comment"># mount /dev/vdb1 /mnt</span></span><br><span class="line">[root@iXXXXXXX ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        40G  6.6G   31G  18% /</span><br><span class="line">tmpfs           499M     0  499M   0% /dev/shm</span><br><span class="line">/dev/vdb1        20G  173M   19G   1% /mnt</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/02/04/design-pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>为其它对象提供一种代理以控制对这个对象的访问。</p><p><strong>类结构图</strong></p><p><img src="/images/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/proxy.png" alt="proxy"></p><p>Subject：接口类，定义了一些需要代理的接口方法。</p><p>RealSubject：具体的实现类。</p><p>ProxySubject：代理类，保存一个Subject引用，可以注入一个具体的子类比如RealSubject。</p><p>代理模式其实就是在操作对象时引用一定程度的间接性。这种间接性，可以增加很多附加操作。比如权限控制，参数校验等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPersonManager</span> <span class="keyword">implements</span> <span class="title class_">PersonManager</span> &#123;</span><br><span class="line">    <span class="comment">// 接口引用</span></span><br><span class="line">    <span class="type">PersonManager</span> <span class="variable">realPersonManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealPersonManager</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">(String name, String operateName)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 增加一些的权限判断。比如操作人是否有查询某人工资的权限</span></span><br><span class="line">        <span class="comment">// 2. 具体类的调用</span></span><br><span class="line">        <span class="keyword">return</span> realPersonManager.getSalary(name, operateName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/02/04/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h2 id="双重锁检测"><a href="#双重锁检测" class="headerlink" title="双重锁检测"></a>双重锁检测</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (install == <span class="literal">null</span>) &#123;                      <span class="comment">// 双重检测机制</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;        <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;             <span class="comment">// 双重检测机制</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为了防止new Singleton被执行多次，因此在new操作之前加上Synchronized 同步锁，锁住整个类（注意，这里不能使用对象锁）。</p></li><li><p>进入Synchronized 临界区以后，还要再做一次判空。因为当两个线程同时访问的时候，线程A构建完对象，线程B也已经通过了最初的判空验证，不做第二次判空的话，线程B还是会再次构建instance对象。</p></li><li><p>经过volatile的修饰，当线程A执行instance &#x3D; new Singleton的时候，JVM执行顺序是什么样？始终保证是下面的顺序：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();     <span class="comment">//1：分配对象的内存空间 </span></span><br><span class="line">ctorInstance(memory);   <span class="comment">//2：初始化对象 </span></span><br><span class="line">instance =memory;       <span class="comment">//3：设置instance指向刚分配的内存地址 </span></span><br></pre></td></tr></table></figure><p>  如此在线程B看来，instance对象的引用要么指向null，要么指向一个初始化完毕的Instance，而不会出现某个中间态，保证了安全。</p></li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LazyHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>从外部无法访问静态内部类LazyHolder，只有当调用Singleton.getInstance方法的时候，才能得到单例对象INSTANCE。</p></li><li><p>INSTANCE对象初始化的时机并不是在单例类Singleton被加载的时候，而是在调用getInstance方法，使得静态内部类LazyHolder被加载的时候。因此这种实现方式是利用classloader的加载机制来实现懒加载，并保证构建单例的线程安全。</p></li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>单例模式实现</th><th>是否线程安全</th><th>是否懒加载</th><th>是否防止反射构建</th></tr></thead><tbody><tr><td>双重锁检测</td><td>是</td><td>是</td><td>否</td></tr><tr><td>静态内部类</td><td>是</td><td>是</td><td>否</td></tr><tr><td>枚举</td><td>是</td><td>否</td><td>是</td></tr></tbody></table><p><strong>参考资料：</strong></p><p><a href="https://mp.weixin.qq.com/s/1fQkkdtzYh_OikbYJnmZWg">漫画：什么是单例模式？（整合版）</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合成模式</title>
      <link href="/2020/02/04/design-pattern/%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>合成模式属于对象的结构模式，有时又叫做“部分-整体”模式。合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式可以使客户端将单纯元素与复合元素同等看待。</p><p><strong>结构类图</strong></p><p><img src="/images/%E5%90%88%E6%88%90%E6%A8%A1%E5%BC%8F/composite.gif" alt="composite"></p><p>Component：这是一个抽象角色，它给参与组合的对象规定一个接口。这个角色给出共有接口及其默认行为，可以用来管理所有的子对象。合成对象通常把它所包含的子对象当作类型为Component的对象。在安全模式的合成模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝构件对象给出。</p><p>Leaf：代表餐价组合的树叶对象。一个树叶对象没有下级子对象，定义了参加组合的原始对象的行为。</p><p>Composite：代表参加组合的有子对象的对象，并给出树枝构件对象的行为。树枝构件给出了所有的管理子对象的方法，如add、remove以及getChild。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/02/04/design-pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>类图</strong></p><p><img src="/images/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/factory.jpg" alt="factory"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2020/02/04/design-pattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>应用场景很多，尤其是在框架设计中，提供了一个方便的开发程序的模板，你只要实现模板中的一些接口或者方法就能完成一个复杂的任务。</p><p><strong>结构类图</strong></p><p><img src="/images/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/template-method.png" alt="template-method"></p><p>AbstractTemplate：定义一个完整的框架，方法的调用顺序已经确定，但会定义一些抽象的方法留给子类去实现。</p><p>SubTemplate：实现抽象模板中定义的抽象方法，从而形成一个完整的流程逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TradeFlowActionResult <span class="title function_">execute</span><span class="params">(TradeFlowActionParam param, Map context)</span> <span class="keyword">throws</span> ServiceException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;    <span class="comment">// 业务逻辑校验</span></span><br><span class="line">        <span class="built_in">this</span>.validateBusinessLogic(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;validateBusinessLogic got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;validateBusinessLogic got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 卖家发货业务逻辑</span></span><br><span class="line">        <span class="built_in">this</span>.sendGoods(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;sendGoods got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;sendGoods got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 补充业务（结果不影响核心业务）</span></span><br><span class="line">        <span class="built_in">this</span>.addition(param, context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;addition got exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        sendGoodsLog.info(<span class="string">&quot;SendGoodsAction-&gt;addition got runtime exception. param is &quot;</span> + param, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面提到的三个抽象方法（业务逻辑校验、卖家发货业务逻辑、补充业务）都是在子类中实现的。</p><p>使用模板方法模式既控制了主流程结构，又不失灵活性，可以让使用者在其基础上定制开发。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/02/04/design-pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>策略模式通常是指完成某个操作可能会有多种方法，适用于多种场合。我们需要把每个操作方法当作一个实现策略，调用者可根据需要（特定的规则）选择合适的策略。</p><p><strong>结构类图</strong></p><p><img src="/images/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/strategy.png" alt="strategy"></p><p>Context：使用不同的策略环境，根据自身的条件选择不同的策略实现类来完成所需要的操作。它持有一个策略实例的引用。</p><p>Strategy：抽象策略，定义每个策略都要实现的方法。</p><p>Realize1，Realize2：负责实现抽象策略中定义的策略方法。</p><p><strong>例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Enhancement(&#123;@Capability(type = CapabilityTypeEnum.INVOCATION_STATS)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendGoods</span><span class="params">(SendGoodsParam param)</span> <span class="keyword">throws</span> ServiceException &#123;</span><br><span class="line">    <span class="keyword">if</span> (param == <span class="literal">null</span> || param.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.throwInValidError(ErrorCodeEnum.NULL_PARAM, <span class="literal">null</span>, param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TradeFlowService</span> <span class="variable">tfs</span> <span class="operator">=</span> createTradeFlowServiceByOrderId(param.getId());</span><br><span class="line">    tfs.sendGoods(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createTradeFlowServiceByOrderId</code>方法会根据“订单号的长短”选择具体的子策略。</p><ul><li>长订单号：tpTradeFlowService</li><li>短订单号：unifyTradeFlowService</li></ul><p>彼此子策略实现互不干扰，有效达到隔离效果。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰模式</title>
      <link href="/2020/02/04/design-pattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>装饰者模式，在保持原有功能不变的情况下将一个类重新装饰，使其具有更强大的功能，用一句成语形容“锦上添花”。</p><p><strong>类结构：</strong></p><p><img src="/images/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/decorator.png" alt="decorator"></p><p>Component：抽象组件，定义了一组抽象的接口，制定了被修饰的组件都有哪些功能。</p><p>ComponentImpl：抽象组件实现类，完成了基本的功能实现。</p><p>Decorator：装饰器角色，持有Component的实例引用，有点递归的感觉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Component</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentImpl</span>();</span><br><span class="line"><span class="type">Decorator</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decorator</span>();</span><br><span class="line">d1.setComponent(c);</span><br><span class="line"><span class="type">Decorator</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decorator</span>();</span><br><span class="line">d2.setComponent(d1);</span><br><span class="line"><span class="type">Decorator</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decorator</span>();</span><br><span class="line">d3.setComponent(d2);</span><br><span class="line"><span class="type">Decorator</span> <span class="variable">d4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decorator</span>();</span><br><span class="line">d4.setComponent(d3);</span><br><span class="line">d4.methodA();</span><br></pre></td></tr></table></figure><p>装饰模式和适配器模式有点类似，都是包装（wrapper）了一个类，但目的却不相同。适配器模式是将一个接口转换成另一个接口，从而达成匹配。而装饰模式并没有改变原来的接口，而是改变原有对象的处理方法，借助递归提升性能。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2020/02/04/design-pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>观察者模式通常也叫 <strong>发布-订阅</strong> 模式，或者事件监听模式，定义一对多的依赖关系，让多个观察者对象同时监听一个主题对象，如果这个主体对象的状态发生变化时，会通知所有的观察者对象。异步消息（MQ、ActiveMQ）都是基于这种模式。</p><p><strong>类结构</strong></p><p><img src="/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/observer.png" alt="observer"></p><p>Subject：主题类，将所有的观察者对象保存在一个List集合中，并提供增、删方法，以及状态变化后的通知方法。</p><p>Observer：观察者的抽象接口，提供了一个抽象的动作方法，具体的业务由子类来实现。</p><p>ConcreteObserver：具体的观察者，负责实现自己的业务动作。</p><p>ConcreteSubject：具体的主题类，在内部状态发生变化时，给所有登记过的观察者发出通知。</p><p><strong>优点</strong></p><ul><li><p>解耦，将耦合的双方都依赖于抽象类，而不是依赖于具体。从而使得各自的变化不会影响到另一边的变化。</p></li><li><p>Observer采用的是抽象类，这样的好处是可以将多个子类相同的代码逻辑抽取出来，放到抽象类中。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2020/02/04/design-pattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>责任链模式就是很多对象由每个对象对其下家的引用串联起来形成一条链，请求在这条链上传递，知道最终处理完。就像一根水管一样，水从一端流入，会经过一系列的阀门，最终从另一端流出。如果有一个阀门关着，水就流不出来。</p><p><strong>链上的节点可以控制，根据是否执行分为两种情况：</strong></p><ul><li>找到对应的点，执行，跳出。如：for循环的break。</li><li>所有的节点都执行一遍，上个节点的返回结果作为下个节点的入参。</li></ul><p><strong>业务需求：抽奖</strong></p><p>步骤：</p><ul><li><p>抽奖资格判断    </p><ol><li>判断人群    </li><li>判断抽奖限制（如每天只能抽3次）    </li><li>黑名单    </li><li>判断中奖次数限制（如最多只能中3次）    。。。。。。。。</li></ol></li><li><p>中奖逻辑    </p><ol><li>根据用户V等级进行概率过滤    </li><li>根据抽奖概率进行过滤</li></ol></li><li><p>发奖逻辑    </p><ol><li>取出当前奖品分布，并选出一个奖品分布来发奖    </li><li>减库存    </li><li>发奖    </li><li>发奖成功后的逻辑处理    </li><li>处理其它processor中添加的callback</li></ol></li></ul><p>代码示例 ：</p><ol><li>主流程：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultAwardCommanderProcedure</span> <span class="keyword">implements</span> <span class="title class_">AwardCommanderProcdure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Commander&gt; commanderList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AwardResult <span class="title function_">execute</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(getCommanderList() == <span class="literal">null</span> || getCommanderList().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AwardResultUtils.buildErrorResult(DefaultResultCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Commander commander : getCommanderList()) &#123;</span><br><span class="line">            <span class="type">AwardResult</span> <span class="variable">result</span> <span class="operator">=</span> commander.execute(context);</span><br><span class="line">            <span class="keyword">if</span>(!result.isSuccess()) &#123;</span><br><span class="line">                AwardLogUtils.getAwardLog().warn(<span class="string">&quot;DefaultAwardCommanderProcedure.execute() return false|context=&quot;</span> + context + <span class="string">&quot;|awardResult=[&quot;</span> + result + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        AwardLogUtils.getAwardLog().warn(<span class="string">&quot;DefaultAwardCommanderProcedure.execute() return success|context=[&quot;</span> + context + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> AwardResultUtils.buildSuccessResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Commander&gt; <span class="title function_">getCommanderList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> commanderList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommanderList</span><span class="params">(List&lt;Commander&gt; commanderList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.commanderList = commanderList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主流程bean xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 默认抽奖流程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultAwardCommanderProcedure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.wireless.award.biz.forward.biz.procedure.impl.DefaultAwardCommanderProcedure&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;commanderList&quot;</span>&gt;</span>             </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>                 </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;permissionCommander&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 抽奖逻辑 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;winCommander&quot;</span> /&gt;</span>         <span class="comment">&lt;!-- 中奖逻辑 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;dispatchCommander&quot;</span> /&gt;</span>    <span class="comment">&lt;!-- 发奖逻辑 --&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>抽奖逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultCommander</span> <span class="keyword">implements</span> <span class="title class_">Commander</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> List&lt;Processor&gt; processorList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AwardResult <span class="title function_">execute</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(getProcessorList() == <span class="literal">null</span> || getProcessorList().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> AwardResultUtils.buildErrorResult(DefaultResultCode.SYSTEM_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Processor processor : getProcessorList()) &#123;</span><br><span class="line">            <span class="type">AwardResult</span> <span class="variable">result</span> <span class="operator">=</span> processor.process(context);</span><br><span class="line">            <span class="keyword">if</span>(!result.isSuccess()) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> AwardResultUtils.buildSuccessResult();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Processor&gt; <span class="title function_">getProcessorList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> processorList;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProcessorList</span><span class="params">(List&lt;Processor&gt; processorList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processorList = processorList;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、判断抽奖资格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;permissionCommander&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.wireless.award.biz.forward.biz.commander.impl.PermissionCommander&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorList&quot;</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkUserGroupProcessor&quot;</span> /&gt;</span>                  <span class="comment">&lt;!-- 判断人群 --&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;awardCountingProcessor&quot;</span> /&gt;</span>                   <span class="comment">&lt;!-- 活动抽奖数计数 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkAndReducePermitPermissionProcessor&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 判断是否有抽奖权限，有则减权限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkBlacklistPermissionProcessor&quot;</span> /&gt;</span>        <span class="comment">&lt;!-- 黑名单 --&gt;</span>                </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;checkWinCountPermissionProcessor&quot;</span> /&gt;</span>         <span class="comment">&lt;!-- 判断中奖次数限制（如最多只能中3次） --&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>         </span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>具体的原子执行逻辑</li></ol><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** * 处理逻辑 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AwardResult <span class="title function_">process</span><span class="params">(Context context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类则根据具体的业务功能单独封装实现。</p><p><strong>总结</strong></p><ol><li>串行执行所有的逻辑，如果有一个条件不满足或抛异常，则返回false，跳出流程</li><li>扩展性好，能很好地满足各种业务变更，只需要实现相应的接口，增加相应的xml配置即可</li><li>直观，将日志统一放到一个日志类管理</li><li>定义上下文参数类Context，扩展参数强</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2020/02/04/design-pattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/04/design-pattern/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适配器模式就是一个类的接口不能被客户端接受，需要转换成另一种接口，从而使两个不匹配的接口能在一起工作。</p><p><strong>类结构</strong></p><p><img src="/images/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/adapter.png" alt="adapter"></p><p>Adaptee：源接口，需要适配的接口。</p><p>Target：目标接口，暴露出去的接口。</p><p>Adapter：适配器，将源接口适配成目标接口。</p><p>举个例子：</p><p>Adaptee是内存卡，Target是电脑，而Adapter则是USB读卡器。</p><p><strong>适用场景</strong></p><p>比如查物流信息，由于物流公司的系统都是各自独立，而编程语言和交互方式上有很大差异，需要针对不同的物流公司做单独适配，同时结合不同公司的系统性能，配置不同的响应超时时间。</p><p><img src="/images/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/adapter-logistics.png" alt="adapter-logistics"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub编程语言色彩一览</title>
      <link href="/2020/02/04/GitHub%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%89%B2%E5%BD%A9%E4%B8%80%E8%A7%88/"/>
      <url>/2020/02/04/GitHub%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E8%89%B2%E5%BD%A9%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>资源文件下载：</p><ul><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.json">github-colors.json</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.csv">github-colors.csv</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.less">github-colors.less</a></li><li><a href="https://github.com/Diastro/github-colors/blob/master/github-colors.scss">github-colors.scss</a></li></ul><p>编程语言色彩一览表：</p><table><thead><tr><th align="left">编程语言</th><th align="left">颜色</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">Mercury</td><td align="left">#ff2b2b</td><td align="left"><img src="https://img.shields.io/badge/Mercury-ff2b2b.svg" alt="Mercury"></td></tr><tr><td align="left">TypeScript</td><td align="left">#2b7489</td><td align="left"><img src="https://img.shields.io/badge/TypeScript-2b7489.svg" alt="TypeScript"></td></tr><tr><td align="left">PureBasic</td><td align="left">#5a6986</td><td align="left"><img src="https://img.shields.io/badge/PureBasic-5a6986.svg" alt="PureBasic"></td></tr><tr><td align="left">Objective-C++</td><td align="left">#6866fb</td><td align="left"><img src="https://img.shields.io/badge/Objective_C++-6866fb.svg" alt="Objective-C++"></td></tr><tr><td align="left">Self</td><td align="left">#0579aa</td><td align="left"><img src="https://img.shields.io/badge/Self-0579aa.svg" alt="Self"></td></tr><tr><td align="left">NewLisp</td><td align="left">#87AED7</td><td align="left"><img src="https://img.shields.io/badge/NewLisp-87AED7.svg" alt="NewLisp"></td></tr><tr><td align="left">Fortran</td><td align="left">#4d41b1</td><td align="left"><img src="https://img.shields.io/badge/Fortran-4d41b1.svg" alt="Fortran"></td></tr><tr><td align="left">Ceylon</td><td align="left">#dfa535</td><td align="left"><img src="https://img.shields.io/badge/Ceylon-dfa535.svg" alt="Ceylon"></td></tr><tr><td align="left">Rebol</td><td align="left">#358a5b</td><td align="left"><img src="https://img.shields.io/badge/Rebol-358a5b.svg" alt="Rebol"></td></tr><tr><td align="left">Frege</td><td align="left">#00cafe</td><td align="left"><img src="https://img.shields.io/badge/Frege-00cafe.svg" alt="Frege"></td></tr><tr><td align="left">AspectJ</td><td align="left">#a957b0</td><td align="left"><img src="https://img.shields.io/badge/AspectJ-a957b0.svg" alt="AspectJ"></td></tr><tr><td align="left">Omgrofl</td><td align="left">#cabbff</td><td align="left"><img src="https://img.shields.io/badge/Omgrofl-cabbff.svg" alt="Omgrofl"></td></tr><tr><td align="left">HolyC</td><td align="left">#ffefaf</td><td align="left"><img src="https://img.shields.io/badge/HolyC-ffefaf.svg" alt="HolyC"></td></tr><tr><td align="left">Shell</td><td align="left">#89e051</td><td align="left"><img src="https://img.shields.io/badge/Shell-89e051.svg" alt="Shell"></td></tr><tr><td align="left">HiveQL</td><td align="left">#dce200</td><td align="left"><img src="https://img.shields.io/badge/HiveQL-dce200.svg" alt="HiveQL"></td></tr><tr><td align="left">AppleScript</td><td align="left">#101F1F</td><td align="left"><img src="https://img.shields.io/badge/AppleScript-101F1F.svg" alt="AppleScript"></td></tr><tr><td align="left">Eiffel</td><td align="left">#946d57</td><td align="left"><img src="https://img.shields.io/badge/Eiffel-946d57.svg" alt="Eiffel"></td></tr><tr><td align="left">XQuery</td><td align="left">#5232e7</td><td align="left"><img src="https://img.shields.io/badge/XQuery-5232e7.svg" alt="XQuery"></td></tr><tr><td align="left">RUNOFF</td><td align="left">#665a4e</td><td align="left"><img src="https://img.shields.io/badge/RUNOFF-665a4e.svg" alt="RUNOFF"></td></tr><tr><td align="left">RAML</td><td align="left">#77d9fb</td><td align="left"><img src="https://img.shields.io/badge/RAML-77d9fb.svg" alt="RAML"></td></tr><tr><td align="left">MTML</td><td align="left">#b7e1f4</td><td align="left"><img src="https://img.shields.io/badge/MTML-b7e1f4.svg" alt="MTML"></td></tr><tr><td align="left">Elixir</td><td align="left">#6e4a7e</td><td align="left"><img src="https://img.shields.io/badge/Elixir-6e4a7e.svg" alt="Elixir"></td></tr><tr><td align="left">SAS</td><td align="left">#B34936</td><td align="left"><img src="https://img.shields.io/badge/SAS-B34936.svg" alt="SAS"></td></tr><tr><td align="left">MQL4</td><td align="left">#62A8D6</td><td align="left"><img src="https://img.shields.io/badge/MQL4-62A8D6.svg" alt="MQL4"></td></tr><tr><td align="left">MQL5</td><td align="left">#4A76B8</td><td align="left"><img src="https://img.shields.io/badge/MQL5-4A76B8.svg" alt="MQL5"></td></tr><tr><td align="left">Agda</td><td align="left">#315665</td><td align="left"><img src="https://img.shields.io/badge/Agda-315665.svg" alt="Agda"></td></tr><tr><td align="left">wisp</td><td align="left">#7582D1</td><td align="left"><img src="https://img.shields.io/badge/wisp-7582D1.svg" alt="wisp"></td></tr><tr><td align="left">Dockerfile</td><td align="left">#384d54</td><td align="left"><img src="https://img.shields.io/badge/Dockerfile-384d54.svg" alt="Dockerfile"></td></tr><tr><td align="left">SRecode Template</td><td align="left">#348a34</td><td align="left"><img src="https://img.shields.io/badge/SRecode_Template-348a34.svg" alt="SRecode Template"></td></tr><tr><td align="left">D</td><td align="left">#ba595e</td><td align="left"><img src="https://img.shields.io/badge/D-ba595e.svg" alt="D"></td></tr><tr><td align="left">PowerBuilder</td><td align="left">#8f0f8d</td><td align="left"><img src="https://img.shields.io/badge/PowerBuilder-8f0f8d.svg" alt="PowerBuilder"></td></tr><tr><td align="left">Kotlin</td><td align="left">#F18E33</td><td align="left"><img src="https://img.shields.io/badge/Kotlin-F18E33.svg" alt="Kotlin"></td></tr><tr><td align="left">Opal</td><td align="left">#f7ede0</td><td align="left"><img src="https://img.shields.io/badge/Opal-f7ede0.svg" alt="Opal"></td></tr><tr><td align="left">TI Program</td><td align="left">#A0AA87</td><td align="left"><img src="https://img.shields.io/badge/TI_Program-A0AA87.svg" alt="TI Program"></td></tr><tr><td align="left">Crystal</td><td align="left">#000100</td><td align="left"><img src="https://img.shields.io/badge/Crystal-000100.svg" alt="Crystal"></td></tr><tr><td align="left">Objective-C</td><td align="left">#438eff</td><td align="left"><img src="https://img.shields.io/badge/Objective_C-438eff.svg" alt="Objective-C"></td></tr><tr><td align="left">Batchfile</td><td align="left">#C1F12E</td><td align="left"><img src="https://img.shields.io/badge/Batchfile-C1F12E.svg" alt="Batchfile"></td></tr><tr><td align="left">Oz</td><td align="left">#fab738</td><td align="left"><img src="https://img.shields.io/badge/Oz-fab738.svg" alt="Oz"></td></tr><tr><td align="left">Mirah</td><td align="left">#c7a938</td><td align="left"><img src="https://img.shields.io/badge/Mirah-c7a938.svg" alt="Mirah"></td></tr><tr><td align="left">ZIL</td><td align="left">#dc75e5</td><td align="left"><img src="https://img.shields.io/badge/ZIL-dc75e5.svg" alt="ZIL"></td></tr><tr><td align="left">Objective-J</td><td align="left">#ff0c5a</td><td align="left"><img src="https://img.shields.io/badge/Objective_J-ff0c5a.svg" alt="Objective-J"></td></tr><tr><td align="left">ANTLR</td><td align="left">#9DC3FF</td><td align="left"><img src="https://img.shields.io/badge/ANTLR-9DC3FF.svg" alt="ANTLR"></td></tr><tr><td align="left">Roff</td><td align="left">#ecdebe</td><td align="left"><img src="https://img.shields.io/badge/Roff-ecdebe.svg" alt="Roff"></td></tr><tr><td align="left">Ragel</td><td align="left">#9d5200</td><td align="left"><img src="https://img.shields.io/badge/Ragel-9d5200.svg" alt="Ragel"></td></tr><tr><td align="left">FreeMarker</td><td align="left">#0050b2</td><td align="left"><img src="https://img.shields.io/badge/FreeMarker-0050b2.svg" alt="FreeMarker"></td></tr><tr><td align="left">Gosu</td><td align="left">#82937f</td><td align="left"><img src="https://img.shields.io/badge/Gosu-82937f.svg" alt="Gosu"></td></tr><tr><td align="left">Zig</td><td align="left">#ec915c</td><td align="left"><img src="https://img.shields.io/badge/Zig-ec915c.svg" alt="Zig"></td></tr><tr><td align="left">Ruby</td><td align="left">#701516</td><td align="left"><img src="https://img.shields.io/badge/Ruby-701516.svg" alt="Ruby"></td></tr><tr><td align="left">Nemerle</td><td align="left">#3d3c6e</td><td align="left"><img src="https://img.shields.io/badge/Nemerle-3d3c6e.svg" alt="Nemerle"></td></tr><tr><td align="left">Jupyter Notebook</td><td align="left">#DA5B0B</td><td align="left"><img src="https://img.shields.io/badge/Jupyter_Notebook-DA5B0B.svg" alt="Jupyter Notebook"></td></tr><tr><td align="left">Component Pascal</td><td align="left">#B0CE4E</td><td align="left"><img src="https://img.shields.io/badge/Component_Pascal-B0CE4E.svg" alt="Component Pascal"></td></tr><tr><td align="left">Nextflow</td><td align="left">#3ac486</td><td align="left"><img src="https://img.shields.io/badge/Nextflow-3ac486.svg" alt="Nextflow"></td></tr><tr><td align="left">Brainfuck</td><td align="left">#2F2530</td><td align="left"><img src="https://img.shields.io/badge/Brainfuck-2F2530.svg" alt="Brainfuck"></td></tr><tr><td align="left">SystemVerilog</td><td align="left">#DAE1C2</td><td align="left"><img src="https://img.shields.io/badge/SystemVerilog-DAE1C2.svg" alt="SystemVerilog"></td></tr><tr><td align="left">APL</td><td align="left">#5A8164</td><td align="left"><img src="https://img.shields.io/badge/APL-5A8164.svg" alt="APL"></td></tr><tr><td align="left">Hack</td><td align="left">#878787</td><td align="left"><img src="https://img.shields.io/badge/Hack-878787.svg" alt="Hack"></td></tr><tr><td align="left">Go</td><td align="left">#00ADD8</td><td align="left"><img src="https://img.shields.io/badge/Go-00ADD8.svg" alt="Go"></td></tr><tr><td align="left">Ring</td><td align="left">#2D54CB</td><td align="left"><img src="https://img.shields.io/badge/Ring-2D54CB.svg" alt="Ring"></td></tr><tr><td align="left">PHP</td><td align="left">#4F5D95</td><td align="left"><img src="https://img.shields.io/badge/PHP-4F5D95.svg" alt="PHP"></td></tr><tr><td align="left">Cirru</td><td align="left">#ccccff</td><td align="left"><img src="https://img.shields.io/badge/Cirru-ccccff.svg" alt="Cirru"></td></tr><tr><td align="left">SQF</td><td align="left">#3F3F3F</td><td align="left"><img src="https://img.shields.io/badge/SQF-3F3F3F.svg" alt="SQF"></td></tr><tr><td align="left">ZAP</td><td align="left">#0d665e</td><td align="left"><img src="https://img.shields.io/badge/ZAP-0d665e.svg" alt="ZAP"></td></tr><tr><td align="left">Glyph</td><td align="left">#c1ac7f</td><td align="left"><img src="https://img.shields.io/badge/Glyph-c1ac7f.svg" alt="Glyph"></td></tr><tr><td align="left">1C Enterprise</td><td align="left">#814CCC</td><td align="left"><img src="https://img.shields.io/badge/1C_Enterprise-814CCC.svg" alt="1C Enterprise"></td></tr><tr><td align="left">WebAssembly</td><td align="left">#04133b</td><td align="left"><img src="https://img.shields.io/badge/WebAssembly-04133b.svg" alt="WebAssembly"></td></tr><tr><td align="left">Java</td><td align="left">#b07219</td><td align="left"><img src="https://img.shields.io/badge/Java-b07219.svg" alt="Java"></td></tr><tr><td align="left">MAXScript</td><td align="left">#00a6a6</td><td align="left"><img src="https://img.shields.io/badge/MAXScript-00a6a6.svg" alt="MAXScript"></td></tr><tr><td align="left">Scala</td><td align="left">#c22d40</td><td align="left"><img src="https://img.shields.io/badge/Scala-c22d40.svg" alt="Scala"></td></tr><tr><td align="left">Makefile</td><td align="left">#427819</td><td align="left"><img src="https://img.shields.io/badge/Makefile-427819.svg" alt="Makefile"></td></tr><tr><td align="left">Perl</td><td align="left">#0298c3</td><td align="left"><img src="https://img.shields.io/badge/Perl-0298c3.svg" alt="Perl"></td></tr><tr><td align="left">Jsonnet</td><td align="left">#0064bd</td><td align="left"><img src="https://img.shields.io/badge/Jsonnet-0064bd.svg" alt="Jsonnet"></td></tr><tr><td align="left">Arc</td><td align="left">#aa2afe</td><td align="left"><img src="https://img.shields.io/badge/Arc-aa2afe.svg" alt="Arc"></td></tr><tr><td align="left">LLVM</td><td align="left">#185619</td><td align="left"><img src="https://img.shields.io/badge/LLVM-185619.svg" alt="LLVM"></td></tr><tr><td align="left">GDScript</td><td align="left">#355570</td><td align="left"><img src="https://img.shields.io/badge/GDScript-355570.svg" alt="GDScript"></td></tr><tr><td align="left">Verilog</td><td align="left">#b2b7f8</td><td align="left"><img src="https://img.shields.io/badge/Verilog-b2b7f8.svg" alt="Verilog"></td></tr><tr><td align="left">Factor</td><td align="left">#636746</td><td align="left"><img src="https://img.shields.io/badge/Factor-636746.svg" alt="Factor"></td></tr><tr><td align="left">Haxe</td><td align="left">#df7900</td><td align="left"><img src="https://img.shields.io/badge/Haxe-df7900.svg" alt="Haxe"></td></tr><tr><td align="left">Forth</td><td align="left">#341708</td><td align="left"><img src="https://img.shields.io/badge/Forth-341708.svg" alt="Forth"></td></tr><tr><td align="left">Red</td><td align="left">#f50000</td><td align="left"><img src="https://img.shields.io/badge/Red-f50000.svg" alt="Red"></td></tr><tr><td align="left">YARA</td><td align="left">#220000</td><td align="left"><img src="https://img.shields.io/badge/YARA-220000.svg" alt="YARA"></td></tr><tr><td align="left">Hy</td><td align="left">#7790B2</td><td align="left"><img src="https://img.shields.io/badge/Hy-7790B2.svg" alt="Hy"></td></tr><tr><td align="left">mcfunction</td><td align="left">#E22837</td><td align="left"><img src="https://img.shields.io/badge/mcfunction-E22837.svg" alt="mcfunction"></td></tr><tr><td align="left">Volt</td><td align="left">#1F1F1F</td><td align="left"><img src="https://img.shields.io/badge/Volt-1F1F1F.svg" alt="Volt"></td></tr><tr><td align="left">AngelScript</td><td align="left">#C7D7DC</td><td align="left"><img src="https://img.shields.io/badge/AngelScript-C7D7DC.svg" alt="AngelScript"></td></tr><tr><td align="left">LSL</td><td align="left">#3d9970</td><td align="left"><img src="https://img.shields.io/badge/LSL-3d9970.svg" alt="LSL"></td></tr><tr><td align="left">eC</td><td align="left">#913960</td><td align="left"><img src="https://img.shields.io/badge/eC-913960.svg" alt="eC"></td></tr><tr><td align="left">Terra</td><td align="left">#00004c</td><td align="left"><img src="https://img.shields.io/badge/Terra-00004c.svg" alt="Terra"></td></tr><tr><td align="left">CoffeeScript</td><td align="left">#244776</td><td align="left"><img src="https://img.shields.io/badge/CoffeeScript-244776.svg" alt="CoffeeScript"></td></tr><tr><td align="left">HTML</td><td align="left">#e34c26</td><td align="left"><img src="https://img.shields.io/badge/HTML-e34c26.svg" alt="HTML"></td></tr><tr><td align="left">Lex</td><td align="left">#DBCA00</td><td align="left"><img src="https://img.shields.io/badge/Lex-DBCA00.svg" alt="Lex"></td></tr><tr><td align="left">UnrealScript</td><td align="left">#a54c4d</td><td align="left"><img src="https://img.shields.io/badge/UnrealScript-a54c4d.svg" alt="UnrealScript"></td></tr><tr><td align="left">Idris</td><td align="left">#b30000</td><td align="left"><img src="https://img.shields.io/badge/Idris-b30000.svg" alt="Idris"></td></tr><tr><td align="left">Swift</td><td align="left">#ffac45</td><td align="left"><img src="https://img.shields.io/badge/Swift-ffac45.svg" alt="Swift"></td></tr><tr><td align="left">Modula-3</td><td align="left">#223388</td><td align="left"><img src="https://img.shields.io/badge/Modula_3-223388.svg" alt="Modula-3"></td></tr><tr><td align="left">C</td><td align="left">#555555</td><td align="left"><img src="https://img.shields.io/badge/C-555555.svg" alt="C"></td></tr><tr><td align="left">AutoHotkey</td><td align="left">#6594b9</td><td align="left"><img src="https://img.shields.io/badge/AutoHotkey-6594b9.svg" alt="AutoHotkey"></td></tr><tr><td align="left">P4</td><td align="left">#7055b5</td><td align="left"><img src="https://img.shields.io/badge/P4-7055b5.svg" alt="P4"></td></tr><tr><td align="left">Isabelle</td><td align="left">#FEFE00</td><td align="left"><img src="https://img.shields.io/badge/Isabelle-FEFE00.svg" alt="Isabelle"></td></tr><tr><td align="left">G-code</td><td align="left">#D08CF2</td><td align="left"><img src="https://img.shields.io/badge/G_code-D08CF2.svg" alt="G-code"></td></tr><tr><td align="left">Metal</td><td align="left">#8f14e9</td><td align="left"><img src="https://img.shields.io/badge/Metal-8f14e9.svg" alt="Metal"></td></tr><tr><td align="left">Clarion</td><td align="left">#db901e</td><td align="left"><img src="https://img.shields.io/badge/Clarion-db901e.svg" alt="Clarion"></td></tr><tr><td align="left">Vue</td><td align="left">#2c3e50</td><td align="left"><img src="https://img.shields.io/badge/Vue-2c3e50.svg" alt="Vue"></td></tr><tr><td align="left">JSONiq</td><td align="left">#40d47e</td><td align="left"><img src="https://img.shields.io/badge/JSONiq-40d47e.svg" alt="JSONiq"></td></tr><tr><td align="left">Boo</td><td align="left">#d4bec1</td><td align="left"><img src="https://img.shields.io/badge/Boo-d4bec1.svg" alt="Boo"></td></tr><tr><td align="left">AutoIt</td><td align="left">#1C3552</td><td align="left"><img src="https://img.shields.io/badge/AutoIt-1C3552.svg" alt="AutoIt"></td></tr><tr><td align="left">Genie</td><td align="left">#fb855d</td><td align="left"><img src="https://img.shields.io/badge/Genie-fb855d.svg" alt="Genie"></td></tr><tr><td align="left">Clojure</td><td align="left">#db5855</td><td align="left"><img src="https://img.shields.io/badge/Clojure-db5855.svg" alt="Clojure"></td></tr><tr><td align="left">EQ</td><td align="left">#a78649</td><td align="left"><img src="https://img.shields.io/badge/EQ-a78649.svg" alt="EQ"></td></tr><tr><td align="left">Visual Basic</td><td align="left">#945db7</td><td align="left"><img src="https://img.shields.io/badge/Visual_Basic-945db7.svg" alt="Visual Basic"></td></tr><tr><td align="left">CSS</td><td align="left">#563d7c</td><td align="left"><img src="https://img.shields.io/badge/CSS-563d7c.svg" alt="CSS"></td></tr><tr><td align="left">Prolog</td><td align="left">#74283c</td><td align="left"><img src="https://img.shields.io/badge/Prolog-74283c.svg" alt="Prolog"></td></tr><tr><td align="left">SourcePawn</td><td align="left">#5c7611</td><td align="left"><img src="https://img.shields.io/badge/SourcePawn-5c7611.svg" alt="SourcePawn"></td></tr><tr><td align="left">AMPL</td><td align="left">#E6EFBB</td><td align="left"><img src="https://img.shields.io/badge/AMPL-E6EFBB.svg" alt="AMPL"></td></tr><tr><td align="left">Shen</td><td align="left">#120F14</td><td align="left"><img src="https://img.shields.io/badge/Shen-120F14.svg" alt="Shen"></td></tr><tr><td align="left">wdl</td><td align="left">#42f1f4</td><td align="left"><img src="https://img.shields.io/badge/wdl-42f1f4.svg" alt="wdl"></td></tr><tr><td align="left">Harbour</td><td align="left">#0e60e3</td><td align="left"><img src="https://img.shields.io/badge/Harbour-0e60e3.svg" alt="Harbour"></td></tr><tr><td align="left">Yacc</td><td align="left">#4B6C4B</td><td align="left"><img src="https://img.shields.io/badge/Yacc-4B6C4B.svg" alt="Yacc"></td></tr><tr><td align="left">Tcl</td><td align="left">#e4cc98</td><td align="left"><img src="https://img.shields.io/badge/Tcl-e4cc98.svg" alt="Tcl"></td></tr><tr><td align="left">Quake</td><td align="left">#882233</td><td align="left"><img src="https://img.shields.io/badge/Quake-882233.svg" alt="Quake"></td></tr><tr><td align="left">BlitzMax</td><td align="left">#cd6400</td><td align="left"><img src="https://img.shields.io/badge/BlitzMax-cd6400.svg" alt="BlitzMax"></td></tr><tr><td align="left">PigLatin</td><td align="left">#fcd7de</td><td align="left"><img src="https://img.shields.io/badge/PigLatin-fcd7de.svg" alt="PigLatin"></td></tr><tr><td align="left">xBase</td><td align="left">#403a40</td><td align="left"><img src="https://img.shields.io/badge/xBase-403a40.svg" alt="xBase"></td></tr><tr><td align="left">Lasso</td><td align="left">#999999</td><td align="left"><img src="https://img.shields.io/badge/Lasso-999999.svg" alt="Lasso"></td></tr><tr><td align="left">Processing</td><td align="left">#0096D8</td><td align="left"><img src="https://img.shields.io/badge/Processing-0096D8.svg" alt="Processing"></td></tr><tr><td align="left">VHDL</td><td align="left">#adb2cb</td><td align="left"><img src="https://img.shields.io/badge/VHDL-adb2cb.svg" alt="VHDL"></td></tr><tr><td align="left">Elm</td><td align="left">#60B5CC</td><td align="left"><img src="https://img.shields.io/badge/Elm-60B5CC.svg" alt="Elm"></td></tr><tr><td align="left">Dhall</td><td align="left">#dfafff</td><td align="left"><img src="https://img.shields.io/badge/Dhall-dfafff.svg" alt="Dhall"></td></tr><tr><td align="left">Propeller Spin</td><td align="left">#7fa2a7</td><td align="left"><img src="https://img.shields.io/badge/Propeller_Spin-7fa2a7.svg" alt="Propeller Spin"></td></tr><tr><td align="left">Rascal</td><td align="left">#fffaa0</td><td align="left"><img src="https://img.shields.io/badge/Rascal-fffaa0.svg" alt="Rascal"></td></tr><tr><td align="left">Alloy</td><td align="left">#64C800</td><td align="left"><img src="https://img.shields.io/badge/Alloy-64C800.svg" alt="Alloy"></td></tr><tr><td align="left">IDL</td><td align="left">#a3522f</td><td align="left"><img src="https://img.shields.io/badge/IDL-a3522f.svg" alt="IDL"></td></tr><tr><td align="left">Slice</td><td align="left">#003fa2</td><td align="left"><img src="https://img.shields.io/badge/Slice-003fa2.svg" alt="Slice"></td></tr><tr><td align="left">YASnippet</td><td align="left">#32AB90</td><td align="left"><img src="https://img.shields.io/badge/YASnippet-32AB90.svg" alt="YASnippet"></td></tr><tr><td align="left">ATS</td><td align="left">#1ac620</td><td align="left"><img src="https://img.shields.io/badge/ATS-1ac620.svg" alt="ATS"></td></tr><tr><td align="left">Ada</td><td align="left">#02f88c</td><td align="left"><img src="https://img.shields.io/badge/Ada-02f88c.svg" alt="Ada"></td></tr><tr><td align="left">Nu</td><td align="left">#c9df40</td><td align="left"><img src="https://img.shields.io/badge/Nu-c9df40.svg" alt="Nu"></td></tr><tr><td align="left">LFE</td><td align="left">#4C3023</td><td align="left"><img src="https://img.shields.io/badge/LFE-4C3023.svg" alt="LFE"></td></tr><tr><td align="left">SuperCollider</td><td align="left">#46390b</td><td align="left"><img src="https://img.shields.io/badge/SuperCollider-46390b.svg" alt="SuperCollider"></td></tr><tr><td align="left">Oxygene</td><td align="left">#cdd0e3</td><td align="left"><img src="https://img.shields.io/badge/Oxygene-cdd0e3.svg" alt="Oxygene"></td></tr><tr><td align="left">ASP</td><td align="left">#6a40fd</td><td align="left"><img src="https://img.shields.io/badge/ASP-6a40fd.svg" alt="ASP"></td></tr><tr><td align="left">Assembly</td><td align="left">#6E4C13</td><td align="left"><img src="https://img.shields.io/badge/Assembly-6E4C13.svg" alt="Assembly"></td></tr><tr><td align="left">Gnuplot</td><td align="left">#f0a9f0</td><td align="left"><img src="https://img.shields.io/badge/Gnuplot-f0a9f0.svg" alt="Gnuplot"></td></tr><tr><td align="left">FLUX</td><td align="left">#88ccff</td><td align="left"><img src="https://img.shields.io/badge/FLUX-88ccff.svg" alt="FLUX"></td></tr><tr><td align="left">C#</td><td align="left">#178600</td><td align="left"><img src="https://img.shields.io/badge/C%23-178600.svg" alt="C#"></td></tr><tr><td align="left">Turing</td><td align="left">#cf142b</td><td align="left"><img src="https://img.shields.io/badge/Turing-cf142b.svg" alt="Turing"></td></tr><tr><td align="left">Vala</td><td align="left">#fbe5cd</td><td align="left"><img src="https://img.shields.io/badge/Vala-fbe5cd.svg" alt="Vala"></td></tr><tr><td align="left">ECL</td><td align="left">#8a1267</td><td align="left"><img src="https://img.shields.io/badge/ECL-8a1267.svg" alt="ECL"></td></tr><tr><td align="left">ObjectScript</td><td align="left">#424893</td><td align="left"><img src="https://img.shields.io/badge/ObjectScript-424893.svg" alt="ObjectScript"></td></tr><tr><td align="left">NetLinx</td><td align="left">#0aa0ff</td><td align="left"><img src="https://img.shields.io/badge/NetLinx-0aa0ff.svg" alt="NetLinx"></td></tr><tr><td align="left">Perl 6</td><td align="left">#0000fb</td><td align="left"><img src="https://img.shields.io/badge/Perl_6-0000fb.svg" alt="Perl 6"></td></tr><tr><td align="left">MATLAB</td><td align="left">#e16737</td><td align="left"><img src="https://img.shields.io/badge/MATLAB-e16737.svg" alt="MATLAB"></td></tr><tr><td align="left">Emacs Lisp</td><td align="left">#c065db</td><td align="left"><img src="https://img.shields.io/badge/Emacs_Lisp-c065db.svg" alt="Emacs Lisp"></td></tr><tr><td align="left">Stan</td><td align="left">#b2011d</td><td align="left"><img src="https://img.shields.io/badge/Stan-b2011d.svg" alt="Stan"></td></tr><tr><td align="left">SaltStack</td><td align="left">#646464</td><td align="left"><img src="https://img.shields.io/badge/SaltStack-646464.svg" alt="SaltStack"></td></tr><tr><td align="left">Gherkin</td><td align="left">#5B2063</td><td align="left"><img src="https://img.shields.io/badge/Gherkin-5B2063.svg" alt="Gherkin"></td></tr><tr><td align="left">QML</td><td align="left">#44a51c</td><td align="left"><img src="https://img.shields.io/badge/QML-44a51c.svg" alt="QML"></td></tr><tr><td align="left">Pike</td><td align="left">#005390</td><td align="left"><img src="https://img.shields.io/badge/Pike-005390.svg" alt="Pike"></td></tr><tr><td align="left">DataWeave</td><td align="left">#003a52</td><td align="left"><img src="https://img.shields.io/badge/DataWeave-003a52.svg" alt="DataWeave"></td></tr><tr><td align="left">LOLCODE</td><td align="left">#cc9900</td><td align="left"><img src="https://img.shields.io/badge/LOLCODE-cc9900.svg" alt="LOLCODE"></td></tr><tr><td align="left">ooc</td><td align="left">#b0b77e</td><td align="left"><img src="https://img.shields.io/badge/ooc-b0b77e.svg" alt="ooc"></td></tr><tr><td align="left">XSLT</td><td align="left">#EB8CEB</td><td align="left"><img src="https://img.shields.io/badge/XSLT-EB8CEB.svg" alt="XSLT"></td></tr><tr><td align="left">XC</td><td align="left">#99DA07</td><td align="left"><img src="https://img.shields.io/badge/XC-99DA07.svg" alt="XC"></td></tr><tr><td align="left">J</td><td align="left">#9EEDFF</td><td align="left"><img src="https://img.shields.io/badge/J-9EEDFF.svg" alt="J"></td></tr><tr><td align="left">Mask</td><td align="left">#f97732</td><td align="left"><img src="https://img.shields.io/badge/Mask-f97732.svg" alt="Mask"></td></tr><tr><td align="left">EmberScript</td><td align="left">#FFF4F3</td><td align="left"><img src="https://img.shields.io/badge/EmberScript-FFF4F3.svg" alt="EmberScript"></td></tr><tr><td align="left">TeX</td><td align="left">#3D6117</td><td align="left"><img src="https://img.shields.io/badge/TeX-3D6117.svg" alt="TeX"></td></tr><tr><td align="left">Pep8</td><td align="left">#C76F5B</td><td align="left"><img src="https://img.shields.io/badge/Pep8-C76F5B.svg" alt="Pep8"></td></tr><tr><td align="left">R</td><td align="left">#198CE7</td><td align="left"><img src="https://img.shields.io/badge/R-198CE7.svg" alt="R"></td></tr><tr><td align="left">Cuda</td><td align="left">#3A4E3A</td><td align="left"><img src="https://img.shields.io/badge/Cuda-3A4E3A.svg" alt="Cuda"></td></tr><tr><td align="left">KRL</td><td align="left">#28430A</td><td align="left"><img src="https://img.shields.io/badge/KRL-28430A.svg" alt="KRL"></td></tr><tr><td align="left">Vim script</td><td align="left">#199f4b</td><td align="left"><img src="https://img.shields.io/badge/Vim_script-199f4b.svg" alt="Vim script"></td></tr><tr><td align="left">Lua</td><td align="left">#000080</td><td align="left"><img src="https://img.shields.io/badge/Lua-000080.svg" alt="Lua"></td></tr><tr><td align="left">Asymptote</td><td align="left">#4a0c0c</td><td align="left"><img src="https://img.shields.io/badge/Asymptote-4a0c0c.svg" alt="Asymptote"></td></tr><tr><td align="left">Ren’Py</td><td align="left">#ff7f7f</td><td align="left"><img src="https://img.shields.io/badge/Ren'Py-ff7f7f.svg" alt="Ren&#39;Py"></td></tr><tr><td align="left">Golo</td><td align="left">#88562A</td><td align="left"><img src="https://img.shields.io/badge/Golo-88562A.svg" alt="Golo"></td></tr><tr><td align="left">PostScript</td><td align="left">#da291c</td><td align="left"><img src="https://img.shields.io/badge/PostScript-da291c.svg" alt="PostScript"></td></tr><tr><td align="left">Fancy</td><td align="left">#7b9db4</td><td align="left"><img src="https://img.shields.io/badge/Fancy-7b9db4.svg" alt="Fancy"></td></tr><tr><td align="left">OCaml</td><td align="left">#3be133</td><td align="left"><img src="https://img.shields.io/badge/OCaml-3be133.svg" alt="OCaml"></td></tr><tr><td align="left">ColdFusion</td><td align="left">#ed2cd6</td><td align="left"><img src="https://img.shields.io/badge/ColdFusion-ed2cd6.svg" alt="ColdFusion"></td></tr><tr><td align="left">Pascal</td><td align="left">#E3F171</td><td align="left"><img src="https://img.shields.io/badge/Pascal-E3F171.svg" alt="Pascal"></td></tr><tr><td align="left">F#</td><td align="left">#b845fc</td><td align="left"><img src="https://img.shields.io/badge/F%23-b845fc.svg" alt="F#"></td></tr><tr><td align="left">API Blueprint</td><td align="left">#2ACCA8</td><td align="left"><img src="https://img.shields.io/badge/API_Blueprint-2ACCA8.svg" alt="API Blueprint"></td></tr><tr><td align="left">ActionScript</td><td align="left">#882B0F</td><td align="left"><img src="https://img.shields.io/badge/ActionScript-882B0F.svg" alt="ActionScript"></td></tr><tr><td align="left">F*</td><td align="left">#572e30</td><td align="left"><img src="https://img.shields.io/badge/F*-572e30.svg" alt="F*"></td></tr><tr><td align="left">Fantom</td><td align="left">#14253c</td><td align="left"><img src="https://img.shields.io/badge/Fantom-14253c.svg" alt="Fantom"></td></tr><tr><td align="left">Zephir</td><td align="left">#118f9e</td><td align="left"><img src="https://img.shields.io/badge/Zephir-118f9e.svg" alt="Zephir"></td></tr><tr><td align="left">Click</td><td align="left">#E4E6F3</td><td align="left"><img src="https://img.shields.io/badge/Click-E4E6F3.svg" alt="Click"></td></tr><tr><td align="left">Smalltalk</td><td align="left">#596706</td><td align="left"><img src="https://img.shields.io/badge/Smalltalk-596706.svg" alt="Smalltalk"></td></tr><tr><td align="left">Ballerina</td><td align="left">#FF5000</td><td align="left"><img src="https://img.shields.io/badge/Ballerina-FF5000.svg" alt="Ballerina"></td></tr><tr><td align="left">DM</td><td align="left">#447265</td><td align="left"><img src="https://img.shields.io/badge/DM-447265.svg" alt="DM"></td></tr><tr><td align="left">Ioke</td><td align="left">#078193</td><td align="left"><img src="https://img.shields.io/badge/Ioke-078193.svg" alt="Ioke"></td></tr><tr><td align="left">PogoScript</td><td align="left">#d80074</td><td align="left"><img src="https://img.shields.io/badge/PogoScript-d80074.svg" alt="PogoScript"></td></tr><tr><td align="left">LiveScript</td><td align="left">#499886</td><td align="left"><img src="https://img.shields.io/badge/LiveScript-499886.svg" alt="LiveScript"></td></tr><tr><td align="left">JavaScript</td><td align="left">#f1e05a</td><td align="left"><img src="https://img.shields.io/badge/JavaScript-f1e05a.svg" alt="JavaScript"></td></tr><tr><td align="left">Wollok</td><td align="left">#a23738</td><td align="left"><img src="https://img.shields.io/badge/Wollok-a23738.svg" alt="Wollok"></td></tr><tr><td align="left">Rust</td><td align="left">#dea584</td><td align="left"><img src="https://img.shields.io/badge/Rust-dea584.svg" alt="Rust"></td></tr><tr><td align="left">ABAP</td><td align="left">#E8274B</td><td align="left"><img src="https://img.shields.io/badge/ABAP-E8274B.svg" alt="ABAP"></td></tr><tr><td align="left">ZenScript</td><td align="left">#00BCD1</td><td align="left"><img src="https://img.shields.io/badge/ZenScript-00BCD1.svg" alt="ZenScript"></td></tr><tr><td align="left">Slash</td><td align="left">#007eff</td><td align="left"><img src="https://img.shields.io/badge/Slash-007eff.svg" alt="Slash"></td></tr><tr><td align="left">Erlang</td><td align="left">#B83998</td><td align="left"><img src="https://img.shields.io/badge/Erlang-B83998.svg" alt="Erlang"></td></tr><tr><td align="left">Pan</td><td align="left">#cc0000</td><td align="left"><img src="https://img.shields.io/badge/Pan-cc0000.svg" alt="Pan"></td></tr><tr><td align="left">LookML</td><td align="left">#652B81</td><td align="left"><img src="https://img.shields.io/badge/LookML-652B81.svg" alt="LookML"></td></tr><tr><td align="left">Scheme</td><td align="left">#1e4aec</td><td align="left"><img src="https://img.shields.io/badge/Scheme-1e4aec.svg" alt="Scheme"></td></tr><tr><td align="left">Squirrel</td><td align="left">#800000</td><td align="left"><img src="https://img.shields.io/badge/Squirrel-800000.svg" alt="Squirrel"></td></tr><tr><td align="left">Nim</td><td align="left">#37775b</td><td align="left"><img src="https://img.shields.io/badge/Nim-37775b.svg" alt="Nim"></td></tr><tr><td align="left">Python</td><td align="left">#3572A5</td><td align="left"><img src="https://img.shields.io/badge/Python-3572A5.svg" alt="Python"></td></tr><tr><td align="left">Max</td><td align="left">#c4a79c</td><td align="left"><img src="https://img.shields.io/badge/Max-c4a79c.svg" alt="Max"></td></tr><tr><td align="left">Solidity</td><td align="left">#AA6746</td><td align="left"><img src="https://img.shields.io/badge/Solidity-AA6746.svg" alt="Solidity"></td></tr><tr><td align="left">Common Lisp</td><td align="left">#3fb68b</td><td align="left"><img src="https://img.shields.io/badge/Common_Lisp-3fb68b.svg" alt="Common Lisp"></td></tr><tr><td align="left">Dart</td><td align="left">#00B4AB</td><td align="left"><img src="https://img.shields.io/badge/Dart-00B4AB.svg" alt="Dart"></td></tr><tr><td align="left">Nix</td><td align="left">#7e7eff</td><td align="left"><img src="https://img.shields.io/badge/Nix-7e7eff.svg" alt="Nix"></td></tr><tr><td align="left">Nearley</td><td align="left">#990000</td><td align="left"><img src="https://img.shields.io/badge/Nearley-990000.svg" alt="Nearley"></td></tr><tr><td align="left">Nit</td><td align="left">#009917</td><td align="left"><img src="https://img.shields.io/badge/Nit-009917.svg" alt="Nit"></td></tr><tr><td align="left">Chapel</td><td align="left">#8dc63f</td><td align="left"><img src="https://img.shields.io/badge/Chapel-8dc63f.svg" alt="Chapel"></td></tr><tr><td align="left">Groovy</td><td align="left">#e69f56</td><td align="left"><img src="https://img.shields.io/badge/Groovy-e69f56.svg" alt="Groovy"></td></tr><tr><td align="left">Dylan</td><td align="left">#6c616e</td><td align="left"><img src="https://img.shields.io/badge/Dylan-6c616e.svg" alt="Dylan"></td></tr><tr><td align="left">E</td><td align="left">#ccce35</td><td align="left"><img src="https://img.shields.io/badge/E-ccce35.svg" alt="E"></td></tr><tr><td align="left">Parrot</td><td align="left">#f3ca0a</td><td align="left"><img src="https://img.shields.io/badge/Parrot-f3ca0a.svg" alt="Parrot"></td></tr><tr><td align="left">Grammatical Framework</td><td align="left">#79aa7a</td><td align="left"><img src="https://img.shields.io/badge/Grammatical_Framework-79aa7a.svg" alt="Grammatical Framework"></td></tr><tr><td align="left">Game Maker Language</td><td align="left">#71b417</td><td align="left"><img src="https://img.shields.io/badge/Game_Maker_Language-71b417.svg" alt="Game Maker Language"></td></tr><tr><td align="left">VCL</td><td align="left">#148AA8</td><td align="left"><img src="https://img.shields.io/badge/VCL-148AA8.svg" alt="VCL"></td></tr><tr><td align="left">Papyrus</td><td align="left">#6600cc</td><td align="left"><img src="https://img.shields.io/badge/Papyrus-6600cc.svg" alt="Papyrus"></td></tr><tr><td align="left">C++</td><td align="left">#f34b7d</td><td align="left"><img src="https://img.shields.io/badge/C++-f34b7d.svg" alt="C++"></td></tr><tr><td align="left">NetLinx+ERB</td><td align="left">#747faa</td><td align="left"><img src="https://img.shields.io/badge/NetLinx+ERB-747faa.svg" alt="NetLinx+ERB"></td></tr><tr><td align="left">Common Workflow Language</td><td align="left">#B5314C</td><td align="left"><img src="https://img.shields.io/badge/Common_Workflow_Language-B5314C.svg" alt="Common Workflow Language"></td></tr><tr><td align="left">Clean</td><td align="left">#3F85AF</td><td align="left"><img src="https://img.shields.io/badge/Clean-3F85AF.svg" alt="Clean"></td></tr><tr><td align="left">X10</td><td align="left">#4B6BEF</td><td align="left"><img src="https://img.shields.io/badge/X10-4B6BEF.svg" alt="X10"></td></tr><tr><td align="left">Puppet</td><td align="left">#302B6D</td><td align="left"><img src="https://img.shields.io/badge/Puppet-302B6D.svg" alt="Puppet"></td></tr><tr><td align="left">Jolie</td><td align="left">#843179</td><td align="left"><img src="https://img.shields.io/badge/Jolie-843179.svg" alt="Jolie"></td></tr><tr><td align="left">PLSQL</td><td align="left">#dad8d8</td><td align="left"><img src="https://img.shields.io/badge/PLSQL-dad8d8.svg" alt="PLSQL"></td></tr><tr><td align="left">sed</td><td align="left">#64b970</td><td align="left"><img src="https://img.shields.io/badge/sed-64b970.svg" alt="sed"></td></tr><tr><td align="left">Pawn</td><td align="left">#dbb284</td><td align="left"><img src="https://img.shields.io/badge/Pawn-dbb284.svg" alt="Pawn"></td></tr><tr><td align="left">Standard ML</td><td align="left">#dc566d</td><td align="left"><img src="https://img.shields.io/badge/Standard_ML-dc566d.svg" alt="Standard ML"></td></tr><tr><td align="left">PureScript</td><td align="left">#1D222D</td><td align="left"><img src="https://img.shields.io/badge/PureScript-1D222D.svg" alt="PureScript"></td></tr><tr><td align="left">Julia</td><td align="left">#a270ba</td><td align="left"><img src="https://img.shields.io/badge/Julia-a270ba.svg" alt="Julia"></td></tr><tr><td align="left">nesC</td><td align="left">#94B0C7</td><td align="left"><img src="https://img.shields.io/badge/nesC-94B0C7.svg" alt="nesC"></td></tr><tr><td align="left">q</td><td align="left">#0040cd</td><td align="left"><img src="https://img.shields.io/badge/q-0040cd.svg" alt="q"></td></tr><tr><td align="left">Haskell</td><td align="left">#5e5086</td><td align="left"><img src="https://img.shields.io/badge/Haskell-5e5086.svg" alt="Haskell"></td></tr><tr><td align="left">NCL</td><td align="left">#28431f</td><td align="left"><img src="https://img.shields.io/badge/NCL-28431f.svg" alt="NCL"></td></tr><tr><td align="left">Io</td><td align="left">#a9188d</td><td align="left"><img src="https://img.shields.io/badge/Io-a9188d.svg" alt="Io"></td></tr><tr><td align="left">Rouge</td><td align="left">#cc0088</td><td align="left"><img src="https://img.shields.io/badge/Rouge-cc0088.svg" alt="Rouge"></td></tr><tr><td align="left">Racket</td><td align="left">#3c5caa</td><td align="left"><img src="https://img.shields.io/badge/Racket-3c5caa.svg" alt="Racket"></td></tr><tr><td align="left">NetLogo</td><td align="left">#ff6375</td><td align="left"><img src="https://img.shields.io/badge/NetLogo-ff6375.svg" alt="NetLogo"></td></tr><tr><td align="left">AGS Script</td><td align="left">#B9D9FF</td><td align="left"><img src="https://img.shields.io/badge/AGS_Script-B9D9FF.svg" alt="AGS Script"></td></tr><tr><td align="left">Meson</td><td align="left">#007800</td><td align="left"><img src="https://img.shields.io/badge/Meson-007800.svg" alt="Meson"></td></tr><tr><td align="left">Dogescript</td><td align="left">#cca760</td><td align="left"><img src="https://img.shields.io/badge/Dogescript-cca760.svg" alt="Dogescript"></td></tr><tr><td align="left">PowerShell</td><td align="left">#012456</td><td align="left"><img src="https://img.shields.io/badge/PowerShell-012456.svg" alt="PowerShell"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 素材 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 色彩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Ultimate-Spider全方位解析数据采集系统的基本知识</title>
      <link href="/2020/02/04/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/02/04/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Ultimate Spider【终极蜘蛛王】，一款用于网络数据采集的工具。本文对Ultimate Spider的整体架构和一些技术亮点作说明。</p><span id="more"></span><p>Ultimate Spider主要页面有：1、用来展示概览信息的仪表盘页；2、爬虫配置页。</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E4%BB%AA%E8%A1%A8%E7%9B%98%E9%A1%B5.png" alt="仪表盘页"></p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E7%88%AC%E8%99%AB%E9%85%8D%E7%BD%AE%E9%A1%B5.png" alt="爬虫配置页"></p><p>整体架构如下图所示：</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="整体架构"></p><h2 id="爬虫配置"><a href="#爬虫配置" class="headerlink" title="爬虫配置"></a>爬虫配置</h2><p>在WebMagic爬虫框架的基础上对初始Url和爬取内容进行可视化配置，爬取规则的制定更加灵活多变，适应范围更广。</p><ul><li>SpiderProcessor.java 根据爬取规则进行爬取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;SpiderProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpiderProcessor</span> <span class="keyword">implements</span> <span class="title class_">PageProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SpiderProperties spiderProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String spiderName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Crawler crawler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SpiderProcessor</span><span class="params">(SpiderProperties spiderProperties, String spiderName, Crawler crawler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.spiderProperties = spiderProperties;</span><br><span class="line">        <span class="built_in">this</span>.spiderName = spiderName;</span><br><span class="line">        <span class="built_in">this</span>.crawler = crawler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(Page page)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(crawler.getCrawlConfigs())) &#123;</span><br><span class="line">            page.putField(Constants.SPIDER_NAME, spiderName);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">            <span class="keyword">for</span> (Crawler.CrawlConfig crawlConfig : crawler.getCrawlConfigs()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(crawlConfig.getCrawlRules())) &#123;</span><br><span class="line">                    <span class="type">Selectable</span> <span class="variable">selector</span> <span class="operator">=</span> page.getHtml();</span><br><span class="line">                    <span class="keyword">for</span> (Crawler.CrawlRule crawlRule : crawlConfig.getCrawlRules()) &#123;</span><br><span class="line">                        <span class="keyword">switch</span> (crawlRule.getCrawlType()) &#123;</span><br><span class="line">                            <span class="keyword">case</span> XPATH:</span><br><span class="line">                                selector = selector.xpath(crawlRule.getRule());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> CSS:</span><br><span class="line">                                <span class="keyword">if</span> (StringUtils.isBlank(crawlRule.getAttr())) &#123;</span><br><span class="line">                                    selector = selector.css(crawlRule.getRule());</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    selector = selector.css(crawlRule.getRule(), crawlRule.getAttr());</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> LINKS:</span><br><span class="line">                                selector = selector.links();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REGEX:</span><br><span class="line">                                selector = selector.regex(crawlRule.getRule());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REGEX_WITH_GROUP:</span><br><span class="line">                                selector = selector.regex(crawlRule.getRule(), crawlRule.getGroup());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> REPLACE:</span><br><span class="line">                                selector = selector.replace(crawlRule.getRule(), crawlRule.getReplacement());</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                log.warn(<span class="string">&quot;not support crawl rule type: &#123;&#125;&quot;</span>, crawlRule.getCrawlType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (crawlConfig.isMultiResult()) &#123;</span><br><span class="line">                        List&lt;String&gt; value = selector.all();</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.isNullSkip() &amp;&amp; CollectionUtils.isEmpty(value)) &#123;</span><br><span class="line">                            page.setSkip(<span class="literal">true</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TARGET_URL) &#123;</span><br><span class="line">                            page.addTargetRequests(value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TEXT) &#123;</span><br><span class="line">                            content.put(crawlConfig.getCrawlKey(), value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;not support crawl result type: &#123;&#125;&quot;</span>, crawlConfig.getCrawlResultType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> selector.get();</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.isNullSkip() &amp;&amp; StringUtils.isBlank(value)) &#123;</span><br><span class="line">                            page.setSkip(<span class="literal">true</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TARGET_URL) &#123;</span><br><span class="line">                            page.addTargetRequest(value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (crawlConfig.getCrawlResultType() == Crawler.CrawlResultType.TEXT) &#123;</span><br><span class="line">                            content.put(crawlConfig.getCrawlKey(), value);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.warn(<span class="string">&quot;not support crawl result type: &#123;&#125;&quot;</span>, crawlConfig.getCrawlResultType());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            content.put(Constants.CRAWL_AT, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            page.putField(Constants.SPIDER_CONTENT, content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Site <span class="title function_">getSite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Site.me()</span><br><span class="line">                .setRetryTimes(spiderProperties.getRetryTimes())</span><br><span class="line">                .setRetrySleepTime(spiderProperties.getRetrySleepTime())</span><br><span class="line">                .setSleepTime(spiderProperties.getSleepTime())</span><br><span class="line">                .setTimeOut(spiderProperties.getTimeout());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爬虫执行"><a href="#爬虫执行" class="headerlink" title="爬虫执行"></a>爬虫执行</h2><p>使用Quartz定时任务框架完成爬虫任务的调度，可以随时暂停和恢复爬虫任务。</p><ul><li>TaskServiceImpl.java 爬虫任务服务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TaskService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskRepository taskRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UltimateSpiderRepository ultimateSpiderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getSpiderTask</span><span class="params">(Integer spiderId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(spiderId)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">crawlTask</span> <span class="operator">=</span> taskRepository.findOneBySpiderIdAndTaskType(spiderId, Task.TaskType.CRAWL);</span><br><span class="line">        <span class="type">Task</span> <span class="variable">cleanTask</span> <span class="operator">=</span> taskRepository.findOneBySpiderIdAndTaskType(spiderId, Task.TaskType.CLEAN);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">spiderTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        spiderTask.fluentPut(Constants.CRAWL_TASK, crawlTask).fluentPut(Constants.CLEAN_TASK, cleanTask);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(spiderTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveTask</span><span class="params">(Task task)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!task.isValid(<span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus() == <span class="literal">null</span>) &#123;</span><br><span class="line">            task.setJobStatus(Task.JobStatus.RUNNING);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">flushedTask</span> <span class="operator">=</span> taskRepository.saveAndFlush(task);</span><br><span class="line">        <span class="type">UltimateSpider</span> <span class="variable">spider</span> <span class="operator">=</span> ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus() == Task.JobStatus.RUNNING) &#123;</span><br><span class="line">            <span class="type">TriggerKey</span> <span class="variable">triggerKey</span> <span class="operator">=</span> JobUtils.generateTriggerKey(spider, task.getTaskType());</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(task.getCronExpression()))</span><br><span class="line">                    .withIdentity(triggerKey)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(task.getTaskType().getJobClass())</span><br><span class="line">                        .withIdentity(jobKey)</span><br><span class="line">                        .usingJobData(Constants.JOB_TASK_ID, flushedTask.getId())</span><br><span class="line">                        .storeDurably()</span><br><span class="line">                        .build();</span><br><span class="line">                scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.getJobStatus() == Task.JobStatus.PAUSE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">                scheduler.pauseJob(jobKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(flushedTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">pauseTask</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskRepository.findOne(id);</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="literal">null</span> || !task.isValid(<span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.DATA_VALID_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">UltimateSpider</span> <span class="variable">spider</span> <span class="operator">=</span> ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">            scheduler.pauseJob(jobKey);</span><br><span class="line">        &#125;</span><br><span class="line">        task.setJobStatus(Task.JobStatus.PAUSE);</span><br><span class="line">        taskRepository.save(task);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">resumeTask</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ValidateUtils.validId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.PARAMS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskRepository.findOne(id);</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="literal">null</span> || !task.isValid(<span class="literal">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(ResultCode.DATA_VALID_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        resumeTask(task);</span><br><span class="line">        task.setJobStatus(Task.JobStatus.RUNNING);</span><br><span class="line">        taskRepository.save(task);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resumeTask</span><span class="params">(Task task)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="type">UltimateSpider</span> <span class="variable">spider</span> <span class="operator">=</span> ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        <span class="type">JobKey</span> <span class="variable">jobKey</span> <span class="operator">=</span> JobUtils.generateJobKey(spider, task.getTaskType());</span><br><span class="line">        <span class="keyword">if</span> (scheduler.checkExists(jobKey)) &#123;</span><br><span class="line">            scheduler.resumeJob(jobKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//noinspection unchecked</span></span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(task.getTaskType().getJobClass())</span><br><span class="line">                    .withIdentity(jobKey)</span><br><span class="line">                    .usingJobData(Constants.JOB_TASK_ID, task.getId())</span><br><span class="line">                    .storeDurably()</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">TriggerKey</span> <span class="variable">triggerKey</span> <span class="operator">=</span> JobUtils.generateTriggerKey(spider, task.getTaskType());</span><br><span class="line">            <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(task.getCronExpression()))</span><br><span class="line">                    .withIdentity(triggerKey)</span><br><span class="line">                    .build();</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>数据清洗任务同样使用Quartz进行调度，确保爬取数据的质量。清洗规则同样可在页面上进行配置。</p><ul><li>CleanerJob.java 清洗任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CleanerJob</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UltimateSpiderRepository ultimateSpiderRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskRepository taskRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CleanerRepository cleanerRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">taskId</span> <span class="operator">=</span> (Integer) jobExecutionContext.getJobDetail().getJobDataMap().get(Constants.JOB_TASK_ID);</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskRepository.findOne(taskId);</span><br><span class="line">        <span class="type">UltimateSpider</span> <span class="variable">ultimateSpider</span> <span class="operator">=</span> ultimateSpiderRepository.findOne(task.getSpiderId());</span><br><span class="line">        <span class="type">Cleaner</span> <span class="variable">cleaner</span> <span class="operator">=</span> cleanerRepository.findOneBySpiderId(task.getSpiderId());</span><br><span class="line">        <span class="keyword">if</span> (cleaner == <span class="literal">null</span> || !cleaner.isValid(<span class="literal">true</span>)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;[&#123;&#125;] cleaner is invalid&quot;</span>, ultimateSpider.getSpiderName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;] cleaner start&quot;</span>, ultimateSpider.getSpiderName());</span><br><span class="line">        List&lt;JSONObject&gt; purgeList = Lists.newArrayList();</span><br><span class="line">        List&lt;JSONObject&gt; mergeList = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">for</span> (Cleaner.CleanerRule cleanerRule : cleaner.getCleanerRules()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cleanerRule.getCleanType() == Cleaner.CleanType.MERGE) &#123;</span><br><span class="line">                List&lt;JSONObject&gt; queryResult = mongoTemplate.find(<span class="keyword">new</span> <span class="title class_">BasicQuery</span>(cleanerRule.getQueryRule()),</span><br><span class="line">                        JSONObject.class, ultimateSpider.getSpiderName());</span><br><span class="line">                Map&lt;String, List&lt;JSONObject&gt;&gt; mergeMap = Maps.newHashMap();</span><br><span class="line">                queryResult.forEach(result -&gt; &#123;</span><br><span class="line">                    List&lt;String&gt; keyItems = Lists.newLinkedList();</span><br><span class="line">                    <span class="keyword">for</span> (String distinctKey : cleanerRule.getDistinctKeys()) &#123;</span><br><span class="line">                        <span class="type">StringBuilder</span> <span class="variable">keyItemBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                        <span class="keyword">if</span> (!result.containsKey(distinctKey)) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        keyItemBuilder.append(distinctKey).append(Constants.MERGE_KEY_DELIMITER).append(result.get(distinctKey));</span><br><span class="line">                        keyItems.add(keyItemBuilder.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (keyItems.size() == cleanerRule.getDistinctKeys().size()) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">mergeKey</span> <span class="operator">=</span> StringUtils.join(Constants.MERGE_VALUE_DELIMITER, keyItems);</span><br><span class="line">                        List&lt;JSONObject&gt; resultMergeList = mergeMap.getOrDefault(mergeKey, Lists.newArrayList());</span><br><span class="line">                        resultMergeList.add(result);</span><br><span class="line">                        mergeMap.putIfAbsent(mergeKey, Lists.newArrayList());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                mergeMap.forEach((mergeKey, resultMergeList) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resultMergeList.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                        purgeList.addAll(resultMergeList);</span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">mergeResult</span> <span class="operator">=</span> resultMergeList.get(<span class="number">0</span>);</span><br><span class="line">                        resultMergeList.remove(<span class="number">0</span>);</span><br><span class="line">                        resultMergeList.forEach(result -&gt; &#123;</span><br><span class="line">                            <span class="keyword">for</span> (String resultMergeKey : cleanerRule.getMergeKeys()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (mergeResult.get(resultMergeKey) <span class="keyword">instanceof</span> JSONArray) &#123;</span><br><span class="line">                                    <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> (JSONArray) mergeResult.getOrDefault(resultMergeKey, <span class="keyword">new</span> <span class="title class_">JSONArray</span>());</span><br><span class="line">                                    <span class="keyword">if</span> (!jsonArray.contains(result.get(resultMergeKey))) &#123;</span><br><span class="line">                                        jsonArray.add(result.get(resultMergeKey));</span><br><span class="line">                                        mergeResult.put(resultMergeKey, jsonArray);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">                                    jsonArray.add(mergeResult.get(resultMergeKey));</span><br><span class="line">                                    jsonArray.add(result.get(resultMergeKey));</span><br><span class="line">                                    mergeResult.put(resultMergeKey, jsonArray);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        mergeList.add(mergeResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cleanerRule.getCleanType() == Cleaner.CleanType.PURGE) &#123;</span><br><span class="line">                purgeList.addAll(mongoTemplate.find(<span class="keyword">new</span> <span class="title class_">BasicQuery</span>(cleanerRule.getQueryRule()),</span><br><span class="line">                        JSONObject.class, ultimateSpider.getSpiderName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        purgeList.forEach(purgeObject -&gt; mongoTemplate.remove(purgeObject, ultimateSpider.getSpiderName()));</span><br><span class="line">        mergeList.forEach(mergeObject -&gt; mongoTemplate.save(mergeObject, ultimateSpider.getSpiderName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>使用RabbitMQ消息队列异步保存爬取结果至MongoDB文档型数据库，性能更好，更适合格式多变的爬取结果的存储。</p><ul><li>消息消费者存储爬取结果至MongoDB</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = Constants.QUEUE_NAME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String spiderResultJson)</span> &#123;</span><br><span class="line">        <span class="type">SpiderResult</span> <span class="variable">spiderResult</span> <span class="operator">=</span> JSON.parseObject(spiderResultJson, SpiderResult.class);</span><br><span class="line">        log.info(<span class="string">&quot;queue: &#123;&#125;, spider_result: &#123;&#125;&quot;</span>, Constants.QUEUE_NAME, spiderResult);</span><br><span class="line">        mongoTemplate.save(spiderResult.getContent(), spiderResult.getSpiderName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>使用较为成熟的Metabase进行采集数据的可视化。</p><p><img src="/images/%E4%BB%8EUltimate-Spider%E5%85%A8%E6%96%B9%E4%BD%8D%E8%A7%A3%E6%9E%90%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/Metabase%E9%87%87%E9%9B%86%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png" alt="Metabase采集数据可视化"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> WebMagic </tag>
            
            <tag> 数据采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最佳日志实践</title>
      <link href="/2020/02/04/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/02/04/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://zhuanlan.zhihu.com/p/27363484">最佳日志实践（v2.0）</a></p></blockquote><h2 id="什么是日志"><a href="#什么是日志" class="headerlink" title="什么是日志"></a>什么是日志</h2><p>日志用来记录用户操作、系统运行状态等，是一个系统的重要组成部分。然而，由于日志通常不属于系统的核心功能，所以常常不被团队成员所重视。对于一些简单的小程序，可能并不需要在如何记录日志的问题上花费太多精力。但是对于作为基础平台为很多产品提供服务的后端程序，就必须要考虑如何依靠良好的日志来保证系统可靠的运行了。</p><span id="more"></span><p>好的日志可以帮助系统的开发和运维人员：</p><ol><li>了解线上系统的运行状态</li><li>快速准确定位线上问题</li><li>发现系统瓶颈</li><li>预警系统潜在风险</li><li>挖掘产品最大价值</li><li>……</li></ol><p>不好的日志导致：</p><ol><li>对系统的运行状态一知半解，甚至一无所知</li><li>系统出现问题无法定位，或者需要花费巨大的时间和精力</li><li>无法发现系统瓶颈，不知优化从何做起</li><li>无法基于日志对系统运行过程中的错误和潜在风险进行监控和报警</li><li>对挖掘用户行为和提升产品价值毫无帮助</li><li>……</li></ol><h2 id="日志的分类"><a href="#日志的分类" class="headerlink" title="日志的分类"></a>日志的分类</h2><p>日志从功能来说，可分为诊断日志、统计日志、审计日志。</p><p><strong>诊断日志， 典型的有：</strong></p><ul><li>请求入口和出口</li><li>外部服务调用和返回</li><li>资源消耗操作: 如读写文件等</li><li>容错行为： 如云硬盘的副本修复操作</li><li>程序异常： 如数据库无法连接</li><li>后台操作：定期执行删除的线程</li><li>启动、关闭、配置加载</li></ul><p><strong>统计日志：</strong></p><ul><li>用户访问统计：用户IP、上传下载的数据量，请求耗时等</li><li>计费日志（如记录用户使用的网络资源或磁盘占用，格式较为严格，便于统计）</li></ul><p><strong>审计日志：</strong></p><ul><li>管理操作</li></ul><p>对于简单的系统，可以将所有的日志输出到同一个日志文件中，并通过不同的关键字进行区分。而对于复杂的系统，将不同需求的日志输出到不同的日志文件中是必要的，通过对不同类型的文件采用不同的日志格式（例如对于计费日志可以直接输出为Json格式），可以方便接入其他的子系统。</p><h2 id="日志中记录什么"><a href="#日志中记录什么" class="headerlink" title="日志中记录什么"></a>日志中记录什么</h2><p>理想的日志中应该记录<strong>不多不少</strong>的信息。</p><p>所谓不多，是指不要在日志中记录无用的信息。实践中常见到的无用的日志有：</p><ol><li>能够放在一条日志里的东西，放在多条日志中输出；</li><li>预期会发生且能够被正常处理的异常，打印出一堆无用的堆栈；</li><li>开发人员在开发过程中为了调试方便而加入的“临时”日志</li></ol><p>所谓不少，是指对于日志的使用者，能够从日志中得到所有需要的信息。在实践中经常发生日志不够的情况，例如：</p><ol><li>请求出错时不能通过日志直接来定位问题，而需要开发人员再临时增加日志并要求请求的发送者重新发送同样的请求才能定位问题；</li><li>无法确定服务中的后台任务是否按照期望执行；</li><li>无法确定服务的内存数据结构的状态；</li><li>无法确定服务的异常处理逻辑（如重试）是否正确执行；</li><li>无法确定服务启动时配置是否正确加载；</li><li>等等等等</li></ol><p>输出日志时要考虑日志的使用者，例如如果日志主要由系统的运维人员来看，那就不能输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, ErrorCode:1426 </span><br></pre></td></tr></table></figure><p>至少应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, ErrorCode:1426, Message: callback request (to http://example.com/callback) failed due to socket timeout</span><br></pre></td></tr></table></figure><p>这样运维人员一眼就能清楚问题的原因，而不需要再通过开发来查看ErrorCode对应的具体错误。</p><p>整理一下通常情况下会遗漏的日志：</p><ol><li><p>系统的配置参数：系统在启动过程中通常会首先读启动参数，可以在系统启动后将这些参数输出到日志中，方便确认系统是按照期望的参数启动的；</p></li><li><p>后台定期执行的任务：如定期更新缓存的任务，可以记录任务开始时间，任务结束时间，更新了多少条缓存配置等等，这样可以掌握定期执行的任务的状态；</p></li><li><p>异常处理逻辑：如对于分布式存储系统来说，当系统在一个存储节点上读数据失败时，需要去另一个数据节点上进行重试，可以将读数据失败这件事情记录下来，之后可以通过对日志的分析确认是否某些节点的磁盘可能存在故障。再比如，如果系统需要请求一个外部资源，可以将请求这个外部资源偶尔失败又重试成功这件事情记录下来，具体来说：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) timeout ... 1 try</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) timeout ... 2 try</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) success</span><br></pre></td></tr></table></figure><p> 要好于</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth request (to http://auth1.example.com/v2) success</span><br></pre></td></tr></table></figure><p> 因为前者可以让我们预判被依赖的服务器服务质量有风险，也许需要进行扩容；</p></li><li><p>日志中需要记录关键参数，出错时的关键原因等。例如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth failed</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611185, content digest does not match</span><br><span class="line">   [INFO] RequestID:b1946ac92492d2347c6235b4d2611186, request ip not in whitelist</span><br></pre></td></tr></table></figure><p> 就不如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611184, auth failed due to token expiration</span><br><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611185, content digest does not match, expect 7b3f050bfa060b86ba781151c563c953, actual f60645e7107917250a6408f2f302d048</span><br><span class="line">[INFO] RequestID:b1946ac92492d2347c6235b4d2611186, request ip(=202.17.34.1) not in whitelist</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于日志级别"><a href="#关于日志级别" class="headerlink" title="关于日志级别"></a>关于日志级别</h2><p>我们通常使用的日志库，将日志基本分为以下几类（从低到高）：</p><ul><li><strong>TRACE</strong> – The TRACE Level designates finer-grained informational events than the DEBUG</li><li><strong>DEBUG</strong> – The DEBUG Level designates fine-grained informational events that are most useful to debug an application.</li><li><strong>INFO</strong> – The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.</li><li><strong>WARN</strong> – The WARN level designates potentially harmful situations.</li><li><strong>ERROR</strong> – The ERROR level designates error events that might still allow the application to continue running.</li><li><strong>FATAL</strong> – The FATAL level designates very severe error events that will presumably lead the application to abort.</li></ul><p>开发人员对于何种日志输出为何种级别通常有自己的理解，那在实践中，是否所有的日志级别都有必要存在，哪些操作需要记入日志，哪种错误应该记为WARN级别，而哪种错误又为ERROR级别呢？关于该问题，可以参考StackOverflow上的一个<a href="https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels">讨论</a>。</p><p>此处对贴子中的一些观点，加上我们在平时运维过程中遇到的相关问题进行归纳：</p><ul><li><p>一个项目各个日志级别的定义应该是清楚明确的，需要团队的每个开发人员共同遵守；</p></li><li><p>即使是TRACE或者DEBUG级别的日志，也应该有一定的规范，要保证除了开发人员自己以外，包括测试人员和运维人员都可以方便地通过日志定位问题；</p></li><li><p>对于日志级别的分类，有以下参考：</p><ul><li><strong>FATAL</strong> — 表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该日志级别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管理员修复；</li><li><strong>ERROR</strong> — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的异常，是需要马上得到人工介入并处理的。而对于用户自己操作不当，如请求参数错误等等，是绝对不应该记为ERROR日志的；</li><li><strong>WARN</strong> — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要及时查看并处理的。因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；</li><li><strong>INFO</strong> — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。通过查看INFO级别的日志，可以很快地对系统中出现的 WARN,ERROR,FATAL错误进行定位。INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；</li><li><strong>DEBUG</strong> or <strong>TRACE</strong> — 这两种日志具体的规范应该由项目组自己定义，该级别日志的主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看某一个操作每一步的执 行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的日志对问题进行诊断。需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，其他的如运维，测试人员等也可以通过 DEBUG（或TRACE）日志来定位问题；</li></ul></li></ul><h2 id="不断优化日志"><a href="#不断优化日志" class="headerlink" title="不断优化日志"></a>不断优化日志</h2><p>有一点可以肯定，好的日志就像好的文章一样，绝不是一遍就可以写好的，而需要在实际的运维过程中，结合线上问题的定位，不断地进行优化。最关键的一点是，团队要重视日志优化这件事情，不要让日志的质量持续降低（当项目变大时，项目的代码也存在一样的问题，越写越乱）。</p><p>此处有以下几个比较好的实践：</p><ul><li>在定位问题的过程中完善日志，如果定位问题花费了很长时间，那就说明系统日志还存在问题，需要进一步完善和优化；</li><li>需要思考是否可以通过优化日志，来提前预判该问题是否可能发生（如某种资源耗尽而导致的错误，可以对资源的使用情况进行记录）</li><li>定义好整个团队记录日志的规范，保证每个开发记录的日志格式统一；特别需要说明的是，对于DEBUG&#x2F;TRACE级别的日志，也需要定义好清晰的格式，而不是由开发人员自由发挥；</li><li>整个团队（包括开发，运维和测试）定期对记录的日志内容进行Review；</li><li>开发做运维，通过在查问题的过程来优化日志记录的方式；</li></ul><p>运维或测试在日志中发现的问题，都需要及时向开发人员反映；</p><h2 id="关于RequestID"><a href="#关于RequestID" class="headerlink" title="关于RequestID"></a>关于RequestID</h2><h3 id="RequestID的作用"><a href="#RequestID的作用" class="headerlink" title="RequestID的作用"></a>RequestID的作用</h3><p>一个系统通常通过RequestID来对请求进行唯一的标记，目的是可以通过RequestID将一个请求在系统中的执行过程串联起来。该RequestID通常会随着响应返回给调用者，如果调用出现问题，调用者也可以通过提供RequestID帮助服务提供者定位问题。</p><h3 id="RequestID的生成"><a href="#RequestID的生成" class="headerlink" title="RequestID的生成"></a>RequestID的生成</h3><p>需要根据实际的使用场景来选择：</p><ul><li><p>对于简单的系统，可以简单采用一个随机数即可，例如</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestID = md5(time.Now() + random.Int())</span><br></pre></td></tr></table></figure><p>  这样简单的方式在一定的时间内是不用担心会冲突的</p></li><li><p>对于复杂的系统，需要在RequestID中编码更多的内容，例如：可以将处理请求的服务器IP，接收到请求的时间等信息编码到RequestID中，这样通过RequestID可以快速的了解请求属于哪台机器，然后进一步定位：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./decode.sh 4b2c009a0a7800000142789f42b8ca96</span><br><span class="line">   Thu Nov 21 11:06:12 CST 2013</span><br><span class="line">   10.120.202.150</span><br><span class="line">   4b2c009a</span><br></pre></td></tr></table></figure></li><li><p>对于一些特别的系统，RequestID也可以进行针对性的调整，例如在我实现的一个直播服务里，RequestID由两部分组成，第一部分是一个随机字符串（通过MD5生成），第二部分是一个不断在自增的整数：</p><p>  <img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E7%9B%B4%E6%92%AD%E6%9C%8D%E5%8A%A1RequestID.jpg" alt="直播服务RequestID"></p><p>  对于直播系统，这样做的好处是通过RequestID的第一部分，可以快速搜索到一路直播流所有的日志，而第二部分自增的整数可以帮助快速定位一段时间的日志。</p></li></ul><h3 id="RequestID串联起来的日志系统"><a href="#RequestID串联起来的日志系统" class="headerlink" title="RequestID串联起来的日志系统"></a>RequestID串联起来的日志系统</h3><p>通常一个服务由若干个子系统组成，拿网易对象存储举例，它包含了前端负载均衡节点、存储逻辑服务器、元数据集群、分布式存储集群、图片处理集群、音视频处理集群、缓存集群等。通常一个请求需要由若干个子系统，甚至所有的子系统的协同处理。这时，如果某个请求出错，再要定位到具体的出错原因就比较复杂了，因为常常需要到数十台机器上去定位日志。</p><p>当时的思路在负载均衡节点接收到请求后，就为请求生成一个全局唯一的RequestID，该请求所经过所有子系统系统，均基于该RequestID记录日志，这样通过将所有的日志收集起来，就可以通过这一个RequestID来得到完整的系统处理日志了。</p><p>然而这并不是一件容易做的事情：所有的系统间调用都需要进行改造，所有的日志输出的地方都要统一格式，而我们采用的有些开源组件实际上很难支持这种做法。</p><p>不过，有了这样的认识，我们组在开发新的底层分布式文件系统时，接口传入的第一个参数就是RequestID了。</p><h2 id="动态日志输出"><a href="#动态日志输出" class="headerlink" title="动态日志输出"></a>动态日志输出</h2><p>上文已经讨论过，DEBUG日志和INFO日志的一个重要的区别是，INFO日志用于记录常规的系统运行状态，请求的基本的输入和输出等，对于定位一般的问题已经足够了。而DEBUG日志则详细的记录了一个请求的处理过程，甚至是每一个函数的输入和输出结果，遇到一些隐藏比较深的问题时，必须要依赖DEBUG日志。<br>然而，由于DEBUG级别的日志数量比INFO级别的数量多很多（通常差一个数量级），如果长期在线上服务器开启DEBUG级别的日志输出，日志量太大。再比如，有时候仅仅是由于某一个用户的访问模式比较特殊导致了问题，如果将整个服务（特别是一个服务部署了很多台节点时）都临时调整为DEBUG级别日志输出，也非常不方便。<br>下面介绍一种我采用的方式：</p><p>我们的系统采用如下的业务架构（简化版）：</p><p><img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.jpg" alt="业务架构"></p><p>在业务处理层的Proxy中，实现如下逻辑：当接收到的HTTP请求的QueryString中包含”DEBUG&#x3D;ON”参数时，就将所有的DEBUG级别的日志也输出：</p><p><img src="/images/%E6%9C%80%E4%BD%B3%E6%97%A5%E5%BF%97%E5%AE%9E%E8%B7%B5/%E5%8A%A8%E6%80%81%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0.jpg" alt="动态日志实现"></p><p>在负载均衡层的Openresty中，实现如下接口：管理员可以配置将哪个用户的哪个桶的哪个对象的哪种操作（注：这是对象存储中的几个概念）输出为DEBUG日志，Openresty会对每个请求进行过滤，当发现请求和配置的DEBUG日志输出条件相匹配时，则在请求的QueryString中新增”DEBUG&#x3D;ON”参数。</p><p>通过这种方式，管理员可以随时配置哪些请求需要输出为DEBUG级别的日志，可以大大提高线上定位问题的效率。</p><h2 id="慢操作日志"><a href="#慢操作日志" class="headerlink" title="慢操作日志"></a>慢操作日志</h2><p>服务在接收到一个请求的时候，记录请求的接收时间（T1），在请求处理完成待发送的时候，会记录请求发送时间（T2），通常一个请求的日志都记为INFO级别，然而当出现请求处理时间（T2-T1）超过一定时间（如10s）时，可以将该日志提升为WARN级别。通过该方法，可以预先发现系统可能存在的一些问题。</p><p>同样的慢操作日志还可以用来记录系统一些外部依赖的处理时间，如一个服务可能依赖外部认证服务器来进行认证授权。通过记录每次认证请求的时间并将超出预期时间的请求日志采用WARN级别输出，可以尽早发现认证服务器是不是需要扩容等问题。</p><p>慢日志的时间阈值应该是可以动态调整的，这样在进行系统优化时，可以将该报警时间阈值逐渐调小，不断地对系统进行优化。</p><h2 id="日志监控"><a href="#日志监控" class="headerlink" title="日志监控"></a>日志监控</h2><p>通过对日志中的关键字进行监控，可以及时发现系统故障并报警，这对于保证服务的SLA至关重要。</p><p>服务的监控和报警是一个很大的话题，此处只说日志监控报警需要注意的一些问题：</p><ol><li>能不报警的就不报警，只有需要运维马上处理的错误才需要发送报警。这样做的原因是避免长期的报警骚扰让运维人员对报警不再敏感，最后真的报警来了时，变成了狼来了的传说；</li><li>明确报警关键字，例如用ERROR作为报警的关键字，而不是各种各样的复杂规则。这样做的原因是日志监控本质上是不断的进行字符串匹配操作，如果规则太多太复杂，就可能对线上服务产生影响；</li><li>对于一些预警操作，例如某个服务需要重试多次才能成功，或者某个用户的配额快用完等等，可以通过每天一封报警邮件的方式来反馈；</li><li>每一次系统出现故障，都需要及时检查日志报警是否灵敏，日志报警的描述是否准确等，不断优化日志报警；</li></ol><h2 id="其他的注意事项"><a href="#其他的注意事项" class="headerlink" title="其他的注意事项"></a>其他的注意事项</h2><ul><li><p>上线后日志观察</p><p>  每一次上线完成后，除了对系统进行完整的回归测试外，还需要对日志进行观察，特别是当上线新功能以后，可以通过日志确认新功能是否工作正常。</p></li><li><p>日志输出到不同的文件</p><p>  在性能测试时遇到的另一个问题是，当并发量很大时，可能会有一些请求处理失败（如0.5%），为了对这些错误进行分析，需要去查这些错误请求的日志。而由于这种情况下日志量巨大，使得对错误日志的分析变得困难。</p><p>  这种情况下可以将所有的错误日志同时输出到一个单独的文件之中。</p></li><li><p>日志文件的大小</p><p>  日志文件不宜过大，过大的日志文件对于日志监控，问题定位等都会带来不便。因此需要进行日志文件的切分，日志文件应该按天来分割，还是按照小时来分割，应该根据日志量来决定，原则就是方便开发或运维人员能快速查找日志。</p><p>  为了防止日志文件将整个磁盘空间占满，需要定期对日志文件进行删除。例如，在收到磁盘报警时，可以将两个月以前的日志文件删除。此处比较好的实践是：</p><ul><li>将所有日志文件收集起来，这样即使在记录日志的机器上删除，也可以通过收集的日志对之前的问题进行定位；</li><li>每天通过定时任务来删除过期日志，如每天在凌晨4点删除60天前的日志</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对文中提出的所有建议总结如下：</p><ul><li>充分认识到日志对于一个可靠的后端系统的关键作用</li><li>整个团队（包括运维人员）需要对日志级别有明确的规定，什么日志输出为什么级别，什么级别的错误出现要如何处理等</li><li>需要定期对日志内容进行优化更新，目的就是通过日志快速准确地定位问题</li><li>要明确不同日志的用途，对日志内容进行分类</li><li>绝不要打印没有用的日志，防止无用日志淹没重要信息</li><li>日志信息要准确全面，努力做到仅凭日志就可以定位问题</li><li>日志的优化是一件需要持续不断投入精力的事，需要不断从错误中学习</li><li>根据不同的目的生成RequestID，必要时在RequestID中尽量编码更多的信息</li><li>将一个请求的整个处理流程和唯一的RequestID关联起来</li><li>支持动态日志输出，方便线上问题定位</li><li>新上线服务器后一定要对日志进行观察，特别地，开发人员可以通过观察日志来确认新功能是否工作正常</li><li>通过日志级别的提升来发现潜在问题</li><li>对日志进行监控报警，比客户先发现系统问题</li><li>通过日志中的关键字来确定系统的运行状态</li><li>日志格式要统一规范</li><li>将错误日志输出到一个单独的文件中进行分析</li><li>要把日志的大小，如何切分，如何删除等作为规范建立起来</li></ul>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础组件设计</title>
      <link href="/2020/02/04/architecture/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/04/architecture/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1、ORM组件设计"><a href="#1、ORM组件设计" class="headerlink" title="1、ORM组件设计"></a>1、ORM组件设计</h2><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>根据ID获取Entity</li><li>根据QueryWrapper获取第一个Entity</li><li>根据ID集合获取Entity列表</li><li>获取所有Entity列表</li><li>根据QueryWrapper获取Entity列表</li><li>根据IPage分页查询对象获取Entity分页数据</li><li>根据IPage分页查询对象和QueryWrapper获取Entity分页数据</li><li>保存Entity（ID不存在插入记录，ID存在更新记录）</li><li>批量保存Entity</li><li>根据ID删除Entity</li><li>根据ID集合批量删除Entity</li><li>根据Entity集合批量删除Entity</li><li>根据ID获取Vo</li><li>根据QueryWrapper获取第一个Vo</li><li>根据ID集合获取Vo列表</li><li>获取所有Vo列表</li><li>根据QueryWrapper获取Vo列表</li><li>根据IPage分页查询对象获取Vo分页数据</li><li>根据IPage分页查询对象和QueryWrapper获取Vo分页数据</li><li>保存Dto（ID不存在插入记录，ID存在更新记录）</li><li>批量保存Dto</li><li>根据ID集合统计数量</li><li>根据QueryWrapper统计数量</li><li>资源访问鉴权</li></ul><h3 id="关键实现逻辑"><a href="#关键实现逻辑" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>逻辑删除</p><ul><li>解决思路：增加is_deleted字段</li><li>具体实现：使用Mybatis-Plus的@TableLogic注解修饰实体类的deleted字段，然后通过Mybatis-Plus自带方法删除和查找会自动附带逻辑删除功能（自己写的xml不会）。3.1.1之前的版本还需要注入 LogicSqlInjector。</li></ul></li><li><p>乐观锁实现</p><ul><li>解决思路：增加version字段</li><li>具体实现：使用Mybatis-Plus的@Version注解修饰实体类的version字段，并注入 OptimisticLockerInterceptor。</li></ul></li><li><p>数据库的唯一索引、联合唯一索引与逻辑删除的兼容性问题</p><ul><li>解决思路：定义逻辑唯一索引和逻辑联合索引</li><li>具体实现：在Dto基类中定义 uniqueFields 和 unionKeyFields 方法用来标识逻辑唯一索引和联合唯一索引。Dto类按需重写这两个方法进行标识。</li></ul></li><li><p>并发场景下的批量数据更新操作可能导致的死锁问题</p><ul><li>解决思路：批量待更新数据排序之后再执行更新操作</li><li>具体实现：Dto基类中定义 comparator 方法返回Dto对象的默认 Comparator 实现。Dto类按需重写该方法以实现排序时的比较逻辑。</li></ul></li><li><p>逻辑删除导致的数据更新查重问题</p><ul><li>解决思路：在代码层面使用逻辑查重</li><li>具体实现：根据 uniqueFields 和 unionKeyFields 进行逻辑查重，从而避免数据库唯一索引或者唯一联合索引导致的数据更新冲突。</li></ul></li><li><p>批量更新时的数据去重</p><ul><li>解决思路：在代码层面使用逻辑去重</li><li>具体实现：根据 uniqueFields 和 unionKeyFields 进行Dto集合的逻辑去重。</li></ul></li><li><p>审计功能</p><ul><li>解决思路：使用框架自带的字段填充功能或者hook方法写入</li><li>具体实现：使用Mybatis-Plus的@TableField注解并结合自定义的 MetaObjectHandler 实现指定字段自动填充。</li></ul></li><li><p>审计日志</p><ul><li>解决思路：在数据更新逻辑中增加 hook 方法</li><li>具体实现：定义AuditLogger接口，并在数据更新逻辑中调用 AuditLogger的 log 方法。配置不同实体类与 AuditLogger实现的对应关系，或者使用全局 AuditLogger。</li></ul></li></ol><h2 id="2、缓存服务设计"><a href="#2、缓存服务设计" class="headerlink" title="2、缓存服务设计"></a>2、缓存服务设计</h2><h3 id="核心功能-1"><a href="#核心功能-1" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>缓存数据设置</li><li>缓存数据获取</li><li>本地-分布式 两级缓存结构</li><li>根据待缓存数据自动选择合适的缓存数据类型进行存储</li><li>业务层与缓存层解耦</li><li>缓存管理和监控平台，方便的查询、管理和监控线上缓存数据</li></ul><h3 id="关键实现逻辑-1"><a href="#关键实现逻辑-1" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>本地-分布式 两级缓存结构的兼容策略</p><ul><li>解决思路：优先级 本地 &gt; 分布式</li><li>具体实现：<ul><li>更新操作：<ul><li>更新数据库；</li><li>删除本地缓存和分布式缓存。</li></ul></li><li>查询操作：<ul><li>查询本地缓存；</li><li>本地缓存命中，返回缓存数据；</li><li>本地缓存未命中，查询分布式缓存；</li><li>分布式缓存命中，更新本地缓存，返回缓存数据；</li><li>分布式缓存未命中，查询数据库，更新本地缓存和分布式缓存，返回数据。</li></ul></li></ul></li></ul></li><li><p>缓存数据类型自动适配</p><ul><li>解决思路：约定不同平台数据类型的对应关系</li><li>具体实现：约定 Java 中的数据类型与 Redis 数据类型的对应关系，如 Java 中的 List 对应 Redis 中的 List。</li></ul></li><li><p>业务层与缓存层解耦</p><ul><li>解决思路：业务层中配置是否启用缓存功能以及相应的缓存策略</li><li>具体实现：<ul><li>业务层的缓存配置信息的设置可以使用配置文件和自定义注解进行实现。</li><li>使用 Spring Boot Starter 技术根据配置信息（如是否启用缓存功能）自动装配缓存配置 Configuration 类，Configuration 类中按需注入相关 Bean。</li><li>在切面中编写缓存数据设置及获取的具体实现逻辑。</li></ul></li></ul></li><li><p>缓存穿透</p><ul><li><p>解决思路：BloomFilter（布隆过滤）+ 缓存空值</p></li><li><p>具体实现：</p><ul><li>BloomFilter：BloomFilter 类似于一个 hbase set 用来判断某个元素（key）是否存在于某个集合中。这种方式在大数据场景应用比较多，比如 Hbase 中使用它去判断数据是否在磁盘上。还有在爬虫场景判断 url 是否已经被爬取过。这种方案可以加在第一种方案中，在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查缓存 -&gt; 查 DB。</li><li>缓存空值：之所以会发生穿透，就是因为缓存中没有存储这些空数据的 key。从而导致每次查询都到数据库去了。那么我们就可以为这些 key 对应的值设置为 null 丢到缓存里面去。后面再出现查询这个 key 的请求的时候，直接返回null 。这样，就不用在到数据库中去走一圈了，但是别忘了设置过期时间。</li><li>流程图：</li></ul><p>  <img src="/images/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="缓存穿透解决方案"></p></li></ul></li><li><p>缓存雪崩</p><ul><li>解决思路：互斥锁</li><li>具体实现：多个线程同时去查询数据库的某条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。</li></ul></li><li><p>缓存击穿</p><ul><li><p>解决思路：</p><ul><li>事前：使用缓存集群，保证缓存服务的高可用</li><li>事中：本地缓存 + 限流&amp;降级</li><li>事后：开启Redis持久化机制，尽快恢复缓存集群</li></ul></li><li><p>具体实现：</p><ul><li>事前：搭建Redis集群实现Redis服务的高可用</li><li>事中：在Redis集群完全不可用的时候，使用本地缓存还能够支撑一阵。使用限流&amp;降级，保证数据库在面对大量请求还能提供服务。</li><li>事后：一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</li><li>流程图：</li></ul><p>  <img src="/images/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="缓存击穿解决方案"></p></li></ul></li><li><p>根据Key前缀模糊删除</p><ul><li>解决思路：模糊查找 + 批量删除key</li><li>具体实现：先根据Key前缀进行模糊查找，批量删除匹配到的Key。</li></ul></li></ol><h2 id="3、任务调度服务设计"><a href="#3、任务调度服务设计" class="headerlink" title="3、任务调度服务设计"></a>3、任务调度服务设计</h2><h3 id="核心功能-2"><a href="#核心功能-2" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>任务管理<ul><li>执行器</li></ul></li><li>执行器管理</li><li>日志管理<ul><li>调度日志</li><li>执行日志</li></ul></li><li>运行报表</li><li>失败告警</li><li>调度中心<ul><li>数据中心</li><li>调度器</li><li>任务回调处理</li></ul></li><li>执行器<ul><li>调度请求</li><li>JobHandler</li><li>任务回调</li></ul></li></ul><h2 id="4、数据权限设计"><a href="#4、数据权限设计" class="headerlink" title="4、数据权限设计"></a>4、数据权限设计</h2><h3 id="核心功能-3"><a href="#核心功能-3" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>部门权限过滤<ul><li>权限范围（设置到员工，默认是员工所属部门及下属部门）<ul><li>仅自己（部门权限内且创建人是自己的）</li><li>指定部门（按分配的部门用in过滤，不包含下级）</li><li>指定部门及下属部门（按分配的部门用in过滤，包含下级部门）</li><li>所有部门（可查看所有部门）</li></ul></li></ul></li><li>特殊对象权限过滤<ul><li>指定对象<ul><li>用户（可多个）</li><li>角色（可多个）</li></ul></li><li>权限范围（同上述的部门权限范围）</li></ul></li><li>业务关联对象权限过滤<ul><li>门店权限过滤</li><li>仓库权限过滤</li></ul></li></ul><h3 id="关键实现逻辑-2"><a href="#关键实现逻辑-2" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>过滤策略的存储</p><ul><li>解决思路：数据库 + 缓存</li><li>具体实现：对象的权限范围信息保存至数据库，不同对象按照权限范围查询出相关参数并保存到缓存，更新对象的过滤策略时自动更新相应缓存。</li></ul></li><li><p>权限过滤的具体实现</p><ul><li>解决思路：权限过滤注解 + 查询方法切面</li><li>具体实现：在业务ServiceImpl类上添加自定义权限过滤注解 @AuthFilter(name &#x3D; “entity”)（注解中的name参数用于将数据库中的过滤策略与实体类关联起来），在 AuthFilterAspect 切面的 before 增强中获取过滤策略并转成查询条件存入 ThreadLocal 变量中，查询方法执行实际的业务逻辑从 ThreadLocal 中获取查询条件转换并拼接至 QueryWrapper 对象，使用拼接后的 QueryWrapper 对象进行查询。</li></ul></li></ol><h2 id="5、推送服务设计"><a href="#5、推送服务设计" class="headerlink" title="5、推送服务设计"></a>5、推送服务设计</h2><h3 id="核心功能-4"><a href="#核心功能-4" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>移动APP通知推送</li><li>Web网页消息推送</li><li>短信发送</li><li>短信回复统一处理</li><li>邮件发送</li></ul><h3 id="关键实现逻辑-3"><a href="#关键实现逻辑-3" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>批量消息并行推送</p><ul><li>解决思路：多线程 + 消息队列</li><li>具体实现：使用多线程将批量消息打入消息队列，消息队列监听端接收消息后使用多线程执行具体的消息推送逻辑。</li></ul></li><li><p>消息多渠道推送</p><ul><li>解决思路：PushProps设置多个推送渠道（如短信、邮件）</li><li>具体实现：同一条消息根据PushProps中设置的多个推送渠道分别进行推送。</li></ul></li><li><p>延迟（定时）推送</p><ul><li>解决思路：延迟队列</li><li>具体实现：PushProps设置延迟推送相关参数，使用延迟队列实现延迟消息推送。</li></ul></li></ol><h2 id="6、文件服务设计"><a href="#6、文件服务设计" class="headerlink" title="6、文件服务设计"></a>6、文件服务设计</h2><h3 id="核心功能-5"><a href="#核心功能-5" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>上传文件</li><li>下载文件</li><li>防盗链：通过设置Policy，将对象的访问权限限制在某些网站，或者某些IP段，从而对数据起到保护作用，防止对象被过度下载，以保护客户利益。</li><li>租户隔离：支持创建多个子租户，每个子租户都有独立的访问口令，并且只能访问属于自己的存储空间，实现数据访问隔离。</li><li>日志记录：记录访问请求的信息，包括请求时间、数据量大小、对象名称等。通过分析日志得到有价值的业务信息，如用户来源、使用习惯、恶意攻击等。</li><li>图片处理：可以对存储的图片进行处理，例如图片缩略、格式转换、裁剪、缩放、水印等。</li></ul><h3 id="关键实现逻辑-4"><a href="#关键实现逻辑-4" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>用户访问权限控制</p><ul><li>解决思路：访问文件时先进行鉴权</li><li>具体实现：定义文件访问权限信息并进行持久化，向指定目标用户执行授权操作。用户访问文件时先通过 checkAccess 方法进行鉴权。</li></ul></li><li><p>防盗链</p><ul><li>解决思路：增加IP白名单过滤</li><li>具体实现：访问文件时在文件服务的拦截器中进行访问IP的白名单校验，校验通过才允许进行访问。</li></ul></li><li><p>租户隔离</p><ul><li>解决思路：指定租户对应的fastdfs的store_group</li><li>具体实现：上传文件、访问文件时在文件服务的拦截器中指定租户的store_group。</li></ul></li><li><p>图片尺寸转换</p><ul><li>解决思路：访问时转换图片尺寸</li><li>具体实现：访问图片文件时如果指定了图片尺寸参数（长和宽），则从fastdfs取到图片后通过图片工具转换成指定的尺寸之后再返回。</li></ul></li></ol><h2 id="7、消息队列服务设计"><a href="#7、消息队列服务设计" class="headerlink" title="7、消息队列服务设计"></a>7、消息队列服务设计</h2><h3 id="核心功能-6"><a href="#核心功能-6" class="headerlink" title="核心功能"></a>核心功能</h3><ul><li>消息发布</li><li>消息订阅</li><li>延迟队列</li><li>重试队列</li><li>顺序队列</li></ul><h3 id="关键实现逻辑-5"><a href="#关键实现逻辑-5" class="headerlink" title="关键实现逻辑"></a>关键实现逻辑</h3><ol><li><p>延迟队列</p><ul><li>解决思路：使用RabbitMQ死信队列</li><li>具体实现：Queue中配置参数 <code>x-dead-letter-exchange</code>、<code>x-dead-letter-routing-key</code>，发送消息时给消息设置延迟毫秒值 <code>message.getMessageProperties().setExpiration(delayMillis);</code></li></ul></li><li><p>重试队列</p><ul><li>解决思路：缓存 + RabbitMQ confirmCallback</li><li>具体实现：发送可重试消息时缓存 <code>message</code> 和 <code>retryProps</code>，消息接收成功删除相关缓存，消费接收失败则读取缓存中的 <code>message</code> 和 <code>retryProps</code> 并执行重试操作。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2020/02/04/datastructure-algorithm/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2020/02/04/datastructure-algorithm/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>位运算即是在位级别进行操作的技术，合适的位运算能够帮助我们得到更快的运算速度与更小的内存使用。</p><p>常见的位运算：</p><ul><li>测试第k位：<code>s &amp; (1 &lt;&lt; k)</code></li><li>设置第k位：<code>s |= (1 &lt;&lt; k)</code></li><li>第k位置零：<code>s &amp;= ~(1 &lt;&lt; k)</code></li><li>切换第k位值：<code>s ^= ~(1 &lt;&lt; k)</code></li><li>乘以2^n：<code>s &lt;&lt; n</code></li><li>除以2^n：<code>s &gt;&gt; n</code></li><li>交集：<code>s &amp; t</code></li><li>并集：<code>s | t</code></li><li>减法：<code>s &amp; ~t</code></li><li>交换：<code>x = x ^ y ^ (y = x)</code></li><li>取出最小非0位（Extract lowest set bit）：<code>s &amp; (-s)</code></li><li>取出最小0位（Extract lowest unset bit）：<code>~s &amp; (s + 1)</code></li><li>交换值：<code>x ^= y; y ^= x; x ^= y;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图算法</title>
      <link href="/2020/02/04/datastructure-algorithm/%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/04/datastructure-algorithm/%E5%9B%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><ul><li>深度优先算法是一种优先遍历子节点而不是回溯的算法。</li><li>时间复杂度: O(|V| + |E|)</li></ul><p><img src="/images/%E5%9B%BE%E7%AE%97%E6%B3%95/dfsbfs.gif" alt="DFS"></p><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><ul><li>广度优先搜索是优先遍历邻居节点而不是子节点的图遍历算法。</li><li>时间复杂度: O(|V| + |E|)</li></ul><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><ul><li>拓扑排序是对于有向图节点的线性排序，如果存在某条从 u 到 v 的边，则认为 u 的下标先于 v。</li><li>时间复杂度: O(|V| + |E|)</li></ul><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><ul><li>Dijkstra 算法 用于计算有向图中单源最短路径问题。</li><li>时间复杂度: O(|V|^2)</li></ul><p><img src="/images/%E5%9B%BE%E7%AE%97%E6%B3%95/dijkstra.gif" alt="Dijkstra"></p><h2 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h2><ul><li>Bellman-Ford 算法是在带权图中计算从单一源点出发到其他节点的最短路径的算法。</li><li>尽管算法复杂度大于 Dijkstra 算法，但是它适用于包含了负值边的图。</li><li>时间复杂度:<ul><li>最优时间: O(|E|)</li><li>最坏时间: O(|V||E|)</li></ul></li></ul><p><img src="/images/%E5%9B%BE%E7%AE%97%E6%B3%95/bellman-ford.gif" alt="Bellman-Ford"></p><h2 id="Floyd-Warshall算法"><a href="#Floyd-Warshall算法" class="headerlink" title="Floyd-Warshall算法"></a>Floyd-Warshall算法</h2><ul><li>Floyd-Warshall 算法 能够用于在无环带权图中寻找任意节点的最短路径。</li><li>时间复杂度:<ul><li>最优时间: O(|V|^3)</li><li>最坏时间: O(|V|^3)</li><li>平均时间: O(|V|^3)</li></ul></li></ul><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><ul><li>Prim 算法是用于在带权无向图中计算最小生成树的贪婪算法。换言之，Prim 算法能够在图中抽取出连接所有节点的边的最小代价子集。</li><li>时间复杂度: O(|V|^2)</li></ul><p><img src="/images/%E5%9B%BE%E7%AE%97%E6%B3%95/prim.gif" alt="Prim"></p><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><ul><li>Kruskal 算法同样是计算图的最小生成树的算法，与 Prim 的区别在于并不需要图是连通的。</li><li>时间复杂度: O(|E|log|V|)</li></ul><p><img src="/images/%E5%9B%BE%E7%AE%97%E6%B3%95/kruskal.gif" alt="Kruskal"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见数据结构</title>
      <link href="/2020/02/04/datastructure-algorithm/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/04/datastructure-algorithm/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><ul><li>链表即是由节点（Node）组成的线性集合，每个节点可以利用指针指向其他节点。它是一种包含了多个节点的、能够用于表示序列的数据结构。</li><li><strong>单向链表：</strong> 链表中的节点仅指向下一个节点，并且最后一个节点指向空。</li><li><strong>双向链表：</strong> 其中每个节点具有两个指针p、n，使得p指向先前节点并且n指向下一个节点；最后一个节点的n指针指向null。</li><li><strong>循环链表：</strong> 每个节点指向下一个节点并且最后一个节点指向第一个节点的链表。</li><li>时间复杂度：<ul><li>索引：O(n)</li><li>搜索：O(n)</li><li>插入：O(1)</li><li>移除：O(1)</li></ul></li></ul><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul><li>栈是元素的集合，其包含了两个基本操作：push操作可以用于将元素压入栈，pop操作可以将栈顶元素移除。</li><li>遵循后入先出（LIFO）原则。</li><li>时间复杂度：<ul><li>索引：O(n)</li><li>搜索：O(n)</li><li>插入：O(1)</li><li>移除：O(1)</li></ul></li></ul><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><ul><li>队列是元素的集合，其包含了两个基本操作：enqueue操作可以用于将元素插入到队列中，而dequeue操作则是将元素从队列中移除。</li><li>遵循先入先出原则（FIFO）。</li><li>时间复杂度：<ul><li>索引：O(n)</li><li>搜索：O(n)</li><li>插入：O(1)</li><li>移除：O(1)</li></ul></li></ul><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><ul><li>树是无向、连通的无环图。</li></ul><h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><ul><li>二叉树即是每个节点最多包含左子节点与右子节点这两个节点的树形数据结构。</li><li><strong>满二叉树：</strong> 除了叶子结点之外的每一个结点都有两个孩子结点。</li><li><strong>完美二叉树（Perfect Binary Tree）：</strong> 除了叶子结点之外的每一个结点都有两个孩子，每一层(当然包含最后一层)都被完全填充。</li><li><strong>完全二叉树：</strong> 除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐。</li></ul><h2 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h2><ul><li>二叉搜索树（BST）是一种特殊的二叉树，其任何节点中的值都会大于或者等于其左子树中存储的值并且小于或者等于其右子树中存储的值。</li><li>时间复杂度：<ul><li>索引：O(log(n))</li><li>搜索：O(log(n))</li><li>插入：O(log(n))</li><li>删除：O(log(n))</li></ul></li></ul><img alt="BST" src="/images/常见数据结构/BST.png" width="420"><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><ul><li>字典树，又称基数树或者前缀树，能够用于存储键为字符串的动态集合或者关联数组的搜索树。树中的节点并没有直接存储关联键值，而是该节点在树中的挂载位置决定了其关联键值。某个节点的所有子节点都拥有相同的前缀，整棵树的根节点则是空字符串。</li></ul><img alt="Trie" src="/images/常见数据结构/trie.png" width="420"><h2 id="Fenwick-Tree"><a href="#Fenwick-Tree" class="headerlink" title="Fenwick Tree"></a>Fenwick Tree</h2><ul><li>树状数组又称Binary Indexed Tree，其表现形式为树，不过本质上是以数组实现。数组中的下标代表着树中的顶点，每个顶点的父节点或者子节点的下标能够通过位运算获得。数组中的每个元素包含了预计算的区间值之和，在整棵树更新的过程中同样会更新这些预计算的值。</li><li>时间复杂度：<ul><li>区间求值：O(log(n))</li><li>更新：O(log(n))</li></ul></li></ul><img alt="Fenwick Tree" src="/images/常见数据结构/fenwickTree.png" width="420"><h2 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h2><ul><li>线段树是用于存放间隔或者线段的树形数据结构，它允许快速地查找某一个节点在若干条线段中出现地次数。</li><li>时间复杂度：<ul><li>区间查询：O(log(n))</li><li>更新：O(log(n))</li></ul></li></ul><img alt="Segment Tree" src="/images/常见数据结构/segmentTree.png" width="420"><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><ul><li>堆是一种特殊的基于树的满足某些特性的数据结构，整个堆中的所有父子节点的键值都会满足相同的排序条件。堆更准确地可以分为最大堆与最小堆，在最大堆中，父节点的键值永远大于或者等于子节点的值，并且整个堆中的最大值存储于根节点；而最小堆中，父节点的键值永远小于或者等于其子节点的键值，并且整个堆中的最小值存储于根节点。</li><li>时间复杂度：<ul><li>访问最大值&#x2F;最小值：O(1)</li><li>插入：O(log(n))</li><li>移除最大值&#x2F;最小值：O(log(n))</li></ul></li></ul><img alt="Heap" src="/images/常见数据结构/heap.png" width="420"><h2 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h2><ul><li>哈希能够将任意长度的数据映射到固定长度的数据。哈希函数返回的即是哈希值，如果两个不同的键得到相同的哈希值，这种现象称为哈希碰撞。</li><li><strong>Hash Map：</strong> Hash Map是一种能够建立起键与值之间关系的数据结构，Hash Map能够使用哈希函数将键转化为桶或者槽中的下表，从而优化对于目标值的搜索速度。</li><li>碰撞解决<ul><li><strong>链地址法（Separate Chaining）：</strong> 链地址法中，每个桶是相互独立的，包含了一系列索引的列表。搜索操作的时间复杂度即是搜索桶的时间（固定时间）与遍历列表的时间之和。</li><li><strong>开地址法（Open Addressing）：</strong> 在开地址法中，当插入新值时，会判断该值对应的哈希桶是否存在，如果存在则根据某种算法依次选择下一个可能的位置，直到找到一个尚未被占用的地址。所谓开地址法也是指某个元素的位置并不永远由其哈希值决定。</li></ul></li></ul><img alt="Hashing" src="/images/常见数据结构/hash.png" width="420"><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><ul><li>图是一种数据元素间为多对多关系的数据结构，加上一组基本操作构成的抽象数据类型。<ul><li><strong>无向图（Undirected Graph）：</strong> 无向图具有对称的邻接矩阵，因此如果存在某条从节点u到节点v的边，反之从v到u的边也存在。</li><li><strong>有向图（Directed Graph）：</strong> 有向图的邻接矩阵是非对称的，即如果存在从u到v的边并不意味着一定存在从v到u的边。</li></ul></li></ul><img alt="Graph" src="/images/常见数据结构/graph.png" width="420">]]></content>
      
      
      <categories>
          
          <category> 数据结构-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2020/02/04/datastructure-algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/04/datastructure-algorithm/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><ul><li><p><strong>思想：</strong> 每次将一个待排序的数据按照其关键字的大小插入到前面已经排序好的数据中的适当位置，直到全部数据排序完成。</p></li><li><p><strong>时间复杂度：</strong> O(n^2) O(n) O(n^2) （最坏 最好 平均）</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>稳定性：</strong> 稳定，每次都是在前面排好序的序列中找到适当的位置，只有小的数字会往前插入，所以原来相同的两个数字在排序后相对位置不变。</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> array[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; val) &#123; <span class="comment">// array[j] &gt; val</span></span><br><span class="line">            array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j + <span class="number">1</span>] = val; <span class="comment">// array[j + 1]不是array[j]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><ul><li><p><strong>思想：</strong> 希尔排序更具增量值对数据按下标进行分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整体采用直接插入排序得到有序数组，算法终止。</p></li><li><p><strong>时间复杂度：</strong> O(n^2) O(n) O(n^1.5) (最坏 最好 平均)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>稳定性：</strong> 不稳定，因为是分组进行直接插入排序，原来相同的两个数字可能会被分到不同的组去，可能会使得后面的数字排到前面，使得两个相同的数字排序前后位置发生变化。</p></li><li><p><strong>不稳定举例：</strong> 4 3 3 2 按2为增量分组，则第二个3会跑到前面</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    len = array.length;</span><br><span class="line">    <span class="keyword">while</span> (len &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - len;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp) &#123;</span><br><span class="line">                array[j + len] = array[j];</span><br><span class="line">                j -= len;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j + len] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        len /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li><p><strong>思想：</strong> 对待排序元素的关键字从后往前进行多遍扫描，遇到相邻两个关键字次序与排序规则不符时，就将这两个元素进行交换。这样关键字较小的那个元素就像一个泡泡一样，从最后面冒到最前面来。</p></li><li><p><strong>时间复杂度：</strong> 最坏：O(n^2) 最好：O(n) 平均：O(n^2)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>稳定性：</strong> 稳定，相邻的关键字两两比较，如果相等则不交换。所以排序前后的相等数字相对位置不变。</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> flag; <span class="comment">//用来判断当前这一轮是否有交换数值，若没有则表示已经排好序了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> array.length - <span class="number">1</span>; j &gt;= i + <span class="number">1</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j - <span class="number">1</span>] &gt; array[j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[j - <span class="number">1</span>];</span><br><span class="line">                array[j - <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">                <span class="comment">//设置标记位</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li><p><strong>思想：</strong> 该算法是分治算法，首先选择一个基准元素，根据基准元素将待排序序列分成两部分，一部分比基准元素小，一部分大于等于基准元素，此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。基准元素的选择对快速排序的性能影响很大，所以一般会打乱排序数组选择第一个元素或者随机地从后面选择一个元素替换第一个元素作为基准元素。</p></li><li><p><strong>时间复杂度：</strong> 最坏：O(n^2) 最好：O(nlog(n)) 平均：O(nlog(n))</p></li><li><p><strong>空间复杂度：</strong> O(nlog(n))用于方法栈</p></li><li><p><strong>稳定性：</strong> 不稳定，快排会将大于等于基准元素的关键词放在基准元素右边，假如数组 1 2 2 3 4 5 选择第二个2作为基准元素，那么排序后第一个2跑到了后面，相对位置发生了变化。</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(array, low, high);</span><br><span class="line">        quickSort(array, low, p - <span class="number">1</span>);</span><br><span class="line">        quickSort(array, p + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(System.currentTimeMillis());</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> random.nextInt(right - left + <span class="number">1</span>) + left;</span><br><span class="line">    exch(array, idx, left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> array[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; array[right] &gt; val) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            array[left++] = array[right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; array[left] &lt; val) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            array[right--] = array[left];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array[left] = val;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  三向快速排序算法：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三向切分快速排序，适用于存在大量重复元素的数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick2waySort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    quick2waySort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quick2waySort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//lt以左都小于val，gt以后都大于val，i用于移动遍历</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lt</span> <span class="operator">=</span> lo, gt = hi, i = lo + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> array[lo];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123; <span class="comment">//等于</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; val) &#123;</span><br><span class="line">            exch(array, i++, lt++);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &gt; val) &#123;</span><br><span class="line">            exch(array, i, gt--); <span class="comment">//i不变</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array[i - <span class="number">1</span>] = val;</span><br><span class="line">    <span class="comment">//lt到gt之间的都是等于val的，如果存在大量重复元素的数组使用该蒜贩可以极大提升算法效率</span></span><br><span class="line">    quick2waySort(array, lo, lt - <span class="number">1</span>);</span><br><span class="line">    quick2waySort(array, gt + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><ul><li><p><strong>思想：</strong> 首先在未排序序列中找到最小（大）元素，存放到排序序列的起使位置，然后每次从剩余未排序元素中继续寻找最小（大）元素放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></li><li><p><strong>时间复杂度：</strong> 最坏：O(n^2) 最好：O(n^2) 平均：O(n^2)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>稳定性：</strong> 不稳定，例如数组 2 2 1 3 第一次选择的时候把第一个2与1交换使得两个2的相对次序发生了改变。</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIdx</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[minIdx]) &#123;</span><br><span class="line">                minIdx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exch(array, i, minIdx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li><p><strong>思想：</strong> 堆排序是利用堆的性质进行的一种选择排序，先将排序元素构建一个最大堆，每次堆中取出最大的元素并调整堆。将最大元素放到已排好序的序列前面。这种方法相对选择排序，时间复杂度更低，效率更高。</p></li><li><p><strong>时间复杂度：</strong> 最坏：O(nlog2n) 最好：O(nlog2n) 平均：O(nlog2n)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>稳定性：</strong> 不稳定，例如 5 10 15 10。如果堆顶5先输出，则第三层的10（最后一个10）会跑到堆顶，然后堆稳定，继续输出堆顶，则刚才那个10跑到前面了，所以两个10排序前后的次序发生改变。</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个元素没有利用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123; <span class="comment">// k &gt;= 1</span></span><br><span class="line">        sink(array, k, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//最大堆，选择最大值放在最后</span></span><br><span class="line">        exch(array, <span class="number">1</span>, n--);</span><br><span class="line">        sink(array, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; array[j] &lt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &lt; array[k]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exch(array, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li><p><strong>思想：</strong> 归并排序采用了分治算法，首先递归将原始数组划分为两个子数组，知道数组元素个数为1，对每个子数组进行排序。然后将排好序的子数组递归合并成一个有序的数组。</p></li><li><p><strong>时间复杂度：</strong> 最坏：O(nlog2n) 最好：O(nlog2n) 平均：O(nlog2n)</p></li><li><p><strong>空间复杂度：</strong> O(n)</p></li><li><p><strong>稳定性：</strong> 稳定</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//递归处理相关的合并事项</span></span><br><span class="line">        sort(array, left, middle);</span><br><span class="line">        sort(array, middle + <span class="number">1</span>, right);</span><br><span class="line">        merge(array, left, middle, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个临时数组用来存储合并后的数据</span></span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> lo;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= mid &amp;&amp; right &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[left] &lt; array[right]) &#123;</span><br><span class="line">            temp[k++] = array[left++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = array[right++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理剩余未合并的部分</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = array[left++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right &lt;= hi) &#123;</span><br><span class="line">        temp[k++] = array[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将临时数组中的内容存储到原数组中</span></span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        array[lo] = temp[lo++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="基数排序算法"><a href="#基数排序算法" class="headerlink" title="基数排序算法"></a>基数排序算法</h3><ul><li><strong>思想：</strong> 基数排序是通过“分配”和“收集”过程来实现排序，首先根据数组的个位的数将数字放入0-9号桶中，然后将所有桶中所盛数据按照桶号由小到大，桶中由顶至底依次重新收集串起来，得到新的元素序列。然后递归对十位、百位这些高位采用同样的方式分配收集，知道每个位都完成分配收集得到一个有序的元素序列。</li><li><strong>时间复杂度：</strong> 最坏：O(d(r+n)) 最好：O(d(r+n)) 平均：O(d(r+n))</li><li><strong>空间复杂度：</strong> O(d(r+n)) n个记录，d个关键码，关键码的取值范围为r</li><li><strong>稳定性：</strong> 稳定，基数排序基于分别排序，分别收集，所以其实稳定的排序算法。</li><li>为什么从底部取？因为桶内部是有序的，根据先进先出保证顺序。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP理论</title>
      <link href="/2020/02/04/distribution/CAP%E7%90%86%E8%AE%BA/"/>
      <url>/2020/02/04/distribution/CAP%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><blockquote><p>引用自 <a href="https://www.hollischuang.com/archives/666">分布式系统的CAP理论</a></p></blockquote><blockquote><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p><ul><li>Consistency</li><li>Availability</li><li>Partition tolerance<br>它们的第一个字母分别是 C、A、P。</li></ul><p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p></blockquote><p>无论你是一个系统架构师，还是一个普通开发，当你开发或者设计一个分布式系统的时候，CAP理论是无论如何也绕不过去的。本文就来介绍一下到底什么是CAP理论，如何证明CAP理论，以及CAP的权衡问题。</p><h2 id="CAP理论概述"><a href="#CAP理论概述" class="headerlink" title="CAP理论概述"></a>CAP理论概述</h2><p>CAP理论：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018071607.jpg" alt="CAP理论"></p><blockquote><p>读者需要注意的是，CAP理论中的CA和数据库事务中ACID的CA并不完全是一回事。两者中的C都是一致性（Consistency）。CAP中的A值得是可用性（Availability），而ACID中的A指的是原子性（Atomicity），切勿混为一谈。</p></blockquote><h2 id="CAP的定义"><a href="#CAP的定义" class="headerlink" title="CAP的定义"></a>CAP的定义</h2><h3 id="Consistency-一致性"><a href="#Consistency-一致性" class="headerlink" title="Consistency 一致性"></a>Consistency 一致性</h3><p>一致性指 <code>all nodes see the same data at the same time</code>，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致，所以，一致性，说的就是数据一致性。</p><p>对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。</p><p>一致性是因为有并发读写才有的问题，因此在理解一致性问题时，一定要注意结合考虑并发读写的场景。</p><p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。</p><h4 id="三种一致性策略"><a href="#三种一致性策略" class="headerlink" title="三种一致性策略"></a>三种一致性策略</h4><p>对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。</p><p>如果能容忍后续的部分或者全部访问不到，这是弱一致性。</p><p>如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。</p><p>CAP中说，不可能同时满足的这个一致性指的是强一致性。</p><h3 id="Availability-可用性"><a href="#Availability-可用性" class="headerlink" title="Availability 可用性"></a>Availability 可用性</h3><p>可用性指 <code>Reads and writes always succeed</code>，即服务一直可用，而且是正常响应时间。</p><p>对于一个可用性的分布式系统，每一个非故障的节点必须对每一个请求做出响应。所以，一般我们在衡量一个系统的可用性的时候，都是通过停机时间来计算的。</p><table><thead><tr><th align="left">可用性分类</th><th align="left">可用水平</th><th align="left">年可容忍停机时间</th></tr></thead><tbody><tr><td align="left">容错可用性</td><td align="left">99.9999</td><td align="left">&lt; 1min</td></tr><tr><td align="left">极高可用性</td><td align="left">99.999</td><td align="left">&lt; 5min</td></tr><tr><td align="left">具有故障自动恢复能力的可用性</td><td align="left">99.99</td><td align="left">&lt; 53 min</td></tr><tr><td align="left">高可用性</td><td align="left">99.9</td><td align="left">&lt; 8.8h</td></tr><tr><td align="left">商品可用性</td><td align="left">99</td><td align="left">&lt; 87.6h</td></tr></tbody></table><p>通常我们描述一个系统的可用性时，我们说淘宝的系统可用性可以达到5个9，意思就是说他的可用水平是99.999%，即全年停机时间不超过 <code>(1-0.99999)*365*24*60 = 5.256 min</code>，这是一个极高的要求。</p><p>好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。一个分布式系统，上下游设计很多系统如负载均衡、WEB服务器、应用代码、数据库服务器等，任何一个节点的不稳定都可以影响可用性。</p><h3 id="Partition-Tolerance-分区容错性"><a href="#Partition-Tolerance-分区容错性" class="headerlink" title="Partition Tolerance 分区容错性"></a>Partition Tolerance 分区容错性</h3><p>分区容错性指 <code>the system continues to operate despite arbitrary message loss or failure of part of the system</code>，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p><p>分区容错性和扩展性紧密相关。在分布式应用中，可能因为一些分布式的原因导致系统无法正常运转。好的分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个宕掉了，其他剩下的机器还能够正常运转满足系统需求，或者是机器之间有网络异常，将分布式系统分隔为独立的几个部分，各个部分还能维持分布式系统的运作，这样就具有好的分区容错性。</p><p>简单点说，就是在网络中断，消息丢失的情况下，系统如果还能正常工作，就是有比较好的分区容错性。</p><h2 id="CAP的证明"><a href="#CAP的证明" class="headerlink" title="CAP的证明"></a>CAP的证明</h2><p><img src="https://www.hollischuang.com/wp-content/uploads/2016/03/intro_thumb.png" alt="CAP基本场景"></p><p>如上图，是我们证明CAP的基本场景，网络中有两个节点N1和N2，可以简单的理解N1和N2分别是两台计算机，他们之间网络可以连通，N1中有一个应用程序A，和一个数据库V，N2也有一个应用程序B2和一个数据库V。现在，A和B是分布式系统的两个部分，V是分布式系统数据存储的两个子数据库。</p><p>在满足一致性的时候，N1和N2中的数据是一样的，V0&#x3D;V0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何乙方宕机，或者网络不同的时候，都不会影响N1和N2彼此之间的正常运作。</p><p><img src="https://www.hollischuang.com/wp-content/uploads/2016/03/scenario1_thumb.png" alt="分布式系统正常运转流程"></p><p>如上图，是分布式系统正常运转的流程，用户向N1机器请求数据更新，程序A更新数据库V0为V1，分布式系统将数据进行同步操作M，将V1同步到N2中V0，使得N2中的数据V0也更新为V1，N2中的数据再响应N2的请求。</p><p>这里，可以定义N1和N2的数据库V之间的数据是否一样为一致性；外部对N1和N2的请求响应为可用性；N1和N2之间的网络环境为分区容错性。这是正常运作的场景，也是理想的场景，然而现实是残酷的，当错误发生的时候，一致性和可用性还有分区容错性，是否能同时满足，还是说要进行取舍呢？</p><p>作为一个分布式系统，它和单机系统的最大区别，就在于网络，现在假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常，相当于要满足分区容错性，能不能同时满足一致性和响应性呢？还是说要对他们进行取舍。</p><p><img src="https://www.hollischuang.com/wp-content/uploads/2016/03/scenario2_thumb.png" alt="分区间网络断开"></p><p>假设再N1和N2之间网络断开的时候，有用户向N1发送数据更新请求，那N1中的数据V0将被更新为V1，由于网络是断开的，所以分布式系统同步操作M无法成功执行，所以N2中的数据依旧是V0；这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据V1，怎么办？</p><p>有两种选择，第一，牺牲数据一致性，保证可用性。响应旧的数据V0给用户；</p><p>第二，牺牲可用性，保证数据一致性。阻塞等待，知道网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。</p><p>这个过程，证明了要满足分区容错性的分布式系统，只能再一致性和可用性两者中，选择其中一个。</p><h2 id="CAP权衡"><a href="#CAP权衡" class="headerlink" title="CAP权衡"></a>CAP权衡</h2><p>通过CAP理论及前面的证明，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？</p><p>我们分三种情况来阐述一下。</p><h3 id="CA-without-P"><a href="#CA-without-P" class="headerlink" title="CA without P"></a>CA without P</h3><p>这种情况在分布式系统中几乎是不存在的。首先在分布式环境下，网络分区是自然的事实。因为分区是必然的，所以如果舍弃P，意味着要舍弃分布式系统。那也就没有必要再讨论CAP理论了。这也是为什么在前面的CAP证明中，我们以系统满足P为前提论述了无法同时满足C和A。</p><p>比如我们熟知的关系型数据库，如MySQL和Oracle就是保证了可用性和数据一致性，但是它并不是个分布式系统。一旦关系型数据库要考虑主备同步、集群部署等就必须要把P也考虑进来。</p><p>其实，在CAP理论中。C、A、P三者并不是平等的，CAP之父在《Spanner，真时，CAP理论》一文中写道：</p><blockquote><p>如果说Spanner真有什么特别之处，那就是谷歌的广域网。Google通过建立私有网络以及强大的网络工程能力来保证P，在多年运营改进的基础上，在生产环境中可以最大程度的减少分区发生，从而实现高可用性。</p></blockquote><p>从Google的经验中可以得到的结论是，无法通过降低CA来提升P。要想提升系统的分区容错性，需要通过提升基础设施的稳定性来保障。</p><p>所以，对于一个分布式系统来说。P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。</p><h3 id="CP-without-A"><a href="#CP-without-A" class="headerlink" title="CP without A"></a>CP without A</h3><p>如果一个分布式系统不要求强的可用性，即容许系统停机或者长时间无响应的话，就可以在CAP三者中保障CP而舍弃A。</p><p>一个保证了CP而舍弃了A的分布式系统，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。</p><p>设计称CP的系统其实也不少，其中最典型的就是很多分布式数据库，它们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。</p><p>无论是像Redis、HBase这种分布式存储系统，还是向Zookeeper这种分布式协调组件。数据的一致性是它们最最基本的要求。一个连数据一致性都保证不了的分布式存储是没有意义的。</p><p>这里简单介绍一下Zookeeper关于CAP的思考：</p><p>Zookeeper是保证了CP（一致性 + 分区容错性）的，即任何时刻对Zookeeper的访问请求能得到一致的数据结果，同时系统对网络分隔具备容错性。但是它不能保证每次服务请求的可用性，也就是在极端环境下，Zookeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果。Zookeeper是分布式协调服务，它的职责是保证数据在其管辖下的所有服务之间保持同步、一致。所以就不难理解为什么Zookeeper被设计成CP而不是AP特性的了。</p><h3 id="AP-without-C"><a href="#AP-without-C" class="headerlink" title="AP without C"></a>AP without C</h3><p>要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</p><p>这种舍弃强一致性而保证系统的分区容错性和可用性的场景和案例非常多。前面我们介绍可用性的时候说到过，很多系统在可用性方面会做很多事情来保证系统的全年可用性可以达到N个9，所以，对于很多业务系统来说，比如淘宝的购物，12306的买票。都是在可用性和一致性之间舍弃了一致性而选择可用性。</p><p>你在12306买票的时候肯定遇到过这种场景，当你购买的时候提示你是有票的（但是可能实际已经没票了），你也正常的去输入验证码，下单了。但是过了一会系统提示你下单失败，余票不足。这其实就是先在可用性方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，会影响一些用户体验，但是也不至于造成用户流程的严重阻塞。</p><p>但是，我们说很多网站牺牲了一致性，选择了可用性，这其实也不准确的。就比如上面的买票的例子，其实舍弃的只是强一致性。退而求其次保证了最终一致性。也就是说，虽然下单的瞬间，关于车票的库存可能存在数据不一致的情况，但是过了一段时间，还是要保证最终一致性的。</p><p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。</p><h3 id="适合的才是最好的"><a href="#适合的才是最好的" class="headerlink" title="适合的才是最好的"></a>适合的才是最好的</h3><p>上面介绍了如何对CAP进行权衡取舍以及典型案例。孰优孰劣，没有定论，只能根据场景定夺，适合的才是最好的。</p><p>对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CP，舍弃A。比如前几年支付宝光缆被挖断的事件，在网络出现故障的时候，支付宝就在可用性和数据一致性之间选择数据一致性，用户感受到的是支付宝系统长时间宕机，但是其实背后时无数的工程师在恢复数据，保证数据的一致性。</p><p>对于其他场景，比较普遍的做法时选择可用性和分区容错性，舍弃强一致性，退而求其次使用最终一致性来保证数据的安全。这其实时分布式领域的另外一个理论——BASE理论。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论你是一个架构时，还是一个普通开发，在涉及或开发分布式系统的时候，不可避免的要在CAP中做权衡。需要根据自己的系统的实际情况，选择最适合自己的方案。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> CAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统</title>
      <link href="/2020/02/04/distribution/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/02/04/distribution/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><blockquote><p>引用自 <a href="https://juejin.im/post/5af8ea34f265da0b9f40622a">大家都在说的分布式系统到底是什么？</a></p></blockquote><blockquote><p>随着大型网站的各种高并发访问、海量数据处理等场景越来越多，如何实现网站的高可用、易伸缩、可扩展、安全等目标就显得越来越重要。为了解决这样一系列问题，大型网站的架构也在不断发展。提高大型网站的高可用架构，不得不提的就是分布式。本文主要简单介绍了分布式系统的概念、分布式系统的特点、常用的分布式方案以及分布式和集群的区别等。</p></blockquote><h2 id="集中式系统"><a href="#集中式系统" class="headerlink" title="集中式系统"></a>集中式系统</h2><p>在学习分布式之前，先了解一下与之相对应的集中式系统是什么样的。</p><p>集中式系统用一句话概括就是：一个主机带多个终端。终端没有数据处理能力，仅负责数据的录入和输出。而运算、存储等全部在主机上进行。现在的银行系统，大部分都是这种集中式的系统，此外，在大型企业、科研单位、军队、政府等也有分布。集中式系统，主要流行于上个世纪。</p><p>集中式系统的最大的特点就是部署结构非常简单，底层一般采用从IBM、HP等厂商购买到的昂贵的大型主机。因此无需考虑如何对服务进行多节点的部署，也就不用考虑各节点之间的分布式协作问题。但是，由于采用单机部署。很可能带来系统大而复杂、难于维护、发生单点故障（单个点发生故障的时候会波及到整个系统或者网络，从而导致整个系统或者网络的瘫痪）、扩展性差等问题。</p><h2 id="分布式系统-1"><a href="#分布式系统-1" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>在《分布式系统概念与设计》一书中，对分布式系统做了如下定义：</p><blockquote><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p></blockquote><p>简单来说就是一群独立计算机集合共同对外提供服务，但是对于系统的用户来说，就像是一台计算机在提供服务一样。分布式意味着可以采用更多的普通计算机（相对于昂贵的大型机）组成分布式集群对外提供服务。计算机越多，CPU、内存、存储资源等也就越多，能够处理的并发访问量也就越大。</p><p>从分布式系统的概念中我们知道，各个主机之间通信和协调主要通过网络进行，所以，分布式系统中的计算机在空间上几乎没有任何限制，这些计算机可能被放在不同的机柜上，也可能被部署在不同的机房中，还可能在不同的城市中，对于大型的网站甚至可能分布在不同的国家和地区。但是，无论空间上如何分布，一个标准的分布式系统应该具有以下几个主要特征：</p><ul><li><p><strong>分布性</strong>：分布式系统中的多台计算机之间在空间位置上可以随意分布，系统中的多台计算机之间没有主、从之分，即没有控制整个系统的主机，也没有受控的从机。</p></li><li><p><strong>透明性</strong>：系统资源被所有计算机共享。每台计算机的用户不仅可以使用本机的资源，还可以使用本分布式系统中其他计算机的资源（包括CPU、文件、打印机等）。</p></li><li><p><strong>同一性</strong>：系统中的若干台计算机可以互相协作来完成一个共同的任务，或者说一个程序可以分布在几台计算机上并行地运行。</p></li><li><p><strong>通信性</strong>：系统中任意两台计算机都可以通过通信来交换信息。</p></li></ul><p>和集中式系统相比，分布式系统地性价比更高、处理能力更强、可靠性更高、也有很好的扩展性。但是，分布式在解决了网站的高并发问题的同时也带来了一些其他问题。首先，分布式的必要条件就是网络，这可能对性能甚至服务能力造成一定的影响。其次，一个集群中的服务器数量越多，服务器宕机的概率也就越大。另外，由于服务在集群中分布式部署，用户的请求只会落到其中一台机器上，所以，一旦处理不好就很容易产生数据一致性问题。</p><h2 id="常用的分布式方案"><a href="#常用的分布式方案" class="headerlink" title="常用的分布式方案"></a>常用的分布式方案</h2><ul><li><p><strong>分布式应用和服务</strong>：将应用和服务进行分层和分割，然后将应用和服务模块进行分布式部署。这样做不仅可以提高并发访问能力、减少数据库连接和资源消耗，还能使不同应用复用共同的服务，使业务易于扩展。</p></li><li><p><strong>分布式静态资源</strong>：对网站的静态资源如JS、CSS、图片等资源进行分布式部署可以减轻应用服务器的负载压力，提高访问速度。</p></li><li><p><strong>分布式数据和存储</strong>：大型网站常常需要处理海量数据，单台计算机往往无法提供足够的内存空间，可以对这些数据进行分布式存储。</p></li><li><p><strong>分布式计算</strong>：随着计算技术的发展，有些应用需要非常巨大的计算能力才能完成，如果采用集中式计算，需要耗费相当长的时间来完成。分布式计算将应用分解称许多小的部分，分配给多台计算机进行处理。这样可以节约整体计算时间，大大提高计算效率。</p></li></ul><h2 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h2><p>分布式（distributed）是指在<strong>多台不同的服务器</strong>中部署<strong>不同的服务模块</strong>，通过远程调用协同工作，对外提供服务。</p><p>集群（cluster）是指在<strong>多台不同的服务器</strong>中部署<strong>相同应用或服务模块</strong>，构成一个集群，通过负载均衡设备对外提供服务。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可容灾分布式系统设计</title>
      <link href="/2020/02/04/distribution/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/04/distribution/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="可容灾分布式系统设计"><a href="#可容灾分布式系统设计" class="headerlink" title="可容灾分布式系统设计"></a>可容灾分布式系统设计</h1><blockquote><p>引用自 <a href="https://cloud.tencent.com/developer/article/1329607">后台开发必备知识——容灾</a> <a href="https://cloud.tencent.com/developer/article/1516870">容灾系统的衡量指标和级别有哪些？</a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>后台开发的目标是要提供高可用的后台服务，其中很重要的一点是保证业务连续性（服务不中断，或中断时间在允许范围内）。要保证业务连续性，系统需要具备容灾能力。</p><p>所谓容灾，就是对灾难（disaster）的容忍能力，即在灾难袭来时，能够保证信息系统正常运行而采取的措施，以实现业务连续性为目标。</p><h2 id="衡量指标"><a href="#衡量指标" class="headerlink" title="衡量指标"></a>衡量指标</h2><p>衡量容灾系统的主要指标有RPO（Recovery Point Objective，灾难发生时允许丢失的数据量）、RTO（Recovery Time Objective，系统恢复的时间）、容灾半径（生产系统和容灾系统之间的距离）以及ROI(Return of Investment，容灾系统的投入产出比)。</p><ul><li><p><strong>RPO</strong>：业务系统所允许的灾难过程中的最大数据丢失量（以时间来度量），这是一个灾备系统所选用的数据复制技术有密切关系的指标，用以衡量灾备方案的数据冗余备份能力。</p></li><li><p><strong>RTO</strong>：将信息系统从灾难造成的故障或瘫痪状态恢复到可正常运行状态，并将其支持的业务功能从灾难造成的不正常状态恢复到可接收状态所需的时间，其中包括备份数据恢复到可用状态所需时间、应用系统切换时间、以及备用网络切换时间等，该指标用以衡量容灾方案的业务恢复能力。例如，灾难发生后半天内便需要恢复，则RTO值就是十二小时。</p></li><li><p><strong>容灾半径</strong>：生产中心和灾备中心之间的直线距离，用以衡量容灾方案所能防御的灾难影响范围。</p></li><li><p><strong>ROI</strong>：用户投入到容灾系统的资金与从中所获得的收益的比例。</p></li></ul><p>显然，具有零RTO、零RPO和大容灾半径的灾难恢复方案是用户最期望的，但受系统性能要求、适用技术及成本等方面的约束，这种方案实际上是不大可行的。所以，用户在选择容灾方案时应该综合考虑灾难的发生概率、灾难对数据的破坏力、数据所支撑业务的重要性、适用的技术措施及自身所能承受的成本等多种因素，理性地作出选择。</p><h2 id="容灾级别"><a href="#容灾级别" class="headerlink" title="容灾级别"></a>容灾级别</h2><p>根据冗余对象，容灾大致可以分为数据级容灾、应用级容灾和业务级容灾。</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%AE%B9%E7%81%BE%E7%BA%A7%E5%88%AB.png" alt="容灾级别"></p><h3 id="数据级容灾"><a href="#数据级容灾" class="headerlink" title="数据级容灾"></a>数据级容灾</h3><p>数据备份，如建立异地容灾中心做数据远程备份（只备份数据，没有备份系统可切换）。</p><p>容灾中心的数据可以是本地生成数据的完全复制（一般在同城实现），也可以比生产数据略微落后，但必定是可用的（一般在异地实现），而差异的数据通常可以通过一些工具（如操作记录、日志等）进行手动补回。基于数据容灾实现业务恢复的速度较慢，通常情况下RTO超过24小时，但是这种级别的容灾系统运行维护成本较低。</p><h3 id="应用级容灾"><a href="#应用级容灾" class="headerlink" title="应用级容灾"></a>应用级容灾</h3><p>在数据容灾的基础上构建一套功能相同的系统，可做系统切换。</p><p>容灾中心需要建立起一套和本地生成相当的备份环境，包括主机、网络、应用、IP等资源均有配套，当生产系统发生灾难时，异地系统可以提供完全可用的生产环境。应用级容灾的RTO通常在12个小时以内，技术复杂度较高，运行维护的成本也比较高。</p><h3 id="业务级容灾"><a href="#业务级容灾" class="headerlink" title="业务级容灾"></a>业务级容灾</h3><p>在应用容灾基础上，增加了IT系统以外的容灾。如备用办公地点，系统相关文档等。</p><p>业务级容灾是生产中心与容灾中心对业务请求同时进行处理的容灾方式，能够确保业务持续可用。这种方式业务恢复过程自动化程度高，RTO可以做到30分钟以内。但是这种容灾级别的项目实施难度大，需要从应用层对系统进行改造，比较适合流程固定的简单业务系统。这种容灾系统的运行维护成本最高。</p><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><p>容灾系统有三个重要的评价指标。</p><ul><li><p><strong>灾难检测</strong>：具备容灾能力的系统需要能够检测出哪个子系统、组件发生了灾难，以便决策解决方案（灾难恢复）。</p></li><li><p><strong>容灾切换</strong>：系统检测到某个子系统、组件故障后，要具备把流量切换到其他具备相同能力的子系统上去的能力。</p></li><li><p><strong>数据一致性</strong>：同功能的不同子系统（主备）之间的数据要保持一致。灾难恢复后的业务应该不受影响。理论上用户对灾难是无感知的。</p></li></ul><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%AE%B9%E7%81%BE%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.png" alt="容灾评价指标"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="双活"><a href="#双活" class="headerlink" title="双活"></a>双活</h3><p>双活是指在两个生产中心部署相同的两个能力相同的业务系统。两个系统同时工作，地位对等、不分主从。具备在对方系统灾难发生时，接管对方业务的能力。</p><p>双活通常需要负载均衡技术的支持。</p><p>多活与双活区别在生产中心的数量上。</p><p>双活有<strong>同城双活</strong>和<strong>异地双活</strong>，主要是地理位置上的区别。</p><h3 id="灾备"><a href="#灾备" class="headerlink" title="灾备"></a>灾备</h3><p>这里灾备是指具有主从之分的灾备系统（双活是不分主从的灾备）。</p><p>通常是建立一个主业务系统和一个从属（备用）的业务系统（可能只有数据中心），正常情况下仅有主业务系统在工作。在主业务系统故障时，再启用备用系统。</p><p>灾备有<strong>热备</strong>、<strong>冷备</strong>等方式。</p><ul><li><p><strong>热备</strong>：备用数据中心对主数据中心的数据实时备份。在容灾切换时，业务不会中断。</p></li><li><p><strong>冷备</strong>：备用数据中心只是对主数据中心的数据进行定期备份（或者异步备份）。在容灾切换时，业务可能会中断。</p></li></ul><p>热备和冷备的成本要考虑是仅做数据中心备份，还是有业务系统的备份。如果仅仅是数据的备份，那么其成本主要是存储设备的成本（硬盘）；如果做了业务系统的备份，则成本与双活差不多，而且由于备用系统长期不工作，会造成资源浪费。</p><h3 id="两地三中心"><a href="#两地三中心" class="headerlink" title="两地三中心"></a>两地三中心</h3><p>两地三中心是指在同城和异地同时建立灾备中心。</p><p>同城灾备中心通常采用热备的方式，并一般会提供业务服务。异步灾备中心只是做数据的备份，且数据的复制是异步的。异步灾备中心平时不提供业务服务。</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E4%B8%A4%E5%9C%B0%E4%B8%89%E4%B8%AD%E5%BF%83.png" alt="两地三中心"></p><h2 id="容灾系统设计"><a href="#容灾系统设计" class="headerlink" title="容灾系统设计"></a>容灾系统设计</h2><p>容灾系统的设计不是一成不变的，不同的应用场景通常会有一些定制化的设计。因为容灾通常是基于服务冗余实现的，大而全的容灾系统具有较大的成本。</p><p>常见的四层容灾设计如下：</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%9B%9B%E5%B1%82%E5%AE%B9%E7%81%BE%E8%AE%BE%E8%AE%A1.png" alt="四层容灾设计"></p><ul><li><p>接入层：负责流量的接入和路由。</p></li><li><p>控制层：负载均衡、节点管理等。</p></li><li><p>业务层：处理请求，负责具体的业务逻辑，可能涉及数据的读写。</p></li><li><p>落地层：数据的落地存储。</p></li></ul><p>灾难检测可以在控制层或业务层。</p><p><strong>注</strong>：本文所介绍的容灾主要是业务层以下的容灾。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>容灾的内部实现是多种多样的，不同的公司可能都有自己的实现技术。下面知识介绍一些案例或常用的实现。主要是为了阐述可能的实现原理，不一定适用所遇场景。</p><h3 id="灾难检测"><a href="#灾难检测" class="headerlink" title="灾难检测"></a>灾难检测</h3><p>容灾系统通常是一个集群，集群中有多个节点，通常是一个主节点（master）和一个以上的从节点（slave）。</p><p>灾难检测可以通过心跳包实现。</p><p>主节点和从节点分别向控制层上报心跳，如果控制层收不到某个节点的心跳，则认为其不可用，对主节点降级，并把流量切到从节点。</p><p>更为严谨的做法是，节点之间也互相上报心跳，这样可以做孤岛检测。</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%81%BE%E9%9A%BE%E6%A3%80%E6%B5%8B.png" alt="灾难检测"></p><h3 id="容灾切换"><a href="#容灾切换" class="headerlink" title="容灾切换"></a>容灾切换</h3><p>容灾切换主要是把流量从一个节点切到其他节点。可以通过负载均衡等系统实现。</p><h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>数据一致性是要保证各个节点的数据一致，这样在主节点故障，切换到其他节点时才能保证业务不中断，不受影响。</p><p>在业务处理过程中，可能涉及到频繁的数据读写，有些业务请求需要等待写成功后才能返回给用户。要保证各个节点的数据在存储落地时一致，需要等到所有节点都写成功后再返回，这就涉及到<strong>同步写</strong>。</p><p>按上面的逻辑，为保证数据一致性，客户端、主节点和备用节点会发生以下交互。</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="数据一致性时序图"></p><p>由于master和slave再地理位置上可能相隔较远，因而这种同步写的方式有可能造成一定的延迟，影响系统性能，增加了请求的响应时间。</p><p>为了减少延迟（减少容灾对系统性能产生的影响）可以对数据一致性的实现做一些改进。</p><p>下面介绍两种改进方式。</p><ol><li>数据分级，允许不重要数据少量丢失。</li><li>优化设计，变同步为异步。</li></ol><p>数据分级的方式，主要是减少需要同步写的对象，对不重要的数据，允许再一定程度内丢失。</p><p>然而再很多场景下，数据分级的方式并不适用。</p><p>第二种方式是现在常用的保证数据一致性，又降低对系统性能影响的方式。在这种设计下，增加了一个组件（注册中心）用于登记写事件。</p><p>master再存储数据时，先到注册中心登记下，然后再进行写动作，同时通知slave需要复制数据。master再写动作完成后即可返回给client，不需要等到slave写动作完成。也就是slave是以异步的方式从master那里复制数据。</p><p>那么这种设计如何保证数据一致性呢？</p><ol><li>master在注册中心登记了写事件，slave可以与注册中心校验与master是否数据一致。</li><li>验证结果为数据一致，不需要额外处理。</li><li>验证结果为数据不一致，则尝试从master复制未写的数据。</li><li>尝试复制成功，则数据同步完成。</li><li>尝试复制事变，则通知注册中心回滚（做下标志），同时通知客户端上次写事件失败，需要重新发起请求。</li></ol><p>时序图：</p><p><img src="/images/%E5%8F%AF%E5%AE%B9%E7%81%BE%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%AE%B9%E7%81%BE%E4%B8%80%E8%87%B4%E6%80%A7%E5%AE%9E%E7%8E%B0%E4%BC%98%E5%8C%96.png" alt="容灾一致性实现优化"></p><p>注册中心的等级同样是同步操作，为何能降低性能影响？</p><ol><li>注册写事件涉及到的数据内容通常远小于业务数据。</li><li>在多节点时，写事件的注册比各节点的数据同步要快很多。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 分布式系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 容灾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幂等操作</title>
      <link href="/2020/02/04/distribution/%E5%B9%82%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/02/04/distribution/%E5%B9%82%E7%AD%89%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="幂等操作"><a href="#幂等操作" class="headerlink" title="幂等操作"></a>幂等操作</h1><blockquote><p>引用自 <a href="https://www.iteye.com/blog/825635381-2276077">高并发的核心技术-幂等的实现方案</a></p></blockquote><h2 id="幂等性概念"><a href="#幂等性概念" class="headerlink" title="幂等性概念"></a>幂等性概念</h2><p>幂等（idempotent、idempotence）是一个数字与计算机学概念，常见于抽象代数中。</p><p>在编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，<code>getUsername()</code> 和 <code>setTrue()</code> 函数就是幂等函数。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>以下是一些常见场景：</p><ol><li><p>前端重复提交选中的数据，应该后台只产生对应这个数据的一个响应结果。</p></li><li><p>我们发起一笔付款请求，应该只扣用户账户一次钱，当遇到网络重发或系统bug重发，也应该只扣一次钱。</p></li><li><p>发送消息，也应该只发一次，同样的短信发给用户，用户会哭的。</p></li><li><p>创建业务订单，一次业务请求只能创建一个，创建多个就会出大问题。</p></li></ol><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作。</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>删除操作也是幂等的，删除一次和多此删除都是把数据删除。（注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个）。</p><h3 id="唯一索引，防止新增脏数据"><a href="#唯一索引，防止新增脏数据" class="headerlink" title="唯一索引，防止新增脏数据"></a>唯一索引，防止新增脏数据</h3><p>比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建多个资金账户，可以给资金账户表中的用户ID加唯一索引，所以一个用户只能新增成功一个资金账户记录。</p><p>使用唯一索引或唯一组合索引来防止新增数据存在脏数据（当表存在唯一索引，并发时新增报错，再查询一次就可以了，数据应该已经存在了，返回结果即可）。</p><h3 id="token机制，防止页面重复提交"><a href="#token机制，防止页面重复提交" class="headerlink" title="token机制，防止页面重复提交"></a>token机制，防止页面重复提交</h3><ul><li><p>业务要求：页面的数据只能被点击提交一次</p></li><li><p>发生原因：由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交</p></li><li><p>解决办法：</p><ul><li>集群环境：采用token加redis（redis单线程的，处理需要排队）</li><li>单JVM环境：采用token加redis或者token加jvm内存</li></ul></li><li><p>处理流程：</p><ol><li>数据提交前要向服务申请token，token放到redis或jvm内存中，设置token有效时间</li><li>提交后后台校验token，同时删除token，生成新的token返回</li></ol></li><li><p>token特点：要申请，一次有效性，可以限流</p></li></ul><p>redis要用删除操作来判断token，删除成功代表token校验通过，如果用 select + delete 来校验token，存在并发问题，不建议使用。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>获取数据时加锁获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_xxx <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>注意：id字段一定是主键或者唯一索引，否则会导致锁表。</p><p>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。</p><p>乐观锁的实现方式多种多样可以通过version或者其他状态条件：</p><ol><li><p>通过版本号实现</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_xxx <span class="keyword">set</span> name<span class="operator">=</span>#name#,version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> version<span class="operator">=</span>#version#</span><br></pre></td></tr></table></figure><p> <img src="http://dl2.iteye.com/upload/attachment/0115/0360/cc01c65f-be67-3fdf-adba-edf7f46ce86a.png" alt="乐观锁-版本号"></p></li><li><p>通过条件限制</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_xxx <span class="keyword">set</span> avai_amount<span class="operator">=</span>avai_amount<span class="operator">-</span>#subAmount# <span class="keyword">where</span> avai_amount<span class="operator">-</span>#subAmount# <span class="operator">&gt;=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 要求：quality-#subQuality# &gt;&#x3D; ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高</p><p> 注意：乐观锁的更新操作，最好用主键或者唯一索引来更新,这样是行锁，否则更新时会锁表，上面两个sql改成下面的两个更好</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_xxx <span class="keyword">set</span> name<span class="operator">=</span>#name#,version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span>#id# <span class="keyword">and</span> version<span class="operator">=</span>#version#</span><br><span class="line"><span class="keyword">update</span> table_xxx <span class="keyword">set</span> avai_amount<span class="operator">=</span>avai_amount<span class="operator">-</span>#subAmount# <span class="keyword">where</span> id<span class="operator">=</span>#id# <span class="keyword">and</span> avai_amount<span class="operator">-</span>#subAmount# <span class="operator">&gt;=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>还是拿插入数据的例子，如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。</p><p>要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)。</p><h3 id="select-insert"><a href="#select-insert" class="headerlink" title="select + insert"></a>select + insert</h3><p>并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，在进行业务处理，就可以了</p><p>注意：核心高并发流程不要用这种方法</p><h3 id="状态机幂等"><a href="#状态机幂等" class="headerlink" title="状态机幂等"></a>状态机幂等</h3><p>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。</p><p>注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助</p><h3 id="对外提供接口的api如何保证幂等"><a href="#对外提供接口的api如何保证幂等" class="headerlink" title="对外提供接口的api如何保证幂等"></a>对外提供接口的api如何保证幂等</h3><p>如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号，source+seq在数据库里面做唯一索引，防止多次付款，(并发时，只能处理一个请求)</p><p>重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>幂等性应该是合格程序员的一个基因，在设计系统时，是首要考虑的问题，尤其是在向支付宝，银行，互联网金融公司等涉及的都是钱的系统，既要高效，数据也要准确，所以不能出现多扣款，多打款等问题，这样会很难处理，用户体验也不好。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 幂等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最终一致性</title>
      <link href="/2020/02/04/distribution/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2020/02/04/distribution/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h1><blockquote><p>引用自 <a href="https://feixiao.github.io/2017/03/14/fbsxt9/">分布式系统原理九：CAP理论和BASE理论</a> 作者：frank</p></blockquote><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><p>BASE是 Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写。</p><p>BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方法来使系统达到最终一致性。接下来，我们着重对BASE中的三要素进行讲解。</p><h3 id="基本可用"><a href="#基本可用" class="headerlink" title="基本可用"></a>基本可用</h3><p>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用。以下就是两个“基本可用”的例子。</p><ol><li><p>响应时间上的损失：正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。</p></li><li><p>功能上的损失：正常情况下，在一个电子商务网站（比如淘宝）上购物，消费者几乎能够顺利地完成每一笔订单。但在一些节日大促购物高峰的时候（比如双十一、双十二），由于消费者的购物行为激增，为了保护系统的稳定性（或者保证一致性），部分消费者可能会被引导到一个降级页面。</p></li></ol><h3 id="软状态"><a href="#软状态" class="headerlink" title="软状态"></a>软状态</h3><p>软状态是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同的数据副本之间进行数据同步的过程存在延时。</p><h3 id="最终一致性-1"><a href="#最终一致性-1" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><p>最终一致性是一种特殊的弱一致性：系统能够在保证没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问都能够获取到最新的值。同时，在没有发生故障的前提下，数据达到一致状态的延迟，取决于网络延迟、系统负载和数据复制方案设计等因素。</p><p>在实际工程实践中，最终一致性存在以下五类主要变种：</p><ul><li>因果一致性（Causal consistency）</li><li>读己之所写（Read your writes）</li><li>会话一致性（Session consistency）</li><li>单调读一致性（Monotonic read consistency）</li><li>单调写一致性（Monotonic write consistency）</li></ul><p>以上就是最终一致性的五种常见的变种，在实际系统实践中，可以将其中的若干个变种互相结合起来，以构建一个具有最终一致性特性的分布式系统。事实上，最终一致性并不是只有哪些大型分布式系统才涉及的特性，许多现代的关系型数据库都采用了最终一致性模型。在现代关系型数据库中（比如MySQL和PostgreSQL），大多都会采用同步或异步方式来实现主备数据复制技术。在同步方式中，数据的复制过程通常是更新事务的一部分，因此在事务完成后，主备数据库的数据就会达到一致。而在异步方式中，备库的更新往往会存在延时，这取决于事务日志在主备数据库之间传输的时间长短。如果传输时间过长或者甚至在日志传输过程中出现异常导致无法及时将事务应用到备库上，那么很显然，从备库中读取的数据将是旧的，因此就出现了数据不一致的情况。当然，无论是采用多此重试还是人为数据订正，关系型数据库还是能够保证最终数据达到一致，这就是系统提供最终一致性保证的经典案例。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 最终一致性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile指令</title>
      <link href="/2020/02/04/docker/Dockerfile%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/02/04/docker/Dockerfile%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/07-docker-docker-file/">《Docker系列教程07-Dockerfile指令详解》- 周立</a></p></blockquote><p>Dockerfile有十多个指令。本节我们来系统讲解这些指令，指令的一般格式为 <code>指令名称 参数</code>。</p><h2 id="ADD-复制文件"><a href="#ADD-复制文件" class="headerlink" title="ADD 复制文件"></a>ADD 复制文件</h2><p>ADD指令用于复制文件，格式为：</p><ul><li><code>ADD &lt;src&gt;... &lt;dest&gt;</code></li><li><code>ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>从src目录复制文件到容器的dest。其中src可以是Dockerfile所在目录的相对路径，也可以是一个URL，还可以是一个压缩包</p><p><strong>注意：</strong></p><p>① src必须在构建的上下文内，不能使用例如：<code>ADD ../somethine /something</code> 这样的命令，因为 <code>docker build</code> 命令首先会将上下文路径和其子目录发送到docker daemon。</p><p>② 如果src是一个URL，同时dest不以斜杠结尾，dest将会被视为文件，src对应内容文件将会被下载到dest。</p><p>③ 如果src是一个URL，同时dest以斜杠结尾，dest将被视为目录，src对应内容将会被下载到dest目录。</p><p>④ 如果src是一个目录，那么整个目录下的内容将会被拷贝，包括文件系统元数据。</p><p>⑤ 如果文件是可识别的压缩包格式，则docker会自动解压。</p><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> microservice-discovery-eureka-0.0.1-SNAPSHOT.jar app.jar</span></span><br></pre></td></tr></table></figure><h2 id="ARG-设置构建参数"><a href="#ARG-设置构建参数" class="headerlink" title="ARG 设置构建参数"></a>ARG 设置构建参数</h2><p>ARG指令用于设置构建参数，类似于ENV。和ARG不同的是，ARG设置的是构建时的环境变量，在容器运行时是不会存在这些变量的。</p><p>格式为：</p><ul><li><code>ARG &lt;name&gt;[=&lt;default value&gt;]</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> user1=someuser</span><br></pre></td></tr></table></figure><p>详细介绍文档：<a href="https://www.centos.bz/2016/12/dockerfile-arg-instruction/">https://www.centos.bz/2016/12/dockerfile-arg-instruction/</a></p><h2 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h2><p>CMD指令用于为执行容器提供默认值。每个Dockerfile只有一个CMD命令，如果指定了多个CMD命令，那么只有最后一条会被执行，如果启动容器的时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p><p>支持三种格式：</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (推荐使用)</code></li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;] (为ENTRYPOINT指令提供预设参数)</code></li><li><code>CMD command param1 param2 (在shell中执行)</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> | <span class="built_in">wc</span> -</span></span><br></pre></td></tr></table></figure><h2 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h2><p>复制文件，格式为：</p><ul><li><code>COPY &lt;src&gt;... &lt;dest&gt;</code></li><li><code>COPY [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li></ul><p>复制本地端的src到容器的dest。COPY指令和ADD指令类似，COPY不支持URL和压缩包。</p><h2 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h2><p>格式为：</p><ul><li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li><li><code>ENTRYPOINT command param1 param2</code></li></ul><p>ENTRYPOINT和CMD指令的目的一样，都是指定Docker容器启动时执行的命令，可多次设置，但只有最后一个有效。ENTRYPOINT不可被重写覆盖。</p><p>ENTRYPOINT、CMD区别：<a href="http://blog.csdn.net/newjueqi/article/details/51355510">http://blog.csdn.net/newjueqi/article/details/51355510</a></p><h2 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h2><p>ENV指令用于设置环境变量，格式为：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> JAVA_HOME /path/to/java</span><br></pre></td></tr></table></figure><h2 id="EXPOSE-声明暴露的端口"><a href="#EXPOSE-声明暴露的端口" class="headerlink" title="EXPOSE 声明暴露的端口"></a>EXPOSE 声明暴露的端口</h2><p>EXPOSE指令用于声明在运行时容器提供服务的端口，格式为：</p><ul><li><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code></li></ul><p>需要注意的是，这只是一个声明，运行时并不会因为该声明就打开相应端口。该指令的作用主要是帮助镜像使用者理解该镜像服务的守护端口；其次是当运行时使用随机映射时，会自动映射EXPOSE的端口。示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 声明暴露一个端口示例</span><br><span class="line">EXPOSE port1</span><br><span class="line"># 相应的运行容器使用的命令</span><br><span class="line">docker run -p port1 image</span><br><span class="line"># 也可使用-P选项启动</span><br><span class="line">docker run -P image</span><br><span class="line"># 声明暴露多个端口示例</span><br><span class="line">EXPOSE port1 port2 port3</span><br><span class="line"># 相应的运行容器使用的命令</span><br><span class="line">docker run -p port1 -p port2 -p port3 image</span><br><span class="line"># 也可指定需要映射到宿主机器上的端口号  </span><br><span class="line">docker run -p host_port1:port1 -p host_port2:port2 -p host_port3:port3 image</span><br></pre></td></tr></table></figure><h2 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h2><p>使用FROM指令指定基础镜像，FROM指令有点像Java里面的“extends”关键字。需要注意的是，FROM指令必须指定且需要写在其他指令之前。FROM指令后的所有指令都依赖于该指令所指定的镜像。</p><p>支持三种格式：</p><ul><li><code>FROM &lt;image&gt;</code></li><li><code>FROM &lt;image&gt;:&lt;tag&gt;</code></li><li><code>FROM &lt;image&gt;@&lt;digest&gt;</code></li></ul><h2 id="LABEL-为镜像添加元数据"><a href="#LABEL-为镜像添加元数据" class="headerlink" title="LABEL 为镜像添加元数据"></a>LABEL 为镜像添加元数据</h2><p>LABEL指令用于为镜像添加元数据。</p><p>格式为：</p><ul><li><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code></li></ul><p>使用 <code>&quot;</code> 和 <code>\</code> 转换命令行，示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> <span class="string">&quot;com.example.vendor&quot;</span>=<span class="string">&quot;ACME Incorporated&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> com.example.label-with-value=<span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;This text illustrates \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">that label-values can span multiple lines.&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="MAINTAINER-指定维护者的信息（已过时）"><a href="#MAINTAINER-指定维护者的信息（已过时）" class="headerlink" title="MAINTAINER 指定维护者的信息（已过时）"></a>MAINTAINER 指定维护者的信息（已过时）</h2><p>MAINTAINER指令用于指定维护者的信息，用于为Dockerfile署名。</p><p>格式为：</p><ul><li><code>MAINTAINER &lt;name&gt;</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> 周立&lt;eacdy0000@<span class="number">126</span>.com&gt;</span><br></pre></td></tr></table></figure><p>注：该指令已过时，建议使用如下形式：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;SvenDowideit@home.org.au&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h2><p>该指令支持两种格式：</p><ul><li><code>RUN &lt;command&gt;</code></li><li><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li></ul><p><code>RUN &lt;command&gt;</code> 在shell终端中运行，在Linux中默认是 <code>/bin/sh -c</code> ，在Windows中是 <code>cmd /s /c</code> ，使用这种格式，就像直接在命令行中输入命令一样。<br><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> 使用exec执行，这种方式类似于函数调用。指定其他终端可以通过该方式操作，例如：<code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code> ，该方式必须使用双引号[“]而不能使用单引号[‘]，因为该方式会被转换成一个JSON 数组。</p><h2 id="USER-设置用户"><a href="#USER-设置用户" class="headerlink" title="USER 设置用户"></a>USER 设置用户</h2><p>该指令用于设置启动镜像时的用户或者UID，写在该指令后的RUN、CMD以及ENTRYPOINT指令都将使用该用户执行命令。</p><p>格式为：</p><ul><li><code>USER 用户名</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> daemon</span><br></pre></td></tr></table></figure><h2 id="VOLUME-指定挂载点"><a href="#VOLUME-指定挂载点" class="headerlink" title="VOLUME 指定挂载点"></a>VOLUME 指定挂载点</h2><p>该指令使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享给其他容器。当容器中的应用有持久化数据的需求时可以在Dockerfile中使用该指令。</p><p>格式为：</p><ul><li><code>VOLUME [&quot;/data&quot;]</code></li></ul><p>示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data</span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br></pre></td></tr></table></figure><p>当该Dockerfile被构建成镜像后，&#x2F;tmp目录中的数据即使容器关闭也依然存在。如果另一个容器也有持久化的需求，并且想使用以上容器&#x2F;tmp目录中的内容，则可使用如下命令启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -volume-from 容器ID 镜像名称  <span class="comment"># 容器ID是di一个容器的ID，镜像是第二个容器所使用的镜像。</span></span><br></pre></td></tr></table></figure><h2 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h2><p>格式为：</p><ul><li><code>WORKDIR /path/to/workdir</code></li></ul><p>切换目录指令，类似于cd命令，写在该指令后的RUN，CMD以及ENTRYPOINT指令都将该目录作为当前目录，并执行相应的命令。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Dockerfile还有一些其他的指令，例如STOPSINGAL、HEALTHCHECK、SHELL等。由于并不是很常用，本书不作赘述。有兴趣的读者可前往<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a> 扩展阅读。</p><h2 id="CMD-x2F-ENTRYPOINT-x2F-RUN区别"><a href="#CMD-x2F-ENTRYPOINT-x2F-RUN区别" class="headerlink" title="CMD&#x2F;ENTRYPOINT&#x2F;RUN区别"></a>CMD&#x2F;ENTRYPOINT&#x2F;RUN区别</h2><p>参考：<a href="https://segmentfault.com/q/1010000000417103">https://segmentfault.com/q/1010000000417103</a></p><p><strong>拓展阅读</strong></p><p>Dockerfile官方文档：<a href="https://docs.docker.com/engine/reference/builder/#dockerfile-reference">https://docs.docker.com/engine/reference/builder/#dockerfile-reference</a><br>Dockerfile最佳实践：<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#build-cache">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&#x2F;#build-cache</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器命令</title>
      <link href="/2020/02/04/docker/Docker%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/04/docker/Docker%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/05-docker-command-containers/">《Docker系列教程05-容器常用命令》- 周立</a></p></blockquote><p>本节我们来讨论Docker容器的常用命令。</p><h2 id="新建并启动容器-重要"><a href="#新建并启动容器-重要" class="headerlink" title="新建并启动容器[重要]"></a>新建并启动容器[重要]</h2><p>使用以下 <code>docker run</code> 命令即可新建并启动一个容器。该命令是我们最常用的命令了，它有很多选项，下面笔者列举一些常用的选项。</p><p>① -d选项：表示后台运行</p><p>② -P选项：随机端口映射</p><p>③ -p选项：指定端口映射，有以下四种格式。</p><p>ip:hostPort:containerPort</p><p>ip::containerPort</p><p>hostPort:containerPort</p><p>containerPort</p><p>④ –network选项：指定网络模式，该选项有以下可选参数：</p><p>–network&#x3D;bridge： 默认选项，表示连接到默认的网桥。</p><p>–network&#x3D;host：容器使用宿主机的网络。</p><p>–network&#x3D;container:NAME_or_ID：告诉Docker让新建的容器使用已有容器的网络配置。</p><p>–network&#x3D;none：不配置该容器的网络，用户可自定义网络配置。</p><p>示例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run java /bin/echo <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure><p>这样终端会打印Hello World的字样，跟在本地直接执行 <code>/bin/echo &#39;Hello World&#39;</code> 一样。</p><p>示例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 91:80 nginx</span><br></pre></td></tr></table></figure><p>这样就能启动一个Nginx容器。在本例中，我们为docker run添加了两个参数，含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-d                           # 后台运行</span><br><span class="line">-p 宿主机端口:容器端口         # 开放容器端口到宿主机端口</span><br></pre></td></tr></table></figure><p>访问 <a href="http://docker宿主机ip:91/">http://Docker宿主机IP:91/</a> ，将会看到如图12-3的界面：</p><p><img src="http://www.itmuch.com/images/docker/12-3.png" alt="Nginx首页"></p><p>图12-3 Nginx首页</p><p><strong>TIPS</strong></p><p>需要注意的是，使用docker run命令创建容器时，会先检查本地是否存在指定镜像。如果本地不存在该名称的镜像，Docker就会自动从Docker Hub下载镜像并启动一个Docker容器。</p><h2 id="列出容器-重要"><a href="#列出容器-重要" class="headerlink" title="列出容器[重要]"></a>列出容器[重要]</h2><p>使用 <code>docker ps</code> 命令即可列出运行中的容器。执行该命令后，可看到类似于如下的表格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">784fd3b294d7        nginx               &quot;nginx -g &#x27;daemon off&quot;   20 minutes ago      Up 2 seconds        443/tcp, 0.0.0.0:91-&gt;80/tcp   backstabbing_archimedes</span><br></pre></td></tr></table></figure><p>如需列出所有容器（包括已停止的容器），可使用-a参数。</p><p>该表格包含了七列，含义如下：</p><p>① CONTAINER_ID：表示容器ID。</p><p>② IMAGE：表示镜像名称。</p><p>③ COMMAND：表示启动容器时运行的命令。</p><p>④ CREATED：表示容器的创建时间。</p><p>⑤ STATUS：表示容器运行的状态。Up表示运行中，Exited表示已停止。</p><p>⑥ PORTS：表示容器对外的端口号。</p><p>⑦ NAMES：表示容器名称。该名称默认由Docker自动生成，也可使用docker run命令的–name选项自行指定。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–all, -a</td><td>false</td><td>列出所有容器，包括未运行的容器，默认只展示运行的容器</td></tr><tr><td>–filter, -f</td><td></td><td>根据条件过滤显示内容</td></tr><tr><td>–format</td><td></td><td>通过Go语言模板文件展示镜像</td></tr><tr><td>–last, -n</td><td>-1</td><td>显示最近创建n个容器（包含所有状态）</td></tr><tr><td>–latest, -l</td><td>false</td><td>显示最近创建的容器（包含所有状态）</td></tr><tr><td>–no-trunc</td><td>false</td><td>不截断输出</td></tr><tr><td>–quiet, -q</td><td>false</td><td>静默模式，只展示容器的编号</td></tr><tr><td>–size, -s</td><td>false</td><td>显示总文件大小</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps -n 5</span><br><span class="line">docker ps -a -q</span><br></pre></td></tr></table></figure><h2 id="停止容器-重要"><a href="#停止容器-重要" class="headerlink" title="停止容器[重要]"></a>停止容器[重要]</h2><p>使用 <code>docker stop</code> 命令，即可停止容器。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–time, -t</td><td>10</td><td>强制杀死容器前等待的时间，单位是秒</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 784fd3b294d7</span><br></pre></td></tr></table></figure><p>其中784fd3b294d7 是容器ID，当然也可使用 <code>docker stop 容器名称</code> 来停止指定容器。</p><h2 id="强制停止容器-重要"><a href="#强制停止容器-重要" class="headerlink" title="强制停止容器[重要]"></a>强制停止容器[重要]</h2><p>可使用 <code>docker kill</code> 命令停止一个或更多运行着的容器。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–signal, -s</td><td>KILL</td><td>向容器发送一个信号</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> 784fd3b294d7</span><br></pre></td></tr></table></figure><h2 id="启动已停止的容器-重要"><a href="#启动已停止的容器-重要" class="headerlink" title="启动已停止的容器[重要]"></a>启动已停止的容器[重要]</h2><p>使用 <code>docker run</code> 命令，即可新建并启动一个容器。对于已停止的容器，可使用 <code>docker start</code> 命令来启动。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–attach, -a</td><td>false</td><td>连接STDOUT&#x2F;STDERR并转发信号</td></tr><tr><td>–checkpoint</td><td></td><td>从该检查点还原</td></tr><tr><td>–checkpoint-dir</td><td></td><td>使用自定义的检查点存储目录</td></tr><tr><td>–detach-keys</td><td></td><td>覆盖断开容器的关键顺序</td></tr><tr><td>–interactive, -i</td><td>false</td><td>连接容器的STDIN</td></tr></tbody></table><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 784fd3b294d7</span><br></pre></td></tr></table></figure><h2 id="重启容器-重要"><a href="#重启容器-重要" class="headerlink" title="重启容器[重要]"></a>重启容器[重要]</h2><p>可使用 <code>docker restart</code> 命令来重启容器。该命令实际上是先执行了 <code>docker stop</code> 命令，然后执行了 <code>docker start</code> 命令。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–time, -t</td><td>10</td><td>关闭容器前等待的时间，单位是秒</td></tr></tbody></table><h2 id="进入容器-重要"><a href="#进入容器-重要" class="headerlink" title="进入容器[重要]"></a>进入容器[重要]</h2><p>某场景下，我们可能需要进入运行中的容器。</p><p>① 使用 <code>docker attach</code> 命令进入容器。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach 784fd3b294d7</span><br></pre></td></tr></table></figure><p>很多场景下，使用 <code>docker attach</code> 命令并不方便。当多个窗口同时attach到同一个容器时，所有窗口都会同步显示。同理，如果某个窗口发生阻塞，其他窗口也无法执行操作。</p><p>② 使用 <code>nsenter</code> 进入容器</p><p>nsenter工具包含在util-linux 2.23或更高版本中。为了连接到容器，我们需要找到容器第一个进程的PID，可通过以下命令获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format <span class="string">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class="variable">$CONTAINER_ID</span></span><br></pre></td></tr></table></figure><p>获得PID后，就可使用nsenter命令进入容器了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter --target <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><p>下面给出一个完整的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                         NAMES</span><br><span class="line">784fd3b294d7        nginx               <span class="string">&quot;nginx -g &#x27;daemon off&quot;</span>   55 minutes ago      Up 3 minutes        443/tcp, 0.0.0.0:91-&gt;80/tcp   backstabbing_archimedes</span><br><span class="line">[root@localhost ~]<span class="comment"># docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; 784fd3b294d7</span></span><br><span class="line">95492</span><br><span class="line">[root@localhost ~]<span class="comment"># nsenter --target 95492 --mount --uts --ipc --net --pid</span></span><br><span class="line">root@784fd3b294d7:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>读者也可将以上两条命令封装成一个Shell，从而简化进入容器的过程。</p><p>③ docker exec</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> /bin/bash</span><br></pre></td></tr></table></figure><h2 id="删除容器-重要"><a href="#删除容器-重要" class="headerlink" title="删除容器[重要]"></a>删除容器[重要]</h2><p>使用 <code>docker rm</code> 命令即可删除指定容器。</p><p>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–force, -f</td><td>false</td><td>通过SIGKILL信号强制删除正在运行中的容器</td></tr><tr><td>–link, -l</td><td>false</td><td>删除容器间的网络连接</td></tr><tr><td>–volumes, -v</td><td>false</td><td>删除与容器关联的卷</td></tr></tbody></table><p>例1：删除指定容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 784fd3b294d7</span><br></pre></td></tr></table></figure><p>该命令只能删除已停止的容器，如需删除正在运行的容器，可使用-f参数。</p><p>例2：删除所有的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h2><p>将容器导出成一个压缩包文件。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–output, -o</td><td></td><td>将内容写到文件而非STDOUT</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> red_panda &gt; latest.tar</span><br><span class="line">docker <span class="built_in">export</span> --output=<span class="string">&quot;latest.tar&quot;</span> red_panda</span><br></pre></td></tr></table></figure><h2 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h2><p>使用 <code>docker import</code> 命令即可从归档文件导入内容并创建镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–change, -c</td><td></td><td>将Dockerfile指令应用到创建的镜像</td></tr><tr><td>–message, -m</td><td></td><td>为导入的镜像设置提交信息</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import nginx2.tar nginx</span><br></pre></td></tr></table></figure><p><strong>拓展阅读</strong></p><p>Docker的网络：<a href="https://docs.docker.com/engine/userguide/networking/">https://docs.docker.com/engine/userguide/networking/</a><br>Docker命令：<a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose.yml命令</title>
      <link href="/2020/02/04/docker/docker-compose-yml%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/04/docker/docker-compose-yml%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose-yml命令"><a href="#docker-compose-yml命令" class="headerlink" title="docker-compose.yml命令"></a>docker-compose.yml命令</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/22-docker-compose-yml-commands/">《Docker系列教程22-docker-compose.yml常用命令》- 周立</a></p></blockquote><p>docker-compose.yml是Compose的默认模板文件。该文件有多种写法，例如Version 1 file format、Version 2 file format、Version 2.1 file format、Version 3 file format等。其中，Version 1 file format将逐步被被弃用；Version 2.x及Version 3.x基本兼容，是未来的趋势。考虑到目前业界的使用情况，本节只讨论Version 2 file format下的常用命令。</p><h2 id="1-build"><a href="#1-build" class="headerlink" title="(1) build"></a>(1) build</h2><p>配置构建时的选项，Compose会利用它自动构建镜像。build的值可以是一个路径，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>也可以是一个对象，用于指定Dockerfile和参数，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-command"><a href="#2-command" class="headerlink" title="(2) command"></a>(2) command</h2><p>覆盖容器启动后默认执行的命令。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>也可以是一个list，类似于Dockerfile中的CMD指令，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">bundle</span>, <span class="string">exec</span>, <span class="string">thin</span>, <span class="string">-p</span>, <span class="number">3000</span>]</span><br></pre></td></tr></table></figure><h2 id="3-dns"><a href="#3-dns" class="headerlink" title="(3) dns"></a>(3) dns</h2><p>配置dns服务器。可以是一个值，也可以是一个列表。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure><h2 id="4-dns-search"><a href="#4-dns-search" class="headerlink" title="(4) dns_search"></a>(4) dns_search</h2><p>配置DNS的搜索域名，可以是一个值，也可以是一个列表。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dc1.example.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dc2.example.com</span></span><br></pre></td></tr></table></figure><h2 id="5-environment"><a href="#5-environment" class="headerlink" title="(5) environment"></a>(5) environment</h2><p>环境变量设置，可使用数组或字典两种方式。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><h2 id="6-env-file"><a href="#6-env-file" class="headerlink" title="(6) env_file"></a>(6) env_file</h2><p>从文件中获取环境变量，可指定一个文件路径或路径列表。如果通过 <code>docker-compose -f FILE</code> 指定了Compose文件，那么env_file中的路径是Compose文件所在目录的相对路径。使用environment指定的环境变量会覆盖env_file指定的环境变量。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./common.env</span>   <span class="comment"># 共用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./apps/web.env</span> <span class="comment"># web用</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/secrets.env</span> <span class="comment"># 密码用</span></span><br></pre></td></tr></table></figure><h2 id="7-expose"><a href="#7-expose" class="headerlink" title="(7) expose"></a>(7) expose</h2><p>暴露端口，只将端口暴露给连接的服务，而不暴露给宿主机。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8-external-links"><a href="#8-external-links" class="headerlink" title="(8) external_links"></a>(8) external_links</h2><p>连接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是提供共享或公共服务的容器。格式跟links类似，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">external_links:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">redis_1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:postgresql</span></span><br></pre></td></tr></table></figure><h2 id="9-image"><a href="#9-image" class="headerlink" title="(9) image"></a>(9) image</h2><p>指定镜像名称或镜像id，如果本地不存在该镜像，Compose会尝试下载该镜像。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">java</span></span><br></pre></td></tr></table></figure><h2 id="10-links"><a href="#10-links" class="headerlink" title="(10) links"></a>(10) links</h2><p>连接到其他服务的容器。可以指定服务名称和服务别名（ <code>SERVICE:ALIAS</code> ），也可只指定服务名称。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">db:database</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><h2 id="11-networks"><a href="#11-networks" class="headerlink" title="(11) networks"></a>(11) networks</h2><p>详见本书《Docker Compose网络设置》一节。</p><h2 id="12-network-mode"><a href="#12-network-mode" class="headerlink" title="(12) network_mode"></a>(12) network_mode</h2><p>设置网络模式。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;host&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;service:[service name]&quot;</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">&quot;container:[container name/id]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="13-ports"><a href="#13-ports" class="headerlink" title="(13) ports"></a>(13) ports</h2><p>暴露端口信息，可使用 <code>HOST:CONTAINER</code> 的格式，也可只指定容器端口（此时宿主机将会随机选择端口），类似于 <code>docker run -p</code>。</p><p>需要注意的是，当使用 <code>HOST:CONTAINER</code> 格式映射端口时，容器端口小于60将会得到错误的接口，因为yaml会把 <code>xx:yy</code> 的数字解析为60进制。因此，建议使用字符串的形式。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000-3005&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;9090-9091:8080-8081&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br></pre></td></tr></table></figure><h2 id="14-volumes"><a href="#14-volumes" class="headerlink" title="(14) volumes"></a>(14) volumes</h2><p>卷挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） ，也可指定访问模式 （<code>HOST:CONTAINER:ro</code>）。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="comment"># Just specify a path and let the Engine create a volume</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">  <span class="comment"># Specify an absolute path mapping</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/data:/var/lib/mysql</span></span><br><span class="line">  <span class="comment"># Path on the host, relative to the Compose file</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./cache:/tmp/cache</span></span><br><span class="line">  <span class="comment"># User-relative path</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br><span class="line">  <span class="comment"># Named volume</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">datavolume:/var/lib/mysql</span></span><br></pre></td></tr></table></figure><h2 id="15-volumes-from"><a href="#15-volumes-from" class="headerlink" title="(15) volumes_from"></a>(15) volumes_from</h2><p>从另一个服务或容器挂载卷。可指定只读（ro）或读写（rw），默认是读写（rw）。示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes_from:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">service_name</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">service_name:ro</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">container:container_name</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">container:container_name:rw</span></span><br></pre></td></tr></table></figure><p><strong>TIPS</strong><br>docker-compose.yml还有很多其他命令，比如depends_on、pid、devices等。限于篇幅，笔者仅挑选常用的命令进行讲解，其他命令不作赘述。感兴趣的读者们可参考官方文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 容器编排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose命令</title>
      <link href="/2020/02/04/docker/docker-compose%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/04/docker/docker-compose%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/23-docker-compose-commands/">《Docker系列教程23-docker-compose常用命令》- 周立</a></p></blockquote><p>和docker命令一样，docker-compose命令也有很多选项。下面我们来详细探讨docker-compose的常用命令。</p><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>构建或重新构建服务。服务被构建后将会以project_service 的形式标记，例如：composetest_db 。</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>查看指定命令的帮助文档，该命令非常实用。docker-compose所有命令的帮助文档都可通过该命令查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">help</span> COMMAND</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">help</span> build<span class="comment"># 查看docker-compose build的帮助</span></span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>通过发送SIGKILL 信号停止指定服务的容器。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">kill</span> eureka</span><br></pre></td></tr></table></figure><p>该命令也支持通过参数来指定发送的信号，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><p>查看服务的日志输出。</p><h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><p>打印绑定的公共端口。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose port eureka 8761</span><br></pre></td></tr></table></figure><p>这样就可输出eureka服务8761端口所绑定的公共端口。</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>列出所有容器。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p>也可列出指定服务的容器，示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps eureka</span><br></pre></td></tr></table></figure><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>下载服务镜像。</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除指定服务的容器。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">rm</span> eureka</span><br></pre></td></tr></table></figure><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>在一个服务上执行一个命令。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run web bash</span><br></pre></td></tr></table></figure><p>这样即可启动一个web服务，同时执行bash命令。</p><h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><p>设置指定服务运行容器的个数，以service&#x3D;num的形式指定。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose scale user=3 movie=3</span><br></pre></td></tr></table></figure><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>启动指定服务已存在的容器。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose start eureka</span><br></pre></td></tr></table></figure><h2 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h2><p>停止已运行的容器。示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop eureka</span><br></pre></td></tr></table></figure><p>停止后，可使用 <code>docker-compose start</code> 再次启动这些容器。</p><h2 id="up"><a href="#up" class="headerlink" title="up"></a>up</h2><p>构建、创建、重新创建、启动，连接服务的相关容器。所有连接的服务都会启动，除非它们已经运行。</p><p><code>docker-compose up</code> 命令会聚合所有容器的输出，当命令退出时，所有容器都会停止。</p><p>使用 <code>docker-compose up -d</code> 可在后台启动并运行所有容器。</p><p>TIPS<br>(1) 本节仅讨论常用的docker-compose命令，其他命令可详见Docker官方文档：<a href="https://docs.docker.com/compose/reference/overview/">https://docs.docker.com/compose/reference/overview/</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 容器编排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像命令</title>
      <link href="/2020/02/04/docker/docker-image/"/>
      <url>/2020/02/04/docker/docker-image/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/04-docker-command-images/">《Docker系列教程04-Docker镜像常用命令》- 周立</a></p></blockquote><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>可使用 <code>docker search</code> 命令搜索存放在Docker Hub中的镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–automated</td><td>false</td><td>只列出自动构建的镜像</td></tr><tr><td>–filter, -f</td><td></td><td>根据指定条件过滤结果</td></tr><tr><td>–limit</td><td>25</td><td>搜索结果的最大条数</td></tr><tr><td>–no-trunc</td><td>false</td><td>不截断输出，显示完整的输出</td></tr><tr><td>–stars, -s</td><td>0</td><td>只展示Star不低于该数值的结果</td></tr></tbody></table><p>示例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search java</span><br></pre></td></tr></table></figure><p>执行该命令后，Docker就会在Docker Hub中搜索含有“java”这个关键词的镜像仓库。执行该命令后，可看到类似于如下的表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NAME                    DESCRIPTION                STARS     OFFICIAL   AUTOMATED</span><br><span class="line">java                    Java is a concurrent, ...   1281      [OK]       </span><br><span class="line">anapsix/alpine-java     Oracle Java 8 (and 7) ...   190                  [OK]</span><br><span class="line">isuper/java-oracle      This repository conta ...   48                   [OK]</span><br><span class="line">lwieske/java-8          Oracle Java 8 Contain ...   32                   [OK]</span><br><span class="line">nimmis/java-centos      This is docker images ...   23                   [OK]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>该表格包含五列，含义如下：</p><p>① NAME：镜像仓库名称。</p><p>② DESCRIPTION：镜像仓库描述。</p><p>③ STARS：镜像仓库收藏数，表示该镜像仓库的受欢迎程度，类似于GitHub的Stars。</p><p>④ OFFICAL：表示是否为官方仓库，该列标记为[OK]的镜像均由各软件的官方项目组创建和维护。由结果可知，java这个镜像仓库是官方仓库，而其他的仓库都不是镜像仓库。</p><p>⑤ AUTOMATED：表示是否是自动构建的镜像仓库。</p><p>示例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search -s 10 java</span><br></pre></td></tr></table></figure><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像 *"></a>下载镜像 *</h2><p>使用命令 <code>docker pull</code> 命令即可从Docker Registry上下载镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–all-tags, -a</td><td>false</td><td>下载所有标签的镜像</td></tr><tr><td>–disable-content-trust</td><td>true</td><td>忽略镜像的校验</td></tr></tbody></table><p>示例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java</span><br></pre></td></tr></table></figure><p>执行该命令后，Docker会从Docker Hub中的java仓库下载最新版本的Java镜像。</p><p>示例2：</p><p>该命令还可指定想要下载的镜像标签以及Docker Registry地址，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull reg.itmuch.com/java:7</span><br></pre></td></tr></table></figure><p>这样就可以从指定的Docker Registry中下载标签为7的Java镜像。</p><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像 *"></a>列出镜像 *</h2><p>使用 <code>docker images</code> 命令即可列出已下载的镜像。</p><p>执行该命令后，将会看到类似于如下的表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">java                latest              861e95c114d6        4 weeks ago         643.1 MB</span><br><span class="line">hello-world         latest              c54a2cc56cbb        5 months ago        1.848 kB</span><br></pre></td></tr></table></figure><p>该表格包含了5列，含义如下：</p><p>① REPOSITORY：镜像所属仓库名称。</p><p>② TAG：镜像标签。默认是latest，表示最新。</p><p>③ IMAGE ID：镜像ID，表示镜像唯一标识。</p><p>④ CREATED：镜像创建时间。</p><p>⑤ SIZE：镜像大小。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–all, -a</td><td>false</td><td>列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）</td></tr><tr><td>–digests</td><td>false</td><td>显示摘要信息</td></tr><tr><td>–filter, -f</td><td></td><td>显示满足条件的镜像</td></tr><tr><td>–format</td><td></td><td>通过Go语言模板文件展示镜像</td></tr><tr><td>–no-trunc</td><td>false</td><td>不截断输出，显示完整的镜像信息</td></tr><tr><td>–quiet, -q</td><td>false</td><td>只显示镜像ID</td></tr></tbody></table><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images java</span><br><span class="line">docker images java:8</span><br><span class="line">docker images --digests</span><br><span class="line">docker images --filter <span class="string">&quot;dangling=true&quot;</span>   <span class="comment"># 展示虚悬镜像</span></span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像 *"></a>删除本地镜像 *</h2><p>使用 <code>docker rmi</code> 命令即可删除指定镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–force, -f</td><td>false</td><td>强制删除</td></tr><tr><td>–no-prune</td><td>false</td><td>不移除该镜像的过程镜像，默认移除</td></tr></tbody></table><p>例1：删除指定名称的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><p>表示删除hello-world这个镜像。</p><p>例2：删除所有镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images)</span><br></pre></td></tr></table></figure><p>-f参数表示强制删除。</p><h2 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h2><p>使用 <code>docker save</code> 即可保存镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–output, -o</td><td></td><td>Write to a file, instead of STDOUT</td></tr></tbody></table><p>例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save busybox &gt; busybox.tar</span><br><span class="line">docker save --output busybox.tar busybox</span><br></pre></td></tr></table></figure><h2 id="加载镜像"><a href="#加载镜像" class="headerlink" title="加载镜像"></a>加载镜像</h2><p>使用 <code>docer load</code> 命令即可加载镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load [OPTIONS]</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–input, -i</td><td></td><td>从文件加载而非STDIN</td></tr><tr><td>–quiet, -q</td><td>false</td><td>静默加载</td></tr></tbody></table><p>例1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; busybox.tar.gz</span><br><span class="line">docker load --input fedora.tar</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像 *"></a>构建镜像 *</h2><p>通过Dockerfile构建镜像。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称，缩写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–add-host</td><td></td><td>添加自定义从host到IP的映射，格式为（host:ip）</td></tr><tr><td>–build-arg</td><td></td><td>设置构建时的变量</td></tr><tr><td>–cache-from</td><td></td><td>作为缓存源的镜像</td></tr><tr><td>–cgroup-parent</td><td></td><td>容器可选的父cgroup</td></tr><tr><td>–compress</td><td>false</td><td>使用gzip压缩构建上下文</td></tr><tr><td>–cpu-period</td><td>0</td><td>限制CPU CFS (Completely Fair Scheduler) 周期</td></tr><tr><td>–cpu-quota</td><td>0</td><td>限制CPU CFS (Completely Fair Scheduler) 配额</td></tr><tr><td>–cpu-shares, -c</td><td>0</td><td>CPU使用权重（相对权重）</td></tr><tr><td>–cpuset-cpus</td><td></td><td>指定允许执行的CPU</td></tr><tr><td>–cpuset-mems</td><td></td><td>指定允许执行的内存</td></tr><tr><td>–disable-content-trust</td><td>true</td><td>忽略校验</td></tr><tr><td>–file, -f</td><td></td><td>指定Dockerfile的名称，默认是‘PATH&#x2F;Dockerfile’</td></tr><tr><td>–force-rm</td><td>false</td><td>删除中间容器</td></tr><tr><td>–iidfile</td><td></td><td>将镜像ID写到文件中</td></tr><tr><td>–isolation</td><td></td><td>容器隔离技术</td></tr><tr><td>–label</td><td></td><td>设置镜像使用的元数据</td></tr><tr><td>–memory, -m</td><td>0</td><td>设置内存限制</td></tr><tr><td>–memory-swap</td><td>0</td><td>设置Swap的最大值为内存+swap，如果设置为-1表示不限swap</td></tr><tr><td>–network</td><td>default</td><td>在构建期间设置RUN指令的网络模式</td></tr><tr><td>–no-cache</td><td>false</td><td>构建镜像过程中不使用缓存</td></tr><tr><td>–pull</td><td>false</td><td>总是尝试去更新镜像的新版本</td></tr><tr><td>–quiet, -q</td><td>false</td><td>静默模式，构建成功后只输出镜像ID</td></tr><tr><td>–rm</td><td>true</td><td>构建成功后立即删除中间容器</td></tr><tr><td>–security-opt</td><td></td><td>安全选项</td></tr><tr><td>–shm-size</td><td>0</td><td>指定&#x2F;dev&#x2F;shm 目录的大小</td></tr><tr><td>–squash</td><td>false</td><td>将构建的层压缩成一个新的层</td></tr><tr><td>–tag, -t</td><td></td><td>设置标签，格式：name:tag，tag可选</td></tr><tr><td>–target</td><td></td><td>设置构建时的目标构建阶段</td></tr><tr><td>–ulimit</td><td></td><td>Ulimit 选项</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Docker</title>
      <link href="/2020/02/04/docker/%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2020/02/04/docker/%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><blockquote><p>引用自<a href="http://www.itmuch.com/docker/02-docker-install/">《Docker系列教程02-Docker安装》- 周立</a></p></blockquote><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li><p>Docker支持以下版本的Ubuntu，要求64位。</p><ul><li>Bionic Beaver 18.04 (LTS)</li><li>Zesty 17.04</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)</li></ul></li><li><p>支持运行的平台：<code>x86_64</code>、<code>armhf</code>、<code>s390x(IBM Z)</code>。其中，如选择IBM Z，那么只支持Ubuntu Xenial以及Zesty。</p></li><li><p>本文使用Ubuntu 16.04 LTS，下载地址：<a href="http://cn.ubuntu.com/download/">http://cn.ubuntu.com/download/</a></p></li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>卸载老版本Docker</li></ol><p>在Ubuntu中，老版本的软件包名称是 <code>docker</code> 或者 <code>docker-engine</code> ，而Docker CE的软件包名称是 <code>docker-ce</code>。因此，如已安装过老版本的Docker，需要先卸载掉。执行以下命令，即可卸载老版本的Docker及其依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io</span><br></pre></td></tr></table></figure><p>需要注意的是，执行该命令只会卸载Docker本身，而不会删除Docker内容，例如镜像、容器、卷以及网络。这些文件保存在 <code>/var/lib/docker</code> 目录中，需要手动删除。</p><ol><li>Ubuntu Trusty 14.04 额外建议安装的包</li></ol><p>除非你有不得已的苦衷，否则强烈建议安装 <code>linux-image-extra-*</code> 软件包，以便于Docker使用 <code>aufs</code> 存储驱动。执行如下命令，即可安装 <code>linux-image-extra-*</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    linux-image-extra-$(<span class="built_in">uname</span> -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><p>对于Ubuntu 16.04或更高版本，Linux内核包含了对OverlayFS的支持，Docker CE默认会使用 <code>overlay2</code> 存储驱动。</p><ol start="2"><li><p>安装仓库</p><ul><li><p>执行如下命令，更新 <code>apt</code> 的包索引。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令，从而允许 <code>apt</code> 使用HTTPS仓库。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加Docker官方的GPG key</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>  确认指纹是9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令，安装 <code>stable</code> 仓库。无论如何都必须安装 <code>stable</code> 仓库，即使你想安装 <code>edge</code> 或 <code>test</code> 仓库中的Docker构建。如需添加 <code>edge</code> 或 <code>test</code> 仓库，可在如下命令中的“stable” 后，添加 <code>edge</code> 或 <code>test</code> 或两者。请视自己Ubuntu所运行的平台来执行如下命令。<br> NOTE：如下命令中的 <code>lsb_release -cs</code> 子命令用于返回您Ubuntu的发行版名称，例如 <code>xenial</code> 。有时，在例如Linux Mint这样的发行版中，您可能需要将如下命令中的 <code>$(lsb_release -cs)</code> 更改为系统的父级Ubuntu发行版。例如，如果您使用的是Linux Mint Rafaela，则可以使用 <code>trusty</code>。</p><ul><li><p>amd64</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>armhf</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>s390x</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">    <span class="string">&quot;deb [arch=s390x] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">    <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>  <strong>NOTE：</strong> 从Docker 17.06起，stable版本也会发布到edge以及test仓库中。</p></li></ul></li><li><p>安装Docker CE</p><ul><li><p>执行如下命令，更新 <code>apt</code> 包索引。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令，即可安装最新版本的Docker CE。任何已存在的Docker将会被覆盖安装。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p>  <strong>WARNING：</strong> 如启用了多个Docker仓库，使用命令apt-get install 或apt-get update 命令安装或升级时，如未指定版本，那么将会安装最新的版本。这可能不适合您的稳定性要求。</p></li><li><p>在生产环境中，我们可能需要指定想要安装的版本，此时可使用如下命令列出当前可用的Docker版本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br></pre></td></tr></table></figure><p>  这样，列出版本后，可使用如下命令，安装想要安装的Docker CE版本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce=&lt;VERSION&gt;</span><br></pre></td></tr></table></figure><p>  Docker daemon会自动启动。</p></li><li><p>验证安装是否正确。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ul></li><li><p>升级Docker CE</p></li></ol><p>如需升级Docker CE，只需执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>然后按照安装Docker的步骤，即可升级Docker。</p><ol start="5"><li>参考文档</li></ol><p>Ubuntu安装Docker官方文档：<a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/">https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/</a> ，文档还讲解了在Ubuntu中安装Docker CE的其他方式，本文不作赘述。</p><h2 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h2><h3 id="系统要求-1"><a href="#系统要求-1" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li><p>CentOS 7或更高版本</p></li><li><p>centos-extras 仓库必须处于启用状态，该仓库默认启用，但如果您禁用了该仓库，请按照<a href="https://wiki.centos.org/AdditionalResources/Repositories">https://wiki.centos.org/AdditionalResources/Repositories</a>中的描述重新启用。</p></li><li><p>建议使用overlay2 存储驱动</p></li></ul><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><ol><li>卸载老版本的Docker</li></ol><p>在CentOS中，老版本Docker名称是 <code>docker</code> 或 <code>docker-engine</code>，而Docker CE的软件包名称是 <code>docker-ce</code>。因此，如已安装过老版本的Docker，需使用如下命令卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">docker-common \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure><p>需要注意的是，执行该命令只会卸载Docker本身，而不会删除Docker存储的文件，例如镜像、容器、卷以及网络文件等。这些文件保存在 <code>/var/lib/docker</code> 目录中，需要手动删除。</p><ol start="2"><li><p>安装仓库</p><ul><li><p>执行以下命令，安装Docker所需的包。其中，<code>yum-utils</code>提供了 <code>yum-config-manager</code> 工具；<code>device-mapper-persistent-data</code> 及 <code>lvm2</code> 则是 <code>devicemapper</code> 存储驱动所需的包。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令，安装 <code>stable</code> 仓库。必须安装 <code>stable</code> 仓库，即使你想安装 <code>edge</code> 或 <code>test</code> 仓库中的Docker构建版本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>[可选] 执行如下命令，启用 <code>edge</code> 及 <code>test</code> 仓库。edge&#x2F;test仓库其实也包含在了 <code>docker.repo</code> 文件中，但默认是禁用的，可使用以下命令来启用。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-edge    <span class="comment"># 启用edge仓库</span></span><br><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test    <span class="comment"># 启用test仓库</span></span><br></pre></td></tr></table></figure><p>  如需再次禁用，可加上 <code>--disable</code> 标签。例如，执行如下命令即可禁用edge仓库。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">disable</span> docker-ce-edge</span><br></pre></td></tr></table></figure><p>  <strong>TIPS：</strong> 从Docker 17.06起，stable版本也会发布到edge以及test仓库中。</p></li></ul></li><li><p>安装Docker CE</p><ul><li><p>执行以下命令，更新yum的包索引</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>执行如下命令即可安装最新版本的Docker CE</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>在生产环境中，可能需要指定想要安装的版本，此时可使用如下命令列出当前可用的Docker版本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64  --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure><p>  这样，列出版本后，可使用如下命令，安装想要安装的Docker CE版本。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce-&lt;VERSION&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动Docker</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>验证安装是否正确。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>  这样，Docker将会下载测试镜像，并使用该镜像启动一个容器。如能够看到类似如下的输出，则说明安装成功。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b04784fba78d: Pull complete</span><br><span class="line">Digest: sha256:f3b3b28a45160805bb16542c9531888519430e9e6d6ffc09d72261b0d26ff74f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line">1. The Docker client contacted the Docker daemon.</span><br><span class="line">2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line">4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line">$ docker run -it ubuntu bash</span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line">https://cloud.docker.com/</span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line">https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>升级Docker CE</p></li></ol><p>如需升级Docker CE，只需执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p>然后按照安装Docker的步骤，即可升级Docker。</p><ol start="5"><li>参考文档</li></ol><p>CentOS 7安装Docker官方文档：<a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/">https://docs.docker.com/engine/installation/linux/docker-ce/centos/</a>，文档中还讲解了在CentOS 7中安装Docker CE的其他方式，本文不作赘述。</p><h3 id="shell一键安装"><a href="#shell一键安装" class="headerlink" title="shell一键安装"></a>shell一键安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><p>搞定一切。</p><h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><h3 id="系统要求-2"><a href="#系统要求-2" class="headerlink" title="系统要求"></a>系统要求</h3><p>macOS Yosemite 10.10.3或更高版本</p><h3 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>前往<a href="https://store.docker.com/editions/community/docker-ce-desktop-mac">https://store.docker.com/editions/community/docker-ce-desktop-mac</a>，点击页面右侧的“Get Docker”按钮，下载安装包；</p></li><li><p>双击即可安装。</p></li></ol><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="系统要求-3"><a href="#系统要求-3" class="headerlink" title="系统要求"></a>系统要求</h3><p>Windows 10 Professional 或 Windows 10 Enterprise X64</p><p>对于Win 7，可使用Docker Toolbox（不建议使用）</p><h3 id="安装步骤-2"><a href="#安装步骤-2" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>前往<a href="https://store.docker.com/editions/community/docker-ce-desktop-windows">https://store.docker.com/editions/community/docker-ce-desktop-windows</a>，点击页面右侧的“Get Docker”按钮，下载安装包；</p></li><li><p>双击即可安装。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫框架go_spider</title>
      <link href="/2020/02/04/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6go_spider/"/>
      <url>/2020/02/04/golang/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6go_spider/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目地址：<a href="https://github.com/hu17889/go_spider">https://github.com/hu17889/go_spider</a></p></blockquote><blockquote><p><a href="https://github.com/hu17889/go_spider/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3">go-spider文档</a></p></blockquote><blockquote><p><a href="https://github.com/hu17889/go_spider/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E">常见问题与功能说明</a></p></blockquote><h2 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a>中文文档</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本项目基于golang开发，是一个开放的垂直领域的爬虫框架，框架中将各个功能模块区分开，方便使用者重新实现子模块，进而构建自己垂直方方向的爬虫。</p><p>本项目将爬虫的各个功能流程区分成Spider模块（主控），Downloader模块（下载器），PageProcesser模块（页面分析），Scheduler模块（任务队列），Pipeline模块（结果输出）；</p><p><strong>执行过程简述</strong>：</p><ol><li>Spider模块从Scheduler模块中获取包含待抓取url的Request对象，启动一个协程，一个协程执行一次爬取过程，此处我们把协程也看成Spider，Spider把Request对象传入Downloader，Downloader下载该Request对象中url所对应的页面或者其他类型的数据，生成Page对象；</li><li>Spider调用PageProcesser模块解析Page对象中的页面数据，并存入Page对象中的PageItems中（以Key-Value对的形式保存），同时存入解析结果中的待抓取链接，Spider会将待抓取链接存入Scheduler模块中的Request队列中；</li><li>Spider调用Pipeline模块输出Page中的PageItems的结果;</li><li>执行步骤1，直至Scheduler中所有链接被处理完成，则Spider被挂起等待下一个待抓取链接或者终止。</li></ol><p><img src="https://raw.githubusercontent.com/hu17889/doc/master/go_spider/img/project.png" alt="image"></p><p>执行过程相应的Spider核心代码，代码代表一次爬取过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// core processer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Spider)</span></span> pageProcess(req *request.Request) &#123;</span><br><span class="line">    <span class="comment">// Get Page</span></span><br><span class="line">    p := this.pDownloader.Download(req)</span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parse Page</span></span><br><span class="line">    this.pPageProcesser.Process(p)</span><br><span class="line">    <span class="keyword">for</span> _, req := <span class="keyword">range</span> p.GetTargetRequests() &#123;</span><br><span class="line">        this.addRequest(req)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Output</span></span><br><span class="line">    <span class="keyword">if</span> !p.GetSkip() &#123;</span><br><span class="line">        <span class="keyword">for</span> _, pip := <span class="keyword">range</span> this.pPiplelines &#123;</span><br><span class="line">            pip.Process(p.GetPageItems(), this)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.sleep()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目安装与示例执行"><a href="#项目安装与示例执行" class="headerlink" title="项目安装与示例执行"></a>项目安装与示例执行</h3><ul><li>安装本包和依赖包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/hu17889/go_spider/...</span><br><span class="line">go get github.com/PuerkitoBio/goquery</span><br><span class="line">go get github.com/bitly/go-simplejson</span><br><span class="line">go get golang.org/x/net/html/charset</span><br></pre></td></tr></table></figure></li></ul><p><strong>示例执行：</strong></p><ul><li>编译：<code>go install github.com/hu17889/go_spider/example/github_repo_page_processor</code></li><li>执行：<code>./bin/github_repo_page_processor</code></li></ul><h3 id="展示一个简单爬虫示例"><a href="#展示一个简单爬虫示例" class="headerlink" title="展示一个简单爬虫示例"></a>展示一个简单爬虫示例</h3><p>示例的功能是爬取<a href="https://github.com/hu17889?tab=repositories">https://github.com/hu17889?tab=repositories</a>下面的项目以及项目详情页的相关信息，并将内容输出到标准输出。</p><p>一般在自己的爬虫main包中需要实现爬虫创建，初始化，以及PageProcesser模块的继承实现。可以实现自己的子模块或者使用项目中已经存在的子模块，通过Spider对象中相应的Set或者Add函数将模块引入爬虫。本项目支持<strong>链式调用</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spider.NewSpider(NewMyPageProcesser(), <span class="string">&quot;TaskName&quot;</span>).                <span class="comment">// 创建PageProcesser和Spider，设置任务名称</span></span><br><span class="line">    AddUrl(<span class="string">&quot;https://github.com/hu17889?tab=repositories&quot;</span>, <span class="string">&quot;html&quot;</span>). <span class="comment">// 加入初始爬取链接，需要设置爬取结果类型，方便找到相应的解析器</span></span><br><span class="line">    AddPipeline(pipeline.NewPipelineConsole()).                    <span class="comment">// 引入PipelineConsole输入结果到标准输出</span></span><br><span class="line">    SetThreadnum(<span class="number">3</span>).                                               <span class="comment">// 设置爬取参数：并发个数</span></span><br><span class="line">    Run()                                                          <span class="comment">// 开始执行</span></span><br></pre></td></tr></table></figure><ul><li><p>更多示例可参看<a href="https://github.com/hu17889/go_spider/tree/master/example">examples</a>。</p></li><li><p>具体模块的说明见<a href="#%E6%A8%A1%E5%9D%97">模块说明</a></p></li></ul><p>完整代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Packages must be imported:</span></span><br><span class="line"><span class="comment">    &quot;core/common/page&quot;</span></span><br><span class="line"><span class="comment">    &quot;core/spider&quot;</span></span><br><span class="line"><span class="comment">Pckages may be imported:</span></span><br><span class="line"><span class="comment">    &quot;core/pipeline&quot;: scawler result persistent;</span></span><br><span class="line"><span class="comment">    &quot;github.com/PuerkitoBio/goquery&quot;: html dom parser.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/hu17889/go_spider/core/common/page&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/hu17889/go_spider/core/pipeline&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/hu17889/go_spider/core/spider&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyPageProcesser <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMyPageProcesser</span><span class="params">()</span></span> *MyPageProcesser &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;MyPageProcesser&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse html dom here and record the parse result that we want to Page.</span></span><br><span class="line"><span class="comment">// Package goquery (http://godoc.org/github.com/PuerkitoBio/goquery) is used to parse html.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyPageProcesser)</span></span> Process(p *page.Page) &#123;</span><br><span class="line">    query := p.GetHtmlParser()</span><br><span class="line">    <span class="keyword">var</span> urls []<span class="type">string</span></span><br><span class="line">    query.Find(<span class="string">&quot;h3[class=&#x27;repo-list-name&#x27;] a&quot;</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">        href, _ := s.Attr(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">        urls = <span class="built_in">append</span>(urls, <span class="string">&quot;http://github.com/&quot;</span>+href)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// these urls will be saved and crawed by other coroutines.</span></span><br><span class="line">    p.AddTargetRequests(urls, <span class="string">&quot;html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    name := query.Find(<span class="string">&quot;.entry-title .author&quot;</span>).Text()</span><br><span class="line">    name = strings.Trim(name, <span class="string">&quot; \t\n&quot;</span>)</span><br><span class="line">    repository := query.Find(<span class="string">&quot;.entry-title .js-current-repository&quot;</span>).Text()</span><br><span class="line">    repository = strings.Trim(repository, <span class="string">&quot; \t\n&quot;</span>)</span><br><span class="line">    <span class="comment">//readme, _ := query.Find(&quot;#readme&quot;).Html()</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        p.SetSkip(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// the entity we want to save by Pipeline</span></span><br><span class="line">    p.AddField(<span class="string">&quot;author&quot;</span>, name)</span><br><span class="line">    p.AddField(<span class="string">&quot;project&quot;</span>, repository)</span><br><span class="line">    <span class="comment">//p.AddField(&quot;readme&quot;, readme)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// spider input:</span></span><br><span class="line">    <span class="comment">//  PageProcesser ;</span></span><br><span class="line">    <span class="comment">//  task name used in Pipeline for record;</span></span><br><span class="line">    spider.NewSpider(NewMyPageProcesser(), <span class="string">&quot;TaskName&quot;</span>).</span><br><span class="line">        AddUrl(<span class="string">&quot;https://github.com/hu17889?tab=repositories&quot;</span>, <span class="string">&quot;html&quot;</span>). <span class="comment">// start url, html is the responce type (&quot;html&quot; or &quot;json&quot;)</span></span><br><span class="line">        AddPipeline(pipeline.NewPipelineConsole()).                    <span class="comment">// print result on screen</span></span><br><span class="line">        SetThreadnum(<span class="number">3</span>).                                               <span class="comment">// crawl request by three Coroutines</span></span><br><span class="line">        Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h3><h4 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/spider">Spider</a></h4><p>用户一般无需自己实现。</p><p><strong>功能</strong>：完成爬虫初始化，如加入各个默认子模块，管理并发，调度其他模块以及相关参数设置。</p><p><strong>重要方法</strong>：</p><ul><li>爬取启动方法：Get，GetAll，Run</li><li>添加抓取链接: AddUrl, AddUrls, AddRequest, AddRequests</li><li>主模块选择方法：AddPipeline，SetScheduler，SetDownloader</li><li>参数设置：SetExitWhenComplete，SetThreadnum（设置爬虫并发数），SetSleepTime（设置爬取后的挂起时间）</li><li>监控方法：OpenFileLog，OpenFileLogDefault（打开日志文件，使用<a href="https://github.com/hu17889/go_spider/tree/master/core/common/mlog">mlog</a>包进行记录日志），CloseFileLog，OpenStrace（打开跟踪，打印了爬虫执行信息到stderr），CloseStrace</li></ul><h4 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/downloader">Downloader</a></h4><p>用户可选择自己实现。</p><p><strong>功能</strong>：Spider从Scheduler的Request队列中获取包含待抓取url的Request对象，传入Downloader，Downloader下载该Request对象中的url所对应的页面或者其他类型的数据，现在支持（html，json，jsonp，text）几种结果类型，生成Page对象，同时找到下载结果所对应的解析go包并生成解析器存入Page对象中，如html是<a href="https://github.com/PuerkitoBio/goquery">goquery包</a>，json数据是<a href="https://github.com/bitly/go-simplejson/blob/master/simplejson.go">simplejson包</a>，jsonp数据会转成json数据，text是只存储了返回的原始字符串。</p><p><strong>重要方法</strong></p><ul><li>Download 下载方法，返回包含下载内容（数据，header，cookies，request信息）的Page对象。</li></ul><h4 id="PageProcesser"><a href="#PageProcesser" class="headerlink" title="PageProcesser"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/page_processer">PageProcesser</a></h4><p>用户必须实现此模块。</p><p><strong>功能</strong>：这个模块主要做页面解析，用户需要在此处获取有用数据和下一步爬取的链接。PageProcesser的前后实现步骤如下：Spider调用PageProcesser模块解析页面中的数据，并存入Page对象中的PageItems对象中（以Key-Value对的形式保存），同时存入解析结果中的待抓取链接，Spider会将待抓取链接存入Scheduler模块中的Request队列中；所以用户可以根据自己的需求进行个性化实现爬虫解析功能。</p><p><strong>重要方法</strong></p><ul><li>Process，爬取对象解析</li></ul><h4 id="Page"><a href="#Page" class="headerlink" title="Page"></a><a href="https://github.com/hu17889/go_spider/tree/master/core/common/page">Page</a></h4><p>用户无需实现此模块。</p><p><strong>功能</strong>：记录当前爬取对象的各种信息。</p><p><strong>重要方法</strong></p><ul><li>获取爬取结果内容：GetJson，GetHtmlParser，GetBodyStr（原始内容）</li><li>获取爬取对象信息：GetRequest，GetCookies，GetHeader</li><li>爬取状态：IsSucc（是否爬取成功from Download模块），Errormsg（爬取错误信息from Download模块）</li><li>影响输出和后续爬取过程的方法：SetSkip，GetSkip（此次爬取结果不存储），AddTargetRequest，AddTargetRequests（设置待爬取链接），AddTargetRequestWithParams, AddTargetRequestsWithParams，AddField（保存解析内容的KV对）</li></ul><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/scheduler">Scheduler</a></h4><p>用户一般无需自己实现。</p><p><strong>功能</strong>：Scheduler实际上是一个Request对象队列，用来保存尚未被爬取的页面链接和相应的信息，当前队列是缓存到内存中（QueueScheduler），后续会增加基于Redis的队列，解决Spider异常失败后未爬取链接丢失问题；</p><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/pipeline">Pipeline</a></h4><p>用户可以选择自己实现。</p><p><strong>功能</strong>：此模块主要完成数据的输出与持久化。在PageProcesser模块中可用数据被存入了Page对象中的PageItems对象中，此处会获取PageItems的结果并按照自己的要求输出。已有的样例有：PipelineConsole（输出到标准输出），PipelineFile（输出到文件中）</p><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a><a href="http://godoc.org/github.com/hu17889/go_spider/core/common/request">Request</a></h4><p><strong>功能</strong>: 包含一次请求的各种设置，如url，header，cookies等；</p><h3 id="相关包以及推荐工具包"><a href="#相关包以及推荐工具包" class="headerlink" title="相关包以及推荐工具包"></a>相关包以及推荐工具包</h3><p><strong>存储</strong></p><ul><li><a href="https://github.com/go-sql-driver/mysql">mysql包 mysql</a>;</li><li><a href="https://github.com/garyburd/redigo">redis包 redigo</a></li></ul><p><strong>数据解析</strong></p><ul><li><p><a href="https://github.com/PuerkitoBio/goquery">html解析包 goquery</a></p></li><li><p><a href="https://github.com/bitly/go-simplejson">json解析包 go-simplejson</a></p></li><li><p><a href="https://gowalker.org/golang.org/x/text/encoding">字符串编码转换 encoding</a></p></li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>此项目的初始架构思路来自于JAVA爬虫项目<a href="https://github.com/code4craft/webmagic">webmagic</a>;<br>同时依赖于开源GOLANG包<a href="https://github.com/bitly/go-simplejson/blob/master/simplejson.go">simplejson包</a>，<a href="https://github.com/PuerkitoBio/goquery">goquery包</a>；<br>在此对以上开源项目表示感谢。</p><h2 id="常见问题与功能说明"><a href="#常见问题与功能说明" class="headerlink" title="常见问题与功能说明"></a>常见问题与功能说明</h2><ul><li><a href="#%E7%88%AC%E8%99%AB%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F">爬虫执行方式</a></li><li><a href="#%E9%98%9F%E5%88%97%E4%B8%AD%E7%9A%84url%E5%8E%BB%E9%87%8D">队列中的url去重</a></li><li><a href="#%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98">编码问题</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E7%88%AC%E5%8F%96%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4">设置爬取间隔时间</a></li><li><a href="#%E6%97%A5%E5%BF%97%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B7%9F%E8%B8%AA%E4%BF%A1%E6%81%AF">日志与系统跟踪信息</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E5%AD%90%E6%A8%A1%E5%9D%97">默认子模块</a></li><li><a href="#%E8%AE%BE%E7%BD%AEcookies%E5%92%8Cheader">设置cookies和header</a><br><a href="#"></a></li></ul><h3 id="爬虫执行方式"><a href="#爬虫执行方式" class="headerlink" title="爬虫执行方式"></a>爬虫执行方式</h3><p>在Spider存在Run和Get,GetAll两个方式去执行爬虫，Run方式不会返回爬取结果，Get和GetAll会返回爬取结果，并在main中进一步处理。</p><p><strong>Run方式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spider.NewSpider(NewMyPageProcesser(), <span class="string">&quot;TaskName&quot;</span>).                <span class="comment">// 创建PageProcesser和Spider，设置任务名称</span></span><br><span class="line">    AddUrl(<span class="string">&quot;https://github.com/hu17889?tab=repositories&quot;</span>, <span class="string">&quot;html&quot;</span>). <span class="comment">// 加入初始爬取链接，需要设置爬取结果类型，方便找到相应的解析器</span></span><br><span class="line">    AddPipeline(pipeline.NewPipelineConsole()).                    <span class="comment">// 引入PipelineConsole输入结果到标准输出</span></span><br><span class="line">    SetThreadnum(<span class="number">3</span>).                                               <span class="comment">// 设置爬取参数：并发个数</span></span><br><span class="line">    Run()                                                          <span class="comment">// 开始执行</span></span><br></pre></td></tr></table></figure><p><strong>Get方式</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spider input:</span></span><br><span class="line"><span class="comment">//  PageProcesser ;</span></span><br><span class="line"><span class="comment">//  task name used in Pipeline for record;</span></span><br><span class="line">sp := spider.NewSpider(NewMyPageProcesser(), <span class="string">&quot;TaskName&quot;</span>)</span><br><span class="line">pageItems := sp.Get(<span class="string">&quot;http://baike.baidu.com/view/1628025.htm?fromtitle=http&amp;fromid=243074&amp;type=syn&quot;</span>, <span class="string">&quot;html&quot;</span>) <span class="comment">// url, html is the responce type (&quot;html&quot; or &quot;json&quot;)</span></span><br><span class="line"></span><br><span class="line">url := pageItems.GetRequest().GetUrl()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;-----------------------------------spider.Get---------------------------------&quot;</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;url\t:\t&quot;</span> + url)</span><br><span class="line"><span class="keyword">for</span> name, value := <span class="keyword">range</span> pageItems.GetAll() &#123;</span><br><span class="line">    <span class="built_in">println</span>(name + <span class="string">&quot;\t:\t&quot;</span> + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;\n--------------------------------spider.GetAll---------------------------------&quot;</span>)</span><br><span class="line">urls := []<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;http://baike.baidu.com/view/1628025.htm?fromtitle=http&amp;fromid=243074&amp;type=syn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://baike.baidu.com/view/383720.htm?fromtitle=html&amp;fromid=97049&amp;type=syn&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">pageItemsArr := sp.SetThreadnum(<span class="number">2</span>).GetAll(urls, <span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> pageItemsArr &#123;</span><br><span class="line">    url = item.GetRequest().GetUrl()</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;url\t:\t&quot;</span> + url)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;item\t:\t%s\n&quot;</span>, item.GetAll())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列中的url去重"><a href="#队列中的url去重" class="headerlink" title="队列中的url去重"></a>队列中的url去重</h3><p>需要主动调用SetScheduler(scheduler.NewQueueScheduler(true))，spider默认使用的是不去重的QueueScheduler</p><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>如果爬取的数据不是utf-8编码，则爬虫在Download模块中自动会捕获header中charset字段，进而使用<a href="https://github.com/djimenez/iconv-go">iconv</a>包进行编码转换。</p><h3 id="设置爬取间隔时间"><a href="#设置爬取间隔时间" class="headerlink" title="设置爬取间隔时间"></a>设置爬取间隔时间</h3><p><code>Spider.SetSleepTime(sleeptype string, s uint, e uint)</code></p><p><code>sleeptype</code>是时间类型有<code>fixed</code>,<code>rand</code>两种方式，<code>fixed</code>方式下通过<code>s</code>参数设置间隔时间，<code>rand</code>方式下<code>s</code>代表最小间隔时间，<code>e</code>代表最大间隔时间；</p><h3 id="日志与系统跟踪信息"><a href="#日志与系统跟踪信息" class="headerlink" title="日志与系统跟踪信息"></a>日志与系统跟踪信息</h3><p>*日志：输出系统错误信息和一些执行信息到日志文件中，通过<code>Spider.OpenFileLog(filepath)</code>打开，通过<code>Spider.CloseFileLog()</code>关闭；</p><p>*跟踪信息：输出执行过程到标准输出，通过通过<code>Spider.OpenStrace()</code>打开，通过<code>Spider.CloseStrace()</code>关闭；</p><p>如果想在自己的代码中加入日志，只需要导入日志包<code>import &quot;github.com/hu17889/go_spider/core/common/mlog&quot;</code>，并执行<code>mlog.LogInst().LogError(&quot;error message&quot;)或者mlog.LogInst().LogInfo(&quot;information&quot;)</code></p><h3 id="默认子模块"><a href="#默认子模块" class="headerlink" title="默认子模块"></a>默认子模块</h3><ul><li>下载模块：HttpDownloader</li><li>任务队列模块：QueueScheduler</li><li>输出模块：PipelineConsole，PipelineFile</li></ul><h3 id="设置cookies和header"><a href="#设置cookies和header" class="headerlink" title="设置cookies和header"></a>设置cookies和header</h3><p>参考<a href="https://github.com/hu17889/go_spider/blob/master/example/login_profile_page_processor/main.go">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> go_spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台GUI工具fyne</title>
      <link href="/2020/02/04/golang/%E8%B7%A8%E5%B9%B3%E5%8F%B0GUI%E5%B7%A5%E5%85%B7fyne/"/>
      <url>/2020/02/04/golang/%E8%B7%A8%E5%B9%B3%E5%8F%B0GUI%E5%B7%A5%E5%85%B7fyne/</url>
      
        <content type="html"><![CDATA[<p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tech与Team — Leader 的自我修养</title>
      <link href="/2020/02/04/post/Tech%E4%B8%8ETeam%20%E2%80%94%20Leader%20%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
      <url>/2020/02/04/post/Tech%E4%B8%8ETeam%20%E2%80%94%20Leader%20%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://kymjs.com/manager/2019/07/13/01/">https://kymjs.com/manager/2019/07/13/01</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="招人那些事"><a href="#招人那些事" class="headerlink" title="招人那些事"></a>招人那些事</h2><p>最近一直在招人，一直在面试，见了很多人，遇过很多事。</p><p>总的来说，在我面试别人的时候，能方便他人都会尽量去方便，面试过程中，尽量营造一个轻松的气氛，比如聊一些别人的强项，总是抓住别人薄弱点不放，把气氛搞得很尴尬，我觉得真的没意义。</p><p>可即便是这样，我发现最多的情况是，几乎所有人都不知道自己的强项在哪里——没有自我认知。</p><h3 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h3><p>问开放性问题可以很容易了解一个人，对于技术好的人可以很容易表现自己，对于技术不好的，一定会支支吾吾，因为根本就没有答案可背。比如通常有两个开放性的问题，是我一定会问的：</p><ol><li><p>你在这家公司做的，你觉得最牛逼的事情是什么？</p></li><li><p>你做了几年 Android 开发，你觉得哪个开源项目让你学习到的最多。</p></li></ol><p>其实这两个问题通常我都是希望从宏观和细节的角度，去尝试了解你对自己项目的认知和理解。</p><p>第一个问题，我得到的答案通常是一个很小的技术点。有两三个人，都是之前做互联网金融的(可见前两年互金的泡沫多可怕)说自己做的最牛逼的是是做了一套 hybrid 框架，可以高性能浏览前端页面。一问怎么做的，jsbridge 用了自定义方案，通过某个 webview 回调解析 js 传来的字符串命令，再调对应的原生方法；怎么高性能了，用了 X5 内核。再有就是实时聊天相关的，一问怎么做的，用了云信、环信、极光，卧槽，能不能有你自己的东西，拿着别人的东西封装一下，就是自己最牛逼的工作了吗，你是得多lowB。<br>第二个问题，最多的回答是<code>Retrofit+RxJava+MVP</code>，再一问细节：从<code>interface</code>通过动态代理创建<code>OKHttp</code>的<code>Request</code>再通过<code>OKHttp</code>拦截器按定制逻辑判断，之后从连接池中取出链接发送请求。基本上 Retrofit 能大体上把这个流程答上来的我都默认你是看过代码了，至少看过网上的原理介绍了。<code>Rxjava</code>就更是搞笑，几乎所有人都把<code>Rxjava</code>当成一个切线程工具来用了，最多再提一个流操作。结果就是连自定义操作符都不会，<code>subscribe()</code>方法不调用会怎样都不知道，却说自己对 rxjava 多么了解。</p><h2 id="对于队友的培养和提高"><a href="#对于队友的培养和提高" class="headerlink" title="对于队友的培养和提高"></a>对于队友的培养和提高</h2><p>我们<code>CTO</code>总强调，说<code>Leader</code>要懂得将自己的能力复制给组员。还一副我高兴就好的把这条加入了绩效考核里，真拿他没办法。不过想想也是，让 Leader 的能力变得可复制，这才是公司最大的财富。</p><h3 id="对于菜鸟队友的建议"><a href="#对于菜鸟队友的建议" class="headerlink" title="对于菜鸟队友的建议"></a>对于菜鸟队友的建议</h3><p>其实新手在很多大公司是根本看不到的，比如之前呆过的饿了么、沪江，随便一个实习生都要比普通公司的开发强很多。但是没有办法，不是所有公司都能找到这样的宝贝新人，更多的还是要自己培养。</p><p>而培养最重要的是有计划，并且<strong>压力给到，做出鼓励，持续跟进</strong>。</p><p>同时，这个菜鸟希望成为什么样的人，适合成为什么样的人，<code>Leader</code>一定要比他自己更清楚，这样才能真正让他成长，并且能够留住这个人。</p><h3 id="对于牛逼的核心主力"><a href="#对于牛逼的核心主力" class="headerlink" title="对于牛逼的核心主力"></a>对于牛逼的核心主力</h3><p>这类人一定是公司的财富，任何一个流失对公司来说都是一种损失。其实留住人也很简单，如果你不能像头条那样单纯用钱砸死，那就想办法解决他关注的。根据马斯洛需求层次理论，一层一层的去看能解决他的哪一个需求，如果你能持续的给他目标，同时又是让他努力一点能够达到的目标，那么他一定是会愿意与你合作。</p><p><img src="https://kymjs.com/qiniu/images/blog_image/2019071301.png" alt="马斯洛需求层次理论"></p><p>而对于那种明显的能力强的人，公司的成长都已经跟不上这类人的成长时，<code>Leader</code>也不得不考虑一下，当这个人离开时，事情应当如何处理。</p><h2 id="90后管理的反转"><a href="#90后管理的反转" class="headerlink" title="90后管理的反转"></a>90后管理的反转</h2><p>经常会听到说90后不好管，完全不鸟管理者，却乐意被大神虐。我自己也是一个90后，可以明显觉得 80 70 后和 90 后的表现气质有明显的差别。就是“装”到“不装”的气质差异。</p><h3 id="装与不装"><a href="#装与不装" class="headerlink" title="装与不装"></a>装与不装</h3><p>因为 90 后不装，又看不惯别人装。今天很多做管理时间很长的人，身上的气质不仅仅是装，做管理者时间长了，气质叫“端装”，又端又装。</p><p>但事实上跟 90 后又不是不装，大神也都是喜欢装的，你得搞清楚什么是装的资本。比如你能让他意识到，有东西确实是你比他了解的，而且这种了解是你当着面让他看到帮助到了他，这时候你可以再装一下，告诉他，这就叫经验。而这种装其实是一种玩笑式的装，叫“装逼”。</p><p>为什么跟年轻人沟通的时候有很多冲突？ 不是管理经验不足，也不是学的管理工具不够，唯一的差别是，如果他观察到你身上有端和装的气质，所有沟通大门都会瞬间关死。<br>今天中国所有满足人们“装”这样核心诉求的产品、品牌、服务、企业、组织都在发生断崖式下降，房地产、奢侈品、餐饮包括我们现在这样的行业趋势都是非常明显的。 保健品行业以前是送礼的，满足人什么需求？“装”的需求。不需要太多的品质，只要打广告，让所有人都知道这个品牌，知道你送了一个很贵的东西就可以。</p><p>90 后已经进入讨论中年危机的问题，他们养生保健比之前任何一代意识都强，一定愿意买这个东西，但是他们不是为了装给别人看，而是为了让自己身体更好。</p><h2 id="合理规划时间，提高生产力"><a href="#合理规划时间，提高生产力" class="headerlink" title="合理规划时间，提高生产力"></a>合理规划时间，提高生产力</h2><p>每一个初做管理的人，一定都会有很大的感慨就是——时间不够用。</p><p>我也尝试过不少提升生产力的方法，目前我用的是四象限工作事项管理法和番茄时间管理法组合的方式。</p><h3 id="1-番茄时间管理法"><a href="#1-番茄时间管理法" class="headerlink" title="1.番茄时间管理法"></a>1.番茄时间管理法</h3><p>第一次使用番茄工作法的时候，我并没有严格做到它规定的要求。我只是每天用它来设置若干个“25分钟”的番茄钟。我并没有留意自己每天完成了几个番茄钟，也没有估算某项任务要用掉几个番茄钟；因此我并没有从中受益。只是简单认为整个方法就是让你在一个时间段内保持专注。</p><p>直到后来我决定严格地使用番茄时间管理法，发现自己潜移默化地逐渐有能力、可量化去真正评估自己每天可以完成的工作量。通过跟踪自己一天内完成了多少个番茄钟，并为每天要完成的番茄钟的数量设定目标。今后每次项目中，需要评估工作量、估算工时，便发挥了番茄时间管理法真正的威力。</p><p><img src="https://images.xiaozhuanlan.com/photo/2019/95d03f9db33731d35ea34f5b687cbfd8.png" alt="番茄时间管理法"></p><h3 id="2-四象限工作法"><a href="#2-四象限工作法" class="headerlink" title="2.四象限工作法"></a>2.四象限工作法</h3><p>那四象限工作法如何与番茄时间管理结合使用呢？</p><p>使用番茄工作法，你可以把每周看作是由有限个番茄钟组成的。想在每周完成一定数量的任务?你要搞清楚自己一周能完成多少个番茄钟，并相应地设置任务的优先级。通过计算自己完成的番茄钟的数量，可以确切知道自己一周完成了多少任务。</p><p>某些情况下，我们总是幻想着自己可以在一周内完成超出自己实际能力许多的工作，过高地估计了自己的能力而低估了完成任务所需的时间。这个时候，我们就非常有必要给各个任务项设置的优先级了，将你每周需要完成的任务按照重要、紧急划分成四类：重要紧急、重要不紧急、紧急不重要、不重要不紧急。</p><p><img src="https://images.xiaozhuanlan.com/photo/2019/bff4a9f762876de89b33c3c838b34f5b.png" alt="四象限工作法"></p><p>这两个软件分别是Focus Matrix和Be Focused。 数据是可以打通的，同时提供了手机版，喜欢的同学可以去试试。</p><p>当然也可以不使用软件的方式，这只是一个时间和任务管理的方法论，你也可以买一个沙漏⏳管理时间和便签管理任务，使用得当的话，也是可以达到一样效果的。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“跟进”的正确方式</title>
      <link href="/2020/02/04/post/%E2%80%9C%E8%B7%9F%E8%BF%9B%E2%80%9D%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/02/04/post/%E2%80%9C%E8%B7%9F%E8%BF%9B%E2%80%9D%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/FXnXpg4WkylRRDmC66ACzQ">“跟进”的正确方式</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>工作中，我们常常会提到一个词叫做“跟进”，但是其实很多人并不懂得如何“跟进”，或者不知道怎么做好“跟进”。</p><p>有个问题抛出来，然后埋头苦干，一味只顾自己干，这不叫跟进。</p><p>跟进的“跟”，核心是沟通，沟通什么？沟通“进度”！</p><ol><li><p><strong>首先要跟需求方沟通</strong>，说明问题原因、解决方案、解决时间和计划。</p></li><li><p><strong>其实要跟执行人沟通</strong>，安排什么人去处理，要沟通好，如果是自己处理，要排好优先级。</p></li><li><p><strong>最后要跟关注的人汇报</strong>，阶段性汇报，开始、关键过程、结束，都要汇报，不要跟到一半就不管了。</p></li></ol><p>优秀的人一定要懂得，一件事情既然做了，就值得我们去做好它。日常工作中，超过一半以上的事情都是需要我们跟别人一起协作的过程，所以平时多思考自己的做事方式，不单单是提升了自己，还会提高整个团队的效率。互联网中有个共识叫做“既定事实”，优秀不是被说出来的，而是我们认真做到了，大家就一定能看到！</p><p>谨以此共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 0 到 200 人团队，我的成长经历分享</title>
      <link href="/2020/02/04/post/%E4%BB%8E%200%20%E5%88%B0%20200%20%E4%BA%BA%E5%9B%A2%E9%98%9F%EF%BC%8C%E6%88%91%E7%9A%84%E6%88%90%E9%95%BF%E7%BB%8F%E5%8E%86%E5%88%86%E4%BA%AB/"/>
      <url>/2020/02/04/post/%E4%BB%8E%200%20%E5%88%B0%20200%20%E4%BA%BA%E5%9B%A2%E9%98%9F%EF%BC%8C%E6%88%91%E7%9A%84%E6%88%90%E9%95%BF%E7%BB%8F%E5%8E%86%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/qHxZFa4O5JeeuykJQHlIPg">从 0 到 200 人团队，我的成长经历分享</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>前段时间，我写了一个《职业成长》的系列，文章发布后有很多人加了我微信，不少人在问：</p><blockquote><p>你在 UC 是怎么走上管理这条路的？从自己一个人到带 200 多人的团队，中间是怎么走过来的？能不能分享一下你这 4 年的职业成长经历？</p></blockquote><p>今天这篇文章，算是我的一个正式回答。</p><h2 id="0-5-人：需求管理-amp-文化雏形"><a href="#0-5-人：需求管理-amp-文化雏形" class="headerlink" title="0 ~ 5 人：需求管理 &amp; 文化雏形"></a>0 ~ 5 人：需求管理 &amp; 文化雏形</h2><p>2013 年 5 月，我放弃了刚刚到手的晋升机会，从工作了 6 年的爱立信裸辞，以高级工程师的身份加入 UC 。</p><p>进入 UC 的第一个正式挑战，是团购导航产品。</p><p>接下来的一个月，我和另外一个小伙伴几乎没有一天是在晚上 11 点前下班的，好几次加班到凌晨 3 点，回家睡5、6个小时，早上起来匆匆吃完饭又继续上班。整个人就像打了鸡血一样。</p><p>可老天爷并没有因为我们不要命的加班，就眷顾我们。</p><p>项目上线后不到 2 个月，我就收到了『噩耗』：产品下线！连产品经理也静悄悄地离职了，那个时候我还在做着大卖的白日梦。</p><p>这个事情对我的打击是巨大的，我不甘心，千方百计询问原因，得到的答案是：<strong>产品需求分析没做好</strong>，很多地方没想清楚，数据很差所以下线了。</p><p>项目虽然失败了，但我的反思却没有停下来：我不比别人笨，我也这么拼命了，为什么我们辛辛苦苦做出来的东西就这样被抛弃了？如果下次还是遇到这样的情况，我们是否还会重蹈覆辙？</p><p>除了祈祷下次碰上个靠谱的产品经理之外，我自己能够做点什么呢？为什么我当初也没发现产品需求的问题呢？</p><p><strong>作为一名技术至上者，我第一次觉得 『 程序员懂业务，懂需求分析 』是多么的重要。</strong></p><p>自此我开始自学各种需求分析的技能，后来我把自己关于需求分析的经验，整理为 10 个问题，分批给部门的主管和骨干培训。后面会专门用一个系列来讲。</p><p>这个阶段，团队虽然只有 4 个人，但我做了一件事情，就是开始向组员灌输团队的『做事理念』。为此我还专门在内网wiki上写了一篇文章，向新来的组员解释我对『创业文化』的理解 ：</p><ul><li>专注当下：专注当前工作并做到极致</li><li>产品意识：做自己产品的天使用户</li><li>数据说话：用数据指导评判策略方案</li><li>日省三身：在反思和总结中前进</li></ul><p>这几个理念一直支撑着我在 UC 的工作，并且随着团队的扩大，逐渐演变为最终的团队文化 —— 『产品工程师』的内核。</p><h2 id="5-12-人：项目-amp-时间管理"><a href="#5-12-人：项目-amp-时间管理" class="headerlink" title="5 ~ 12 人：项目 &amp; 时间管理"></a>5 ~ 12 人：项目 &amp; 时间管理</h2><p>人倒霉的时候，喝凉水都塞牙。</p><p>接下来我们团队又有一个业务，因为各种原因被停掉了。</p><p>这个时候，我负责的业务只剩下一个：抢火车票。</p><p>在当时，这个业务对公司、对我、对团队而言，都是不能失败的任务。</p><p>背水一战。</p><p>一开始我还能参与少量的研发，但随着广州、北京、武汉三地的产品、技术、营销、设计、项目、法务将近 80 人被卷入这个项目，很快整个项目完全失控。</p><ul><li>大家都很忙，但没人知道做到哪了</li><li>项目啥时候上线，什么时候算完</li><li>天天加班，但版本经常 delay</li><li>会议繁多，且效率极低</li><li>前后端测试人员轮番出现瓶颈</li><li>横跨三地的沟通，效率极其低下</li><li>已修复的问题莫名其妙又出现了</li><li>研发改了逻辑，但测试人员不知道</li></ul><p>那段时间我整个人极其焦虑，项目经理也在中途离开了团队，产品经理工作的时间也不长，我老大说，要不我来做这个项目经理的角色？</p><p>经过大量的复盘后，针对上面的问题，我们做了以下的应对措施：</p><ul><li>进度可视化：甘特图、白板、晨会</li><li>风险评估：引入MiniRisk风险评估</li><li>需求管理：砍掉大量伪需求</li><li>版本管理：结合资源精细化管理</li><li>会议管理：参考《高效会议》文章</li><li>研发自测：冒烟测试用例</li></ul><p>这半年过得极其漫长和痛苦，印象最深刻的是：有一天我们千辛万苦完成了一个版本准备上线，突然发现:</p><p><em><strong>12306 整个网站改版了！</strong></em></p><p>所有的接口和参数都变了，还新增了验证码。几十号人、几个月的工作全都白费了。当时想死的心都有了！但也只能从头开始。</p><p>幸亏我们最终撑过去了。随着春节的临近，产品日活一路飙升，UC 品牌得到持续曝光。公司年会前一天，我收到了通知：</p><p>团队拿了最佳团队奖，而我则拿到了个人奖项的最高奖：UC 特别战功奖。</p><p>此时我入职 UC 还不到一年，幸福来得如此突然！</p><p>回想起这段经历，我觉得自己最大的收获，是通过这 6 个月地狱式的项目，培养起了几个能力：</p><ul><li><p><strong>项目管理能力：</strong> 作为技术负责人要如何统筹好各方的工作，目标如何拉通？项目关键路径要如何识别？资源要如何调配规划？进度要如何体现和同步？风险如何管理和跟踪？</p></li><li><p><strong>时间管理能力：</strong> 每天各种大量的事务和打断，你要如何处理？经常面对各种突发问题，你如何应对？</p></li><li><p><strong>快速学习能力：</strong> 整个项目过程中，我除了研发，还客串了测试人员、项目经理、客服人员、用研人员、数据分析人员等等角色。团队缺什么角色我就顶上去。每次遇到新的任务，都需要在很短的时间内了解情况，这个能力对于我接手新业务、新团队都发挥了巨大的作用。</p></li></ul><p>关于这个阶段积累的 『项目管理』实战经验，后面也打算单独开专栏讲。时间管理的文章可以在公众号菜单中找到。</p><h2 id="12-70-人：效率-amp-质量管理"><a href="#12-70-人：效率-amp-质量管理" class="headerlink" title="12 ~ 70 人：效率 &amp; 质量管理"></a>12 ~ 70 人：效率 &amp; 质量管理</h2><p>年会过后没多久，就接到一项任命：整合部门内其他几支团队，统一管理。</p><p>这几支团队加起来有差不多 50 人，而且这些人都不是我招进来的，每个人是什么情况？有什么优点和缺点？发展诉求和性格脾气一无所知。</p><p>更糟糕的是，我发现了两个巨大的问题：多数人都是短时间招聘进来的，没有经过统一的培训，<strong>做事方式都不一样，技术栈也是五花八门</strong>。往往一个开发人员借调到其他组，得花一周的时间才能上手，刚刚上手就又得回去了，帮不上忙不说，还增加用人方的培训成本。</p><p>第二个巨大的问题是：质量监控。因为 UC 浏览器大多数业务都是和 『网址导航』和『内容聚合』相关的，极度依赖于原始网站的有效性。当时我们压根就 没有<strong>统一的业务监控</strong>，时不时发生原网站改版了，而我们不知道，等用户反馈产品不能用了，才急急忙忙修复的情况。</p><p>熟悉移动互联网发展历史的人都知道， 2013 ~ 2015 可以算是 H5 的一个小高潮。公司高层对于快速探索新业务有强烈的诉求。</p><p>团队不成熟，技术不统一，质量不稳定。怎么支撑业务的快速发展？</p><p>苦苦思索之后，在向总经理室汇报年度工作目标中，我只写了一句话：</p><blockquote><p><strong>如何快速、低成本地上线新业务？</strong></p></blockquote><p>围绕这个目标，我做了很多事情，核心有下面四件：</p><ul><li><p><strong>组建团队的核心班子：</strong> 矩阵式的分工，确保纵线上业务有人管，横线上各种跨团队事务有人牵头。</p></li><li><p><strong>把监控作为头等大事亲自抓：</strong> 从指标定义、采集、汇总、加工、计算、展示、告警一整条链路打通，缩短发现问题的时间。</p></li><li><p><strong>好钢用在刀刃上：</strong> 在人力极其紧张的情况下，依然调出最好的前、后端员工，开发了供部门内统一使用的前端框架 Scrat 和 后端 BaaS 平台 NAPI。统一解决前端工程化、后端存储和性能的问题。</p></li><li><p><strong>做好新人指引项目：</strong> 牵头在内网上建立一个『新人一周上手课程』，利用一个模拟项目指导新人在一周内搭建起开发环境，了解内部框架，跑通整个发布流程。并通过一些任务驱动新人主动认识团队的其他成员。更快融入团队。</p></li></ul><p>经过差不多半年的救火，团队开始走上正轨。</p><p>在 2014 年底统计各个业务的迭代周期时，我惊喜地发现各条业务线的迭代速度明显快起来了，而且开发新业务所需的资源：逐步降低到最少只需要：一个前端 + 一个测试。</p><p>到年底的时候，我又整合了另外两支团队，此时团队规模达到 70 多人。</p><p>这个阶段，<strong>『产品工程师』</strong> 的文化理念在我脑海中慢慢成熟，通过一次又一次不断的以身作则和宣传，核心班子成员都很自然地接受了这种定位。很快团队形成了独特的气质和技能树。</p><h2 id="70-200-人：组织-amp-业务管理"><a href="#70-200-人：组织-amp-业务管理" class="headerlink" title="70 ~ 200 人：组织 &amp; 业务管理"></a>70 ~ 200 人：组织 &amp; 业务管理</h2><p>2015年，国际化成为 UC 发力的重点，同年 3 月份我和同事一起去印度调研了 17 天，给了我无比巨大的冲击。</p><p>天天跑校园、街头，近距离接触访谈用户。作为用户融入到这个环境中，亲身感受自家产品的使用体验。这种现场调研，比起坐在办公室里等前方同事发回调研报告，好太多了。</p><p>年底，我接受了国际业务总经理的邀请，将自己亲手组建的国内研发团队交出去，带着几位核心骨干，从头开始组建新的研发部门。</p><p>这个期间我又面临了一个新的挑战：</p><blockquote><p>国际业务部门是由 6 个业务部门组成的。各条业务线都有自己的研发，但都归属不同的研发主管，且平时几乎没怎么往来。如何把这 6 支团队『捏』成一支团队？</p></blockquote><p>这个阶段的早期，我犯下了很多错误，后来我把这些错误整理下来，在 UC 内部的主管训练营中进行了分享，后面会再分多个主题来讲。</p><p>其中最大的一个错误就是：</p><p><strong>带着救世主的心态去融合团队。</strong> 认为我过往的经验已经被印证成功了，照搬过往的做法，却不知道管理难就难在『没有绝对』—— 结果自然是遭到了强烈的抵触。</p><p>好在后来在 HR 的协助下，加上自己的反思，迅速调整了姿态和做法，稳住了局面。</p><p>2015 ~ 2016 年，海外业务发展非常迅速，我们打了几场大的漂亮硬仗。</p><p>团队也迅速膨胀到 150 多人，这个阶段，之前的小团队管理做法已经显得很吃力，于是我做了几个管理升级：</p><ul><li>更重视中长期的规划</li><li>从团队管理过渡到组织管理</li><li>提炼部门文化和团队价值定位</li><li>关注组织架构的灵活性和升级</li><li>将招聘-面试-转正标准化</li><li>学习阿里的人才盘点方法</li><li>搭建常规性人才流动制度</li><li>倡导推动业务技术创新</li><li>沉淀分享自己的管理体系认知</li></ul><p>由于业务发展变化实在太快，2016 一整年整个国际研发部几乎都是在摸着石头过河，人员的调整和团队的合并时有进行。唯一不变的就是在打仗中学习带队伍。</p><p>这个阶段，对我来说，最大的挑战是：<strong>商业意识和能力的建立。</strong></p><p>面对同在总经理室的几位成员，我发现大家讨论的都是商业策略、市场销售、渠道推广、品牌营销、成本预算等商业性的话题。这个时候，快速学习的能力再次派上用场。但坦白说，这些方面依然是我目前的软肋。</p><p>2016 年，UC 浏览器在印度、印尼两个国家的市场占有率均达到第一。</p><p>2017 年中，国际研发部人数达到 200 多人。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在 UC 的这四年，就像是一场超浓缩的职场成长史，我以每半年甚至三个月一次的调整，经历各种挑战，也在挑战中成长学习。</p><p>我记得最清楚的一句话，是一位老领导对我说：蓬蓬，你坐在这个位置，就不要指望什么事情都有人教你了，你要学会自己去找问题，找答案。</p><p><strong>另外最大的一点感受就是：职场上，面对新的挑战，你永远不会有准备好的那一天。保持快速学习能力，不给自己设边界很重要。</strong></p><p><strong>我曾经很纠结别人怎么看我，到底是技术，还是产品，还是管理？现在我完全不在乎了 —— 我就是一个解决问题的人。</strong></p><p>虽然我离开了 UC ，但我至今依然非常感谢 UC，怀念 UC 的『大五文化』，怀念『同学相称』的氛围。</p><p>感谢把我带进 UC 大门的 如冰老大；感谢我四年来的四任领导；感谢小鹏 Boss 给我的机会，从你们身上我学到了太多太多。</p><p>感谢一同奋斗过的兄弟姐妹，我们一起经历和成就了很多美好和骄傲的时刻。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从这四点出发，不做 “ 空心 ” 程序员</title>
      <link href="/2020/02/04/post/%E4%BB%8E%E8%BF%99%E5%9B%9B%E7%82%B9%E5%87%BA%E5%8F%91%EF%BC%8C%E4%B8%8D%E5%81%9A%20%E2%80%9C%20%E7%A9%BA%E5%BF%83%20%E2%80%9D%20%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
      <url>/2020/02/04/post/%E4%BB%8E%E8%BF%99%E5%9B%9B%E7%82%B9%E5%87%BA%E5%8F%91%EF%BC%8C%E4%B8%8D%E5%81%9A%20%E2%80%9C%20%E7%A9%BA%E5%BF%83%20%E2%80%9D%20%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/wp0-c-4gnM_koMKPn5dd4Q">从这四点出发，不做 “ 空心 ” 程序员</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="01-注重原理性知识"><a href="#01-注重原理性知识" class="headerlink" title="01 注重原理性知识"></a>01 注重原理性知识</h2><p>现在的互联网环境下，注重原理性知识学习的程序员越来越少，特别是在这种培训机构大爆炸的环境下，在网上你会经常看到类似三个月从入门到精通高并发、分布式的广告，我相信培训机构有这套技术的能力，但是我不相信一个初学者有这么好的接收能力。甚至某个培训机构的讲师里，有一个1997年出生的架构师，20岁出头就当上了架构师，真的是后生可畏呀。在我的思维里，架构师不是学出来的，架构师是通过项目喂出来的。好了，我们还是言归正传吧。</p><p>为什么要注重原理型知识呢？因为原理性知识是我们的根，我列举了三个例子，对这个观点进行说明。</p><p>1、你懂设计模式，无论你是做系统架构设计还是阅读开源项目源码，你会发现，最终他们都绕不开设计模式。</p><p>2、你懂数据结构和算法，在高并发这种分秒必争、时间就是金钱的场景下，你知道List、Map 该如何取舍。</p><p>3、你懂网络通信的原理，在我们做系统架构、问题排除时都会有很大的帮助。</p><p>可以这么说，原理性知识决定了程序员的下限，原理性知识强的程序员，下限不会太低，相反，原理性知识不强的程序员，我相信上限也不会高到哪里去。</p><h2 id="02-打造自己的核心技术栈"><a href="#02-打造自己的核心技术栈" class="headerlink" title="02 打造自己的核心技术栈"></a>02 打造自己的核心技术栈</h2><p>码农圈的码农一直都有中年危机意识，哪怕是那些还没有入门的码农，他们都知道程序员只能干到35岁。我不去讨论这个观点的是与否，把这一切交给时间，等你到了35岁那一年，这个话题自然会有答案。大部分程序员都有中年危机意识，所以在刚入门的时候，会花较多的时间去学习。很多人会在这个地方出问题，看似花了很多时间在学习，但是没有一点进步甚至相对来说在退步，为什么呢？</p><p>很多程序员包括我在内是这样学习的，现在大数据这么火，买本书、看个视频学习一下。学了半个月一个月后，大数据太难了，学不动了，先放一下。咦，这个推荐系统好像很有意思哎，又买本书学习一下。最后就在一个循环中，每一项技术都在学，每一项都是一个入门。看上去啥都会，真实做的时候，发现啥都不会，就是这么的神奇。</p><p>这就是一个怪圈，很多程序员都会跳入的怪圈。对程序员这种技术型的工作来说，这是学习的大忌，因为技术行业知识广相对知识深来说没有优势，在公司专人做专事，需要的是技术深度。所以我们每个程序员需要打造自己的核心技术栈，你搞 Java Web 开发，那么你在某一个方向上，比如在高并发、消息中间件或者分布式架构比公司或者周围的程序员有更深入的学习研究，这会成为你升职加薪或者跳槽的资本。</p><h2 id="03-做自我驱动型员工"><a href="#03-做自我驱动型员工" class="headerlink" title="03 做自我驱动型员工"></a>03 做自我驱动型员工</h2><p>在职场上有两种员工，一种是任务型员工，一种是自我驱动型员工。任务型员工，领导安排什么活，干完就了事，从来不会想着，我写的这个功能有没有优化的空间？为了任务而任务。这种员工只能待在这个舒适区，哪天舒适区不要他了，估计很难找到安身之处。</p><p>自我驱动型员工恰恰相反，他对每出现的问题都会反问自己，这个问题出现的根本原因在哪里？为什么会出现这个原因？我该如何避免再次出现这类问题？对于每一个问题他都会找出最根本的原因并且提供最好的解决办法。</p><p>对于公司使用的每一项技术，他都会去了解技术背后的原理，这种技术的应用场景在哪里？优缺点又是那些等等，对于自我驱动型员工来说，根源才是他的最终答案。</p><p>自我驱动型员工更多的会带着自己的思考去做业务，对技术刨根问底，追求原理的过程，会是一个快乐的过程，思考多了就会找到场景与原理的关联关系。自我驱动型员工的成长比较迅速，在短时间内会拥有自己的核心竞争力。</p><h2 id="04-记笔记，写博客"><a href="#04-记笔记，写博客" class="headerlink" title="04 记笔记，写博客"></a>04 记笔记，写博客</h2><p>记笔记，写博客是总结与分享的行为，这不仅是程序员，这是所有人都应该去做的一件事情。记笔记是对你过去的总结，把你学到的重要的知识记录下来，方便你后面的查阅与重温，老话说得好：好记性不如烂笔头，记下来总是没错的。</p><p>写博客是一种分享的过程，把你的知识通过文字的形式分享出来，说不定就帮助了很多人，这个过程是快乐的。写博客也是对你知识体系查缺补漏的一种好办法，在写博客的道路上，会不断的刷新你的认识。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为发布面向2025十大趋势</title>
      <link href="/2020/02/04/post/%E5%8D%8E%E4%B8%BA%E5%8F%91%E5%B8%83%E9%9D%A2%E5%90%912025%E5%8D%81%E5%A4%A7%E8%B6%8B%E5%8A%BF/"/>
      <url>/2020/02/04/post/%E5%8D%8E%E4%B8%BA%E5%8F%91%E5%B8%83%E9%9D%A2%E5%90%912025%E5%8D%81%E5%A4%A7%E8%B6%8B%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<mark class="hl-label green">转载</mark>  华为今日（2019-08-08）发布全球产业展望GIV@2025，提出智能世界正在加速而来，触手可及，并预测：到2025年，智能技术将渗透到每个人、每个家庭、每个组织，全球58%的人口将能享有5G网络，14%的家庭拥有“机器人管家”，97%的大企业采用AI。<p>戳<a href="https://v.qq.com/x/page/y0909ptoj93.html">视频</a>，了解2025十大趋势</p><p>全球产业展望报告于2018年首次推出，初衷是打开智能世界的产业版图，为各行各业创新增长提供路径参考。</p><p>2019年，华为基于对交通、零售、金融、制造、航空等17个重点行业的案例研究，并结合定量数据预测，进一步提出了面向2025的十大趋势，它们分别是：</p><h2 id="趋势一：是机器，更是家人"><a href="#趋势一：是机器，更是家人" class="headerlink" title="趋势一：是机器，更是家人"></a>趋势一：是机器，更是家人</h2><p>随着材料科学、感知人工智能以及5G、云等网络技术的不断进步，将出现护理机器人、仿生机器人、社交机器人、管家机器人等形态丰富的机器人，涌现在家政、教育、健康服务业，带给人类新的生活方式。</p><p><strong>GIV预测：2025年，全球14%的家庭将拥有自己的机器人管家。</strong></p><h2 id="趋势二：超级视野"><a href="#趋势二：超级视野" class="headerlink" title="趋势二：超级视野"></a>趋势二：超级视野</h2><p>以5G、AR&#x2F;VR、机器学习等新技术使能的超级视野，将帮助我们突破空间、表象、时间的局限，见所未见，赋予人类新的能力。</p><p><strong>GIV预测：2025年，采用VR&#x2F;AR技术的企业将增长到10%。</strong></p><h2 id="趋势三：零搜索"><a href="#趋势三：零搜索" class="headerlink" title="趋势三：零搜索"></a>趋势三：零搜索</h2><p>受益于人工智能及物联网技术，智能世界将简化搜索行为和搜索按钮，带给人类更为便捷的生活体验：从过去的你找信息，到信息主动找到你；未来，不需要通过点击按钮来表达你的需求，桌椅、家电、汽车将与你对话。</p><p><strong>GIV预测：2025年，智能个人终端助理将覆盖90%的人口。</strong></p><h2 id="趋势四：懂“我”道路"><a href="#趋势四：懂“我”道路" class="headerlink" title="趋势四：懂“我”道路"></a>趋势四：懂“我”道路</h2><p>智能交通系统将把行人、驾驶员、车辆和道路连接到统一的动态网络中，并能更有效地规划道路资源，缩短应急响应时间，让零拥堵的交通、虚拟应急车道的规划成为可能。</p><p><strong>GIV预测：2025年，C-V2X（Cellular Vehicle-to-Everything）蜂窝车联网技术将嵌入到全球15%的车辆。</strong></p><h2 id="趋势五：机器从事三高"><a href="#趋势五：机器从事三高" class="headerlink" title="趋势五：机器从事三高"></a>趋势五：机器从事三高</h2><p>自动化和机器人，特别是人工智能机器人，正在改变我们的生活和工作方式，他们可以从事处理高危险、高重复性和高精度的工作，无需休息，也不会犯错，将极大提高生产力和安全性。如今，智能自动化在建筑业、制造业、医疗健康等领域中广泛应用。</p><p><strong>GIV预测：2025年，每万名制造业员工将与103个机器人共同工作。</strong></p><h2 id="趋势六：人机协创"><a href="#趋势六：人机协创" class="headerlink" title="趋势六：人机协创"></a>趋势六：人机协创</h2><p>以人工智能、云计算等技术的融合应用，将大幅度促进未来创新型社会的发展：试错型创新的成本得以降低；原创、求真的职业精神得以保障；人类的作品也因机器辅助得以丰富。</p><p><strong>GIV预测：2025年，97%的大企业将采用AI。</strong></p><h2 id="趋势七：无摩擦沟通"><a href="#趋势七：无摩擦沟通" class="headerlink" title="趋势七：无摩擦沟通"></a>趋势七：无摩擦沟通</h2><p>随着人工智能、大数据分析的应用与发展，企业与客户的沟通、跨语种的沟通都将可能变得无摩擦，因为精准的信息到达，人与人之间更容易理解、信任彼此。</p><p><strong>GIV预测：2025年，企业的数据利用率将达86%。</strong></p><h2 id="趋势八：共生经济"><a href="#趋势八：共生经济" class="headerlink" title="趋势八：共生经济"></a>趋势八：共生经济</h2><p>无论身在何处、语言是否相通、文化是否相似，数字技术与智能能力逐渐以平台模式被世界各行各业广泛应用。各国企业都有机会在开放合作中，共享全球生态资源，共创高价值的智能商业模式。</p><p><strong>GIV预测：2025年，全球所有企业都将使用云技术，而基于云技术的应用使用率将达到85%。</strong></p><h2 id="趋势九：5G，加速而来"><a href="#趋势九：5G，加速而来" class="headerlink" title="趋势九：5G，加速而来"></a>趋势九：5G，加速而来</h2><p>大带宽、低时延、广联接的需求正在驱动5G的加速商用，将渗透到各行各业，并比我们想象中更快地到来。</p><p><strong>GIV预测：2025年，全球将部署650万5G基站，服务于28亿用户，58%的人口将享有5G服务。</strong></p><h2 id="趋势十：全球数字治理"><a href="#趋势十：全球数字治理" class="headerlink" title="趋势十：全球数字治理"></a>趋势十：全球数字治理</h2><p>触及智能世界，遇到了新的阻力和挑战。华为呼吁全球应该加快建立统一的数据标准、数据使用原则；并鼓励推动建设第三方数据监管机构，让隐私、安全与道德的遵从，有法可依。</p><p><strong>GIV预测：2025年，全球年存储数据量将高达180ZB。</strong></p><p>华为全球ICT基础设施业务首席营销官张宏喜表示：“人类的探索永不止步，从地球到太空要飞得更高，从过去到未来要看得更远，从创新到创造要想得更深。</p><p>今天，以人工智能、5G、云计算为主导的第四次工业革命所带来的改变，正在改变各行各业，推进智能世界加速到来。</p><p>华为致力构建无处不在的联接、普惠无所不及的智能、打造个性化体验和数字平台，让每个人、每个家庭、每个组织从中受益，让智能世界触手可及。”</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趋势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断自己有没有管理的潜力？</title>
      <link href="/2020/02/04/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%87%AA%E5%B7%B1%E6%9C%89%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E7%9A%84%E6%BD%9C%E5%8A%9B%EF%BC%9F/"/>
      <url>/2020/02/04/post/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%87%AA%E5%B7%B1%E6%9C%89%E6%B2%A1%E6%9C%89%E7%AE%A1%E7%90%86%E7%9A%84%E6%BD%9C%E5%8A%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/RSeCjfGk0fTmnWAh2rG8vA">如何判断自己有没有管理的潜力？</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>多数人都面临过做管理还是做业务的选择。很多人都想在管理上有所尝试，有的人进入了管理通道，但发展并不顺利。企业为了扩张发展而绞尽脑汁、不惜代价地培养管理者，可他们面临的最大困惑是，芸芸众生谁更有管理的潜力呢?</p><p>本人从事人才评价工作三十年，可以说阅人无数，其中不乏优秀杰出的管理者，也有表现一般的管理者，还有一些不合格的管理者。我一直在观察和总结，如何判断一个人是否具有管理的潜力?</p><h1 id="一、如何判断一个人具有管理的潜力？"><a href="#一、如何判断一个人具有管理的潜力？" class="headerlink" title="一、如何判断一个人具有管理的潜力？"></a>一、如何判断一个人具有管理的潜力？</h1><h2 id="1、看一个人是否具有抓住工作重点的能力，是否有明确的工作思路"><a href="#1、看一个人是否具有抓住工作重点的能力，是否有明确的工作思路" class="headerlink" title="1、看一个人是否具有抓住工作重点的能力，是否有明确的工作思路"></a>1、看一个人是否具有抓住工作重点的能力，是否有明确的工作思路</h2><p>抓重点是指能快速地将纷繁复杂的各种表面现象归纳总结为结构清晰的事物特征，抓住事物的根本、问题的关键，并确定工作重心的能力。管理工作涉及到的环境和对象很复杂，范围越广规模越大，复杂度就成几何级数上升。</p><p>所以“抓重点”是管理者必须具有的第一项能力。</p><h3 id="1）“抓重点”为什么重要？"><a href="#1）“抓重点”为什么重要？" class="headerlink" title="1）“抓重点”为什么重要？"></a>1）“抓重点”为什么重要？</h3><p>抓重点能力弱的管理人员，在工作上表现上往往是没有主见和工作思路，左右摇摆，拿不定主意，力气使不到点上，他可能很努力、很辛苦，团队成员跟着他不停地东奔西跑，但基本上是瞎忙活，因为没有结果和成绩。</p><p>古人说“将帅无能，累死三军”就是指这种情况。时间一长，团队成员就会失去对管理者的信心，这时候必须更换管理者了。</p><h3 id="2）如何判断一个人抓重点的能力？"><a href="#2）如何判断一个人抓重点的能力？" class="headerlink" title="2）如何判断一个人抓重点的能力？"></a>2）如何判断一个人抓重点的能力？</h3><p>判断一个人抓重点的能力，首先看他的思维是否具有结构性，能否对较为繁杂的事物进行归纳和分类，其次判断他的分类标准和原则是否正确，与解决问题的方向是否相符。</p><p>前者比较容易判断，但往往被人们忽略，第二个方面则需要具有一定的行业或管理经验才能判断他的分类原则是否准确可行。</p><p>我在很多单位担任过竞聘上岗的主考官，一般都会给应聘者3-5分钟时间作自我介绍和对目标岗位的理解，有的候选人时间过半了还在报流水帐式地介绍自己的工作经历，我对这样的人基本上会做出否定判断，显然他抓重点的能力很差，对管理者来说，抓重点这个能力可以实行一票否决。</p><h3 id="3）怎样抓重点？"><a href="#3）怎样抓重点？" class="headerlink" title="3）怎样抓重点？"></a>3）怎样抓重点？</h3><p>如果你想成为一个优秀的管理者，需要训练自己结构化的思考能力，简单地说就是归纳、概括和总结的能力。普通人关注的是思维的逻辑性，讲的是前后的连续性和流畅性。而管理者需要具有较强的结构化思考能力。</p><h2 id="2、看一个人是否具有强烈的目标导向和结果导向意识"><a href="#2、看一个人是否具有强烈的目标导向和结果导向意识" class="headerlink" title="2、看一个人是否具有强烈的目标导向和结果导向意识"></a>2、看一个人是否具有强烈的目标导向和结果导向意识</h2><p>结果导向也就是目标导向，是杰出管理者最突出的思维特征。</p><h3 id="1）是否具有强烈的目标导向和结果导向，如何在现实中体现？"><a href="#1）是否具有强烈的目标导向和结果导向，如何在现实中体现？" class="headerlink" title="1）是否具有强烈的目标导向和结果导向，如何在现实中体现？"></a>1）是否具有强烈的目标导向和结果导向，如何在现实中体现？</h3><p>管理是为了达成目标，而且是团队或组织的目标，不能达成预期目标的管理者一定不是好的管理者，优秀管理者一定是目标感很强的人。</p><p>结果导向意识就是以终为始，高度关注和聚焦目标和结果，将团队或组织的核心资源、策略都指向目标的达成，所有行动都必须是对目标达成有高度贡献的。这种管理者给外部的印象就是目标清晰、执行力很强。</p><p>之所以目标导向特别重要，是因为有很多人出发的时候有目标，在路途往往忘了或偏离了目标，或者被一些新鲜的、好奇的事物所吸引，或者是因为碰到了困难、挫折、受了苦或委曲，放弃了既定的目标。</p><p>优秀管理者设定目标的时候很慎重，一旦确立了目标，就会坚定不移、不受任何干扰的向着目标前行，直到达成为止。</p><h3 id="2）技术人员思维转型困难在哪里？要怎么做？"><a href="#2）技术人员思维转型困难在哪里？要怎么做？" class="headerlink" title="2）技术人员思维转型困难在哪里？要怎么做？"></a>2）技术人员思维转型困难在哪里？要怎么做？</h3><p>专业技术人才向管理者转型的时遇到的最大障碍就是结果导向思维模式的建立。因为长期的技术工作训练了他们的技术思维方式。技术人员的思维和管理人员的思维方式有根本的不同。</p><p>技术人员的思维是直线式思维，由始到终，就是从已知条件推导出结果，一旦已知条件项缺少时，就无法推出结果，他们就会很焦虑。</p><p>把这种思维带到管理中，最典型表现的是他们会跟上级要求很多条件，因为在他的思维中是只有当条件足够时，才能得到结果，而当结果没有达成时，他们给出的理由都是上级给的条件不充分或者环境改变、对手太快，责任不在他本人。</p><p>而管理者是结果导向的思维，以终为始，从目标开始考虑需要什么条件，然后主动想办法去创造条件从而达成问题的解决，技术思维者往往是被动的等待条件成熟。</p><h2 id="3、看一个人是否具有快速发现规律和预测结果的能力"><a href="#3、看一个人是否具有快速发现规律和预测结果的能力" class="headerlink" title="3、看一个人是否具有快速发现规律和预测结果的能力"></a>3、看一个人是否具有快速发现规律和预测结果的能力</h2><p>在当今快速变化的时代，管理者所面对的环境瞬息万变，要求管理者能够快速做出判断，也就通常说的要具有快速反应、灵活应变的能力。</p><h3 id="1）快速灵活应变只是一种行为表现，其背后的能力是什么呢？"><a href="#1）快速灵活应变只是一种行为表现，其背后的能力是什么呢？" class="headerlink" title="1）快速灵活应变只是一种行为表现，其背后的能力是什么呢？"></a>1）快速灵活应变只是一种行为表现，其背后的能力是什么呢？</h3><p>实际上是管理者善于并快速发现事物的运行规律并能够对事情的发展结果进行准确预测。如果不能把握事物的运行规律并做出准确预测结果，就容易做出错误的判断，影响管理目标的达成。</p><p>仔细观察就不难发现，在同一家企业，为什么有的团队的运转节奏快、效率高，有的团队的运转节奏慢、效率低，其背后十有八九的原因是这两个团队的Leader他们在发现规律和预测结果的能力上有差异。</p><p>此项能力弱的管理者，他&#x2F;她为了做出正确的判断，就需要做大量的调查、研究、查资料、开会、讨论，团队Leader决策效率的下降带来整个团队的工作节奏下降，工作效率降低。</p><p>有的人将这种能力称为直觉，即不需要思考就能判断的能力，并认为是天生的能力。</p><p>从表面观察看，直觉思维很强的人在紧急情况下快速判断，似乎是没有经过思考，当我们对他的决策过程进行深入分析时，就会发现他们的大脑中实际上存储了有关事物运行的基本原理、原则等相关概念，他们提取的速度很快，使我们感觉不到他&#x2F;她的思考过程。</p><p>这种能力强的人有一个共同的特点，就是他们知识面比较广，而且这些知识是经过整理以后以他自己的方式存储的，所以提取和加工起来很快。</p><h3 id="2）后天也能培养快速发现规律和预测结果的能力"><a href="#2）后天也能培养快速发现规律和预测结果的能力" class="headerlink" title="2）后天也能培养快速发现规律和预测结果的能力"></a>2）后天也能培养快速发现规律和预测结果的能力</h3><p>要练就这种能力，必须要加强学习，不是简单的死记硬背一些知识，而是以自己便于记忆和提取的方式进行学习。这种能力也是可以培养的，是靠知识和经验的有效积累。优秀的管理者他们的思维具有很强的辩证思维的特征。</p><h2 id="4、看一个人是否拥有大格局和整体观"><a href="#4、看一个人是否拥有大格局和整体观" class="headerlink" title="4、看一个人是否拥有大格局和整体观"></a>4、看一个人是否拥有大格局和整体观</h2><p>有些人工作后很快就走上基层主管岗位，他们雄心勃勃，非常努力，表现很好，执行力很强，任务完成也不错。但当他到了中层岗位后，尽管做得很努力很辛苦，业绩反而会往下走，要么苦苦支撑，要么被撒换掉。我分析了很多这样的人，发现他们有一定共同的问题，就是大局观不够。</p><p>大局观指能够全面地、系统地、前瞻性地看问题、思考问题，能够从整体上把握事物发展的趋势和规律。</p><p>具有大局观的人，一般都会站位比较高，能够从高处俯瞰事物，视野开阔，能够看到事物的全部，在思考时遗漏就很少，决策的错误就会减少。缺乏大局观的人往往会只抓住眼前或局部一点猛攻，但常常顾此失彼，对于公司和上级的战略意图，他们难于理解，要么简单执行，要么曲解打折扣地执行。</p><p>经常有学生这样提问，“老师，大局观能改进吗?怎样才能提高我的大局观呢?”。我举一个例子，“你看新闻联播吗?你喜欢看吗?你长期坚持看吗?”。如果你的回答都是YES，至少你的大局观不会太差。</p><p>具有大局观的人具有很强的历史观，他们往往能够从历史的角度来分析事物的发展演变规律，具有历史观的人看问题具有穿透力，够看到未来，从而具有前瞻性。</p><p>自我中心主义、私心、小九九是制约一个人大局观的重要因素，要培养大局观，就要把个人的小我和私心放下，把个人的利益放到一边，视野才会变得开阔，全局观就会提高。大局观决定一个人层次，而决定一个人大局观的是他的志向。</p><h2 id="5、看一个人是否具有突破常规思考的能力"><a href="#5、看一个人是否具有突破常规思考的能力" class="headerlink" title="5、看一个人是否具有突破常规思考的能力"></a>5、看一个人是否具有突破常规思考的能力</h2><p>拥有和多数人相同的问题解决思考逻辑属于常规思考，多数人都能想到的方案、通用做法都属于常规办法。</p><p>首先要肯定，一种思路或办法能够成为常规，说明这个思路和办法对解决问题是有一定效果的，至少在过去是有效的，否则它不会成为常规。但是，当新问题出现或问题中新元素越来越多的时候，常规思路和方法就会开始失效，而且效果就会越来越差，必须另辟蹊径才能有效解决问题。</p><p>突破常规，是指管理者在面对复杂棘手的问题时，常常以不寻常的思维方式提出一些意想不到的观点、策略和措施，而且这种思路和办法是有效的、能够切实解决问题。</p><p>判断是否突破了常规，有两个基本标志：</p><ul><li>新颖性，即别人没有做过的，或者说在已知的圈子里没有人这么想或这么做过，这是基本点。</li><li>有效性，毕竟并不是所有新的想法都可以算作管理上的突破常规，所以它还必须具备第二个特征，即有效性，就是用这种方法比其它已知的方法都有效得多。</li></ul><p>真正高水平的突破常规往往能够做到奇效，即指构思精巧，抓住了关键环节和杠杆点，具有四两拨千斤之力，投入少，产出大，一题解则百难消，令人赞叹和称奇。</p><p>突破常规并不是别出心裁、为求新而求异。我们不能忘了管理的根本任务是面对事实、解决问题，达成目标，所以有效性是第一原则。突破常规也是有底线的，就是法律和道德伦理的底线。那些踩红线、打擦边球的做法并不是突破常规的思维，而是侥幸心理。</p><p>突破常规就是不走寻常路，从思维特征上看具有逆向思维、发散思维的特点。那些爱思考、善于总结、不盲从的人突破常规的能力较强。突破常规是建立在对事物规律和人性本质的深刻洞察之上，它与投机取巧、耍小聪明是有根本差别的。</p><p>突破常规需要开放的心态，一个封闭的，自我保护很严的人，是不可能提升这项能力的。</p><h2 id="6、看一个人是否具有创设沟通平台的能力"><a href="#6、看一个人是否具有创设沟通平台的能力" class="headerlink" title="6、看一个人是否具有创设沟通平台的能力"></a>6、看一个人是否具有创设沟通平台的能力</h2><p>沟通能力对处于现代开放社会在成员来说十分重要，每个人都在不断提升自己的沟通能力，管理者也不例外，只能是要求更高。但是人们通常所说的沟通能力主要是指人际沟通能力，市面上绝大多数的沟通培训课程也都是为了提高管理者的人际沟通能力而设计的。</p><h3 id="1）管理者创设沟通平台的价值"><a href="#1）管理者创设沟通平台的价值" class="headerlink" title="1）管理者创设沟通平台的价值"></a>1）管理者创设沟通平台的价值</h3><p>对一个组织来说，管理者的最大价值是能够做出正确的决策，指明前行和胜利的方向。因此，必须使管理者的意图、思想、决定得到准确的理解和彻底的执行，否则，管理者所具有的思维优势、判断决策优势就没有意义了。</p><p>所以，对于管理者来说，仅有人际沟通技能是不够的，因为人际沟通的效率和范围是有限的，在组织规模扩大后，他必须具备很好的管理沟通能力才能管理好组织，我们把这种能力称为创设沟通平台的能力。</p><p>组织规模越大，管理层级越高，对这个能力要求也越高，即使在组织扁平化、团队小型化成为流行趋势的今天，这种能力要求也是越来越高，因为你的沟通不仅限于你的团队内部，团队外部沟通会越来越多，当你的决策涉及到很多部门、很多地区、很多管理层级、很多人员时，仅有人际沟通能力显然是不够的。</p><p>所谓沟通平台，简单地说就是建立沟通的机制、渠道和制度。在一个正式组织内部，都有一定的沟通渠道和机制、制度，但当你做出一个新的决定时，可能原有的渠道和机制不起作用了，或者，它的效率和效果达不到你想要的要求，这时候，你就要创设新的沟通平台来畅通信息的渠道。</p><h3 id="2）如何创设沟通平台"><a href="#2）如何创设沟通平台" class="headerlink" title="2）如何创设沟通平台"></a>2）如何创设沟通平台</h3><p>创设沟通平台时，首先必须明白你的决定需要告知的对象，这些对象的链条有多长，现有渠道的弱点是什么，用什么方式可以打通，而且让这种沟通成为一种机制。</p><p>比如，周会制度，晨会制度，联席会议制度等，这些都是比较好的管理沟通平台，遗憾的是很多管理者对此认识并不深刻，没有认识到会议的沟通价值，当然，必须是有效的会议。</p><p>要使会议有效则需要会议管理的技能。沟通平台绝不仅仅限于常规的会议方式。管理者还要熟悉各种管理沟通工具，包括现代移动互联通信工具如微信等等。</p><p>现实中，六个方面都很强的人很少，多数人可能是在某一或某几个方面具有较强的优势，所以在领导班子搭建的时候最好完成以上六种能力的组合。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无我编程的10条诫律</title>
      <link href="/2020/02/04/post/%E6%97%A0%E6%88%91%E7%BC%96%E7%A8%8B%E7%9A%8410%E6%9D%A1%E8%AF%AB%E5%BE%8B/"/>
      <url>/2020/02/04/post/%E6%97%A0%E6%88%91%E7%BC%96%E7%A8%8B%E7%9A%8410%E6%9D%A1%E8%AF%AB%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/1ccYgHixRX1-7vOCGun2DA">无我编程的10条诫律</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>无我编程的10条诫律最早出现在 1971 年 Gerald Weinberg 出版的《程序开发心理学》中。后由Stack Overflow网站的联合创始人 Jeff Atwood 在其2006年5月9日的博文《无我编程的10条诫律》中再次列出。</p><blockquote><p>The Ten Commandments of Egoless Programming</p><p><a href="https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/">https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</a></p></blockquote><p>Jeff Atwood 在其2006年5月12日的博文《无我编程：你的工作不代表你》中，引用 Johanna Rothman的描述，解释了无我编程的由来。</p><blockquote><p>Egoless Programming: You Are Not Your Job</p><p><a href="https://blog.codinghorror.com/egoless-programming-you-are-not-your-job/">https://blog.codinghorror.com/egoless-programming-you-are-not-your-job/</a></p></blockquote><blockquote><p>无我编程发生在开发阶段，表现为技术团队经常通过同级评审的方式来发现软件中的缺陷。目的是让所有人（包括作者）都参与寻找缺陷，而不是证明软件产品里没有缺陷。人们会交换各自手上的代码，相互进行评审，并且大家都有这样的共识：代码的原始作者会犯错误，而作为评审者，他们会找出这些错误。最后的结果是，每个人都从自己的错误以及别人的错误里有所长进。这就是无我编程（egoless programming）的由来。不管我的工作做得“完美”还是“有欠缺”，“我”本人并不对正在开发中的产品负责。“我”的价值体现在尽心尽职，以及从错误中学习而付出的努力，而不是我的工作的最初成果。</p></blockquote><p>Stephen Wyatt Bush在2012年4月7日的博文《爸爸和无我编程十条诫律》中提到：</p><blockquote><p>在爸爸去世前，我和他谈论了2个星期关于编程的事。 </p><p>我22岁，一个在大学里攻读美术设计的四年级的学生。爸爸62岁，一个很老的爸爸。早在世纪60年代他就在田纳西理工大学编程，他在打孔纸带上做FORTRAN开发。他知识丰富。</p><p>这个学期我才刚刚开始接触编程，而我的整个脑子全被它吸引住了。编程很神奇，很强大，在很多方面比图像设计更富创造性(我会在另外的文章里谈论这个话题)。 </p><p>在我假期回到家时，爸爸向我分享了无我编程的十条诫律。他把它打印出来，逐条和我讨论。这是在他意外去世前我们仅有的关于编程的讨论。也许这是让我对此念念不忘的原因。</p><p><a href="http://blog.stephenwyattbush.com/2012/04/07/dad-and-the-ten-commandments-of-egoless-programming/">http://blog.stephenwyattbush.com/2012/04/07/dad-and-the-ten-commandments-of-egoless-programming/</a></p></blockquote><p>tshi&amp;老曹根据网络上流传的翻译版本，对照英文原文，编译如下。</p><h2 id="1-Understand-and-accept-that-you-will-make-mistakes-理解和接受自己会犯错误。"><a href="#1-Understand-and-accept-that-you-will-make-mistakes-理解和接受自己会犯错误。" class="headerlink" title="1. Understand and accept that you will make mistakes. 理解和接受自己会犯错误。"></a>1. Understand and accept that you will make mistakes. 理解和接受自己会犯错误。</h2><p>这是对待自己的态度么？气急败坏可没有任何益处，关键是要在错误进入到生产环境之前把它们找出来。所幸的是，在软件行业中犯错误通常不会导致灾难性事故。我们可以，也应该从错误中吸取教训，微笑，并继续前进。</p><h2 id="2-You-are-not-your-code-不要使用代码来针对个人（你不是你的代码）。"><a href="#2-You-are-not-your-code-不要使用代码来针对个人（你不是你的代码）。" class="headerlink" title="2. You are not your code. 不要使用代码来针对个人（你不是你的代码）。"></a>2. You are not your code. 不要使用代码来针对个人（你不是你的代码）。</h2><p>这是对待同行的第一个态度吧？要记住，代码评审的目的是为了找出问题，而且最终会找到问题。如果真的找到了问题，请不要把它作为针对个人的借口（当有问题疏漏时不要自责）。</p><h2 id="3-No-matter-how-much-“karate”-you-know-someone-else-will-always-know-more-不管你知道多少“秘籍”，总有人比你知道得更多。"><a href="#3-No-matter-how-much-“karate”-you-know-someone-else-will-always-know-more-不管你知道多少“秘籍”，总有人比你知道得更多。" class="headerlink" title="3. No matter how much “karate” you know, someone else will always know more. 不管你知道多少“秘籍”，总有人比你知道得更多。"></a>3. No matter how much “karate” you know, someone else will always know more. 不管你知道多少“秘籍”，总有人比你知道得更多。</h2><p>对待学习的态度？敏而好学,不耻下问。如果你开口，他们就会教你更多的东西。从别人那里寻找和接受新的知识，特别是那些你认为不太需要的知识。</p><h2 id="4-Don’t-rewrite-code-without-consultation-不要在没有讨论的情况下重写代码。"><a href="#4-Don’t-rewrite-code-without-consultation-不要在没有讨论的情况下重写代码。" class="headerlink" title="4. Don’t rewrite code without consultation. 不要在没有讨论的情况下重写代码。"></a>4. Don’t rewrite code without consultation. 不要在没有讨论的情况下重写代码。</h2><p>对待代码的态度？“修复代码”与“重写代码”是有明显的区别的。了解这些区别，并且在代码审查的制度下做风格上的调整，不要独断专行。</p><h2 id="5-Treat-people-who-know-less-than-you-with-respect-deference-and-patience-尊重比你懂得少的人，并对他们抱以耐心。"><a href="#5-Treat-people-who-know-less-than-you-with-respect-deference-and-patience-尊重比你懂得少的人，并对他们抱以耐心。" class="headerlink" title="5. Treat people who know less than you with respect, deference, and patience. 尊重比你懂得少的人，并对他们抱以耐心。"></a>5. Treat people who know less than you with respect, deference, and patience. 尊重比你懂得少的人，并对他们抱以耐心。</h2><p>这是对待同行的第二个态度吗？与技术人员打交道的非技术人员认为技术人员要么是妄自尊大的讨厌鬼，要么是爱撂挑子的倔驴。所以，我们不要用我们的愤怒和不耐烦去加深他们对我们的这种印象。</p><h2 id="6-The-only-constant-in-the-world-is-change-这个世界唯一不变的就是变化。"><a href="#6-The-only-constant-in-the-world-is-change-这个世界唯一不变的就是变化。" class="headerlink" title="6. The only constant in the world is change. 这个世界唯一不变的就是变化。"></a>6. The only constant in the world is change. 这个世界唯一不变的就是变化。</h2><p>对待环境的态度？ 敞开胸怀，面带微笑地去拥抱变化。把每一个需求变更、平台变更或工具变更都看成是一个新的挑战，而不是令人厌恶的麻烦。</p><h2 id="7-The-only-true-authority-stems-from-knowledge-not-from-position-真正的权威来自知识，而不是职位。"><a href="#7-The-only-true-authority-stems-from-knowledge-not-from-position-真正的权威来自知识，而不是职位。" class="headerlink" title="7. The only true authority stems from knowledge, not from position. 真正的权威来自知识，而不是职位。"></a>7. The only true authority stems from knowledge, not from position. 真正的权威来自知识，而不是职位。</h2><p>对待知识的态度？知识造就权威，权威带来尊敬——所以，如果你想要在一个无我的环境里得到尊重，那么充实你的知识吧！</p><h2 id="8-Fight-for-what-you-believe-but-gracefully-accept-defeat-坚定你的立场，优雅地接受挑战。"><a href="#8-Fight-for-what-you-believe-but-gracefully-accept-defeat-坚定你的立场，优雅地接受挑战。" class="headerlink" title="8. Fight for what you believe, but gracefully accept defeat. 坚定你的立场，优雅地接受挑战。"></a>8. Fight for what you believe, but gracefully accept defeat. 坚定你的立场，优雅地接受挑战。</h2><p>对待思考结果的态度？要知道，你的想法有时候会遭到反对。就算最后证明你是对的，也不要总是试图报复，不要总是叫嚷着“我早就说过”。千万不要让你心爱的被抛弃的想法变成殉道者或抱怨素材。</p><h2 id="9-Don’t-be-“the-guy-in-the-room“-不要成为“角落里的程序员”。"><a href="#9-Don’t-be-“the-guy-in-the-room“-不要成为“角落里的程序员”。" class="headerlink" title="9. Don’t be “the guy in the room“.不要成为“角落里的程序员”。"></a>9. Don’t be “the guy in the room“.不要成为“角落里的程序员”。</h2><p>这是对待沟通的态度么？不要躲在角落里写代码，就算偶尔露个面，也只是为了买一杯咖啡。藏在角落的里程序员短视、与世隔绝、不受控制。这样的人在公开的、合作的工作环境中可能发不出声音。</p><h2 id="10-Critique-code-instead-of-people-–-be-kind-to-the-coder-not-to-the-code-批评代码，而不是人。"><a href="#10-Critique-code-instead-of-people-–-be-kind-to-the-coder-not-to-the-code-批评代码，而不是人。" class="headerlink" title="10. Critique code instead of people – be kind to the coder, not to the code. 批评代码，而不是人。"></a>10. Critique code instead of people – be kind to the coder, not to the code. 批评代码，而不是人。</h2><p>这是对待代码的态度？对人友善，但不要对代码友善。让你所有的评审为代码带来积极的改进，把你的评审与局部标准、程序规范和更好的性能结合在一起。</p><p>因为指出了我们的工作态度，这些关于人们编程活动的原则永不过时。《程序开发心理学》写于1971年，老曹在那一年刚刚出生。虽然已经过去了几十年，但这些原则并没有被时间侵蚀，程序员普遍很强的自尊心也没有被侵蚀。</p><p>程序员普遍很自我（ego），专家们也都好为人师。在有部门边界的大型组织中，或者是层级结构的小型组织中，技术人员在讨论问题时，往往包含了自己的价值取向，利益选择。也就是屁股决定了脑袋。</p><p>把自我价值观从本职工作中分离出来是很重要的！</p><blockquote><p>你的工作不代表你。你的价值不在于你银行里有多少钱，也不在于你穿什么鞋，或者你钱包里的任何证件。</p><p>电影《搏击俱乐部》（Fight Club）里的几句台词</p></blockquote><p>如果你的工作不代表你，接受别人对你工作的批评就要容易得多了！</p><p>遗憾的是，对工作不敬业的人在这个世界上随处可见。而对于这些热爱编程、并且已经成为行家里手的人来说，我们有走向另一个极端的趋势——我们太在乎了：</p><blockquote><p>在程序开发的早期岁月里，程序被认为是程序员的私有财产。一个人不会去读他的同事的程序，就像他不会在未经许可的情况下去读别人的情书。从本质上来说，程序就是程序员写给机器的情书，里面充满了只有当事人才知道的私密信息。于是，程序里充斥着宠物的名字，还有情人之间的昵称——他们活在幸福的二人世界里，眼里只有对方。这种程序对于局外人来说，简直不知所云。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子邮件，应该是这样写滴（n个好习惯让我们避免互相伤害）</title>
      <link href="/2020/02/04/post/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%98%AF%E8%BF%99%E6%A0%B7%E5%86%99%E6%BB%B4%EF%BC%88n%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF%E8%AE%A9%E6%88%91%E4%BB%AC%E9%81%BF%E5%85%8D%E4%BA%92%E7%9B%B8%E4%BC%A4%E5%AE%B3%EF%BC%89/"/>
      <url>/2020/02/04/post/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%EF%BC%8C%E5%BA%94%E8%AF%A5%E6%98%AF%E8%BF%99%E6%A0%B7%E5%86%99%E6%BB%B4%EF%BC%88n%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF%E8%AE%A9%E6%88%91%E4%BB%AC%E9%81%BF%E5%85%8D%E4%BA%92%E7%9B%B8%E4%BC%A4%E5%AE%B3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/InXo0cwgqdIjzPzHsbS1vg">电子邮件，应该是这样写滴（n个好习惯让我们避免互相伤害）</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>在当年入职百度的时候，被俞军培训过电子邮件文化，其中所谈的理念和习惯一直沿用至今。有几次看到别人电子邮件中存在令人抓狂的细节和可以做的更好的部分，都会给些建议甚至还做过专门的小交流。为了避免重复再重复的说同样的话，干脆把一些重点写下来分享下吧。</p><h2 id="1、要发给相关的人，不要发给不相关的人"><a href="#1、要发给相关的人，不要发给不相关的人" class="headerlink" title="1、要发给相关的人，不要发给不相关的人"></a>1、要发给相关的人，不要发给不相关的人</h2><p>这句看上去就是废话，对吗？但是很多邮件却都做不好这点，而这也许是电子邮件文化中最重要的一条。</p><p>要发给相关的人，首先是发对人，以及是让与此有关的人尽量知悉，就像建议让小白兔吃胡萝卜的事应该发给小白兔，抄送兔子妈妈，前者是直接人物，后者是相关人物。一般我们较少会发错直接人物，但经常会忘记也发给相关人物，这样容易造成信息传递的缺失，要知道兔子妈妈肯定会关心这件事，而且可能需要她来帮忙做胡萝卜刺身，所以她应该知晓或被通知到。</p><p>不要发给不相关的人，目的是避免其他人收到不必要的干扰。很多人都会抱怨电子邮件太多，而其中肯定有一部分是不需要收的。你们家小白兔要不要吃胡萝卜，你顶多也发给吃胡萝卜的小山羊，干嘛告诉小老虎呢？除了有一些流程要求的，或是需要特别知晓的事，并不需要也告知所有部门以及上级和上上级，虽然这样看似没有错，但造成了资源浪费、降低效率，如果每个人都这样做就成了“互相伤害”，而且容易造成遗漏真正重要的信息。</p><h2 id="2、TO谁和CC谁"><a href="#2、TO谁和CC谁" class="headerlink" title="2、TO谁和CC谁"></a>2、TO谁和CC谁</h2><p>新人往往搞不清楚TO（发送）和CC（抄送）要怎么用，因为无论TO还是CC，最终都发邮件给了这些人，所以有的人就会全用TO，或者随意CC，但这样并不专业。</p><p>简单来说，TO是发给邮件的直接人物，他们是必须看到邮件和作出回应的人，而CC则是相关人物，一般来说吃瓜就好了，觉得有必要的时候才去参与。</p><p>TO和CC主要是为了收件人的方便，他们可以利用邮件规则，优先处理那些重要级邮件，而把CC这种可看可不看的延后或忽略处理，这样才能保证邮件真正被效率使用。</p><h2 id="3、回应、及时回应"><a href="#3、回应、及时回应" class="headerlink" title="3、回应、及时回应"></a>3、回应、及时回应</h2><p>谁也不想让自己的邮件石沉大海、有去无回，所以我们需要重视回应。</p><p>作为被TO的直接人物，是必须要回应的且及时回应的，除非对方发送的是通知类信息。所谓及时回应，特别对于那些无法快速有结论的邮件，所要给出的只是如“邮件收到，稍后回复”这样的信息，起码让对方知道这封邮件被收到看到了，会被处理。如果不这么做，也许发件人总会惦记这件事，或者又再发邮件或用电话来问你收到没有，再次造成了效率的低下和资源的占用。</p><p>作为发件人，对于特别重要的事项，也请在邮件中明确告诉收件人自己要求回应，这样的邮件一般都会被如愿处理。</p><p>大家都知道电子邮件并非一来一往就结束了，它会传播、扩散、分叉……更像是一个击鼓传花的游戏，那么作为游戏里每一个拿到花的人，你的责任就是告诉你的上一位你拿到花了，让他可以稍事放下，然后你再继续传给下一位，或是在你这里让游戏结束。</p><h2 id="4、一次一个主题"><a href="#4、一次一个主题" class="headerlink" title="4、一次一个主题"></a>4、一次一个主题</h2><p>通常来说，一次只做一件事比做好几件事要效率高，邮件更是如此。</p><p>当一封邮件里包含了几件事的时候，过程和结果都会一团糟。因为不同的事，不同的人的回复会让你像早期IRC聊天室那样，每个人都在发言，有单独A对B的、A对D的，也有C对所有人的，没有任何针对标识，所有的信息混在一起，阅读和追踪都很费力。</p><p>所以，一封邮件尽量只说一件事，或是就一个主题说。如果有多个主题，那请不要嫌麻烦，多发几封邮件就好了，反而效率更高。</p><p>不过，回复的邮件往往会扯出其他相关主题的事，这很正常也很频繁，我的建议还是一样，可以另外新建邮件，如果要带上历史内容转发，那请务必注意修改邮件标题，因为已经是另外一个主题了。</p><h2 id="5、标题就是效率"><a href="#5、标题就是效率" class="headerlink" title="5、标题就是效率"></a>5、标题就是效率</h2><p>标题是我们浏览、搜索，对邮件进行选择处理的关键，它直接影响我们处理邮件的效率。</p><p>如果你的直接、简洁、准确邮件标题就能表达100%的邮件内容，那最好了。“请用某某公司注册‘目标日记’的9类文字商标”这样的标题肯定好过用“麻烦注册商标”在加上里面的详细解释要方便的多，仅从标题我们就很清楚是什么具体的事，可以选择是否立即处理或是稍后再看，在未来需要查询邮件的时候，搜索“目标日记”加“商标”就能快速定位到它，而不是不好搜，或是搜出N封关于“商标”的邮件再挨个去翻。</p><h2 id="6、金字塔原理和一句话能力"><a href="#6、金字塔原理和一句话能力" class="headerlink" title="6、金字塔原理和一句话能力"></a>6、金字塔原理和一句话能力</h2><p>好玩的是，《金字塔原理》那本书一点都不“金字塔原理”，所以不推荐看。</p><p>“金字塔原理”应用的反例是先说原因，比如给你讲一堆历史背景和信息逻辑作为铺垫，再抛出几个方案，最终才表达观点。而当你投入时间和思考，发现前面这些信息不相关或不重要的时候，时间已经被浪费了。所以建议的操作是，直接抛出你的目的和结果，简单解释原因或者暂时先不用解释，如果对方回复表示疑问，再去简单解释和深入解释。同样，作为信息的接受人，也会相当减负，不用先进行信息处理，而是得到一个明确的结果，如果没有问题则不需要进行后面的交流，如果有问题也可以针对沟通，而不是了解全部信息。</p><p>金字塔原理主要讲述的是表达的顺序的不同会使得效率不同，但如果你能直奔主题、简洁准确表达关键信息，用“一句话”就讲清楚事情内容，那会是比金字塔原理更优的结果。</p><h2 id="7、格式和附件"><a href="#7、格式和附件" class="headerlink" title="7、格式和附件"></a>7、格式和附件</h2><p>当大家都更多使用手机收发浏览电子邮件的时候，收到一封带有2张图片却被打包成RAR文件附件的时候，你抓狂不？</p><p>这是因为发件人没有为对方考虑，或是没有经历过对方的使用场景。我会这么做：</p><ul><li>尽量使用纯文本写邮件，因为重要的是内容、其次是正常展现（很多html格式的邮件在不同客户端是展现不了或展示不全的）</li><li>除非文件很多很大，否则尽量不使用压缩包文件，因为手机很难做解压缩操作</li><li>能发JPG就不发PDF，或是额外附加PDF版本，便于直接预览</li><li>提炼一部分附件的重要内容到邮件正文方便对方直接浏览，而不用非得打开附件；同上，把表格内容做截图图片，这样也不用非打开附件<br>尽量用直接清晰表达附件的命名，而不是图片1、图片2或无序名称，方便对方准确选择查看</li></ul><p>除了上面的习惯，还有几个小技巧：</p><ul><li>当对方有可能长时间无法回复，而你却需要尽快展开行动时，可以在邮件里特别标明“如果没有在约定时间内收到你的回复，会视为你默认同意，我将开始执行某某项目”之类的话，这样可能会迫使对方及时回复你，或者你也做好了相应通知</li><li>当发现邮件流开始变的越来越长，越来越复杂的时候，停止在邮件里深入讨论，用电话或召开会议当面解决</li><li>大部分邮件的最后都可以跟上“谢谢”，“感谢”或其他话语，虽然你的情感不一定那么强烈，但对方会感受到你的友好，也会带着好的情绪处理你的邮件，对于某些你特别想感谢对方的，可以适当加上感叹号，这样对方也能get到</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程一生《三言》</title>
      <link href="/2020/02/04/post/%E7%BC%96%E7%A8%8B%E4%B8%80%E7%94%9F%E3%80%8A%E4%B8%89%E8%A8%80%E3%80%8B/"/>
      <url>/2020/02/04/post/%E7%BC%96%E7%A8%8B%E4%B8%80%E7%94%9F%E3%80%8A%E4%B8%89%E8%A8%80%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘抄自微信公众号 <strong>编程一生</strong> <mark class="hl-label green">转载</mark> </p></blockquote><ul><li>问别人之前最好先自己百度，google一下，以免问出太低级的问题。</li><li>要有多自律，就有多自由，保持严谨，不失弹性。</li><li>高效率，慢生活。</li><li>格局决定结局，态度决定高度。</li><li>别说你爬过的山，只有早高峰。</li><li>只有重塑自己的习惯，才能过上自己想要的人生。</li><li>考虑可维护性比考虑性能更重要。</li><li>请勿久坐，多喝水，尤其是遇到很久都解决不了的问题的时候，多走动走动。</li><li>普通程序员+google&#x3D;超级程序员。实在不行，百度也可以，学会利用搜索引擎来辅助自己解决问题。</li><li>一个好的程序员是那种过单行线马路都要往两边看的人。</li><li>编程时要保持这种心态：就好像将来要维护你这些代码的人是一位残暴的精神病患者，而且他知道你住在哪。</li><li>任何你写的代码，超过6个月不去看它，当你再看时，都像是别人写的。 –Eagleson’s law</li><li>从小事做起，然后再扩展。</li><li>熬夜低效率写代码，不如好好睡觉。</li><li>让自己变得更好，是解决一切问题的关键。</li><li>发版后出了问题第一时间回滚，千万不要想不可能是自己造成的。</li><li>每周五抽出时间问一下上下游业务方，目前有什么问题吗？</li><li>上线前问自己：你有多大把握不出问题？</li><li>所有事情所花费的时间总是比你预期的要长。</li><li>是人就是要死的，是机器就是要坏的，是程序就是要出bug的。</li><li>修复已知错误，然后再看看有没有遗漏的地方。</li><li>尽早地添加日志记录和错误处理。</li><li>一次只改变一件事。</li><li>在整体测试之前先进行模块测试。</li><li>把觉得不靠谱的需求放到最后做，很可能到时候需求就变了，或者取消了。</li><li>读好书，垃圾书会浪费你的时间。</li><li>不要炫技，面向人脑编程更便于维护。</li><li>没事别重复造轮子，你造的轮子大多数时候只有你觉得好用。接手你的轮子的人会在背后骂你上百遍。</li><li>不要先写框架再写实现。最好反过来，从原型中提炼框架。</li><li>新技术一定不要找书，书一旦印出来就过时了。</li><li>作为前端开发者，使用双显示器能大幅提高开发效率。</li><li>再精密的机器，拆开看都是简单的小螺丝。</li><li>我走过最长的路，就是你的套路。</li><li>要事重复做，重复流程化，流程用工具，工具自动化。</li><li>时间管理的本质，是对事件进行分类，排序。</li><li>腾讯微博：与其在别处观望，不如在这里并肩。</li><li>比起鼓励师，不如给程序员找一个靠谱的产品经理。</li><li>中午不睡，下午崩溃。</li><li>一个团队，需要5个共享：文件、日程、清单、群聊、知识管理。</li><li>小米手机：一面是科技，一面是艺术。</li><li>中兴手机：因为专注所以专业。</li><li>锤子手机：漂亮的不像实力派。</li><li>越难解决的bug往往犯的错误越低级。</li><li>多沟通，不少加班工作是由于沟通少造成的。</li><li>你遇到的问题，大多数人都遇到过，并且网上都有完整的解决方案，你找不到，只是你懒得去找。</li><li>没有巧合。</li><li>面对面的交流最有效。</li><li>带着问题睡觉。</li><li>打好日志，不要指望复现来查找原因。</li><li>真的勇士，敢于直面惨淡的warning，敢于正视淋漓的error。</li><li>删除的代码是没有Bug的代码。 –Jeff Sickel</li><li>当你想在你的代码中找到一个错误时，这很难；当你认为你的代码是不会有错误时，这就更难了。 –Steve McConnell 《代码大全》</li><li>如果建筑工人盖房子的方式跟程序员写程序一样，那第一只飞来的啄木鸟就将毁掉人类文明。 –Gerald Weinberg</li><li>项目开发的六个阶段：充满热情、醒悟、痛苦、找出罪魁祸首、惩罚无辜、褒奖闲人。</li><li>你必需强迫自己接受应有的骄傲，真正赞叹自己，摆脱外界评价，独立思维。 –叔本华</li><li>不能一味钻研技术，然后再考虑用在什么产品上，以及用什么方法卖出去，应用产品主导思维，从客户体验出发，继而回头考虑技术上的可行性。从产品出发再回溯到技术上实现。把别人复杂的东西变得简洁。 –乔布斯</li><li>做对用户有价值的事，保持自身的价值观，因为它体现在产品和服务中，保持小团队，保持敏捷，学习和快速迭代比过去的经验更重要，系统思维，让用户带来用户，口碑赢得口碑，思辨胜于执行。 –张小龙</li><li>如果你拷问数据到一定程度，它会坦白一切。</li><li>数据本身是无用的，除非你从中获取到有价值的洞察。</li><li>我们只信奉上帝，其他人都必须携数据而来。</li><li>我们不是为了做技术而做技术，做技术是为了满足人类需求的。</li><li>完美主义是好事儿，但是，坚持完美主义的同时要限时限量地完成，才能形成执行力。</li><li>摩托罗拉公司对缺陷的定义是：“如果顾客不喜欢，那该产品就是有缺陷。”</li><li>越是好的公司，越是好的项目组在招开发人员时他们面的东西越是底层。</li><li>提升码农亩产，掰直码农方向，授人以渔，功德无量，利在千秋。</li><li>大牛仅仅是利用他们所掌握的“原理级”技术，将“应用级”技术进行不同的排列组合而已。</li><li>一个人写的烂软件会给另一个人带来一份全职工作。 –Jessica Gaston</li><li>按代码行数来评估软件开发的进度，就如同按重量来评估飞机建造的进度。 –比尔-盖茨</li><li>在水上行走和按需求文档开发软件都是很容易——前提是它们都是冻结状态。 –Edward V Berard</li><li>世界上只有两类编程语言：那些拥有被人诟病的和那些没人用的。 –Bjarne Stroustrup</li><li>注释代码很像清洁你的厕所——你不想干，但如果你做了，这绝对会给你和你的客人带来更愉悦的体验。 –Ryan Campbell</li><li>培养员工，即使他们有跳槽的风险。什么都不做而留他们在公司，这样风险更大。</li><li>面向运维编程。</li><li>做正确的事而不是容易的事。</li><li>前期追深度，否则会华而不实，后期追广度，否则会坐井观天。</li><li>年薪月薪是相当有欺骗性的东西。真正起作用的，是时薪，你一定要看看自己的单位时间是否更加值钱。</li><li>要有足够的 “亮剑” 资本。</li><li>技术之路最公平也最残酷的原因是：没有捷径，需要日积月累的积累，以及对技术持久的热情。</li><li>是否使用框架，使用什么样的框架，这都不是重要的，重要的是我们要有框架的意识。</li><li>想法把自己变得不重要，以实现其他重要的目标。</li><li>一种新技术一旦开始流行，你要么坐上压路机，要么成为铺路石。–Stewart Brand</li><li>预备，开火，瞄准：这是最快的软件开发方法。预备，瞄准，瞄准，瞄准，瞄准：这是最慢的软件开发方法。</li><li>评估一个事情要比去理解你评估了什么容易。</li><li>提高知识和技术知识只是问题的表面。根本是要提高自己认识问题、分析问题、解决问题的思想高度。</li><li>养成总结与反思的习惯，并有意识地提炼出工作成果，形成自己的个人源码库、解决某类问题的通用系统体系结构、甚至进化为框架。</li><li>在一种语言上编程，但别为其束缚了思想。</li><li>上线代码前问自己一个问题：我怎么证明自己的代码是对的。</li><li>流程是用来保证底线的，自己的能力决定上限。</li><li>很多事情只要做了就可以，比如：给开源项目贡献代码。</li><li>昨晚多几分钟的准备，今天少几小时的麻烦。</li><li>做对的事情比把事情做对重要。</li><li>只有一条路不能选择——那就是放弃的路；只有一条路不能拒绝——那就是成长的路。</li><li>很多人都在谈论AI，我不担心机器人会像人一样思考，我担心人像机器一样思考 –苹果首席执行官库克</li><li>要应付面试并通过面试并不难，但是，千万不要应付你的人生，你学技术不是用来面试的，它至少来说是你谋生的技能，要尊重自己的谋生技能，说不定哪天你要用这些技能造福社会、改变世界的。</li><li>99%的程序员把时间花在了超长加班，花在了朋友圈微博知乎和今日头条，他们的英文能力有限，不能获取第一手的资料，所以只要你看英文文章，能静下心来读几本好书，写写博客，做一些训练，完全不用努力，你就可以超越99%的人。 –出自《左耳听风》陈皓</li><li>很多问题不见得会出在你身上，但你亦需要想法解决问题，否则就会变成你的问题。</li><li>懂得但策略的说不（不会这个准备累死吧，程序员）。</li><li>不断规划与寻找自己的人生，想法把自己变重要。</li><li>简单是可靠的前提条件。</li><li>真正程序员从来不写代码的注释，如果代码非常难写，那么同样代码的注释也会非常难懂。</li><li>看看当前计算机程序糟糕的事态，软件开发明显一直是一门妖术，其仍然不能被称为一个工程学。 –比尔.克林顿 美国前总统</li><li>任何业绩的质变都来自于量变的积累。</li><li>不为失败找理由，要为成功找方法。</li><li>十年生死两茫茫，写bug，到天亮。相顾无言，唯有泪千行。料得明日上线后，需求改，又白忙。</li><li>避免过早优化。</li><li>三次化简方案。</li><li>Talk is cheap, show me the data!</li><li>支持幂等是一个接口的基本素养。</li><li>站在巨人的肩膀上，别重复造轮子。</li><li>做减法设计。</li><li>选择决定命运，认知决定选择。</li><li>早重构，常重构。</li><li>不要假定，要证明。</li><li>先做小做精，再做大做全。</li><li>目标高远，脚踏实地。</li><li>与用户一同工作，以像用户一样思考。 –《程序员修炼之道》</li><li>多思考，想清楚，查明白，慢动手。</li><li>程序总是会出问题的，做好兜底。</li><li>要解决一个问题，第一树立好目标，第二划分好阶段。</li><li>故障是常态。Don’t try to avoid failure! Embrace them!</li><li>写任何一段代码问自己两个问题：1. 怎么证明自己是对的？2. 出问题了怎么办？</li><li>事前、事中、事后。</li><li>任何团队的核心骨干，都必须学会在没有鼓励，没有认可，没有帮助，没有理解，没有宽容，没有退路，只有压力的情况下，一起和团队获得胜利。成功，只有一个定义，就是对结果负责。如果你靠别人的鼓励才能发光，你最多算个灯泡。我们必须成为发动机，去影响其他人发光，你自然就是核心！– 马云</li><li>最好维护的代码是还没有写出来的代码，三思而后行。</li><li>一个成功的、积极的学习者应该是一个愿意改变自己思想的人。</li><li>做任何事情之前，先定义完成的标准。</li><li>优秀程序员应该有三大美德：懒惰、急躁和傲慢。</li><li>事情往前做，有问题尽早暴露。</li><li>用业务的语言写代码。</li><li>排查问题的最高境界是只通过review代码来发现问题。</li><li>软件设计的核心在于降低复杂性。</li><li>默认所有需求都不做，直到弄清楚为什么要做这件事。</li><li>比做什么事更重要的是找对做事的人。</li><li>要多想着怎么把蛋糕做大，而非怎样切蛋糕才能使自己获得最大的一块。</li><li>痛苦 + 反思 &#x3D; 进步</li><li>对程序员最好的惩罚是让他维护自己三个月前写的代码。</li><li>了解一个项目，从大图景开始。</li><li>比被要求的多做一点。</li><li>自己思考：你想要什么？事实是什么？如何行动？</li><li>跳出程序员思维，扩大自己的上下文。</li><li>动手做一个工作之前，请先对它进行任务分解。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈“五级工程师和职业发展”的思考</title>
      <link href="/2020/02/04/post/%E8%B0%88%E8%B0%88%E2%80%9C%E4%BA%94%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%92%8C%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E2%80%9D%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/02/04/post/%E8%B0%88%E8%B0%88%E2%80%9C%E4%BA%94%E7%BA%A7%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%92%8C%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E2%80%9D%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://liudanking.com/beautiful-life/five-level-engineer-and-career/">谈谈“五级工程师和职业发展”的思考</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>再过几个小时，春节长假就结束了。我想，不管过去的一年过的怎样，大部分工程师们对开年的的工作和生活都应该是有所憧憬和计划的，我也不例外。只不过我选择了把前年在<a href="https://zh.wikipedia.org/zh-hans/%E5%90%B4%E5%86%9B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AE%B6)">吴军</a>老师《硅谷来信》上看到的《五级工程师和职业发展》重温了一下（版权原因，我这里无法提供原文的链接，但这一定阻挡不了聪明、求知若渴的你）。如果你看过原文，我依然觉得你不妨看看这里的思考，因为我所思考的可能更贴近实际的你。</p><h2 id="什么是“五级工程师”？"><a href="#什么是“五级工程师”？" class="headerlink" title="什么是“五级工程师”？"></a>什么是“五级工程师”？</h2><p>著名前苏联物理学家<a href="https://zh.wikipedia.org/wiki/%E6%9C%97%E9%81%93">朗道</a>曾经给出过一个五级物理学家的划分，吴军老师在此基础上，给出了“五级工程师”的划分：</p><ul><li>第五级：能独立解决问题，完成工程工作；</li><li>第四级：能指导和带领其他人一同完成更有影响力的工作；</li><li>第三级：能独立设计和实现产品，并且在市场上获得成功；</li><li>第二级：能设计和实现别人不能做出的产品，也就是说他的作用很难取代；</li><li>第一级：开创一个产业。</li></ul><h2 id="你处在哪一级？"><a href="#你处在哪一级？" class="headerlink" title="你处在哪一级？"></a>你处在哪一级？</h2><p>五级工程师的划分非常简洁，但是却有点抽象。我举几个大家熟悉的人物，方便大家进行定位：</p><ul><li><a href="https://blog.codingnow.com/">云风</a>, 第三级；</li><li><a href="http://www.ruanyifeng.com/blog/">阮一峰</a>，第三级；</li><li><a href="http://blog.sina.com.cn/u/1654762921">范凯</a>，第四级；</li><li><a href="http://www.baike.com/wiki/%E7%8E%8B%E5%9E%A0">王垠</a>，第五级；</li><li><a href="http://macshuo.com/">池建强</a>，在用友度过了第五级和第四级，到锤子科技，以及后来加入极客帮逐步升级到第三级；</li><li><a href="http://dbanotes.net/">冯大辉</a>，在支付宝时为第四级（阿里P8），后来加入丁香园，现在创业无码科技输出产品后到了第三级。如果无码在医疗搜索上能独树一帜，我觉得应该能到2.5级。</li><li><a href="https://research.google.com/pubs/jeff.html">Jeff Dean</a>, Linus, <a href="https://zh.wikipedia.org/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87">丹尼斯.里奇</a>, <a href="https://zh.wikipedia.org/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A">肯·汤普逊</a>，第二级；</li><li>爱迪生、福特、贝尔、香农、<a href="https://zh.wikipedia.org/zh-hans/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德.斯托曼</a>，第一级。</li><li>爱因斯坦, 第0级；</li></ul><p>需要说明的是，以上只是我自己的一个主观划分，上面的大牛在每个人心中的位置因为了解程度和和主观倾向不同，划分的结果可能有区别。这里只是参照，方便大家自我定位。</p><p>尤其要指出的是，我这里并不是要黑王垠。细说起来我还请垠兄吃过饭，应该对他还算了解，只是对于大众来说，他至今（2018.02）还没有向人们展示一个有足够影响力的产品（无论是面向开发者的技术产品还是面向普通用户的应用产品）。<del>近期他把自己的博客删除了，关于他的消息逐渐少了，也许当他回归的那天，他会直接从第五季跃迁到第三级。</del> 王垠博客在这篇博文发表没几天就恢复访问了，他最近发表的博文《真相》道出了他准备认真写书的计划，采取自愿付费的方式。有兴趣的同学可以支持一下他，希望他能带了一点点difference.</p><p>严格的说，第五级并不是一个轻而易举就能达到的级别。但是，只要是一个善于思考，手脚轻快的新晋工程师在工作一两年以后，达到是没有问题的。如果你每天做的事情都是一些简单重复性的事情，那么我想其实是不能算为第五级工程师的。</p><h2 id="如何打怪升级？"><a href="#如何打怪升级？" class="headerlink" title="如何打怪升级？"></a>如何打怪升级？</h2><p>对于工程师来说，确定性的输入和输出是最容易解决的问题。那么，我们知道了这个划分以后，如何来指导自己的职业发展进行打怪升级呢？我觉得需要想清楚以下几件事。</p><h3 id="级别之间人与人的能力、能力圈的差距是数量级的"><a href="#级别之间人与人的能力、能力圈的差距是数量级的" class="headerlink" title="级别之间人与人的能力、能力圈的差距是数量级的"></a>级别之间人与人的能力、能力圈的差距是数量级的</h3><p>以前跟同事一起饭后散步的时候，我经常说人和人之间的差距是无法想象的，如果一个人内心做不到真正的谦逊，那一定是他没有见过真正优秀的人。对于工程师级别的划分也是一样的，优秀工程师与普通工程师的差距是数量级的，而不是线性的，更不是想象的只差一点点。回到自己身上，抬头看一下上面👆列出的代表性工程师，客观评估一下与他们的差距，是否有种路漫漫而修远兮的感觉？但是，我们并不用失望，要知道，对于大航海时代的船长来说，正式知道了自己的位置才支撑着他们战胜了风浪和败血症，最终发现了新大陆。</p><p>这个数量级我觉得不用定太大，<a href="http://www.techug.com/post/reading-is-a-good-hobby.html">《The Rise of Developeronomics》</a>提到的“10倍效率工程师”应该是比较合适的。即每个级别相差10倍。</p><p>想清楚了这一点，能大大缓解程序员之间天然的鄙视链，内心也变得不那么天生骄傲。你身边一定会有你觉得是“菜鸟”的同事。对于这类同事，说你的工作效率和工作输出是他们的3~5倍，可能你不会反对，但是扪心自问你的工作能力是他们的10倍吗？如果这里你需要掂量一下，那么就默默放下你心中对他们的相对优越感吧，毕竟你们之间还是在同一个级别，你们之间的差距很可能只是时间经验的积累罢了。</p><p>此外，级别之间的差距不仅要求的专业能力要有数量级的提升，对于能力圈的大小也需要有数量级的提升。你身边一定有薪酬和工作效率跟刚毕业不久的年轻人差不多的老同事。这类同事工作勤恳，保质保量，人也很nice, 但是每当想考虑晋升机会的时候，总是拿不出像样的亮点帮他一把。这部分人很多是工作能力提升以后，能力圈没有跟上导致的。这里并没有对老同事不敬的意思，我也承认有些老同事是因为性格或自主选择的因素在一个职位上做很长一段时间。</p><p>级别之间的数量级差距是挑战也是巨大的机遇。因为这也意味着每提高一级，会筛选掉大约等数量级的人，这也就意味着你具备了竞争更好的职位和薪酬的机会。近几年，很多人都感慨说「IT行业的红利要逐步过去了，我们会不会成为下一代失业的民工？」，也有很多开发者不无担心的说「AI都会写代码了，会不会让程序员失业？」其实，这种担心至少目前来说是多余的。要知道，在人类发展历史上，无论是第一次工业革命还是第二次工业革命，淘汰人的不是机器而是更优秀的人。至于AI，现在只能说是「智能的人工」，依然任重道远。</p><h3 id="第五级工程师容易犯的错误"><a href="#第五级工程师容易犯的错误" class="headerlink" title="第五级工程师容易犯的错误"></a>第五级工程师容易犯的错误</h3><p>上面说了五级工程师其实不是一个容易达到的级别。一般来说，主程、核心开发人员可以认为是这个级别。对应到医疗体系的话，至少是主治医师才能算第五级。吴军老师在文中举了一个第五级工程师的例子，方便大家自我评估：</p><blockquote><p>这个人在京东公司任职，老板让他做一个工具，找出那些不断帮助女（男）朋友买书的读者。他自己知道在公司内找谁去要数据，如何确认两个人可能是男女朋友，而且经常买书。也知道自己在京东公司的环境里，应该使用什么样的开发工具。以及为了方便客户使用，这个工具应该有什么样的基本功能。</p></blockquote><p>如果你达到了第五级，恭喜你已经登堂入室，可以欢快的向第四级工程师进发啦。但是就我身边的观察，很多达到这一级别向后发展的路上，往往容易走一些弯路：</p><ol><li><p>逐渐进入舒适区，从脑力劳动者变成体力劳动者。「擅长主动学习和喜欢迎接挑战」说起来容易，其实在长久的工作中是一个特别难坚持的事情。练级之路没有捷径，学习和成长本来就是痛苦的，习惯这种痛苦吧。</p></li><li><p>喜欢研究武器，但是却不上场杀敌。我身边C++背景的人尤其容易犯这个错误（此处感觉要被C++开发者喷）：喜欢研究因为语言历史和设计问题导致的一些晦涩且trick的用法，自觉高深，但是工作输出上却缺乏善可陈。在公司的整个商业行为中，技术是其中的一个环节，如果你不是那么确定自己要在这个技术方向上发展十年，那么你花一定时间研究这些技术是可以的，但是一定不能忘了公司是有成本和效率要求的。</p></li><li><p>容易陷入「技术做了N年，要不要转管理」的怪圈不能自拔。上面提到了，每升一级，需要能力和能力圈的同步提升。因此「转管理」对于不准备丢掉技术的工程师来说本身就是一个伪命题。你的影响力在第五级达到一定程度的时候，即使你没有职位的授权，你推动很多事情都是流畅和自然的。工程师喜欢扁平文化，而且个个骨子里闷骚、桀骜不驯，如果不能服众的话，转不转又有什么意义呢？喜欢看热闹的同学可以围观一下v2ex上的<a href="https://www.v2ex.com/t/427796">隔壁组的小兵集体情愿 要炒了 team leader</a>.</p></li><li><p>喜欢用跳巢来涨薪酬。准确讲，这种行为并没有对错之分，只是一种个人选择。但是，我希望你是因为自己能力全方位提升以后，公司暂时没有适合你的职位和项目供你晋升，而不是仅仅作为一种手段。</p></li></ol><h3 id="第四级工程师容易面临的瓶颈"><a href="#第四级工程师容易面临的瓶颈" class="headerlink" title="第四级工程师容易面临的瓶颈"></a>第四级工程师容易面临的瓶颈</h3><p>如果你成功完成了第五级的修炼来到了第四级，那么我觉得你至少从薪酬上已经超越了80%的IT从业者。这个级别的典型的工程师有：巨头里的小组负责人、高级工程师，中小互联网公司里的技术总监、CTO、架构师、DBA等。对应到医疗体系的话，至少需要是医院的科室主任。</p><p>这个级别是我们日常工作中经常打交道，同时心里默默认为是聪明人的最多的群体。这个群体聪明、勤奋、好学，是其负责的具体工作的佼佼者。很多人，发展到了这个阶段也就是其职业生涯的最终阶段了。除去自主选择停留在这个等级的那部分人，更多的人是卡在了对整个商业行为的理解，或者说是认知升级没有跟上。</p><p>很多工程师，脱离了公司或者组织，是不知道如何赚钱的。如果希望继续升级，一定要建立对整个商业行为完整的认知。具体到操作层面，可以在公司内部孵化项目或者产品，然后推向市场。整个过程中，你自然会学会如何争取资源、利用资源，如何在修海湾大桥还是修浮桥之间决断，如何做获取种子用户、如何营销、如何做市场放大推广，如何调整模式验证模型，最终实现变现。最终变现的规模不需要达到一个亿的小目标，公司项目或产品能到100w流水就够了（如果你在巨头工作，你当然可以花半天时间就刷到100w，但是聪明的你一定知道我不是这个意思……）。如果公司暂时不能提供资源进行项目孵化，那么可以尝试独立开发者做side project（但是不应该占用工作时间）. 个人项目变现规模我觉得10w就够了。这个数字并不难做到，如果你感兴趣的话，可以随便看看<a href="https://www.indiehackers.com/">INDIE HACKERS</a> 上面开发者的经验之谈。当然，这个过程不会非常顺利，大部分时候，你可能最终是学会了「如何cancel项目」，但是，谁TM care呢？少年，勇敢站起来继续lu…</p><h3 id="如何成为第三级工程师"><a href="#如何成为第三级工程师" class="headerlink" title="如何成为第三级工程师"></a>如何成为第三级工程师</h3><p>很遗憾，鄙人也还在仰望这个级别，更多是思考这个层级人的特质，见贤思齐。如果你觉得自己做到了这个级别，欢迎发表您的高见。</p><p>这个层级的典型人物有巨头的部门leader, 产品leader（微信张小龙应该算第2.5级），中小公司的CEO。也就是我们大部分时候泛指的换联网那部分「财务自由」的人。对应到医疗系统，应该是院长这个级别。一路上，接触了不少这类人，他们身上也的确有一些特质非常吸引人：</p><ol><li>敏感，且往往是个不错的产品经理。</li><li>喜欢并擅长深入思考，具有良好的思维体力，并且将思考作为日常的马拉松。</li><li>迫切，近乎疯狂的要结果。</li><li>谈情怀，也谈使命感，但是执行上非常务实。</li></ol><h3 id="复利思维-正态分布"><a href="#复利思维-正态分布" class="headerlink" title="复利思维+正态分布"></a>复利思维+正态分布</h3><p>不仅是作为一名工程师，其他各方面的发展和成长都免不了挫折。但是一定记住复利的魔力：如果我们选定了做一名优秀的工程师，在做计划和选择的时候争取做到自己的每一步都是在自己之前积累的前一步上的。否则，在原地周围折腾是难以发生质变的。时代发展太快，可能很多人心中都缺乏安全感，但是试想你手里如果握着一个几年以后可以增长数十倍的筹码，心里也就不再慌张了。</p><p>另一方面，中国的国情之一是人口基数大。天朝的工程师群体虽然占人口比例不算大，但是基数已经非常大了（千万级）。改变不了规则就尝试去争取自己的位置。只要你超过了平均水平之后，越往前，惯性越大，竞争的人越少，看到的机会越多。所以，不要抱怨房价一直上涨了，房子毕竟是要卖给能够支付得起售价的人，如果我们当前买不起房，很可能只是我们当前的位置拖了社会的后腿😂</p><h3 id="成为稀缺"><a href="#成为稀缺" class="headerlink" title="成为稀缺"></a>成为稀缺</h3><p>任何时候，稀缺的人才都不愁机遇。最近也在思考一个工程师的核心竞争力和不可替代性是什么。看到了刘未鹏的一篇分享，挺有感触，摘录如下：</p><p>个人的核心竞争力是他独特的个性知识经验组合。这种组合：1）绝无仅有；2）在实践中有价值；3）具有可持续发展性。</p><p>具体到工程师来说：</p><ol><li>专业领域技能；</li><li>跨领域的技能；</li><li>学习能力；</li><li>性格要素。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我所说的，必然不可能都对，取走你所需要的。新的一年，祝大家开工大吉，升级顺利！</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些程序员小白还没掌握的30件事</title>
      <link href="/2020/02/04/post/%E9%82%A3%E4%BA%9B%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E7%99%BD%E8%BF%98%E6%B2%A1%E6%8E%8C%E6%8F%A1%E7%9A%8430%E4%BB%B6%E4%BA%8B/"/>
      <url>/2020/02/04/post/%E9%82%A3%E4%BA%9B%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E7%99%BD%E8%BF%98%E6%B2%A1%E6%8E%8C%E6%8F%A1%E7%9A%8430%E4%BB%B6%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/FgTlQj4PsY6nCVU9fLeKMg">那些程序员小白还没掌握的30件事</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>从事编程并不容易。每年有许多人从各国的顶级计算机科学专业毕业，这是所有人都向往的最具竞争力的职业之一。与此同时，编程也振奋人心。随着技术的进步，每天都有新的创新。对于喜欢编程，并立志从事编程的人而言，编程是其热爱且为之奋斗的事业。</p><p>本文的这个列表可以帮助新手答疑解惑，节省精力。即使目前某些内容可能暂时不需要，但是总有一天它会派上用场。</p><h2 id="1-从事编程无需学位，但需要有所了解。"><a href="#1-从事编程无需学位，但需要有所了解。" class="headerlink" title="1. 从事编程无需学位，但需要有所了解。"></a>1. 从事编程无需学位，但需要有所了解。</h2><p>编程是少数几个不取决于学位的职业之一。但是编程是一项知识密集型职业。如果你要从事编程行业，阅读一些基本的涵盖计算机科学的基本概念等书籍是必要的。除了编写功能代码之外，为你的技术打下坚实基础，对基本概念有一个深刻理解，这使得你能够赢得技术面试有助于与同事交流。</p><h2 id="2-在问题解决技能上，编程十分具有创造力。"><a href="#2-在问题解决技能上，编程十分具有创造力。" class="headerlink" title="2. 在问题解决技能上，编程十分具有创造力。"></a>2. 在问题解决技能上，编程十分具有创造力。</h2><p>大多数人都有这样一种先入为主的观念，即编程就是分析和解决问题的能力。这只说对了一部分。编程还涉及许多创造性。通常，可以使用多种方式编写给定的代码。当你设计出最简单有效的编码方式时，创造性就产生了。</p><h2 id="3-掌握所有编程语言是不可能的，诀窍是将一门语言学到极致。"><a href="#3-掌握所有编程语言是不可能的，诀窍是将一门语言学到极致。" class="headerlink" title="3. 掌握所有编程语言是不可能的，诀窍是将一门语言学到极致。"></a>3. 掌握所有编程语言是不可能的，诀窍是将一门语言学到极致。</h2><p>世界上有数百种编程语言。有一些编程领域为特定的职业道路铺平了道路：Web开发人员，前端开发人员，后端开发人员，软件工程师，数据库开发人员等。明确希望成为哪种开发人员，然后学习该职位所需的技术技能。</p><h2 id="4-你不需要成为一个机器，保持作为人的状态就更好了。"><a href="#4-你不需要成为一个机器，保持作为人的状态就更好了。" class="headerlink" title="4. 你不需要成为一个机器，保持作为人的状态就更好了。"></a>4. 你不需要成为一个机器，保持作为人的状态就更好了。</h2><p>请记住，你首先是人，其次才是一名程序员。初次编程时，很容易迷失在代码中。你是一个人，你需要笑，需要哭哭，需要减压，需要与人交谈。作为一名程序员，平衡生活，尽可能的发现工作之外的乐趣与激情将为工作带来更多创造性。</p><h2 id="5-编程是应用知识而不是死记硬背。"><a href="#5-编程是应用知识而不是死记硬背。" class="headerlink" title="5. 编程是应用知识而不是死记硬背。"></a>5. 编程是应用知识而不是死记硬背。</h2><p>与发明和创造新知识领域的研究不同，编程就是应用现有知识。书籍，研究论文，在线文章和学习视频将成为经常使用的资源。没有必要记住所有知识。可以通过搜索资源找到答案。随着处理的项目增加，知识也会自然而然铭记于心。</p><h2 id="6-你每天都会与冒名顶替综合症对抗。"><a href="#6-你每天都会与冒名顶替综合症对抗。" class="headerlink" title="6. 你每天都会与冒名顶替综合症对抗。"></a>6. 你每天都会与冒名顶替综合症对抗。</h2><p>编程是所有“聪明”人都超同一个目标前进的行业。除非你是天才，否则你会每天都觉得自己不配取得成功。当你每天都为这种感受所困时，会试着想办法解决这一问题。你可以一直将其作为学习新事物的动力，正确看待问题。</p><h2 id="7-作为一名程序员，你还需要有工作之外的生活，否则，你只会沉迷于编程。"><a href="#7-作为一名程序员，你还需要有工作之外的生活，否则，你只会沉迷于编程。" class="headerlink" title="7. 作为一名程序员，你还需要有工作之外的生活，否则，你只会沉迷于编程。"></a>7. 作为一名程序员，你还需要有工作之外的生活，否则，你只会沉迷于编程。</h2><p>有段时间你可能会宅在家里不出门。但是，要成为一名快乐的程序员，必须主动寻求计算机屏幕之外的生活。职业生涯的成功往往取决于你遇到的人。人际关系对程序员而言必不可少。保持程序员之外的个性特征对于防止沉迷于编程至关重要。当你乐在其中而非强迫自己时，工作才会更加出色。</p><h2 id="8-与他人合作会学得更快。"><a href="#8-与他人合作会学得更快。" class="headerlink" title="8. 与他人合作会学得更快。"></a>8. 与他人合作会学得更快。</h2><p>在职业生涯初期，你会想要断开与外部世界的联系，沉溺于阅读这十本有关编程的书籍，以建立计算机科学基础。你猜怎么着？如果你找到一个学习伙伴，会学得更快。当你与他人合作，所有的编程“缺点”都会暴露出来。编写的代码会得到审阅。由于有第三方的存在，你将会学着编写高效的代码。由于伙伴也在学习，所以你会想找到最好的办法。当你从事程序员这一工作时，总会有人审查代码。你永远不是独自一人这是你需要习惯的。</p><h2 id="9-不需擅长数学和科学。"><a href="#9-不需擅长数学和科学。" class="headerlink" title="9. 不需擅长数学和科学。"></a>9. 不需擅长数学和科学。</h2><p>在技术行业会遇到各种超级明星程序员，他们在接受了长期的文科教育之后，发现了编程在逻辑思维方面的吸引力。有很多画家和作家在追求艺术的同时以编程谋生。成为一名优秀的程序员，你需要的是坚持不懈。编程很辛苦。但是，一旦有了恒心，任何人都可以通过阅读编程书籍掌握基础知识。在这个行业工作一段时间后有很多人重拾数学。最后他们甚至可以在没有接受正式数学教育的前提下理解实施复杂的算法。</p><h2 id="10-成为全明星“学习者”。"><a href="#10-成为全明星“学习者”。" class="headerlink" title="10. 成为全明星“学习者”。"></a>10. 成为全明星“学习者”。</h2><p>程序员的学习能力都很强。刚开始也许你的学习能力并不出色，但最终将会得到提升。有时，工作会要求你在六个月内学习三种编程语言。这就是技术创新的状态。作为程序员，每天都在学习。学习就像呼吸一样。即使你对每天都需要学习的状态不太舒服，你也会被迫习惯。</p><h2 id="11-你将对完成项目上瘾。"><a href="#11-你将对完成项目上瘾。" class="headerlink" title="11. 你将对完成项目上瘾。"></a>11. 你将对完成项目上瘾。</h2><p>编码成瘾是真实存在的。在编程生涯中的某一阶段，你将经历通宵编程的马拉松。在完成项目之前，你都不会想要睡觉。由于大脑正在处理大量的信息，你会忘记吃饭，喝酒，甚至不会离开办工作。不要紧，工作做完后，就到外面散散步或者度度假吧。</p><h2 id="12-耗费一整天只为找一个小漏洞。"><a href="#12-耗费一整天只为找一个小漏洞。" class="headerlink" title="12. 耗费一整天只为找一个小漏洞。"></a>12. 耗费一整天只为找一个小漏洞。</h2><p>多数时候，在编程项目中许多部分彼此相互关联。通常，你会发现除非修复了系统中潜藏的一个小漏洞，否则无法继续进行下一步操作。作为程序员，除非找到这处漏洞，否则你会对整个项目倍感压力。你会整天坐在电脑夙夜难寐，只为找到这一漏洞。这种现象只有找到它后才会消失。</p><h2 id="13-你将花费大部分时间在谷歌搜索无人能为你解答的答案。"><a href="#13-你将花费大部分时间在谷歌搜索无人能为你解答的答案。" class="headerlink" title="13. 你将花费大部分时间在谷歌搜索无人能为你解答的答案。"></a>13. 你将花费大部分时间在谷歌搜索无人能为你解答的答案。</h2><p>如果使用流行的语言编程，那么大部分的问题都能得到解答。但是，也有例外。有时，你也会出现别人碰不到的问题。在这种情况下，参考编程书籍并询问编程委员会通常会帮助你答疑解惑。</p><h2 id="14-阅读设计模式的书"><a href="#14-阅读设计模式的书" class="headerlink" title="14. 阅读设计模式的书"></a>14. 阅读设计模式的书</h2><p>是否毕业于国内外最好的计算机科学专业并不重要。在每个程序员的职业生涯中，都会坐下来仔细阅读Head First Design Patterns。它可能是新程序员最常阅读的书籍之一。还在等什么？赶紧拿起它并从头到尾阅读。</p><h2 id="15-学会专注于确切的拼写"><a href="#15-学会专注于确切的拼写" class="headerlink" title="15. 学会专注于确切的拼写"></a>15. 学会专注于确切的拼写</h2><p>在每个程序员的职业生涯中，都会用自己喜欢的语言编写足够的代码，以便按照自己的方式做事。这包括为变量，类，甚至数据库中的表提供的命名约定的准确拼写。仔细审查这一点。你最不想发生的就是因为拼写错误而产生的系统漏洞。记住，当理由充分时沉浸与值得关注事情是情有可原的。但是如果无据可依，那不过只是无意义的重复。</p><h2 id="16-你可能会放弃"><a href="#16-你可能会放弃" class="headerlink" title="16. 你可能会放弃"></a>16. 你可能会放弃</h2><p>有时你会遇到无法解决的问题。有时问题难到让你怀疑人生，只想要辞职。有时工作环境会让你想要放弃。激情取决于坚持。这时候质问自己，是要坚持还是放弃？当遇到挫折和困难时，你就把它当做港湾和下一次腾飞的跳板。</p><h2 id="17-重头再来"><a href="#17-重头再来" class="headerlink" title="17. 重头再来"></a>17. 重头再来</h2><p>当你看到那些和从前的一样热爱编程的人，你会很羡慕接着发现自己无法放手。你不能放手。然后又会回到编程项目上来。你意识到在内心深处，和编程同呼吸共命运，这是你才成为一名真正的程序员。</p><h2 id="18-回到某种形式的学校教育，去学习系统的知识。"><a href="#18-回到某种形式的学校教育，去学习系统的知识。" class="headerlink" title="18. 回到某种形式的学校教育，去学习系统的知识。"></a>18. 回到某种形式的学校教育，去学习系统的知识。</h2><p>即使是从精英计算机科学硕士课程毕业的最优秀的程序员也将在工作中学习。事实上，在职培训是大型科技公司工作的最佳福利之一。公司将送你去学习“高昂”的课程和研讨会，以培训你使用他们希望使用的最新技术。如果碰巧在工作中没有学到足够的知识，你将接触到许多在线编码学院和youtube视频，以提高你的技能。</p><h2 id="19-被不喜爱的公司聘用"><a href="#19-被不喜爱的公司聘用" class="headerlink" title="19. 被不喜爱的公司聘用"></a>19. 被不喜爱的公司聘用</h2><p>即使你是一个平庸的程序员，某些公司也会需要你的技能。当他们面试你的时候，试着记住你也在面试他们。根据公司的文化，你可能会发现自己想对这份看似轻松地工作说不。作为程序员，工作时间很长。找到适合自己的公司文化几乎至关重要。幸福度会带来好的工作表现。如果你的技能无可替代，总会有其他公司排队挖你。非必要情况，不要轻易妥协。</p><h2 id="20-技术面试不合格"><a href="#20-技术面试不合格" class="headerlink" title="20. 技术面试不合格"></a>20. 技术面试不合格</h2><p>技术面试不是开玩笑。高级程序员经常以编写技术面试问题为乐。通常，出于某些原因，这些问题总是格外难。如果技术面试不合格，这也不是世界末日。这当然不能证明你的编程能力。它只测试你的知识库。试着想想积极的一面。如果个人技能出色，经理们会记住你。如果他们看好你的能力，然而你并不适合担任这个角色，他们仍可能会联系你，为你提供另一个职位。</p><h2 id="21-被告知你很出色"><a href="#21-被告知你很出色" class="headerlink" title="21. 被告知你很出色"></a>21. 被告知你很出色</h2><p>在职业生涯中，有时候你会觉得自己像个明星。经理需要依靠你完成项目，他们夸赞你很棒，以激起你的干劲。你会觉得自己处于世界之巅。注意了，这是在诱导你变得自负。请保持谦虚，毕竟学无止境，人外有人山外有山。</p><h2 id="22-被贬得一无是处"><a href="#22-被贬得一无是处" class="headerlink" title="22. 被贬得一无是处"></a>22. 被贬得一无是处</h2><p>在职业生涯中，有时你会觉得自己一无所知。对项目没信心人会告诉你，你什么都不知道。也许他们这样做是为了让你了解自己身处的位置。但是，既然你正在阅读这篇文章，你就会大踏步前进。因为你知道的可能比你想的还要多。你所掌握的知识也会随着时间增多。一年后，人们会尊重你，所以请坚持下去。假以时日，甚至可能赢得那位曾经将你贬得一无是处的人的尊重。</p><h2 id="23-与你所欣赏的其他程序员竞争"><a href="#23-与你所欣赏的其他程序员竞争" class="headerlink" title="23. 与你所欣赏的其他程序员竞争"></a>23. 与你所欣赏的其他程序员竞争</h2><p>编程最绝妙的方面之一就是竞争。当你编写一个你钦佩的程序员认为值得的代码时，会开心地像赢了彩票。编程竞争总是很有趣。精妙之处不在于谁是最好的而是互相学习。</p><h2 id="24-可能理解不了同事的话"><a href="#24-可能理解不了同事的话" class="headerlink" title="24. 可能理解不了同事的话"></a>24. 可能理解不了同事的话</h2><p>一开始，这种情况可能是每周或每月一次。在新编程工作中，你可能理解不了同事刚刚说的话。可能以下两个原因。鉴于生活环境的不同，你可能听不懂他们的口音。在这种情况下，请另一位同事翻译。不能理解某人的言论并不可耻。很可能，其他同事也花了多年时间才得以习惯这种口音。另一个原因是同事刚才所说的完全超出了你的知识范围。那也没关系。毕竟，同事是专家。让同事以图片形式解释一下。你会想要拉把椅子坐下详听，因为这可能需要一段时间。</p><h2 id="25-看到去年写的面条式代码，你会感到羞耻"><a href="#25-看到去年写的面条式代码，你会感到羞耻" class="headerlink" title="25. 看到去年写的面条式代码，你会感到羞耻"></a>25. 看到去年写的面条式代码，你会感到羞耻</h2><p>这事儿常常发生。开始时因为Perl代码，我被批评了。这是一个记录良好的代码，设计也很好。但我却用一种难以阅读的语言写出来。所以，我写了面条式代码。但是，每年，无论我怎么努力，我仍然会找到一些我清除由于快速完成工作而编写的面条式代码。这就是程序员的日常。我们解决问题并修补问题。不必觉得羞愧。当你意识到这是你写的，返回修正即可。</p><h2 id="26-当你厌倦了看另一行代码时，你将在数据库项目中躲避"><a href="#26-当你厌倦了看另一行代码时，你将在数据库项目中躲避" class="headerlink" title="26. 当你厌倦了看另一行代码时，你将在数据库项目中躲避"></a>26. 当你厌倦了看另一行代码时，你将在数据库项目中躲避</h2><p>当你进行一次精彩的编程攻关时会发生这种情况。已经两个月了。你需要休息一下。但是你喜欢这种势头，所以继续前进。然后你意识到SQL很有趣。无法弄清楚为什么你不能看另一行代码。但不知何故，将数据放入数据库并再其取出使你感到愉悦。你陶醉于完全逻辑语言的简单性。</p><h2 id="27-对编程马拉松又爱又恨"><a href="#27-对编程马拉松又爱又恨" class="headerlink" title="27. 对编程马拉松又爱又恨"></a>27. 对编程马拉松又爱又恨</h2><p>编程马拉松现在很常见。程序员加入团队并相互竞争。在这个过程中，他们会在几个小时内进行高密度学习。你会因为团队精神爱上编程马拉松，也会因为快速码字造成的腕关节综合症而讨厌它。你也会讨厌工作拥挤的房间以及在编程时感官的过度刺激。</p><h2 id="28-阅读研究论文时，会觉得一个字看不懂"><a href="#28-阅读研究论文时，会觉得一个字看不懂" class="headerlink" title="28. 阅读研究论文时，会觉得一个字看不懂"></a>28. 阅读研究论文时，会觉得一个字看不懂</h2><p>你会说英语吗？好大多数人会说是的。但是，你可能会一遍又一遍地阅读一些研究论文，并发现自己一头雾水。对我来说，在学习基础数学之前，大多数关于算法的研究论文看起来都像是一片巨大的雾林。然后，突然间，一切似乎又都拨开迷雾了。</p><h2 id="29-购买耳机"><a href="#29-购买耳机" class="headerlink" title="29. 购买耳机"></a>29. 购买耳机</h2><p>在职业生涯的某个阶段，当你专注于代码时，会发现任何类型的噪音都会阻碍你的感官。买一个能够隔绝外部噪音的好耳机，可以让你在嘈杂房间内专心工作。在某些时候，还会发现音乐有助于编码。编码生涯的早期我就发现，音乐节奏有助于流畅地编码。即使是现在，需要提高工作效率时，我还会找些音乐来听。</p><h2 id="30-抓住与同伴交流的大好时机。"><a href="#30-抓住与同伴交流的大好时机。" class="headerlink" title="30. 抓住与同伴交流的大好时机。"></a>30. 抓住与同伴交流的大好时机。</h2><p>在职业生涯的某个阶段，你会成为公司非常重要的开发人员群体。这时你将被邀请到异地技术专业人员将在这里进行社交活动。高层管理人员会借此机会了解你。这并非是无忧无虑、享受的时候。相反是与同伴交往和交流的大好时机。有时，外出活动还包括与其他公司的技术专家的会议。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建基于 Aria2 的下载机</title>
      <link href="/2020/02/04/raspberry-pi/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E%20Aria2%20%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%9C%BA/"/>
      <url>/2020/02/04/raspberry-pi/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E%20Aria2%20%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建基于-Aria2-的下载机"><a href="#搭建基于-Aria2-的下载机" class="headerlink" title="搭建基于 Aria2 的下载机"></a>搭建基于 Aria2 的下载机</h1><blockquote><p>参考：<a href="https://blog.csdn.net/kxwinxp/article/details/80288006">树莓派3B+ 远程下载服务器（Aria2）</a></p></blockquote><h2 id="安装-Aria2"><a href="#安装-Aria2" class="headerlink" title="安装 Aria2"></a>安装 Aria2</h2><p>使用以下命令安装 Aria2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install aria2</span><br></pre></td></tr></table></figure><h2 id="编辑-Aria2-配置文件"><a href="#编辑-Aria2-配置文件" class="headerlink" title="编辑 Aria2 配置文件"></a>编辑 Aria2 配置文件</h2><p>创建文件夹 <code>mkdir -p ~/.config/aria2</code>。</p><p>添加一个 Aria2 配置文件 <code>vim ~/.config/aria2/aria2.config</code>。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#后台运行</span></span><br><span class="line"><span class="attr">daemon</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line"><span class="comment">#rpc-user=user</span></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line"><span class="comment">#rpc-passwd=passwd</span></span><br><span class="line"><span class="comment">#设置加密的密钥</span></span><br><span class="line"><span class="attr">rpc-secret</span>=secret</span><br><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line"><span class="attr">enable-rpc</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许所有来源，web界面跨域权限需要设置</span></span><br><span class="line"><span class="attr">rpc-allow-origin-all</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#是否启用https加密，启用之后要设置公钥、私钥的文件路径</span></span><br><span class="line"><span class="comment">#rpc-secure=true</span></span><br><span class="line"><span class="comment">#启用加密设置公钥</span></span><br><span class="line"><span class="comment">#rpc-certificate=/home/pi/.config/aria2/example.crt</span></span><br><span class="line"><span class="comment">#启用加密设置私钥</span></span><br><span class="line"><span class="comment">#rpc-private-key=/home/pi/.config/aria2/example.key</span></span><br><span class="line"><span class="comment">#允许外部访问，false的话只监听本地端口</span></span><br><span class="line"><span class="attr">rpc-listen-all</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#RPC端口，仅当默认端口被占用时修改</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment">#最大同时下载数（任务数），建议值：3</span></span><br><span class="line"><span class="attr">max-concurrent-downloads</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="attr">continue</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line"><span class="attr">max-connection-per-server</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">#最小文件分片大小，下载线程数上限取决于能分出多少片，对于小文件重要</span></span><br><span class="line"><span class="attr">min-split-size</span>=<span class="number">10</span>M</span><br><span class="line"><span class="comment">#单文件最大线程数，建议值：5</span></span><br><span class="line"><span class="attr">split</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line"><span class="attr">max-overall-download-limit</span>=<span class="number">0</span></span><br><span class="line"><span class="comment">#单文件下载速度限制</span></span><br><span class="line"><span class="comment">#max-download-limit=0</span></span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line"><span class="comment">#max-overall-upload-limit=0</span></span><br><span class="line"><span class="comment">#单文件上传速度限制</span></span><br><span class="line"><span class="attr">max-download-limit</span>=<span class="number">0</span></span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#文件保存路径，默认为当前启动位置</span></span><br><span class="line"><span class="attr">dir</span>=/home/pi/downloads</span><br><span class="line"><span class="comment">#文件预分配，能有效降低文件碎片，提高磁盘性能。缺点是预分配时间较长。所需时间：none &lt; falloc ? truc &lt;&lt; prealloc，falloc和trunc需要文件系统和内核支持</span></span><br><span class="line"><span class="attr">file-allocation</span>=prealloc</span><br><span class="line"><span class="comment">#不进行证书验证</span></span><br><span class="line"><span class="attr">check-certificate</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">#保存下载会话</span></span><br><span class="line"><span class="attr">save-session</span>=/home/pi/.config/aria2/aria2.session</span><br><span class="line"><span class="attr">input-file</span>=/home/pi/.config/aria2/aria2.session</span><br><span class="line"><span class="comment">#断电续传</span></span><br><span class="line"><span class="attr">save-session-interval</span>=<span class="number">60</span></span><br><span class="line">bt-tracker=</span><br></pre></td></tr></table></figure><p>设置好配置之后，还要创建该会话空白文件 <code>touch ~/.config/aria2/aria2.session</code>。</p><p>测试下 Aria2 是否启动成功 <code>aria2c --conf-path=/home/pi/.config/aria2/aria2.config</code>。用 <code>ps aux|grep aria2</code> 看是否有进程启动，若有说明启动成功了。</p><h2 id="设置-Aria2-开机启动"><a href="#设置-Aria2-开机启动" class="headerlink" title="设置 Aria2 开机启动"></a>设置 Aria2 开机启动</h2><p>Raspbian系统是使用 systemd 来管理服务的，所以我们需要创建并编辑 aria.service 文件：<code>sudo nano /lib/systemd/system/aria.service</code>，输入以下内容并保存：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Aria2 Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=pi</span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/aria2c --conf-path=/home/pi/.config/aria2/aria2.config</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>重新载入服务，并设置开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> aria</span><br></pre></td></tr></table></figure><p>查看 Aria2 服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status aria</span><br></pre></td></tr></table></figure><p>启动、停止、重启 Aria2 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl (start、stop、restart) aria</span><br></pre></td></tr></table></figure><h2 id="部署-AriaNg-Web下载管理页面"><a href="#部署-AriaNg-Web下载管理页面" class="headerlink" title="部署 AriaNg Web下载管理页面"></a>部署 AriaNg Web下载管理页面</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>安装 nginx：<code>sudo apt install nginx</code>。</p><p>在 <a href="https://github.com/mayswind/AriaNg/releases">AriaNg下载页面</a> 下载最新的 <code>AraiNg-x.x.x-AllInOne.zip</code> 压缩包。将压缩包内的 <code>index.html</code> 解压到 <code>/var/www/html/aria-ng/</code> 目录下。</p><p>创建并编辑 nginx 配置文件 <code>/etc/nginx/sites-enabled/aria</code>，输入以下内容并保存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> aria2.pi.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html/aria-ng;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使新增的 nginx 配置生效：<code>sudo nginx -s reload</code>。</p><p>设置 nginx 开机启动：<code>sudo systemctl enable nginx</code>。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>修改客户端 <code>hosts</code> 文件以便使用 <code>aria2.pi.com</code> 域名访问AriaNg管理界面。</p><p>例如：<code>192.168.1.1    aria2.pi.com</code></p><p><img src="/images/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EAria2%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%9C%BA/AriaNg%E4%B8%8B%E8%BD%BD%E9%A1%B5%E9%9D%A2.png" alt="AriaNg下载页面"></p><p>首次浏览时需要进入 AriaNg设置 -&gt; RPC，填写服务端配置信息，特别是 Aria2 RPC 地址和Aria2 RPC 密钥。正确填写之后即可连接使用树莓派上的 Aria2 服务。</p><p><img src="/images/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EAria2%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%9C%BA/AriaNg-RPC%E8%AE%BE%E7%BD%AE.png" alt="AriaNg-RPC设置"></p><h2 id="设置-trackers-提升下载速度"><a href="#设置-trackers-提升下载速度" class="headerlink" title="设置 trackers 提升下载速度"></a>设置 trackers 提升下载速度</h2><p>trackers 清单地址：<a href="https://github.com/ngosang/trackerslist">trackerslist</a>，推荐使用 <strong>tracker_best.txt</strong>。</p><p>有两种设置 trackers 的方式：</p><ol><li><p>客户端进入 AriaNg -&gt; Aria2 设置 -&gt; BitTorrent 设置 -&gt; BT 服务器地址（bt-tracker），填写 trackers 列表地址，多个地址以逗号 <code>,</code> 分隔。</p><p> <img src="/images/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EAria2%E7%9A%84%E4%B8%8B%E8%BD%BD%E6%9C%BA/trackers%E8%AE%BE%E7%BD%AE.png" alt="trackers设置"></p></li><li><p>服务端编辑 <code>~/.config/aria2/aria2.config</code> 配置文件中的 <code>bt-trakcer=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.opentrackr.org:1337/announce</code> 项，多个地址用逗号 <code>,</code> 分隔。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派运行情况监控</title>
      <link href="/2020/02/04/raspberry-pi/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/02/04/raspberry-pi/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派运行情况监控"><a href="#树莓派运行情况监控" class="headerlink" title="树莓派运行情况监控"></a>树莓派运行情况监控</h1><p>项目地址：<a href="https://github.com/yupaits/go-pi-monitor">go-pi-monitor</a></p><p>go-pi-monitor 是在 <a href="https://github.com/shirou/gopsutil">gopsutil</a> 的基础上挑选部分 metric 信息进行监控可视化。</p><h2 id="编译部署"><a href="#编译部署" class="headerlink" title="编译部署"></a>编译部署</h2><p>在 Raspbian 上安装 GoLang 1.12.5 版本的脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#install_go_pi.sh</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line">FileName=<span class="string">&#x27;go1.12.5.linux-armv6l.tar.gz&#x27;</span></span><br><span class="line">wget https://dl.google.com/go/<span class="variable">$FileName</span></span><br><span class="line">sudo tar -C /usr/local -xvf <span class="variable">$FileName</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; ~/.bashrc &lt;&lt; <span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/go/bin:<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>参考 <a href="https://gist.github.com/bigsan/c936451ed1a5b18bb8b0d7e8cc3e7212">Install Go Lang 1.12.5 on Raspberry Pi 3 B+</a>。</p><p>下载 go-pi-monitor 并进行编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yupaits/go-pi-monitor.git</span><br><span class="line"><span class="built_in">cd</span> go-pi-monitor</span><br><span class="line">go build app/main.go</span><br><span class="line"><span class="built_in">cd</span> ui</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo copy -f app/main ./</span><br><span class="line">sudo <span class="built_in">chmod</span> +x main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>监控界面：</p><p><img src="/images/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%90%E8%A1%8C%E6%83%85%E5%86%B5%E7%9B%91%E6%8E%A7/go-pi-monitor.png" alt="go-pi-monitor"></p><p>创建并编辑 nginx 配置文件 <code>/etc/nginx/sites-enabled/pi-monitor</code>，，输入以下内容并保存：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> monitor.pi.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:888;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使新增的 nginx 配置生效：<code>sudo nginx -s reload</code>。</p><p>客户端修改 <code>hosts</code> 文件以便使用 <code>monitor.pi.com</code> 域名访问监控界面。</p><p>例如：<code>192.168.1.1    monitor.pi.com</code></p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>编写 <code>/etc/init.d/go-pi-monitor.sh</code> 文件并保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: go-pi-monitor</span></span><br><span class="line"><span class="comment"># Required-Start:</span></span><br><span class="line"><span class="comment"># Required-Stop:</span></span><br><span class="line"><span class="comment"># Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop: 0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: go-pi-monitor</span></span><br><span class="line"><span class="comment"># Description: go-pi-monitor service start</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/pi/app/go-pi-monitor</span><br><span class="line"><span class="built_in">nohup</span> ./main &gt;go-pi-monitor.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>配置可执行权限，<code>sudo chmod +x /etc/init.d/go-pi-monitor.sh</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Spring事务原理</title>
      <link href="/2020/02/04/spring/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86/"/>
      <url>/2020/02/04/spring/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Spring%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解Spring事务原理"><a href="#深入理解Spring事务原理" class="headerlink" title="深入理解Spring事务原理"></a>深入理解Spring事务原理</h1><blockquote><p>引用自<a href="http://www.codeceo.com/article/spring-transactions.html">深入理解Spring事务原理</a></p></blockquote><h2 id="事务的基本原理"><a href="#事务的基本原理" class="headerlink" title="事务的基本原理"></a>事务的基本原理</h2><p>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照以下步骤进行：</p><ol><li>获取连接 Connection con &#x3D; DriverManager.getConnection()</li><li>开启事务con.setAutoCommit(true&#x2F;false);</li><li>执行CRUD</li><li>提交事务&#x2F;回滚事务 con.commit() &#x2F; con.rollback();</li><li>关闭连接 conn.close();</li></ol><p>使用Spring的事务管理功能后，我们可以不再写步骤 2 和 4 的代码，而是由Spirng 自动完成。那么Spring是如何在我们书写的 CRUD 之前和之后开启事务和关闭事务的呢？解决这个问题，也就可以从整体上理解Spring的事务管理实现原理了。下面简单地介绍下，注解方式为例子</p><ol><li>配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。</li><li>spring 在启动的时候会去解析生成相关的bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关配置注入，这样就在代理中为我们把相关的事务处理掉了（开启正常提交事务，异常回滚事务）。</li><li>真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</li></ol><h2 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h2><p>所谓spring事务的传播属性，就是定义在存在多个事务同时存在的时候，spring应该如何处理这些事务的行为。这些属性在TransactionDefinition中定义，具体常量的解释见下表：</p><table><thead><tr><th>常量名称</th><th>常量解释</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是 Spring 默认的事务的传播。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。新建的事务将和被挂起的事务没有任何关系，是两个独立的事务，外层事务失败回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。</td></tr></tbody></table><h2 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h2><table><thead><tr><th>隔离级别</th><th>隔离级别的值</th><th>导致的问题</th></tr></thead><tbody><tr><td>Read-Uncommitted</td><td>0</td><td>导致脏读</td></tr><tr><td>Read-Committed</td><td>1</td><td>避免脏读，允许不可重复读和幻读</td></tr><tr><td>Repeatable-Read</td><td>2</td><td>避免脏读，不可重复读，允许幻读</td></tr><tr><td>Serializable</td><td>3</td><td>串行化读，事务只能一个一个执行，避免了脏读、不可重复读、幻读。执行效率慢，使用时慎重</td></tr></tbody></table><ul><li><p>脏读：一事务对数据进行了增删改，但未提交，另一事务可以读取到未提交的数据。如果第一个事务这时候回滚了，那么第二个事务就读到了脏数据。</p></li><li><p>不可重复读：一个事务中发生了两次读操作，第一次读操作和第二次操作之间，另外一个事务对数据进行了修改，这时候两次读取的数据是不一致的。</p></li><li><p>幻读：第一个事务对一定范围的数据进行批量修改，第二个事务在这个范围增加一条数据，这时候第一个事务就会丢失对新增数据的修改。</p></li></ul><p><strong>总结：</strong></p><p>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p><p>大多数的数据库默认隔离级别为 Read Commited，比如 SqlServer、Oracle</p><p>少数数据库默认隔离级别为：Repeatable Read 比如： MySQL InnoDB</p><h2 id="Spring中的隔离级别"><a href="#Spring中的隔离级别" class="headerlink" title="Spring中的隔离级别"></a>Spring中的隔离级别</h2><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与 JDBC 的隔离级别相对应。</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。</td></tr></tbody></table><h2 id="事务的嵌套"><a href="#事务的嵌套" class="headerlink" title="事务的嵌套"></a>事务的嵌套</h2><p>通过上面的理论知识的铺垫，我们大致知道了数据库事务和spring事务的一些属性和特点，接下来我们通过分析一些嵌套事务的场景，来深入理解spring事务传播的机制。</p><p>假设外层事务 Service A 的 Method A() 调用 内层Service B 的 Method B()</p><ul><li><strong>PROPAGATION_REQUIRED(Spring 默认)</strong></li></ul><p>如果ServiceB.methodB() 的事务级别定义为 PROPAGATION_REQUIRED，那么执行 ServiceA.methodA() 的时候spring已经起了事务，这时调用 ServiceB.methodB()，ServiceB.methodB() 看到自己已经运行在 ServiceA.methodA() 的事务内部，就不再起新的事务。</p><p>假如 ServiceB.methodB() 运行的时候发现自己没有在事务中，他就会为自己分配一个事务。</p><p>这样，在 ServiceA.methodA() 或者在 ServiceB.methodB() 内的任何地方出现异常，事务都会被回滚。</p><ul><li><strong>PROPAGATION_REQUIRES_NEW</strong></li></ul><p>比如我们设计 ServiceA.methodA() 的事务级别为 PROPAGATION_REQUIRED，ServiceB.methodB() 的事务级别为 PROPAGATION_REQUIRES_NEW。</p><p>那么当执行到 ServiceB.methodB() 的时候，ServiceA.methodA() 所在的事务就会挂起，ServiceB.methodB() 会起一个新的事务，等待 ServiceB.methodB() 的事务完成以后，它才继续执行。</p><p>他与 PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为 ServiceB.methodB() 是新起一个事务，那么就是存在两个不同的事务。如果 ServiceB.methodB() 已经提交，那么 ServiceA.methodA() 失败回滚，ServiceB.methodB() 是不会回滚的。如果 ServiceB.methodB() 失败回滚，如果他抛出的异常被 ServiceA.methodA() 捕获，ServiceA.methodA() 事务仍然可能提交(主要看B抛出的异常是不是A会回滚的异常)。</p><ul><li><strong>PROPAGATION_SUPPORTS</strong></li></ul><p>假设ServiceB.methodB() 的事务级别为 PROPAGATION_SUPPORTS，那么当执行到ServiceB.methodB()时，如果发现ServiceA.methodA()已经开启了一个事务，则加入当前的事务，如果发现ServiceA.methodA()没有开启事务，则自己也不开启事务。这种时候，内部方法的事务性完全依赖于最外层的事务。</p><ul><li><strong>PROPAGATION_NESTED</strong></li></ul><p>现在的情况就变得比较复杂了, ServiceB.methodB() 的事务属性被配置为 PROPAGATION_NESTED, 此时两者之间又将如何协作呢?  ServiceB#methodB 如果 rollback, 那么内部事务(即 ServiceB#methodB) 将回滚到它执行前的 SavePoint 而外部事务(即 ServiceA#methodA) 可以有以下两种处理方式:</p><p>a、捕获异常，执行异常分支逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        ServiceB.methodB(); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (SomeException) &#123; </span><br><span class="line">        <span class="comment">// 执行其他业务, 如 ServiceC.methodC(); </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式也是嵌套事务最有价值的地方, 它起到了分支执行的效果, 如果 ServiceB.methodB 失败, 那么执行 ServiceC.methodC(), 而 ServiceB.methodB 已经回滚到它执行之前的 SavePoint, 所以不会产生脏数据(相当于此方法从未执行过), 这种特性可以用在某些特殊的业务中, 而 PROPAGATION_REQUIRED 和 PROPAGATION_REQUIRES_NEW 都没有办法做到这一点。</p><p>b、 外部事务回滚&#x2F;提交 代码不做任何修改, 那么如果内部事务(ServiceB#methodB) rollback, 那么首先 ServiceB.methodB 回滚到它执行之前的 SavePoint(在任何情况下都会如此), 外部事务(即 ServiceA#methodA) 将根据具体的配置决定自己是 commit 还是 rollback</p><p>另外三种事务传播属性基本用不到，在此不做分析。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于项目中需要使用到事务的地方，我建议开发者还是使用spring的TransactionCallback接口来实现事务，不要盲目使用spring事务注解，如果一定要使用注解，那么一定要对spring事务的传播机制和隔离级别有个详细的了解，否则很可能发生意想不到的效果。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-API网关</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-API%E7%BD%91%E5%85%B3/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-API%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-API网关"><a href="#快速搭建微服务-API网关" class="headerlink" title="快速搭建微服务-API网关"></a>快速搭建微服务-API网关</h1><p>API网关是整个后端微服务体系的门户，外部应用通过网关对后台数据进行相关操作，网关中包含了定义后台服务路由规则、服务限流、设置跨域、开启饥饿加载模式等内容。本文对这些内容一一进行说明。</p><span id="more"></span><h2 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h2><p>定义请求前缀和后台服务的service-id即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/auth/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">auth-server</span></span><br><span class="line">    <span class="attr">api-order:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-order</span></span><br><span class="line">    <span class="attr">api-goods:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-goods/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-goods</span></span><br><span class="line">    <span class="attr">api-wechat-admin:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-wechat-admin/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-wechat-admin</span></span><br></pre></td></tr></table></figure><h2 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h2><p>通过编写自定义的限流Filter实现服务限流。</p><ul><li>RateLimitProperties.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;rate-limit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限流开关</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> Boolean.TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义&lt;service-id, 每秒限制请求数&gt;对应关系</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Double&gt; limits = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启限流的内存阈值，当服务器的可用内存小于阈值时开启限流</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">memorySizeKb</span> <span class="operator">=</span> <span class="number">1000000L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>RateLimitFilter.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RateLimitProperties.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RateLimitProperties rateLimitProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemPublicMetrics systemPublicMetrics;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">DEFAULT_PERMITS_PER_SECOND</span> <span class="operator">=</span> <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, RateLimiter&gt; rateLimiterMap = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//order一定要大于org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter的order(值为5)，否则，RequestContext.getCurrentContext()里拿不到serviceId等数据。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//手动配置不限流的话，强制关闭限流</span></span><br><span class="line">        <span class="keyword">if</span> (!rateLimitProperties.getEnabled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取可用内存信息</span></span><br><span class="line">        Collection&lt;Metric&lt;?&gt;&gt; metrics = systemPublicMetrics.metrics();</span><br><span class="line">        Optional&lt;Metric&lt;?&gt;&gt; freeMemoryMetric = metrics.stream().filter(metric -&gt; <span class="string">&quot;mem.free&quot;</span>.equals(metric.getName())).findFirst();</span><br><span class="line">        <span class="comment">//如果没有可用内存指标，默认开启限流</span></span><br><span class="line">        <span class="keyword">if</span> (!freeMemoryMetric.isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">freeMemorySize</span> <span class="operator">=</span> freeMemoryMetric.get().getValue().longValue();</span><br><span class="line">        <span class="comment">//可用内存小于1000000Kb，开启限流</span></span><br><span class="line">        <span class="keyword">return</span> freeMemorySize &lt; rateLimitProperties.getMemorySizeKb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> (String) context.get(AppConsts.WebConsts.SERVICE_ID_KEY);</span><br><span class="line">        <span class="keyword">if</span> (serviceId != <span class="literal">null</span>) &#123;</span><br><span class="line">            key = serviceId;</span><br><span class="line">            <span class="type">double</span> <span class="variable">serviceRate</span> <span class="operator">=</span> rateLimitProperties.getLimits().getOrDefault(serviceId, DEFAULT_PERMITS_PER_SECOND);</span><br><span class="line">            <span class="type">RateLimiter</span> <span class="variable">oldLimiter</span> <span class="operator">=</span> rateLimiterMap.putIfAbsent(key, RateLimiter.create(serviceRate));</span><br><span class="line">            <span class="keyword">if</span> (oldLimiter != <span class="literal">null</span> &amp;&amp; oldLimiter.getRate() != serviceRate) &#123;</span><br><span class="line">                rateLimiterMap.replace(key, oldLimiter, RateLimiter.create(serviceRate));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">routeHost</span> <span class="operator">=</span> context.getRouteHost();</span><br><span class="line">            <span class="keyword">if</span> (routeHost != <span class="literal">null</span>) &#123;</span><br><span class="line">                key = routeHost.toString();</span><br><span class="line">                rateLimiterMap.putIfAbsent(key, RateLimiter.create(DEFAULT_PERMITS_PER_SECOND));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> rateLimiterMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (!rateLimiter.tryAcquire()) &#123;</span><br><span class="line">            <span class="type">HttpStatus</span> <span class="variable">httpStatus</span> <span class="operator">=</span> HttpStatus.TOO_MANY_REQUESTS;</span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            context.getResponse().setContentType(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE);</span><br><span class="line">            context.setResponseStatusCode(httpStatus.value());</span><br><span class="line">            context.setResponseBody(httpStatus.getReasonPhrase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置跨域"><a href="#设置跨域" class="headerlink" title="设置跨域"></a>设置跨域</h2><p>采用前后端分离的应用可能需要在服务端进行跨域设置，当然也可以使用Nginx反向代理等方式解决跨域问题。</p><ul><li>CorsProperties.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;cors&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; origins = Lists.newLinkedList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; methods = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">maxAge</span> <span class="operator">=</span> AppConsts.WebConsts.CORS_MAX_AGE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; allowedHeaders = Lists.newLinkedList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; exposedHeaders = Lists.newLinkedList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CorsConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CorsProperties corsProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        configuration.setAllowedOrigins(corsProperties.getOrigins());</span><br><span class="line">        configuration.setAllowedMethods(corsProperties.getMethods());</span><br><span class="line">        configuration.setMaxAge(corsProperties.getMaxAge());</span><br><span class="line">        configuration.setAllowedHeaders(corsProperties.getAllowedHeaders());</span><br><span class="line">        configuration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        configuration.setExposedHeaders(corsProperties.getExposedHeaders());</span><br><span class="line">        source.registerCorsConfiguration(AppConsts.PathConsts.ALL_PATHS, configuration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开启饥饿加载模式"><a href="#开启饥饿加载模式" class="headerlink" title="开启饥饿加载模式"></a>开启饥饿加载模式</h2><p>开启饥饿加载模式比较容易，简单配置即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">eager-load:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> API网关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-服务安全</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-服务安全"><a href="#快速搭建微服务-服务安全" class="headerlink" title="快速搭建微服务-服务安全"></a>快速搭建微服务-服务安全</h1><p>微服务架构下的服务安全是构建微服务系统的一个重要环节。做好服务鉴权是保障数据不泄漏、不被非法操作的关键。</p><p>Spring Cloud架构支持OAuth2 + Spring Security的方式进行服务鉴权，只需简单配置即可。同时我们也可以在网关服务里加入自定义的鉴权Filter实现服务鉴权。</p><span id="more"></span><p>采用OAuth2 + Spring Security的方式进行服务鉴权时，如果同时使用了Hystrix断路器，就会出现后台服务之间进行调用时<code>access_token</code>无法在服务间传递的问题，其根本原因是Hystix的默认隔离策略是Thread（即线程隔离），这样就会导致服务间调用时没有将<code>access_token</code>进行传递，导致鉴权失败。此问题的具体解决办法可以在 <a href="http://www.itmuch.com/spring-cloud-sum/hystrix-threadlocal/">实用技巧：Hystrix传播ThreadLocal对象（两种方案）</a> 中找到。</p><p>本文对OAuth2 + Spring Security和自定义鉴权Filter都进行说明。</p><h2 id="OAuth2-Spring-Security方式"><a href="#OAuth2-Spring-Security方式" class="headerlink" title="OAuth2 + Spring Security方式"></a>OAuth2 + Spring Security方式</h2><p>采用OAuth2 + Spring Security方式需要区分鉴权服务和资源服务。</p><h3 id="api-gateway网关服务"><a href="#api-gateway网关服务" class="headerlink" title="api-gateway网关服务"></a>api-gateway网关服务</h3><ul><li>Maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">api-order:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-order/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-order</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span> <span class="string">Cookie,Set-Cookie</span></span><br><span class="line">    <span class="attr">api-goods:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/api-goods/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">service-goods</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span> <span class="string">Cookie,Set-Cookie</span></span><br><span class="line">    <span class="attr">auth:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/auth/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">auth-server</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span> <span class="string">Cookie,Set-Cookie</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="attr">access-token-uri:</span> <span class="string">http://localhost:9080/auth/oauth/token</span></span><br><span class="line">      <span class="attr">user-authorization-uri:</span> <span class="string">http://localhost:9080/auth/oauth/authorize</span></span><br><span class="line">      <span class="attr">client-id:</span> <span class="string">webapp</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">user-info-uri:</span> <span class="string">http://localhost:9080/auth/user</span></span><br><span class="line">      <span class="attr">prefer-token-info:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在配置<code>zuul.routes</code>网关路由时，需要注意<code>sensitiveHeaders</code>需要配置<code>Cookie,Set-Cookie</code>，这样才能在请求网关时携带token并在刷新之后返回token。</p><ul><li>SecurityConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOAuth2Sso</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="auth-server鉴权服务"><a href="#auth-server鉴权服务" class="headerlink" title="auth-server鉴权服务"></a>auth-server鉴权服务</h3><ul><li>Maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">filter-order:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>启动类加上<code>@EnableAuthorizationServer</code>注解声明当前应用为鉴权服务端。</p><ul><li>SecurityConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShaPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShaPasswordEncoder</span>(<span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DaoAuthenticationProvider <span class="title function_">authenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DaoAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">        provider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">        provider.setUserDetailsService(userDetailsService);</span><br><span class="line">        provider.setSaltSource((userDetails -&gt; userDetails.getUsername() + AppConsts.EncryptionConsts.ENCRYPT_EXTRA_SALT));</span><br><span class="line">        <span class="keyword">return</span> provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.authenticationProvider(authenticationProvider()).userDetailsService(userDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AuthorizationServerConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsServiceImpl userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTokenStore <span class="title function_">tokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisTokenStore</span>(connectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line">                .tokenStore(tokenStore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        security.tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>).checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;android&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">                .secret(<span class="string">&quot;android&quot;</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withClient(<span class="string">&quot;web&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;web&quot;</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;implicit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RevokeTokenEndpoint.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FrameworkEndpoint</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RevokeTokenEndpoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;consumerTokenServices&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ConsumerTokenServices consumerTokenServices;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/oauth/token&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">revokeToken</span><span class="params">(String accessToken)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> consumerTokenServices.revokeToken(accessToken) ? <span class="string">&quot;注销成功&quot;</span> : <span class="string">&quot;注销失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源服务"><a href="#资源服务" class="headerlink" title="资源服务"></a>资源服务</h3><ul><li>Maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">service-order</span></span><br><span class="line">      <span class="attr">user-info-uri:</span> <span class="string">http://localhost:9080/auth/user</span></span><br><span class="line">      <span class="attr">prefer-token-info:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>ResourceServerConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint((request, response, authException) -&gt; &#123;</span><br><span class="line">                    response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">                    objectMapper.writeValue(response.getWriter(), ResponseEntity.status(HttpStatus.UNAUTHORIZED));</span><br><span class="line">                &#125;)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义鉴权Filter"><a href="#自定义鉴权Filter" class="headerlink" title="自定义鉴权Filter"></a>自定义鉴权Filter</h2><p>采用自定义鉴权Filter的方式只需要在网关服务里写一个Filter即可。</p><ul><li>AuthFilter.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> context.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod().toUpperCase();</span><br><span class="line">        <span class="comment">//获取请求的url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//判断当前url是否需要鉴权</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.containsAny(url, AppConsts.PathConsts.getSkipPaths())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtils.getToken(request);</span><br><span class="line">        <span class="comment">//判断token是否过期以及是否能被解析</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">tokenExpired</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = jwtUtils.getClaimsFromToken(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExpiredJwtException | SignatureException e) &#123;</span><br><span class="line">            tokenExpired = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tokenExpired) &#123;</span><br><span class="line">            <span class="comment">//当前token已过期并且尚可刷新，刷新token并放行</span></span><br><span class="line">            <span class="type">TokenRefresh</span> <span class="variable">tokenRefresh</span> <span class="operator">=</span> (TokenRefresh) redisTemplate.opsForValue().get(AppConsts.TokenConsts.REFRESH_TTL_KEY + token.hashCode());</span><br><span class="line">            <span class="keyword">if</span> (tokenRefresh != <span class="literal">null</span> &amp;&amp; tokenRefresh.getRefreshExpiredTime().compareTo(<span class="keyword">new</span> <span class="title class_">Date</span>()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                context.getResponse().setHeader(AppConsts.TokenConsts.AUTH_HEADER_NAME, jwtUtils.generateToken(tokenRefresh.getUsername(), tokenRefresh.getClientType()));</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                redisTemplate.delete(AppConsts.TokenConsts.REFRESH_TTL_KEY + token.hashCode());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前token无可刷新记录或已过可刷新时间，需要重新登录</span></span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            context.getResponse().setContentType(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE);</span><br><span class="line">            context.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            context.setResponseBody(<span class="string">&quot;Token已过期且无法刷新，请重新登录&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="literal">null</span>) &#123;</span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            context.getResponse().setContentType(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE);</span><br><span class="line">            context.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            context.setResponseBody(<span class="string">&quot;Token丢失或被非法篡改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从请求中获取token中的username</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtUtils.getUsernameFromToken(token);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://auth-server/user/&quot;</span> + username, User.class);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            context.getResponse().setContentType(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE);</span><br><span class="line">            context.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            context.setResponseBody(<span class="string">&quot;Token中无有效用户信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasAuthority</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//获取当前用户token中的权限信息</span></span><br><span class="line">        Set&lt;Authority&gt; authorities = user.getAuthorities();</span><br><span class="line">        <span class="keyword">for</span> (Authority authority : authorities) &#123;</span><br><span class="line">            <span class="keyword">if</span> (authority.getMethod().name().equals(method) &amp;&amp; url.contains(authority.getUrl())) &#123;</span><br><span class="line">                hasAuthority = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前用户是否具备访问权限</span></span><br><span class="line">        <span class="keyword">if</span> (hasAuthority) &#123;</span><br><span class="line">            <span class="comment">//拥有权限直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不具备权限返回禁止访问信息</span></span><br><span class="line">        context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">        context.getResponse().setContentType(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE);</span><br><span class="line">        context.setResponseStatusCode(HttpStatus.FORBIDDEN.value());</span><br><span class="line">        context.setResponseBody(<span class="string">&quot;无访问权限&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 安全 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> OAuth2 </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-服务容器</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-服务容器"><a href="#快速搭建微服务-服务容器" class="headerlink" title="快速搭建微服务-服务容器"></a>快速搭建微服务-服务容器</h1><p>本文介绍的服务容器有别于常说的Docker，而是指单个微服务运行依赖的Web服务器容器。Spring Boot支持的Web服务器有 Tomcat、Jetty、Undertow。综合比较之后选择Undertow作为微服务的服务容器。</p><span id="more"></span><h2 id="Undertow配置"><a href="#Undertow配置" class="headerlink" title="Undertow配置"></a>Undertow配置</h2><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><p>这里是多个微服务依赖于同一个parent的maven配置，可以直接在parent的pom.xml中加入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是单个微服务独立配置maven依赖的话，则需要在pom.xml中配置如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置好maven依赖之后，Spring Boot会自动装配Undertow的默认配置信息，无需做额外配置即可将服务内嵌的Web容器从Tomcat切换至Undertow。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 容器 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Web </tag>
            
            <tag> Undertow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-服务监控</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-服务监控"><a href="#快速搭建微服务-服务监控" class="headerlink" title="快速搭建微服务-服务监控"></a>快速搭建微服务-服务监控</h1><p>Spring Boot Admin为基于Spring Boot的基础数据安全端口提供了基础的可视化监控功能。还可以通过Spring Boot Admin的服务端程序对Spring Boot程序提供简单的实时管理（例如修改日志输出级别）。</p><span id="more"></span><h2 id="Spring-Cloud集成Spring-Boot-Admin"><a href="#Spring-Cloud集成Spring-Boot-Admin" class="headerlink" title="Spring Cloud集成Spring Boot Admin"></a>Spring Cloud集成Spring Boot Admin</h2><h3 id="Spring-Boot-Admin服务端"><a href="#Spring-Boot-Admin服务端" class="headerlink" title="Spring Boot Admin服务端"></a>Spring Boot Admin服务端</h3><p>Spring Cloud中集成Spring Boot Admin比较简单，只需要将服务端程序注册到注册中心即可。</p><ul><li>服务端Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;admin.server.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;admin.server.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-login<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;admin.server.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;admin.server.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>服务端配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">admin-dashboard</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.cloud.consul.discovery.instance_id:$&#123;random.value&#125;&#125;</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ignored-services:</span> <span class="string">consul</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="attr">endpoints:</span> <span class="string">env,metrics,trace,dump,jolokia,info,logfile,refresh,flyway,liquibase,heapdump,loggers,auditevents,hystrix.stream,turbine.stream</span></span><br><span class="line">      <span class="attr">turbine:</span></span><br><span class="line">        <span class="attr">clusters:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">location:</span> <span class="string">admin-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="attr">cluster-name-expression:</span> <span class="string">new</span> <span class="string">String(&quot;default&quot;)</span></span><br><span class="line">  <span class="attr">app-config:</span> <span class="string">service-goods,</span> <span class="string">service-order,</span> <span class="string">service-wechat-admin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">登录用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">登录密码</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><p>在服务端的启动类加上 <code>@EnableAdminServer</code> 注解声明当前程序为Spring Boot Admin服务端程序。启动类加上 <code>@EnableTurbine</code> 注解开启断路器监控数据的聚合展示。</p><ul><li>安全访问控制</li></ul><p>上面的 <code>spring-boot-admin-server-ui-login</code> 提供了一个登录界面用于访问Spring Boot Admin。需要搭配 <code>spring-security</code> 一起使用。Spring Security的配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">                .formLogin().loginPage(<span class="string">&quot;/login.html&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .successHandler((request, response, exception) -&gt; response.sendRedirect(request.getContextPath() + <span class="string">&quot;/index.html&quot;</span>)).permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout().logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login.html&quot;</span>, <span class="string">&quot;//*.css&quot;</span>, <span class="string">&quot;/img/&quot;</span>, <span class="string">&quot;/third-party/&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().httpBasic();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="被监控服务的配置"><a href="#被监控服务的配置" class="headerlink" title="被监控服务的配置"></a>被监控服务的配置</h3><p>被监控的服务需要配置如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="SpringBootAdmin登录界面"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8%E5%88%97%E8%A1%A8%E7%95%8C%E9%9D%A2.png" alt="SpringBootAdmin监控应用列表界面"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7%E8%AF%A6%E6%83%85.png" alt="SpringBootAdmin应用监控详情"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E5%AE%9E%E6%97%B6%E8%B0%83%E6%95%B4%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7.png" alt="SpringBootAdmin实时调整日志等级"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8Trace%E8%AE%B0%E5%BD%95.png" alt="SpringBootAdmin接口调用Trace记录"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin%E6%96%AD%E8%B7%AF%E5%99%A8%E7%9B%91%E6%8E%A7.png" alt="SpringBootAdmin断路器监控"></p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/SpringBootAdmin-Turbine%E8%81%9A%E5%90%88.png" alt="SpringBootAdmin-Turbine聚合"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 监控 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-服务调用</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-服务调用"><a href="#快速搭建微服务-服务调用" class="headerlink" title="快速搭建微服务-服务调用"></a>快速搭建微服务-服务调用</h1><p>Spring Cloud体系中服务间的调用常见的有Feign和Ribbon两种方式，其中Feign默认集成了Ribbon。Ribbon采用注入RestTemplate实例，通过全局的RestTemplate调用其它可以被发现的服务，而Feign则使用类似于Controller的代码风格配合@FeignClient注解实现服务间接口的调用。由于注入RestTemplate的方式更符合Spring的编程风格，这里仅介绍基于Ribbon方式的服务调用。</p><span id="more"></span><h2 id="Ribbon配置"><a href="#Ribbon配置" class="headerlink" title="Ribbon配置"></a>Ribbon配置</h2><h3 id="向Spring容器中注入RestTemplate实例"><a href="#向Spring容器中注入RestTemplate实例" class="headerlink" title="向Spring容器中注入RestTemplate实例"></a>向Spring容器中注入RestTemplate实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p><code>@LoadBalanced</code>注解用于开启客户端负载均衡，Ribbon默认的负载均衡策略是轮询选择。Ribbon提供了如下的负载均衡策略：</p><ul><li><p>AvailabilityFilteringRule：过滤掉那些一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就就是检查status里记录的各个Server的运行状态。</p></li><li><p>RandomRule：随机选择一个Server。</p></li><li><p>BestAvailableRule：选择一个最小的并发请求的Server，逐个考察Server，如果Server被tripped了，则跳过。</p></li><li><p>RoundRobinRule：轮询选择， 轮询index，选择index对应位置的Server。</p></li><li><p>WeightedResponseTimeRule：根据响应时间分配一个weight(权重)，响应时间越长，weight越小，被选中的可能性越低。</p></li><li><p>RetryRule：对选定的负载均衡策略机上重试机制，在一个配置时间段内当选择Server不成功，则一直尝试使用subRule的方式选择一个可用的server。</p></li><li><p>ZoneAvoidanceRule：复合判断Server所在区域的性能和Server的可用性选择Server。</p></li><li><p>ResponseTimeWeightedRule：作用同WeightedResponseTimeRule，二者作用是一样的，ResponseTimeWeightedRule后来改名为WeightedResponseTimeRule。</p></li></ul><h3 id="选择负载均衡策略"><a href="#选择负载均衡策略" class="headerlink" title="选择负载均衡策略"></a>选择负载均衡策略</h3><ol><li><p>注入负载均衡策略IRule实例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">ribbonRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里注入的是RandomRule策略，可以按需注入其它策略。</p></li><li><p>添加ribbon配置信息</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">serviceId</span>]<span class="string">.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p> 配置key中<code>[serviceId]</code>对应服务提供方注册到配置中心的的ServiceId，配置value按需填写策略类的ClassName。</p></li><li><p>使用负载均衡策略</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/resource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancerClient.choose(<span class="string">&quot;[serviceId]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://[serviceId]/get&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>[serviceId]</code>填写实际的服务名。</p></li></ol><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><p>服务调用方采用饥饿加载的方式可以有效解决首次调用服务提供方时大概率出现的超时现象。</p><p>在调用方的配置文件中加入如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">serivce-provider1,</span> <span class="string">service-provider2</span></span><br></pre></td></tr></table></figure><p>其中，service-provider1和service-provider2是服务提供方的服务名。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 服务调用 </tag>
            
            <tag> Ribbon </tag>
            
            <tag> RestTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-服务链路追踪</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-服务链路追踪"><a href="#快速搭建微服务-服务链路追踪" class="headerlink" title="快速搭建微服务-服务链路追踪"></a>快速搭建微服务-服务链路追踪</h1><blockquote><p>部分内容引用自: <a href="https://yq.aliyun.com/articles/60165">利用Zipkin对Spring Cloud应用进行服务追踪分析</a></p></blockquote><p>针对服务化应用全链路追踪的问题，Google发表了<a href="http://research.google.com/pubs/pub36356.html?spm=a2c4e.11153959.blogcont60165.8.6c6808bcBuWAJb">Dapper论文</a>，介绍了他们如何进行服务追踪分析。其基本思路是在服务调用的请求和相应中加入ID，标明上下游请求的关系。</p><p>对用Dapper的开源实现是<a href="http://zipkin.io/?spm=a2c4e.11153959.blogcont60165.9.6c6808bcBuWAJb">Zipkin</a>，支持多种语言包括JavaScript，Python，Java, Scala, Ruby, C#, Go等。其中Java由多种不同的库来支持。</p><p>Spring Cloud Sleuth是对Zipkin的一个封装，对于Span、Trace等信息的生成、接入HTTP Request，以及向Zipkin Server发送采集信息等全部自动完成。本文介绍如何在Spring Cloud中集成Spring Cloud Sleuth实现服务链路追踪。</p><span id="more"></span><p>Spring Cloud Sleuth的概念图如下：</p><p><img src="/images/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/sleuth.png" alt="Spring Cloud Sleuth概念图"></p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>启动类加上 <code>@EnableZipkinStreamServer</code> 注解声明当前应用为Sleuth服务端。</p><h3 id="使用MySQL存储链路追踪信息的配置"><a href="#使用MySQL存储链路追踪信息的配置" class="headerlink" title="使用MySQL存储链路追踪信息的配置"></a>使用MySQL存储链路追踪信息的配置</h3><ul><li>Maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sleuth-server</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">url:</span> </span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><h3 id="使用ElasticSearch存储链路追踪信息的配置"><a href="#使用ElasticSearch存储链路追踪信息的配置" class="headerlink" title="使用ElasticSearch存储链路追踪信息的配置"></a>使用ElasticSearch存储链路追踪信息的配置</h3><ul><li>Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-storage-elasticsearch-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sleuth-server</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.17</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">hosts:</span> <span class="string">http://172.17.0.1:9200</span></span><br><span class="line">      <span class="attr">index:</span> <span class="string">zipkin</span></span><br><span class="line">      <span class="attr">index-shards:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ul><li>Maven 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br></pre></td></tr></table></figure><h2 id="建表SQL脚本"><a href="#建表SQL脚本" class="headerlink" title="建表SQL脚本"></a>建表SQL脚本</h2><p>使用MySQL存储链路追踪信息时，需要使用<code>io.zipkin.java:zipkin-storage-mysql</code>包内的<code>mysql.sql</code>脚本创建数据表，该脚本的内容如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_spans (</span><br><span class="line">  `trace_id_high` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class="line">  `trace_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent_id` <span class="type">BIGINT</span>,</span><br><span class="line">  `debug` BIT(<span class="number">1</span>),</span><br><span class="line">  `start_ts` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;</span>,</span><br><span class="line">  `duration` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `id`) COMMENT <span class="string">&#x27;ignore insert on duplicate&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT <span class="string">&#x27;for joining with zipkin_annotations&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="string">&#x27;for getTracesByIds&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`name`) COMMENT <span class="string">&#x27;for getTraces and getSpanNames&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_spans <span class="keyword">ADD</span> INDEX(`start_ts`) COMMENT <span class="string">&#x27;for getTraces ordering and range&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_annotations (</span><br><span class="line">  `trace_id_high` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class="line">  `trace_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;coincides with zipkin_spans.trace_id&#x27;</span>,</span><br><span class="line">  `span_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;coincides with zipkin_spans.id&#x27;</span>,</span><br><span class="line">  `a_key` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;</span>,</span><br><span class="line">  `a_value` <span class="type">BLOB</span> COMMENT <span class="string">&#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;</span>,</span><br><span class="line">  `a_type` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;</span>,</span><br><span class="line">  `a_timestamp` <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;</span>,</span><br><span class="line">  `endpoint_ipv4` <span class="type">INT</span> COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class="line">  `endpoint_ipv6` <span class="type">BINARY</span>(<span class="number">16</span>) COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;</span>,</span><br><span class="line">  `endpoint_port` <span class="type">SMALLINT</span> COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class="line">  `endpoint_service_name` <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT <span class="string">&#x27;Ignore insert on duplicate&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT <span class="string">&#x27;for joining with zipkin_spans&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="string">&#x27;for getTraces/ByIds&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`endpoint_service_name`) COMMENT <span class="string">&#x27;for getTraces and getServiceNames&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`a_type`) COMMENT <span class="string">&#x27;for getTraces&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`a_key`) COMMENT <span class="string">&#x27;for getTraces&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_annotations <span class="keyword">ADD</span> INDEX(`trace_id`, `span_id`, `a_key`) COMMENT <span class="string">&#x27;for dependencies job&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> zipkin_dependencies (</span><br><span class="line">  `<span class="keyword">day</span>` <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `child` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `call_count` <span class="type">BIGINT</span>,</span><br><span class="line">  `error_count` <span class="type">BIGINT</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB ROW_FORMAT<span class="operator">=</span>COMPRESSED <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> zipkin_dependencies <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> KEY(`<span class="keyword">day</span>`, `parent`, `child`);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 链路追踪 </tag>
            
            <tag> APM </tag>
            
            <tag> Sleuth </tag>
            
            <tag> Zipkin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-注册中心、服务发现</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E3%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E3%80%81%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-注册中心、服务发现"><a href="#快速搭建微服务-注册中心、服务发现" class="headerlink" title="快速搭建微服务-注册中心、服务发现"></a>快速搭建微服务-注册中心、服务发现</h1><p>注册中心是微服务的核心组件，SpringCloud比较常见的注册中心有eureka和consul，这里简单说明下这两种注册中心服务如何实现。这里的例子是基于SpringCloud Edgeware版本。</p><span id="more"></span><h2 id="Spring-Cloud-Eureka注册中心"><a href="#Spring-Cloud-Eureka注册中心" class="headerlink" title="Spring Cloud Eureka注册中心"></a>Spring Cloud Eureka注册中心</h2><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><ul><li><p>maven</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9101</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">wait-time-in-ms-when-sync-empty:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br></pre></td></tr></table></figure></li><li><p>Application.java</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><ul><li><p>maven</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9110</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka-server:9101/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;spring.cloud.client.ipAddress&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span></span><br></pre></td></tr></table></figure></li><li><p>Application.java</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceOrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Cloud-Consul注册中心"><a href="#Spring-Cloud-Consul注册中心" class="headerlink" title="Spring Cloud Consul注册中心"></a>Spring Cloud Consul注册中心</h2><h3 id="Server端-1"><a href="#Server端-1" class="headerlink" title="Server端"></a>Server端</h3><ol><li><p><a href="https://www.consul.io/downloads.html">下载</a>consul服务端程序</p></li><li><p>运行consul</p><ul><li><p>开发环境</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure></li><li><p>正式部署</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -data-dir=tem/consul</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Client端-1"><a href="#Client端-1" class="headerlink" title="Client端"></a>Client端</h3><ul><li><p>maven</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9110</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-order</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br></pre></td></tr></table></figure></li><li><p>Application.java</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceOrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServiceOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务发现 </tag>
            
            <tag> Registry Center </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-消息总线</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-消息总线"><a href="#快速搭建微服务-消息总线" class="headerlink" title="快速搭建微服务-消息总线"></a>快速搭建微服务-消息总线</h1><p>利用Spring Cloud Bus提供的批量刷新配置的机制，可以实现在配置中心的配置信息发生变化后自动更新相关服务的配置的功能。Spring Cloud Bus消息总线通过使用轻量级的消息代理中间件（例如RabbitMQ、Kafka等）连接分布式系统的节点，这样就可以通过Spring Cloud Bus广播配置信息的变化。</p><span id="more"></span><p>这里使用RabbitMQ作为消息中间件向Spring Cloud微服务架构中加入消息总线，并实现配置自动刷新配置信息的功能。</p><h2 id="配置中心服务端"><a href="#配置中心服务端" class="headerlink" title="配置中心服务端"></a>配置中心服务端</h2><ul><li>添加Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">trace:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> </span><br><span class="line">    <span class="attr">port:</span> </span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br></pre></td></tr></table></figure><p>配置项 <code>spring.cloud.bus.trace.enabled=true</code> 用于开启跟踪总线事件，在 <code>/bus/refresh</code> 端点被请求后，访问 <code>/trace</code> 端点即可获得事件的传播细节。</p><h2 id="配置中心客户端"><a href="#配置中心客户端" class="headerlink" title="配置中心客户端"></a>配置中心客户端</h2><ul><li>添加Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> </span><br><span class="line">    <span class="attr">port:</span> </span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br></pre></td></tr></table></figure><h2 id="更改配置后自动刷新"><a href="#更改配置后自动刷新" class="headerlink" title="更改配置后自动刷新"></a>更改配置后自动刷新</h2><p>更改配置中心保存的配置信息之后，可以通过 <code>POST</code> 方式手动访问配置中心服务端的 <code>/bus/refresh</code> 接口来刷新相关微服务应用的配置。如果想自动刷新，可以借助Git仓库的WebHook配置push代码之后自动访问 <code>/bus/refresh</code> 端口即可。</p><p>需要注意的是，需要在使用 <code>@Value</code> 或者 <code>@Autowired</code> 注解的方式调用配置信息的类上加上 <strong><code>@RefreshScope</code></strong> 注解以响应配置的更新。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 消息总线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-熔断器</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%86%94%E6%96%AD%E5%99%A8/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E7%86%94%E6%96%AD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-熔断器"><a href="#快速搭建微服务-熔断器" class="headerlink" title="快速搭建微服务-熔断器"></a>快速搭建微服务-熔断器</h1><p>熔断器的主要功能是在进行服务间调用时提供一种容错保护，当服务提供方因网络或自身原因出现调用故障或延迟时，会导致服务调用方对外服务也出现延迟，如果此时服务调用方的请求不断增加，则会出现调用方的自身服务的故障甚至蔓延导致整个系统的瘫痪。</p><span id="more"></span><h2 id="服务调用方配置熔断"><a href="#服务调用方配置熔断" class="headerlink" title="服务调用方配置熔断"></a>服务调用方配置熔断</h2><ul><li>Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开启熔断器</li></ul><p>在启动类上加入<code>@EnableCircuitBreaker</code>注解开启熔断器。</p><ul><li>服务降级</li></ul><p>通过 <code>@HystrixCommand</code> 注解实现服务降级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;listWxMpAccountFallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">listWxMpAccount</span><span class="params">(<span class="meta">@PageableDefault</span> Pageable pageable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> wxMpAccountService.listWxMpAccount(pageable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Result <span class="title function_">listWxMpAccountFallback</span><span class="params">(Pageable pageable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;获取公众号列表失败，请稍后再试&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网关配置服务降级"><a href="#网关配置服务降级" class="headerlink" title="网关配置服务降级"></a>网关配置服务降级</h2><p>当我们在使用zuul进行路由分发，如果后端服务没有启动或者调用超时的时候，就可以使用zuul提供的降级功能。</p><p>在网关服务中新建继承自 <code>FallbackProvider</code> 的 <code>ServiceFallbackProvider</code> 类，并使用 <code>@Component</code> 注解进行修饰。<code>FallbackProvider</code> 会根据是否存在 <code>Throwable</code> 来选择降级方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceFallbackProvider</span> <span class="keyword">implements</span> <span class="title class_">FallbackProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">fallbackResponse</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">reasonBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;服务故障，请稍后重试!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (throwable != <span class="literal">null</span> &amp;&amp; throwable.getCause() != <span class="literal">null</span>) &#123;</span><br><span class="line">            reasonBuilder.append(<span class="string">&quot; 故障原因: &quot;</span>).append(throwable.getCause().getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClientHttpResponse</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> HttpStatus <span class="title function_">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> InputStream <span class="title function_">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(reasonBuilder.toString().getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">                headers.setContentType(MediaType.valueOf(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE));</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRoute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">fallbackResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClientHttpResponse</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> HttpStatus <span class="title function_">getStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRawStatusCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getStatusText</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> HttpStatus.SERVICE_UNAVAILABLE.getReasonPhrase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> InputStream <span class="title function_">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="string">&quot;服务故障，请稍后重试!&quot;</span>.getBytes(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> HttpHeaders <span class="title function_">getHeaders</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">                headers.setContentType(MediaType.valueOf(AppConsts.WebConsts.TEXT_PLAIN_UTF8_VALUE));</span><br><span class="line">                <span class="keyword">return</span> headers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 容错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建微服务-配置中心</title>
      <link href="/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2020/02/04/spring-cloud/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建微服务-配置中心"><a href="#快速搭建微服务-配置中心" class="headerlink" title="快速搭建微服务-配置中心"></a>快速搭建微服务-配置中心</h1><p>配置中心是用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，分为服务端和客户端两个部分。配置中心的服务端是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息的接口。配置中心的客户端可以是微服务架构中的各个微服务应用或基础服务，客户端在启动的时候调用服务端接口获取并加载配置信息。Spring Cloud Config实现的配置中心默认采用Git仓库来存储配置信息。本文简单介绍如何在微服务架构中使用Spring Cloud Config作为配置中心。</p><span id="more"></span><h2 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h2><p>在Git代码托管平台上创建一个新的仓库&#x2F;项目，并将配置文件上传至Git仓库的根目录下。</p><p>配置文件的命名格式为：<code>[serviceId]-[profile].yml</code></p><p>当profile为 “default” 默认配置时，可以忽略。</p><p>配置文件的格式可以是yml，也可以是properties，推荐可读性更好的yml格式。配置文件的内容填写相应的微服务的外部配置信息，例如 <code>api-gateway</code> 网关服务的配置文件 <strong>api-gateway.yml</strong> 中配置了jwt的相关参数和不同客户端的jwt过期及刷新时间，限流的开关、开启限流的内存阈值、需要限流的服务名及每秒限制的请求数，跨域相关配置。具体配置信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">yupaits</span></span><br><span class="line">  <span class="attr">auth-header-name:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="attr">expired-config:</span></span><br><span class="line">    <span class="attr">PC_WEB:</span></span><br><span class="line">      <span class="attr">expired-in-seconds:</span> <span class="number">1800</span></span><br><span class="line">      <span class="attr">refresh-ttl-seconds:</span> <span class="number">864000</span></span><br><span class="line">    <span class="attr">MOBILE_H5:</span></span><br><span class="line">      <span class="attr">expired-in-seconds:</span></span><br><span class="line">      <span class="attr">refresh-ttl-seconds:</span></span><br><span class="line">    <span class="attr">MOBILE_APP:</span></span><br><span class="line">      <span class="attr">expired-in-seconds:</span></span><br><span class="line">      <span class="attr">refresh-ttl-seconds:</span></span><br><span class="line">    <span class="attr">MOBILE_WECHAT:</span></span><br><span class="line">      <span class="attr">expired-in-seconds:</span></span><br><span class="line">      <span class="attr">refresh-ttl-seconds:</span></span><br><span class="line">    <span class="attr">TEST:</span></span><br><span class="line">      <span class="attr">expired-in-seconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">refresh-ttl-seconds:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rate-limit:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">memory-size-kb:</span> <span class="number">300000</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">service-order:</span> <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line">  <span class="attr">origins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">methods:</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE,</span> <span class="string">PATCH</span></span><br><span class="line">  <span class="attr">max-age:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">allowed-headers:</span> <span class="string">Origin,</span> <span class="string">X-Requested-With,</span> <span class="string">Content-Type,</span> <span class="string">Accept,</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="attr">exposed-headers:</span> <span class="string">Authorization</span></span><br></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul><li>Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/[git仓库路径]</span></span><br><span class="line">          <span class="attr">username:</span> [<span class="string">git仓库访问用户名</span>]</span><br><span class="line">          <span class="attr">password:</span> [<span class="string">git仓库访问密码</span>]</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li>Maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:9000</span>    <span class="comment"># 配置中心服务端的访问URL</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">default</span>              <span class="comment"># 配置类型 default为默认配置</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>                 <span class="comment"># 配置中心Git仓库分支</span></span><br></pre></td></tr></table></figure><p> 因为从配置中心加载的配置要先于 <code>application.yml</code> 并且 <code>bootstrap.yml</code> 的配置加载会先于 <code>application.yml</code>，所以客户端中的配置中心的相关配置需要写在 <code>bootstrap.yml</code> 文件中。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 配置中心 </tag>
            
            <tag> Config Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据同步</title>
      <link href="/2020/02/04/web-architecture/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
      <url>/2020/02/04/web-architecture/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h1><p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构五要素</title>
      <link href="/2020/02/04/web-architecture/%E6%9E%B6%E6%9E%84%E4%BA%94%E8%A6%81%E7%B4%A0/"/>
      <url>/2020/02/04/web-architecture/%E6%9E%B6%E6%9E%84%E4%BA%94%E8%A6%81%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="架构五要素"><a href="#架构五要素" class="headerlink" title="架构五要素"></a>架构五要素</h1><p>一般在做架构设计时，我们会关注以下五个要素：</p><ul><li>高性能</li><li>高可用</li><li>伸缩性</li><li>扩展性</li><li>安全性</li></ul><h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>性能的测试指标主要有：</p><ul><li>响应时间：指应用执行一个操作需要的时间</li><li>并发数：指系统能够同时处理请求的数目</li><li>QPS：指单位时间内系统处理的请求量</li><li>系统性能计数器：描述服务器或者操作系统性能的一些数据指标</li></ul><p>性能优化，根据网站分层架构，可以分为三大类：</p><ul><li><p>Web前端性能优化</p><ul><li>减少http请求</li><li>适用浏览器缓存</li><li>启用压缩</li><li>减少Cookie传输</li></ul></li><li><p>应用服务器性能优化：缓存、集群、异步</p><ul><li>多线程（设计为无状态，使用局部对象，并发访问资源使用锁）</li><li>资源复用（单例，对象池）</li><li>数据结构</li><li>异步操作（消息队列，削峰作用）</li><li>多台应用服务器组成一个集群共同对外服务，提高整体处理能力</li><li>使用CDN，将网站静态内容分发至里用户最近的网络服务器机房，使用户通过最短访问路径获取数据。可以在网站机房部署反向代理服务器，缓存热点文件，加快请求响应速度，减轻应用服务器负载压力</li><li>应用服务器端，可以使用服务器本地缓存和分布式缓存（网站性能优化第一定律：考虑使用缓存优化性能）</li><li>代码层面，通过使用多线程、改善内存管理等手段优化性能</li><li>数据库服务器端，索引、缓存、SQL优化等手段优化性能</li><li>NoSQL数据库通过优化数据模型、存储结构、伸缩特性等</li></ul></li><li><p>存储服务器性能优化</p><ul><li>机械硬盘 vs 固态硬盘</li><li>B+树 vs LSM树</li><li>RAID vs HDFS</li></ul></li></ul><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>高可用的网站架构：目的是保证服务器硬件故障时服务依然可用、数据依然保存并能够被访问，主要手段有数据和服务的冗余备份及失效转移。</p><ul><li><p>高可用的应用：</p><ul><li>通过负载均衡进行无状态服务的失效转移</li><li>应用服务器集群的Session管理</li></ul></li><li><p>高可用的服务：无状态的服务，可使用类似负载均衡的失效转移策略，此外还有如下策略</p><ul><li>超时设置</li><li>异步调用</li><li>服务降级</li><li>限流</li></ul></li><li><p>高可用的数据：主要手段是数据备份和失效转移机制</p><ul><li>失效确认</li><li>访问转移</li><li>数据恢复</li><li>冷备：缺点是不能保证数据最终一致和数据可用性</li><li>热备：分为异步热备和同步热备</li><li>数据一致性（Consistency）</li><li>数据可用性（Availability）</li><li>分区容错性（Partition Tolerance）</li><li>CAP原理</li><li>数据备份</li></ul></li><li><p>软件质量保证</p><ul><li>自动化测试</li><li>预发布验证</li><li>灰度发布</li></ul></li><li><p>网站实时监控</p><ul><li>警报系统</li><li>自动优雅降级</li><li>用户行为日志采集（服务端和客户端）</li><li>服务器性能监控</li><li>监控数据采集</li><li>监控管理</li></ul></li></ul><h2 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h2><p>概括起来伸缩性分为如下几个方面：</p><ul><li><p>应用服务器集群的伸缩性设计</p><ul><li>轮询（Round Robin，RR）</li><li>加权轮询（Weighted Round Robin，WRR）</li><li>随机（Random）</li><li>最少链接（Least Connections）</li><li>源地址散列（Source Hashing）</li><li>DNS域名解析负载均衡</li><li>反向代理负载均衡（在HTTP协议层里，应用层负载均衡）</li><li>IP负载均衡（在内核进程完成数据分发）</li><li>数据链路层负载均衡（数据链路层修改mac地址，三角传输模式，LVS）</li></ul></li><li><p>分布式缓存集群的伸缩性设计</p><ul><li>Redis集群</li><li>分布式缓存的一致性Hash算法（一致性Hash环，虚拟层）</li></ul></li><li><p>数据存储服务集群的伸缩性设计</p><ul><li>关系数据库集群的伸缩性设计</li><li>NoSQL数据库的伸缩性设计</li></ul></li></ul><h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><p>系统架构设计层面的“开闭原则”，构建可扩展的网站架构。</p><ul><li><p>利用分布式消息队列降低耦合性</p><ul><li>分布式消息队列</li><li>事件驱动架构（Event Driven Architecture）</li></ul></li><li><p>利用分布式服务打造可复用的业务平台</p></li><li><p>可扩展的数据结构（如HBase的ColumnFamily设计）</p></li><li><p>利用开放平台建设网站生态圈</p></li></ul><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>XSS攻击和SQL注入时构成网站应用攻击最主要的两种手段，此外还包括CSRF，Session劫持等手段。</p><ul><li><p>攻击与防御</p><ul><li><p>Error Code</p></li><li><p>表单Token</p></li><li><p>验证码</p></li><li><p>Jsonp请求的，Referer校验</p></li><li><p>SQL注入</p></li><li><p>html危险字符转义</p></li><li><p>XSS攻击：跨站点脚本攻击（Cross Site Script）</p><blockquote><p>对js转义，使其失去执行能力，只能作为纯字符串展示</p></blockquote></li><li><p>CSRF攻击：跨站点请求伪造（Cross Site Request Forgery）</p><blockquote><p>防范：httpOnly；增加token校验；通过Referer识别。</p></blockquote></li><li><p>网站安全漏洞扫描</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2020/02/04/web-architecture/%E7%BC%93%E5%AD%98/"/>
      <url>/2020/02/04/web-architecture/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡</title>
      <link href="/2020/02/04/web-architecture/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/02/04/web-architecture/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群技术</title>
      <link href="/2020/02/04/web-architecture/%E9%9B%86%E7%BE%A4%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/02/04/web-architecture/%E9%9B%86%E7%BE%A4%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="集群技术"><a href="#集群技术" class="headerlink" title="集群技术"></a>集群技术</h1><p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高可用</title>
      <link href="/2020/02/04/web-architecture/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2020/02/04/web-architecture/%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><p>敬请期待……</p>]]></content>
      
      
      <categories>
          
          <category> 大型网络应用架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络架构 </tag>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的扩容机制</title>
      <link href="/2020/02/04/java/java-advanced/HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/02/04/java/java-advanced/HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HashMap是单纯的kv键值对结构，可以接受null键和null值，速度比较快，非线程安全。</p><h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>HashMap实际上是一个“链表的数组”的数据结构，每个元素存放链表头节点的数组，即数组和链表的结合体。</p><p><img src="/images/HashMap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/hashmap.png" alt="hashmap"></p><p>Entry就是数组中的元素，每个Map.Entry其实就是一个key-value对，它持有指向下一个元素的引用，这就构成了链表。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li>put</li></ul><p>当我们往HashMap中put元素的时候，先根据key的hashCode重新计算hash值，根据hash值得到这个元素在数组中的位置（即下标），如果数组该位置上已经存放有其他元素了，那么在这个位置上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。如果数组该位置上没有元素，就直接将该元素放到此数组的该位置上。</p><p>HashMap基于hashing原理，使用put()方法存储，当将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，然后找到bucket位置来存储值对象。</p><p>当获取对象时，同上找到对应的bucket，通过键对象的equals()方法找到正确的键值对，然后返回值对象。</p><ul><li>resize(rehash)</li></ul><p>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，数组扩容这个操作也会出现在ArrayList中，这是一个常用的操作，而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。</p><p>那么HashMap什么时候进行扩容呢？当HashMap中的元素个数超过数组大小 loadFactor 时，就会进行数组扩容，loadFactor 的默认值为 0.75，这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中元素个数超过 16 * 0.75 &#x3D; 12 的时候，就要把数组的大小扩展为 2 * 16 &#x3D; 32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经与之HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK并发包里常用的类</title>
      <link href="/2020/02/04/java/java-advanced/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E9%87%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB/"/>
      <url>/2020/02/04/java/java-advanced/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E9%87%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK并发包里常用的类"><a href="#JDK并发包里常用的类" class="headerlink" title="JDK并发包里常用的类"></a>JDK并发包里常用的类</h1><p><strong>资料：</strong></p><ul><li><a href="https://mp.weixin.qq.com/s/sF1xZY9ZrLVOXvTD4jiHRA">并发编程 ：Concurrent 用户指南 ( 上 )</a></li><li><a href="https://mp.weixin.qq.com/s/BrI7y7gKaBTDdtLm15ezzw">并发编程 ：Concurrent 用户指南 ( 中 )</a></li><li><a href="https://mp.weixin.qq.com/s/XxTazsHStb7BwjUxKflpdA">并发编程 ：Concurrent 用户指南 ( 下 )</a></li></ul><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>是线程安全的。</p><p>put方法，首先是对key.hashCode进行hash操作，得到hash值。然后获取对应的segment对象，接着调用Segment对象的put方法完成当前操作。当调用put方法时，首先lock操作。完成操作后再释放锁。</p><p><a href="http://ifeve.com/concurrenthashmap/">http://ifeve.com/concurrenthashmap/</a></p><p><img src="/images/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E9%87%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB/concurrent-hash-map.png" alt="concurrent-hash-map"></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>可以控制某资源同时被访问的个数。例如连接池中通常要控制创建连接的个数。</p><p>tryAcquire方法，获得锁<br>release方法，释放锁</p><h2 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h2><p>闭锁，确保一个服务不会开始，直到它依赖的其他服务都已经开始，它允许一个或多个线程，等待一个事件集的发生。通过减计数的方式，控制多个线程同时开始某个动作。当计数为0时，await后的代码才会被执行。提供await()和countDown()两个方法。</p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicBarrier中的await方法会对count值减1，并阻塞当前线程（java.util.concurrent.locks.Condition.await()），如果 count &#x3D;&#x3D; 0 先执行CyclicBarrier内部的Runnable任务（java.lang.Runnable.run()），然后唤醒所有阻塞的线程（java.util.concurrent.locks.Condition.signalAll()），count恢复初始值（可以进入下一轮循环）。</p><p>与CountdownLatch不同的是，它可以循环重用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCyclicBarrier</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_NUM</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WorkerThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        CyclicBarrier barrier;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">WorkerThread</span><span class="params">(CyclicBarrier b)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.barrier = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Worker&#x27;s waiting&quot;</span>);</span><br><span class="line">                <span class="comment">// 线程在这里等待，直到所有线程都到达barrier。</span></span><br><span class="line">                barrier.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;ID:&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; Working&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(THREAD_NUM, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当所有线程到达barrier时执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Inside Barrier&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">WorkerThread</span>(cb)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Inside Barrier</span><br><span class="line">ID:13 Working</span><br><span class="line">ID:9 Working</span><br><span class="line">ID:12 Working</span><br><span class="line">ID:11 Working</span><br><span class="line">ID:10 Working</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Worker&#x27;s waiting</span><br><span class="line">Inside Barrier</span><br><span class="line">ID:18 Working</span><br><span class="line">ID:14 Working</span><br><span class="line">ID:16 Working</span><br><span class="line">ID:15 Working</span><br><span class="line">ID:17 Working</span><br></pre></td></tr></table></figure><h2 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h2><p>原子操作，线程安全。之前如果多线程累计计数，需要通过锁控制。IncrementAndGet方法，关键是调用了compareAndSwap方法，是native方法，基于cpu的CAS原语来实现的。简单原理是由cpu比较内存位置上的值是否为当前值，如果是换成新值，否则返回false。</p><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>提供线程池服务，ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue workQueue, RejectedExecutionHandler handler)</p><p>参数说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">corePoolSize： 线程池维护线程的最少数量</span><br><span class="line">maximumPoolSize：线程池维护线程的最大数量</span><br><span class="line">keepAliveTime： 线程池维护线程所允许的空闲时间</span><br><span class="line">unit： 线程池维护线程所允许的空闲时间的单位</span><br><span class="line">workQueue： 线程池所使用的缓冲队列</span><br><span class="line">handler： 线程池对拒绝任务的处理策略</span><br></pre></td></tr></table></figure><p>block queue由以下几种实现:</p><ol><li>ArrayBlockingQueue：有界的数组队列</li><li>LinkedBlockingQueue：可支持有界、无界的队列，使用链表实现</li><li>PriorityBlockingQueue：优先队列，可对任务排序</li><li>SynchronousQueue：队列长度为1的队列，和Array有点区别就是：client 线程提交到 block queue会是一个阻塞过程，直到有一个消费线程连接上来poll task</li></ol><p>RejectExecutionHanlder是针对任务无法处理时的一些自我保护处理：</p><ol><li>Reject 直接抛出Reject exception</li><li>Discard 直接忽略该runnable，不建议使用</li><li>DiscardOldest 丢弃最早入队列的任务</li><li>CallerRuns 直接让原先的client thread做为消费线程，象同步调用方式一样，自己来执行。</li></ol><p><img src="/images/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E9%87%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB/threadpool-flow.png" alt="threadpool-flow"></p><p><strong>如何确定最大线程数？</strong></p><p>确定线程数首先需要考虑到系统可用的处理器核心数：</p><p><code>Runtime.getRuntime().availableProcessors();</code> 应用程序最小线程数应该等于可用的处理器核数。</p><p>如果所有的任务都是计算密集型的，则创建处理器可用核心数这么多个线程就可以了，这样就可以充分利用处理器，也就是让它以最大火力不停进行计算。创建更多的线程对于程序性能反而是不利的，因为多个线程间频繁进行上下文切换对于程序性能损耗较大。</p><p>如果任务都是IO密集型的，那我们就需要创建比处理器核心数大几倍数量的线程。为何？当一个任务执行IO操作时，线程将被阻塞，于是服务器可以立即进行上下文切换以便处理其他就绪线程。如果我们只有处理器核心数那么多个线程的话，即使有待执行的任务也无法调度处理了。</p><p>因此，线程数与我们每个任务处于阻塞状态的时间比例相关。假如任务有50%时间处于阻塞状态，那程序所需线程数时处理器核心数的两倍。我们可以计算出程序所需的线程数，公式如下：</p><p><code>线程数 = CPU可用核心数 / (1- 阻塞系数)</code></p><p>其中阻塞系数在0到1范围内。</p><p>计算密集型程序的阻塞系数为0，IO密集型程序的阻塞系数接近1。确定阻塞系数，我们可以先试着猜测，或者采用一些性能分析工具或 java.lang.management API 来确定线程华仔系统IO上的时间与CPU密集任务所耗的时间比值。</p><h2 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h2><p>工具类，提供大量管理线程执行器的工厂方法。</p><p><code>newFixedThreadPool(int)</code>，创建固定大小的线程池。</p><p><code>newSingleThreadPool()</code>，创建大小为1的线程池，同一时刻执行的task只有一个，其它的都放在阻塞队列中。</p><p><code>newScheduledThreadPool(int)</code>，适用于一些需要定时或延迟的任务。与Timer的区别：Timer时单线程，一旦一个task执行慢，将会影响其它任务。另外如果抛出异常，其它任务也不再执行。ScheduledThreadPoolExecutor可执行Callable的task，执行完毕后得到执行结果。任务队列时基于DelayedWorkQueue实现，将有新task加入时，会按执行时间排序。</p><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>用于异步获取执行结果或取消执行任务。通过传入Callable给FutureTask，直接调用run方法执行，之后可以通过FutureTask的get异步方法获得执行结果。FutureTask即使多次调用了run方法，它智慧执行一次Callable任务，当然也可以通过cancel来取消执行。</p><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><p>基于数组、先进先出、线程安全的集合。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>线程安全，读操作时无锁的ArrayList。每次新增一个对象时，会将创建一个新的数组（长度+1），将之前的数组中的内容复制到新的数组中，并将新增的对象放入数组末尾。最后做引用切换。</p><h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><p>与上面的CopyOnWriteArrayList类似，区别在于add元素时，会调用addIfAbsent，由于每次add时都要进行数组遍历，因此性能会略低于CopyOnWriteArrayList。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>单锁。控制并发的，和synchronized达到的效果是一致的。lock方法，借助于CAS机制来控制锁。unlock方法，释放锁。</p><h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><p>与ReentrantReadWriteLock没有任何继承关系，提供了读锁和写锁，在读多写少的场景中大幅度提升性能。</p><p>持有读锁时，不能直接调用写锁的lock方法；持有写锁时，其它线程的读或写都会被阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="type">WriteLock</span> <span class="variable">writeLock</span> <span class="operator">=</span> lock.wirteLock():</span><br><span class="line"><span class="type">ReadLock</span> <span class="variable">readLock</span> <span class="operator">=</span> lock.readLock();</span><br></pre></td></tr></table></figure><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><ol><li>指定锁的顺序，来避免死锁（先A后B，避免A-&gt;B和B-&gt;A同时存在）</li><li>尝试使用定时锁（lock.tryLock(timeout))</li><li>在持有锁的方法中进行其他方法的调用，尽量使用开放调用（当调用方法不需要持有锁时，叫做开放调用）</li><li>减少锁的持有时间、减小锁代码块的粒度</li></ol><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><p><img src="/images/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E9%87%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E7%B1%BB/concurrent-summary.png" alt="concurrent-summary"></p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8函数式编程（lambda表达式）</title>
      <link href="/2020/02/04/java/java-advanced/Java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%88lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
      <url>/2020/02/04/java/java-advanced/Java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%88lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8函数式编程（lambda表达式）"><a href="#Java8函数式编程（lambda表达式）" class="headerlink" title="Java8函数式编程（lambda表达式）"></a>Java8函数式编程（lambda表达式）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p><p>核心思想：使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p><p>对核心类库的改进主要包括集合类的API和新引入的流Stream。流使程序员可以站在更高的抽象层次上对集合进行操作。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/Xhr9aNEMr0fIUWh27mH1pw">Lambda 表达式的 10 个示例</a></p></li><li><p><a href="https://github.com/biezhi/learn-java8">learn-java8</a></p></li><li><p><a href="https://github.com/aalansehaiyang/java8-tutorial">java8-tutorial</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/9mgD2aV6gML57RAPIEbZeQ">一文让你明白lambda用法与源码分析</a></p></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>惰性求值方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream.filter(f -&gt; f.getName().equals(<span class="string">&quot;p1&quot;</span>));</span><br></pre></td></tr></table></figure><p>这行代码并未做什么实际性的工作，filter知识描述了Stream，<strong>没有产生新的集合</strong>。</p><p>如果使多个条件组合，可以通过代码块{}</p><ol><li>及早求值方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; resultList = list.stream().filter(f -&gt; f.getName().equals(<span class="string">&quot;p1&quot;</span>)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>collect最终会从Stream产生新值，拥有终止操作。</p><p>理想方式使形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果。与建造者模式相似，建造者模式先是使用一系列操作设置属性和配置，最后调用build方法，创建对象。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>collect(Collectors.toList())</li></ul><p>Stream流生成一个List列表；<code>Collectors.toSet()</code>，生成Set集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collectors.toMap(MemberModel::getUid, Function.identity());</span><br></pre></td></tr></table></figure><p><code>Function.identity()</code> 表示遍历的对象。</p><p>Collectors里提供了很多方法，比如字符串拼接。</p><ul><li>map</li></ul><p>将一种类型转换成另外一种类型。</p><ul><li>filter</li></ul><p>对Stream流中的元素进行过滤。true：保留；false：舍弃。</p><ul><li>flatMap</li></ul><p>将多个Stream连接成一个Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; result = Stream.of(Arrays.asList(<span class="number">1</span>, <span class="number">3</span>), Arrays.asList(<span class="number">5</span>, <span class="number">7</span>)).flatMap(a -&gt; a.stream()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>结果：[1, 3, 5, 7]</p><ul><li>distinct</li></ul><p>去重</p><ul><li>count</li></ul><p>计总数</p><ul><li>min, max</li></ul><p>最小值，最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Persion&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Persion&gt;();</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">1L</span>, <span class="string">&quot;p1&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">2L</span>, <span class="string">&quot;p2&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">3L</span>, <span class="string">&quot;p3&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">4L</span>, <span class="string">&quot;p4&quot;</span>));</span><br><span class="line"><span class="type">Persion</span> <span class="variable">a</span> <span class="operator">=</span> lists.stream().max(Comparator.comparing(t -&gt; t.getId())).get();</span><br><span class="line">System.out.println(a.getId());</span><br></pre></td></tr></table></figure><p>如果比较器涉及多个条件，比较复杂，可以定制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Persion</span> <span class="variable">a</span> <span class="operator">=</span> lists.stream().min(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Persion&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Persion o1, Persion o2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1.getId() &gt; o2.getId()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (o1.getId() &lt; o2.getId()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).get();</span><br></pre></td></tr></table></figure><h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>可以使用peek方法，peek方法可只包含一个空的方法体，只要能设置断点即可，但有些IDE不允许空，如下示例，简单写一个打印逻辑。</p><p>注意，调试完后要删掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Persion&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Persion&gt;();</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">1L</span>, <span class="string">&quot;p1&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">2L</span>, <span class="string">&quot;p2&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">3L</span>, <span class="string">&quot;p3&quot;</span>));</span><br><span class="line">lists.add(<span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="number">4L</span>, <span class="string">&quot;p4&quot;</span>));</span><br><span class="line">System.out.println(lists);</span><br><span class="line"></span><br><span class="line">List&lt;Persion&gt; list2 = lists.stream()</span><br><span class="line">        .filter(f -&gt; f.getName().startsWith(<span class="string">&quot;p&quot;</span>))</span><br><span class="line">        .peek(t -&gt; &#123;</span><br><span class="line">            System.out.println(t.getName());</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(list2);</span><br></pre></td></tr></table></figure><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><ul><li>集合 -&gt; 取元素的一个属性 -&gt; 去重 -&gt; 组装成List -&gt; 返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;LickDO&gt; liekDOs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;LikeDO&gt;();</span><br><span class="line"><span class="comment">//add一系列元素</span></span><br><span class="line"><span class="comment">//得到收藏帖子的tid列表</span></span><br><span class="line">List&lt;Long&gt; likeTidList = likeDOs.stream().map(LikeDO::getTid).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>集合 -&gt; 按表达式过滤 -&gt; 遍历、每个元素处理 -&gt; 放入预先定义的几何中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, StkProduct&gt; newStockName2Product = Maps.newConcurrentMap();</span><br><span class="line">stockProducts.stream().filter(stkProduct -&gt; stkProduct.enabled).forEach(stkProduct -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> BCConvert.bj2qj(StringUtils.replace(stkProduct.name, <span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    newStockName2Product.put(newName, stkProduct);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Set‹String› qjStockNames;</span><br><span class="line">qjStockNames.stream().filter(name -&gt; !acAutomaton.getKey2link().containsKey(name)).forEach(name -&gt; &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">StkProduct</span> <span class="variable">stkProduct</span> <span class="operator">=</span> stockNameQj2Product.get(name);</span><br><span class="line">    <span class="keyword">if</span> (stkProduct != <span class="literal">null</span>) &#123;</span><br><span class="line">        value = stkProduct.name;</span><br><span class="line">    &#125;</span><br><span class="line">    acAutomaton.getKey2link().put(name, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>集合 -&gt; map</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ImageModel&gt; imageModelList = <span class="literal">null</span>;</span><br><span class="line">Map&lt;Long, String&gt; imagesMap = <span class="literal">null</span>;</span><br><span class="line">imagesMap = imageModelList.stream().collect(Collectors.toMap(ImageModel::getAid, o -&gt; IMAGE_ADDRESS_PREFIX + o.getUrl()));</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; kvMap = postDetailCacheList.stream().collect(Collectors.toMap(detailCache -&gt; getBbsSimplePostKey(detailsCache.getTid()), JSON::toJSONString));</span><br><span class="line"></span><br><span class="line">Map&lt;Long, Long&gt; pidToTid;</span><br><span class="line">List‹String› pidKeyList = pidToTid.entrySet().stream().map(o -&gt; getKeyBbsReplyPid(o.getValue(), o.getKey())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>DO模型 -&gt; Model模型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;AdDO&gt; adDOList;</span><br><span class="line">adDOList.stream().map(adDo -&gt; convertAdModel(adDo)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ul><li>phones是一个List‹String›，将相同的元素分组、归类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List‹String› phones=<span class="keyword">new</span> <span class="title class_">ArrayList</span>‹String›();</span><br><span class="line">phones.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">phones.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">phones.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">phones.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">phones.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">phones.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">Map&lt;String, List‹String›&gt; phoneClassify = phones.stream().collect(Collectors.groupingBy(item -&gt; item));</span><br><span class="line">System.out.println(phoneClassify);</span><br></pre></td></tr></table></figure><p>返回结果：</p><p><code>&#123;a=[a, a, a], b=[b, b], c=[c]&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Java关键字"><a href="#Java关键字" class="headerlink" title="Java关键字"></a>Java关键字</h1><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>volatile是Java最轻量级的同步机制。</p><p><strong>特性：</strong></p><ul><li><p>可见性。变量读写直接操作主存而不是CPU Cache。当一个线程修改了volatile修饰的变量后，无论是否加锁，其他线程都可以立即看到最新的修改。</p></li><li><p>禁止指令重排序优化。</p></li><li><p>保证变量可见性，但无法保证原子性。也就是说非线程安全。</p></li></ul><p><strong>Java内存模型：</strong></p><p><img src="/images/Java%E5%85%B3%E9%94%AE%E5%AD%97/volatile.png" alt="volatile"></p><blockquote><p>详情可参考 <a href="https://mp.weixin.qq.com/s/mcR8_FHHGA2zb0aW1N02ag?from=groupmessage&isappinstalled=0">深入分析volatile的实现原理</a></p></blockquote><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>线程安全，锁区域内容一次只允许一个线程执行，通过锁机制控制。</p><ol><li><p>当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</p></li><li><p>然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。</p></li><li><p>尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。</p></li></ol><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> i)</span>;</span><br></pre></td></tr></table></figure><p>每个类实例对应一把锁，类的两个实例没有这个限制。类实例中所有的synchronized方法共用这一把锁，锁的范围有点大。</p><h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (syncObject) &#123;</span><br><span class="line">    <span class="comment">//允许访问控制的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的代码执行前必须获得对象 syncObject 锁，可以针对任意代码块，且可以任意指定上锁的对象，故灵活性较高。</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>如果修饰变量标识为常量，运行过程中会将值直接替换到变量这个占位符中（避免根据内存地址再次查找这层消耗）；如果修改方法，方法不允许被覆盖；修饰类，类不允许被继承。</p><p>基础类型，如String，不允许修改。</p><p>集合，如Map、List，引用地址不允许修改，但可以put、get等操作。</p><p>Java8编译会检查，如果是修改常量，会编译失败。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li><p>声明属性</p><p>  为全局属性，放在全局数据区，只分配一次。</p></li><li><p>声明方法</p><p>  类方法，可以由类名直接调用。</p></li><li><p>声明类</p><p>  内部类可以用static修饰声明该类为静态内部类。</p></li></ul><h2 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h2><p>如果一个对象中的某个属性不希望被序列化，则可以使用transient关键字进行声明。</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程知识点</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程知识点"><a href="#Java多线程知识点" class="headerlink" title="Java多线程知识点"></a>Java多线程知识点</h1><p>Java多线程相关的一些面试题。</p><ul><li><p>线程和进程有什么区别？</p><p>  一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。</p></li><li><p>如何在Java种实现线程？</p><p>  创建线程有两种方式：1、继承 Thread 类，扩展线程。2、实现 Runnable 接口。</p></li><li><p>启动一个线程是调用run()还是start()方法？</p><p>  启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p></li><li><p>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别？</p><p>  sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p></li><li><p>线程的sleep()方法和yield()方法有什么区别？</p><ol><li>sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；</li><li>线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；</li><li>sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；</li><li>sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</li></ol></li><li><p>请说出线程同步以及线程调度相关的方法。</p><ul><li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</li><li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</li><li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</li><li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发源码合集</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E5%90%88%E9%9B%86/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Java并发源码合集"><a href="#Java并发源码合集" class="headerlink" title="Java并发源码合集"></a>Java并发源码合集</h1><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483775&idx=1&sn=e3c249e55dc25f323d3922d215e17999&chksm=fa497ececd3ef7d82a9ce86d6ca47353acd45d7d1cb296823267108a06fbdaf71773f576a644&scene=21#wechat_redirect">【死磕Java并发】—– 深入分析synchronized的实现原理</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483784&idx=1&sn=672cd788380b2096a7e60aae8739d264&chksm=fa497e39cd3ef72fcafe7e9bcc21add3dce0d47019ab6e31a775ba7a7e4adcb580d4b51021a9&scene=21#wechat_redirect">【死磕Java并发】—– 深入分析volatile的实现原理</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483805&idx=1&sn=0833a7698863d1274a540f4c09297242&chksm=fa497e2ccd3ef73a977d4a2e665ec84b34e6ff63a90348d123adfd92e630c982af1e8be96a13&scene=21#wechat_redirect">【死磕Java并发】—– Java内存模型之happens-before</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483814&idx=1&sn=da21fd6f18862e005c38ee64ea1716a2&chksm=fa497e17cd3ef7014d85702bcc8ca8b341c4e676a9a55074adced813f73c99cec474e92592d0&scene=21#wechat_redirect">【死磕Java并发】—– Java内存模型之重排序</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483857&idx=1&sn=d3069b64d60567b1f8df657d0e1a4fa5&chksm=fa497e60cd3ef776774e186347291fc86dcfc97557b0e949e273be039c9e0a5f43c21c03ff04&scene=21#wechat_redirect">【死磕Java并发】—– Java内存模型之分析volatile</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483793&idx=1&sn=40ffc5ed384b6d7beacf87a44e30c8c3&chksm=fa497e20cd3ef736ae174e9a9698e5d4ff04dbfe68dc56c636584dcbd4952242ecc4476b8956&scene=21#wechat_redirect">【死磕Java并发】—– Java内存模型之从JMM角度分析DCL</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483827&idx=1&sn=f2ab39fd8f13b7827553ae9e06dfecd1&chksm=fa497e02cd3ef714a5a5c9530576ee25ef24a159fda006ae38e1d349271d11573b1ad7644a79&scene=21#wechat_redirect">【死磕Java并发】—– Java内存模型之总结</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483885&idx=1&sn=d5c97065619ac31dc44fd8bbe9ccc218&chksm=fa497e5ccd3ef74ac78b28059eb8a9929ccf6d314b7af8216b801c628283944b313cc48ad15a&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之AQS：CLH同步队列</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483981&idx=1&sn=7d8f6cb8344fc560f25fb2b71cc2a5df&chksm=fa497dfccd3ef4eae718540b0b81e84ba29aa29db15977417eb46b05f034aad564dcb2269a2f&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之AQS：同步状态的获取与释放</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247483907&idx=1&sn=2a297b6a961368696ba7fe13e6f20007&chksm=fa497db2cd3ef4a493f523441346aab29a1f95658f49eabc744fbee56f76d1239eecd162ef66&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之AQS：阻塞和唤醒线程</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484011&idx=1&sn=bc1e9a4af9175b6df202fa8b1ffd5589&chksm=fa497ddacd3ef4cca17b8c0f16adf8139b8b3a55c03c17b1da30b0260ce008f40dde769b33c6&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之重入锁：ReentrantLock</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484040&idx=1&sn=60633c2dc4814b26dc4b39bb2bb5d4dd&chksm=fa497d39cd3ef42f539cd0576c1a3575ee27307048248571e954f0ff21a5a9b1ddfab522c834&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之读写锁：ReentrantReadWriteLock</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484095&idx=1&sn=729a43cc56da42710c91f8eef39e1a9b&chksm=fa497d0ecd3ef4185d4d9ef36595eb182ba0544f051ed584cac5a2f15c648e9b67db362473b1&scene=21#wechat_redirect">【死磕Java并发】—–J.U.C之Condition</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484156&idx=1&sn=88f659cd13ab4064d760b4b5c60cbc63&chksm=fa497d4dcd3ef45b520d06ea75c219d67f7ba35129ca800d374cfa6f2d39ab1d2d9bf3379b30&scene=21#wechat_redirect">【死磕Java并发】—- 深入分析CAS</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484184&idx=1&sn=d221688af03cbab0bf7e719fa253a266&chksm=fa497ca9cd3ef5bf394189cc2432499b93eaaf92314ee5c4dd451b6ccf3aa20ab527d56bea8e&scene=21#wechat_redirect">【死磕Java并发】—- J.U.C之并发工具类：CyclicBarrier</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484300&idx=1&sn=fcdadc7aeebfd397731820a50bbf1374&chksm=fa497c3dcd3ef52b9645f2912e2674c03944d36a1e5638e42da7a30b928d85a51746682b1df7&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之并发工具类：CountDownLatch</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247484323&idx=1&sn=cb2b572227a9004840abdfd26e7dd336&chksm=fa497c12cd3ef50447bf162d63d977747dd4478a75ccda46522c6903d386b5c69581670b495a&scene=21#wechat_redirect">【死磕Java并发】—– J.U.C之并发工具类：Semaphore</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常Exception</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%BC%82%E5%B8%B8Exception/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%BC%82%E5%B8%B8Exception/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常Exception"><a href="#Java异常Exception" class="headerlink" title="Java异常Exception"></a>Java异常Exception</h1><p>捕获异常时需要注意 try、catch、finally 块中的控制转移语句。示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryCatchFinallySample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">testFinallyReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Page <span class="title function_">testReferenceReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 返回的过程：先给返回值赋值，然后调用finally代码块，最后才是返回到try中的return语句</span></span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 修改引用类型变量指向对象的值</span></span><br><span class="line">            page.setCurrent(<span class="number">2</span>);</span><br><span class="line">            page.setSize(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Page <span class="title function_">testReferenceNewReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// return的返回值暂存区存的是引用类型</span></span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> page;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 使用new之后page指向了新的Page对象，并未改变暂存区的引用类型变量的指向，引用类型变量的定义类似于指针</span></span><br><span class="line">            page = <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">testCatchReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;oh no!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">testValueReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 值传递，在finally里修改返回值也不会改变实际的返回值</span></span><br><span class="line">            i = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> current;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Page</span><span class="params">(<span class="type">int</span> current, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.current = current;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrent</span><span class="params">(<span class="type">int</span> current)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.current = current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Page&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;current=&quot;</span> + current +</span><br><span class="line">                    <span class="string">&quot;, size=&quot;</span> + size +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试结论：finally中存在控制转移语句（return、break、continue）时会优先于try、catch中的控制转移语句。</span></span><br><span class="line"><span class="comment">     * 原因是finally块中的代码会插入到try或者catch的return语句之前。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;值传递时的原返回值：1，引用传递时的原返回值：Page&#123;current=1, size=10&#125;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试finally中包含return语句：&quot;</span> + testFinallyReturn());</span><br><span class="line">        System.out.println(<span class="string">&quot;值传递时，finally修改返回值：&quot;</span> + testValueReturn());</span><br><span class="line">        System.out.println(<span class="string">&quot;引用传递时，finally修改返回值：&quot;</span> + testReferenceReturn());</span><br><span class="line">        System.out.println(<span class="string">&quot;引用传递时，finally返回new的引用对象：&quot;</span> + testReferenceNewReturn());</span><br><span class="line">        System.out.println(<span class="string">&quot;测试catch块进行return：&quot;</span> + testCatchReturn());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">值传递时的原返回值：1，引用传递时的原返回值：Page&#123;current=1, size=10&#125;</span><br><span class="line">测试finally中包含return语句：2</span><br><span class="line">值传递时，finally修改返回值：1</span><br><span class="line">引用传递时，finally修改返回值：Page&#123;current=2, size=20&#125;</span><br><span class="line">引用传递时，finally返回new的引用对象：Page&#123;current=1, size=10&#125;</span><br><span class="line">测试catch块进行return：2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的System.getProperty()方法使用</title>
      <link href="/2020/02/04/java/java-advanced/Java%E7%9A%84System.getProperty()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/04/java/java-advanced/Java%E7%9A%84System.getProperty()%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的System-getProperty-方法使用"><a href="#Java的System-getProperty-方法使用" class="headerlink" title="Java的System.getProperty()方法使用"></a>Java的System.getProperty()方法使用</h1><blockquote><p>引用自<a href="https://blog.csdn.net/itomge/article/details/9098207">java的System.getProperty()方法使用</a></p></blockquote><h2 id="获取环境变量"><a href="#获取环境变量" class="headerlink" title="获取环境变量"></a>获取环境变量</h2><p>通过 <code>System.getProperty(&quot;propertyName&quot;)</code> 可以获得环境变量设置的值。</p><p>常见的Key值有：</p><table><thead><tr><th>key值</th><th>说明</th></tr></thead><tbody><tr><td>java.version</td><td>Java 运行时环境版本</td></tr><tr><td>java.vendor</td><td>Java 运行时环境供应商</td></tr><tr><td>java.vendor.url</td><td>Java 供应商的 URL</td></tr><tr><td>java.home</td><td>Java 安装目录</td></tr><tr><td>java.vm.specification.version</td><td>Java 虚拟机规范版本</td></tr><tr><td>java.vm.specification.vendor</td><td>Java 虚拟机规范供应商</td></tr><tr><td>java.vm.specification.name</td><td>Java 虚拟机规范名称</td></tr><tr><td>java.vm.version</td><td>Java 虚拟机实现版本</td></tr><tr><td>java.vm.vendor</td><td>Java 虚拟机实现供应商</td></tr><tr><td>java.vm.name</td><td>Java 虚拟机实现名称</td></tr><tr><td>java.specification.version</td><td>Java 运行时环境规范版本</td></tr><tr><td>java.specification.vendor</td><td>Java 运行时环境规范供应商</td></tr><tr><td>java.specification.name</td><td>Java 运行时环境规范名称</td></tr><tr><td>java.class.version</td><td>Java 类格式版本号</td></tr><tr><td>java.class.path</td><td>Java 类路径</td></tr><tr><td>java.library.path</td><td>加载库时搜索的路径列表</td></tr><tr><td>java.io.tmpdir</td><td>默认的临时文件路径</td></tr><tr><td>java.compiler</td><td>要使用的 JIT 编译器的名称</td></tr><tr><td>java.ext.dirs</td><td>一个或多个扩展目录的路径</td></tr><tr><td>os.name</td><td>操作系统的名称</td></tr><tr><td>os.arch</td><td>操作系统的架构</td></tr><tr><td>os.version</td><td>操作系统的版本</td></tr><tr><td>file.separator</td><td>文件分隔符（在 UNIX 系统中是“&#x2F;”）</td></tr><tr><td>path.separator</td><td>路径分隔符（在 UNIX 系统中是“:”）</td></tr><tr><td>line.separator</td><td>行分隔符（在 UNIX 系统中是“&#x2F;n”）</td></tr><tr><td>user.name</td><td>用户的账户名称</td></tr><tr><td>user.home</td><td>用户的主目录</td></tr><tr><td>user.dir</td><td>用户的当前工作目录</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemPropertyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.getProperties().list(System.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-- listing properties --</span><br><span class="line">java.runtime.name=Java(TM) SE Runtime Environment</span><br><span class="line">sun.boot.library.path=D:\Java\jdk1.8.0_131\jre\bin</span><br><span class="line">java.vm.version=25.131-b11</span><br><span class="line">java.vm.vendor=Oracle Corporation</span><br><span class="line">java.vendor.url=http://java.oracle.com/</span><br><span class="line">path.separator=;</span><br><span class="line">java.vm.name=Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">file.encoding.pkg=sun.io</span><br><span class="line">user.script=</span><br><span class="line">user.country=CN</span><br><span class="line">sun.java.launcher=SUN_STANDARD</span><br><span class="line">sun.os.patch.level=</span><br><span class="line">java.vm.specification.name=Java Virtual Machine Specification</span><br><span class="line">user.dir=E:\***</span><br><span class="line">java.runtime.version=1.8.0_131-b11</span><br><span class="line">java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment</span><br><span class="line">java.endorsed.dirs=D:\Java\jdk1.8.0_131\jre\lib\endorsed</span><br><span class="line">os.arch=amd64</span><br><span class="line">java.io.tmpdir=C:\Users\***\AppData\Local\Temp\</span><br><span class="line">line.separator=</span><br><span class="line"></span><br><span class="line">java.vm.specification.vendor=Oracle Corporation</span><br><span class="line">user.variant=</span><br><span class="line">os.name=Windows 10</span><br><span class="line">sun.jnu.encoding=GBK</span><br><span class="line">java.library.path=D:\Java\jdk1.8.0_131\bin;C:\WINDOWS\S...</span><br><span class="line">java.specification.name=Java Platform API Specification</span><br><span class="line">java.class.version=52.0</span><br><span class="line">sun.management.compiler=HotSpot 64-Bit Tiered Compilers</span><br><span class="line">os.version=10.0</span><br><span class="line">user.home=C:\Users\***</span><br><span class="line">user.timezone=</span><br><span class="line">java.awt.printerjob=sun.awt.windows.WPrinterJob</span><br><span class="line">file.encoding=UTF-8</span><br><span class="line">java.specification.version=1.8</span><br><span class="line">user.name=***</span><br><span class="line">java.class.path=D:\Java\jdk1.8.0_131\jre\lib\charsets...</span><br><span class="line">java.vm.specification.version=1.8</span><br><span class="line">sun.arch.data.model=64</span><br><span class="line">java.home=D:\Java\jdk1.8.0_131\jre</span><br><span class="line">sun.java.command=advanced.SystemPropertyTest</span><br><span class="line">java.specification.vendor=Oracle Corporation</span><br><span class="line">user.language=zh</span><br><span class="line">awt.toolkit=sun.awt.windows.WToolkit</span><br><span class="line">java.vm.info=mixed mode</span><br><span class="line">java.version=1.8.0_131</span><br><span class="line">java.ext.dirs=D:\Java\jdk1.8.0_131\jre\lib\ext;C:\W...</span><br><span class="line">sun.boot.class.path=D:\Java\jdk1.8.0_131\jre\lib\resource...</span><br><span class="line">java.vendor=Oracle Corporation</span><br><span class="line">file.separator=\</span><br><span class="line">java.vendor.url.bug=http://bugreport.sun.com/bugreport/</span><br><span class="line">sun.cpu.endian=little</span><br><span class="line">sun.io.unicode.encoding=UnicodeLittle</span><br><span class="line">sun.desktop=windows</span><br><span class="line">sun.cpu.isalist=amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java命令行运行参数说明"><a href="#Java命令行运行参数说明" class="headerlink" title="Java命令行运行参数说明"></a>Java命令行运行参数说明</h2><h3 id="查看参数列表"><a href="#查看参数列表" class="headerlink" title="查看参数列表"></a>查看参数列表</h3><p>虚拟机参数分为基本和扩展两类，在命令行中输入 <code>java</code> 就可以得到基本参数列表，输入 <code>java -X</code>就可以得到扩展参数列表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">λ java</span><br><span class="line">用法: java [-options] class [args...]</span><br><span class="line">           (执行类)</span><br><span class="line">   或  java [-options] -jar jarfile [args...]</span><br><span class="line">           (执行 jar 文件)</span><br><span class="line">其中选项包括:</span><br><span class="line">    -d32          使用 32 位数据模型 (如果可用)</span><br><span class="line">    -d64          使用 64 位数据模型 (如果可用)</span><br><span class="line">    -server       选择 <span class="string">&quot;server&quot;</span> VM</span><br><span class="line">                  默认 VM 是 server.</span><br><span class="line"></span><br><span class="line">    -<span class="built_in">cp</span> &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    -classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">                  用 ; 分隔的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表, 用于搜索类文件。</span><br><span class="line">    -D&lt;名称&gt;=&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    -verbose:[class|gc|jni]</span><br><span class="line">                  启用详细输出</span><br><span class="line">    -version      输出产品版本并退出</span><br><span class="line">    -version:&lt;值&gt;</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  需要指定的版本才能运行</span><br><span class="line">    -showversion  输出产品版本并继续</span><br><span class="line">    -jre-restrict-search | -no-jre-restrict-search</span><br><span class="line">                  警告: 此功能已过时, 将在</span><br><span class="line">                  未来发行版中删除。</span><br><span class="line">                  在版本搜索中包括/排除用户专用 JRE</span><br><span class="line">    -? -<span class="built_in">help</span>      输出此帮助消息</span><br><span class="line">    -X            输出非标准选项的帮助</span><br><span class="line">    -ea[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -enableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  按指定的粒度启用断言</span><br><span class="line">    -da[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">    -disableassertions[:&lt;packagename&gt;...|:&lt;classname&gt;]</span><br><span class="line">                  禁用具有指定粒度的断言</span><br><span class="line">    -esa | -enablesystemassertions</span><br><span class="line">                  启用系统断言</span><br><span class="line">    -dsa | -disablesystemassertions</span><br><span class="line">                  禁用系统断言</span><br><span class="line">    -agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=<span class="built_in">help</span> 和 -agentlib:hprof=<span class="built_in">help</span></span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br><span class="line">    -splash:&lt;imagepath&gt;</span><br><span class="line">                  使用指定的图像显示启动屏幕</span><br><span class="line">有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">λ java -X</span><br><span class="line">    -Xmixed           混合模式执行 (默认)</span><br><span class="line">    -Xint             仅解释模式执行</span><br><span class="line">    -Xbootclasspath:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      设置搜索路径以引导类和资源</span><br><span class="line">    -Xbootclasspath/a:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      附加在引导类路径末尾</span><br><span class="line">    -Xbootclasspath/p:&lt;用 ; 分隔的目录和 zip/jar 文件&gt;</span><br><span class="line">                      置于引导类路径之前</span><br><span class="line">    -Xdiag            显示附加诊断消息</span><br><span class="line">    -Xnoclassgc       禁用类垃圾收集</span><br><span class="line">    -Xincgc           启用增量垃圾收集</span><br><span class="line">    -Xloggc:&lt;file&gt;    将 GC 状态记录在文件中 (带时间戳)</span><br><span class="line">    -Xbatch           禁用后台编译</span><br><span class="line">    -Xms&lt;size&gt;        设置初始 Java 堆大小</span><br><span class="line">    -Xmx&lt;size&gt;        设置最大 Java 堆大小</span><br><span class="line">    -Xss&lt;size&gt;        设置 Java 线程堆栈大小</span><br><span class="line">    -Xprof            输出 cpu 配置文件数据</span><br><span class="line">    -Xfuture          启用最严格的检查, 预期将来的默认值</span><br><span class="line">    -Xrs              减少 Java/VM 对操作系统信号的使用 (请参阅文档)</span><br><span class="line">    -Xcheck:jni       对 JNI 函数执行其他检查</span><br><span class="line">    -Xshare:off       不尝试使用共享类数据</span><br><span class="line">    -Xshare:auto      在可能的情况下使用共享类数据 (默认)</span><br><span class="line">    -Xshare:on        要求使用共享类数据, 否则将失败。</span><br><span class="line">    -XshowSettings    显示所有设置并继续</span><br><span class="line">    -XshowSettings:all</span><br><span class="line">                      显示所有设置并继续</span><br><span class="line">    -XshowSettings:vm 显示所有与 vm 相关的设置并继续</span><br><span class="line">    -XshowSettings:properties</span><br><span class="line">                      显示所有属性设置并继续</span><br><span class="line">    -XshowSettings:locale</span><br><span class="line">                      显示所有与区域设置相关的设置并继续</span><br><span class="line"></span><br><span class="line">-X 选项是非标准选项, 如有更改, 恕不另行通知。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO介绍</title>
      <link href="/2020/02/04/java/java-advanced/NIO%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/04/java/java-advanced/NIO%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="NIO介绍"><a href="#NIO介绍" class="headerlink" title="NIO介绍"></a>NIO介绍</h1><blockquote><p>引用自<a href="https://github.com/aalansehaiyang/technology-talk/blob/master/basic-knowledge/NIO.md">NIO介绍</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>NIO时Java 1.4引入的新特性。是对原来的Standard IO的扩展。</p><p>Standard IO时对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节，一个字节一个字节的读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>多路复用选择器，基于“事件驱动”，其核心就是通过Selector来轮询注册在其上的Channel，当发现某个或多个Channel处于就绪状态后，从阻塞状态返回就绪的Channel的SelectionKey集合，进行I&#x2F;O操作。</p><ul><li>创建多路复用器并启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ReactorTask</span>()).start();</span><br></pre></td></tr></table></figure><ul><li>创建Channel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开ServerSocketChannel，用于监听客户端的连接</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"><span class="comment">//设置连接为非阻塞模式</span></span><br><span class="line">ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//绑定监听接口</span></span><br><span class="line"><span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> ssc.socket();</span><br><span class="line">ss.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(InetAddress.getByName(<span class="string">&quot;ip&quot;</span>), port));</span><br><span class="line"><span class="comment">//将ServerSocketChannel注册到多路复用器Selector上，监听ACCEPT事件</span></span><br><span class="line">ssc.register(selector, SelectionKey,OP_ACCEPT);</span><br></pre></td></tr></table></figure><ul><li>等待客户端的连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">//selector.select是阻塞的，一直等到有客户端连接过来才返回，然后会检查发生的是哪一种事件，然后根据不同的事件做不同的操作</span></span><br><span class="line">    selector.select();</span><br><span class="line">    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; it = selectionKeys.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">//处理新接入的请求消息</span></span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> ssc.accept();</span><br><span class="line">            sc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//注册读事件</span></span><br><span class="line">            sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">//处理读事件</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> sc.read(readBuffer);</span><br><span class="line">            <span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                readBuffer.flip();</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[readBuffer.remaining()];</span><br><span class="line">                readBuffer.get(bytes);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Channel是NIO对IO抽象的一个新概念，NIO在进行IO时需要创建一个Channel对象，是双向的，不像Standard IO分为输入流和输出流。</p><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer和Channel都是一起使用的，每次都是从一个Channel中读出一个Buffer或者把一个Buffer写入到一个Channel中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理读事件</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> sc.read(readBuffer);</span><br><span class="line"><span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    readBuffer.flip();</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[readBuffer.remaining()];</span><br><span class="line">    readBuffer.get(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Buffer有3个重要的属性</p><ul><li><p>position 正整数，指向Buffer中下一个要读取或写入的字节位置</p></li><li><p>limit 正整数，指向Buffer中的某个位置，在IO时只读写下标小于limit的字节内容</p></li><li><p>capacity 正整数，Buffer所能容纳的最大字节数</p></li></ul><p>0 &lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</p><p>初始状态：</p><p><img src="/images/NIO%E4%BB%8B%E7%BB%8D/nio-buffer-1.png" alt="nio-buffer-1.png"></p><p>从Channel中读入5个字到ByteBuffer：</p><p><img src="/images/NIO%E4%BB%8B%E7%BB%8D/nio-buffer-2.png" alt="nio-buffer-2.png"></p><p>flip()，准备写入或输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">    limit = position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NIO%E4%BB%8B%E7%BB%8D/nio-buffer-3.png" alt="nio-buffer-3.png"></p><p>输出内容后，position就移动到跟limit相同的位置上：</p><p><img src="/images/NIO%E4%BB%8B%E7%BB%8D/nio-buffer-4.png" alt="nio-buffer-4.png"></p><p>ByteBuffer如果要重复利用，需要清理，position和limit回到初始状态时的位置，然后可以接着中这个Buffer来读写数据，不需要再new新的Buffer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    limit = capacity;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/NIO%E4%BB%8B%E7%BB%8D/nio-buffer-5.png" alt="nio-buffer-5.png"></p><h2 id="Netty框架"><a href="#Netty框架" class="headerlink" title="Netty框架"></a>Netty框架</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>api简单，开发门槛低</p></li><li><p>功能强大，内置了多种编码、解码功能</p></li><li><p>与其它业界主流的NIO框架相比，netty的综合性能最优</p></li><li><p>社区活跃，使用广泛，经历过很多商业应用项目的考验</p></li><li><p>定制能力强，可以对框架进行灵活的扩展</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jboss.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>服务端</li></ul><p>接受客户端请求并将内容打印出来，同时发送一个消息收到回执。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">HEADER_LENGTH</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>(<span class="keyword">new</span> <span class="title class_">NioServerSocketChannelFactory</span>(Executors.newCachedThreadPool(),</span><br><span class="line">                                                                                  Executors.newCachedThreadPool()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造对应的pipeline</span></span><br><span class="line">        b.setPipelineFactory(<span class="keyword">new</span> <span class="title class_">ChannelPipelineFactory</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> ChannelPipeline <span class="title function_">getPipeline</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">ChannelPipeline</span> <span class="variable">pipelines</span> <span class="operator">=</span> Channels.pipeline();</span><br><span class="line">                pipelines.addLast(MessageHandler.class.getName(), <span class="keyword">new</span> <span class="title class_">MessageHandler</span>());</span><br><span class="line">                <span class="keyword">return</span> pipelines;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 监听端口号</span></span><br><span class="line">        b.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理消息</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MessageHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageReceived</span><span class="params">(ChannelHandlerContext ctx, MessageEvent e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// 接收客户端请求</span></span><br><span class="line">            <span class="type">ChannelBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> (ChannelBuffer) e.getMessage();</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.readBytes(buffer.readableBytes()).array(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;服务端&gt;收到内容=&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给客户端发送回执</span></span><br><span class="line">            <span class="type">byte</span>[] body = <span class="string">&quot;服务端已收到&quot;</span>.getBytes();</span><br><span class="line">            <span class="type">byte</span>[] header = ByteBuffer.allocate(HEADER_LENGTH).order(ByteOrder.BIG_ENDIAN).putInt(body.length).array();</span><br><span class="line">            Channels.write(ctx.getChannel(), ChannelBuffers.wrappedBuffer(header, body));</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;服务端&gt;发送回执,time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NettyServer</span>().bind(<span class="number">1088</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><p>向服务端发送一个请求，然后打印服务端响应的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ByteBuffer</span> <span class="variable">readHeader</span>  <span class="operator">=</span> ByteBuffer.allocate(<span class="number">4</span>).order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ByteBuffer</span> <span class="variable">writeHeader</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">4</span>).order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">    <span class="keyword">private</span> SocketChannel    channel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建客户端通道</span></span><br><span class="line">        channel = SocketChannel.open();</span><br><span class="line">        channel.socket().setSoTimeout(<span class="number">60000</span>);</span><br><span class="line">        channel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(AddressUtils.getHostIp(), <span class="number">1088</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端发请求</span></span><br><span class="line">        writeWithHeader(channel, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务端响应的信息</span></span><br><span class="line">        readHeader.clear();</span><br><span class="line">        read(channel, readHeader);</span><br><span class="line">        <span class="type">int</span> <span class="variable">bodyLen</span> <span class="operator">=</span> readHeader.getInt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">bodyBuf</span> <span class="operator">=</span> ByteBuffer.allocate(bodyLen).order(ByteOrder.BIG_ENDIAN);</span><br><span class="line">        read(channel, bodyBuf);</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;客户端&gt;收到响应内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bodyBuf.array(), <span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;,长度:&quot;</span> + bodyLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeWithHeader</span><span class="params">(SocketChannel channel, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        writeHeader.clear();</span><br><span class="line">        writeHeader.putInt(body.length);</span><br><span class="line">        writeHeader.flip();</span><br><span class="line">        <span class="comment">// channel.write(writeHeader);</span></span><br><span class="line">        channel.write(ByteBuffer.wrap(body));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(SocketChannel channel, ByteBuffer buffer)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (r == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;end of stream when reading header&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;客户发的测试请求！&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NettyClient</span>().sendMessage(body.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty长连接服务</title>
      <link href="/2020/02/04/java/java-advanced/Netty%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/02/04/java/java-advanced/Netty%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty长连接服务"><a href="#Netty长连接服务" class="headerlink" title="Netty长连接服务"></a>Netty长连接服务</h1><blockquote><p>引用自<a href="https://www.dozer.cc/2014/12/netty-long-connection.html">Netty 长连接服务</a></p></blockquote><h2 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h2><p>Netty: <a href="http://netty.io/">http://netty.io/</a></p><blockquote><p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p></blockquote><p>官方的解释最精准了，期中最吸引人的就是高性能了。但是很多人会有这样的疑问：直接用 NIO 实现的话，一定会更快吧？就像我直接手写 JDBC 虽然代码量大了点，但是一定比 iBatis 快！</p><p>但是，如果了解 Netty 后你才会发现，这个还真不一定！</p><p>利用 Netty 而不用 NIO 直接写的优势有这些：</p><ul><li>高性能高扩展的架构设计，大部分情况下你只需要关注业务而不需要关注架构</li><li><code>Zero-Copy</code> 技术尽量减少内存拷贝</li><li>为 Linux 实现 Native 版 Socket</li><li>写同一份代码，兼容 java 1.7 的 NIO2 和 1.7 之前版本的 NIO</li><li><code>Pooled Buffers</code> 大大减轻 <code>Buffer</code> 和释放 <code>Buffer</code> 的压力</li><li>……</li></ul><p>特性太多，大家可以去看一下《Netty in Action》这本书了解更多。</p><p>另外，Netty 源码是一本很好的教科书！大家在使用的过程中可以多看看它的源码，非常棒！</p><h2 id="瓶颈是什么"><a href="#瓶颈是什么" class="headerlink" title="瓶颈是什么"></a>瓶颈是什么</h2><p>想要做一个长链服务的话，最终的目标是什么？而它的瓶颈又是什么？</p><p>其实目标主要就两个：</p><ol><li>更多的连接</li><li>更高的 QPS</li></ol><p>所以，下面就针对这连个目标来说说他们的难点和注意点吧。</p><h2 id="更多的连接"><a href="#更多的连接" class="headerlink" title="更多的连接"></a>更多的连接</h2><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p>其实无论是用 Java NIO 还是用 Netty，达到百万连接都没有任何难度。因为它们都是非阻塞的 IO，不需要为每个连接创建一个线程了。</p><p>欲知详情，可以搜索一下<code>BIO</code>,<code>NIO</code>,<code>AIO</code>的相关知识点。</p><h3 id="Java-NIO实现百万连接"><a href="#Java-NIO实现百万连接" class="headerlink" title="Java NIO实现百万连接"></a>Java NIO实现百万连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">ssc</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"><span class="type">Selector</span> <span class="variable">sel</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">ssc.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">ssc.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"><span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> ssc.register(sel, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    sel.select();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> sel.selectedKeys().iterator();</span><br><span class="line">    <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">skey</span> <span class="operator">=</span> (SelectionKey)it.next();</span><br><span class="line">        it.remove();</span><br><span class="line">        <span class="keyword">if</span>(skey.isAcceptable()) &#123;</span><br><span class="line">            ch = ssc.accept();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码只会接受连过来的连接，不做任何操作，仅仅用来测试待机连接数极限。</p><p>大家可以看到这段代码是 NIO 的基本写法，没什么特别的。</p><h3 id="Netty实现百万连接"><a href="#Netty实现百万连接" class="headerlink" title="Netty实现百万连接"></a>Netty实现百万连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">NioEventLoopGroup workerGroup= <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"><span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">bootstrap.group(bossGroup, workerGroup);</span><br><span class="line"></span><br><span class="line">bootstrap.channel( NioServerSocketChannel.class);</span><br><span class="line"></span><br><span class="line">bootstrap.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">        <span class="comment">//todo: add handler</span></span><br><span class="line">    &#125;&#125;);</span><br><span class="line">bootstrap.bind(<span class="number">8080</span>).sync();</span><br></pre></td></tr></table></figure><p>这段其实也是非常简单的 Netty 初始化代码。同样，为了实现百万连接根本没有什么特殊的地方。</p><h3 id="瓶颈到底在哪"><a href="#瓶颈到底在哪" class="headerlink" title="瓶颈到底在哪"></a>瓶颈到底在哪</h3><p>上面两种不同的实现都非常简单，没有任何难度，那有人肯定会问了：实现百万连接的瓶颈到底是什么？</p><p>其实只要 java 中用的是非阻塞 IO（NIO 和 AIO 都算），那么它们都可以用单线程来实现大量的 Socket 连接。 不会像 BIO 那样为每个连接创建一个线程，因为代码层面不会成为瓶颈。</p><p>其实真正的瓶颈是在 Linux 内核配置上，默认的配置会限制全局最大打开文件数(Max Open Files)还会限制进程数。 所以需要对 Linux 内核配置进行一定的修改才可以。</p><p>这个东西现在看似很简单，按照网上的配置改一下就行了，但是大家一定不知道第一个研究这个人有多难。</p><p>这里直接贴几篇文章，介绍了相关配置的修改方式：</p><p><a href="http://www.ideawu.net/blog/archives/740.html">构建C1000K的服务器</a></p><p><a href="http://www.blogjava.net/yongboy/archive/2013/04/11/397677.html">100万并发连接服务器笔记之1M并发连接目标达成</a></p><p><a href="http://www.linuxde.net/2013/08/15150.html">淘宝技术分享 HTTP长连接200万尝试及调优</a></p><h3 id="如何验证"><a href="#如何验证" class="headerlink" title="如何验证"></a>如何验证</h3><p>让服务器支持百万连接一点也不难，我们当时很快就搞定了一个测试服务端，但是最大的问题是，我怎么去验证这个服务器可以支撑百万连接呢？</p><p>我们用 Netty 写了一个测试客户端，它同样用了非阻塞 IO ，所以不用开大量的线程。 但是一台机器上的端口数是有限制的，用root权限的话，最多也就 6W 多个连接了。 所以我们这里用 Netty 写一个客户端，用尽单机所有的连接吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NioEventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"><span class="type">Bootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">b.group(workerGroup);</span><br><span class="line">b.channel( NioSocketChannel.class);</span><br><span class="line"></span><br><span class="line">b.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">        <span class="comment">//todo:add handler</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">60000</span>; k++) &#123;</span><br><span class="line">    <span class="comment">//请自行修改成服务端的IP</span></span><br><span class="line">    b.connect(<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>, <span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码同样很简单，只要连上就行了，不需要做任何其他的操作。</p><p>这样只要找到一台电脑启动这个程序即可。这里需要注意一点，客户端最好和服务端一样，修改一下 Linux 内核参数配置。</p><h3 id="怎么去找那么多机器"><a href="#怎么去找那么多机器" class="headerlink" title="怎么去找那么多机器"></a>怎么去找那么多机器</h3><p>按照上面的做法，单机最多可以有 6W 的连接，百万连接起码需要17台机器！</p><p>如何才能突破这个限制呢？其实这个限制来自于网卡。 我们后来通过使用虚拟机，并且把虚拟机的虚拟网卡配置成了桥接模式解决了问题。</p><p>根据物理机内存大小，单个物理机起码可以跑4-5个虚拟机，所以最终百万连接只要4台物理机就够了。</p><h3 id="讨巧的做法"><a href="#讨巧的做法" class="headerlink" title="讨巧的做法"></a>讨巧的做法</h3><p>除了用虚拟机充分压榨机器资源外，还有一个非常讨巧的做法，这个做法也是我在验证过程中偶然发现的。</p><p>根据 TCP&#x2F;IP 协议，任何一方发送<code>FIN</code>后就会启动正常的断开流程。而如果遇到网络瞬断的情况，连接并不会自动断开。</p><p>那我们是不是可以这样做？</p><ol><li>启动服务端，千万别设置 Socket 的<code>keep-alive</code>属性，默认是不设置的</li><li>用虚拟机连接服务器</li><li>强制关闭虚拟机</li><li>修改虚拟机网卡的 MAC 地址，重新启动并连接服务器</li><li>服务端接受新的连接，并保持之前的连接不断</li></ol><p>我们要验证的是服务端的极限，所以只要一直让服务端认为有那么多连接就行了，不是吗？</p><p>经过我们的试验后，这种方法和用真实的机器连接服务端的表现是一样的，因为服务端只是认为对方网络不好罢了，不会将你断开。</p><p>另外，禁用<code>keep-alive</code>是因为如果不禁用，Socket 连接会自动探测连接是否可用，如果不可用会强制断开。</p><h2 id="更高的QPS"><a href="#更高的QPS" class="headerlink" title="更高的QPS"></a>更高的QPS</h2><p>由于 NIO 和 Netty 都是非阻塞 IO，所以无论有多少连接，都只需要少量的线程即可。而且 QPS 不会因为连接数的增长而降低（在内存足够的前提下）。</p><p>而且 Netty 本身设计得足够好了，Netty 不是高 QPS 的瓶颈。那高 QPS 的瓶颈是什么？</p><p>是数据结构的设计！</p><h3 id="如何优化数据结构"><a href="#如何优化数据结构" class="headerlink" title="如何优化数据结构"></a>如何优化数据结构</h3><p>首先要熟悉各种数据结构的特点是必需的，但是在复杂的项目中，不是用了一个集合就可以搞定的，有时候往往是各种集合的组合使用。</p><p>既要做到高性能，还要做到一致性，还不能有死锁，这里难度真的不小…</p><p>我在这里总结的经验是，不要过早优化。优先考虑一致性，保证数据的准确，然后再去想办法优化性能。</p><p>因为一致性比性能重要得多，而且很多性能问题在量小和量大的时候，瓶颈完全会在不同的地方。 所以，我觉得最佳的做法是，编写过程中以一致性为主，性能为辅；代码完成后再去找那个 TOP1，然后去解决它！</p><h3 id="解决CPU瓶颈"><a href="#解决CPU瓶颈" class="headerlink" title="解决CPU瓶颈"></a>解决CPU瓶颈</h3><p>在做这个优化前，先在测试环境中去狠狠地压你的服务器，量小量大，天壤之别。</p><p>有了压力测试后，就需要用工具来发现性能瓶颈了！</p><p>我喜欢用的是 VisualVM，打开工具后看抽样器(Sample)，根据自用时间(Self Time (CPU))倒序，排名第一的就是你需要去优化的点了！</p><p>备注：Sample 和 Profiler 有什么区别？前者是抽样，数据不是最准但是不影响性能；后者是统计准确，但是非常影响性能。 如果你的程序非常耗 CPU，那么尽量用 Sample，否则开启 Profiler 后降低性能，反而会影响准确性。</p><p><img src="/images/Netty%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/netty-sample.png" alt="netty-sample"></p><p>还记得我们项目第一次发现的瓶颈竟然是<code>ConcurrentLinkedQueue</code>这个类中的<code>size()</code>方法。 量小的时候没有影响，但是<code>Queue</code>很大的时候，它每次都是从头统计总数的，而这个<code>size()</code>方法我们又是非常频繁地调用的，所以对性能产生了影响。</p><p><code>size()</code>的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="literal">null</span>; p = succ(p))</span><br><span class="line">    <span class="keyword">if</span> (p.item != <span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// Collection.size() spec says to max out</span></span><br><span class="line">    <span class="keyword">if</span> (++count == Integer.MAX_VALUE)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来我们通过额外使用一个<code>AtomicInteger</code>来计数，解决了问题。但是分离后岂不是做不到高一致性呢？ 没关系，我们的这部分代码关心最终一致性，所以只要保证最终一致就可以了。</p><p>总之，具体案例要具体分析，不同的业务要用不同的实现。</p><h3 id="解决GC瓶颈"><a href="#解决GC瓶颈" class="headerlink" title="解决GC瓶颈"></a>解决GC瓶颈</h3><p>GC 瓶颈也是 CPU 瓶颈的一部分，因为不合理的 GC 会大大影响 CPU 性能。</p><p>这里还是在用 VisualVM，但是你需要装一个插件：VisualGC</p><p><img src="/images/Netty%E9%95%BF%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1/netty-gc.png" alt="netty-gc"></p><p>有了这个插件后，你就可以直观的看到 GC 活动情况了。</p><p>按照我们的理解，在压测的时候，有大量的 New GC 是很正常的，因为有大量的对象在创建和销毁。</p><p>但是一开始有很多 Old GC 就有点说不过去了！</p><p>后来发现，在我们压测环境中，因为 Netty 的 QPS 和连接数关联不大，所以我们只连接了少量的连接。内存分配得也不是很多。</p><p>而 JVM 中，默认的新生代和老生代的比例是1:2，所以大量的老生代被浪费了，新生代不够用。</p><p>通过调整 <code>-XX:NewRatio</code> 后，Old GC 有了显著的降低。</p><p>但是，生产环境又不一样了，生产环境不会有那么大的 QPS，但是连接会很多，连接相关的对象存活时间非常长，所以生产环境更应该分配更多的老生代。</p><p>总之，GC 优化和 CPU 优化一样，也需要不断调整，不断优化，不是一蹴而就的。</p><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><p>如果你已经完成了自己的程序，那么一定要看看《Netty in Action》作者的这个网站：<a href="http://normanmaurer.me/presentations/2014-facebook-eng-netty/slides.html">Netty Best Practices a.k.a Faster &#x3D;&#x3D; Better</a>。</p><p>相信你会受益匪浅，经过里面提到的一些小小的优化后，我们的整体 QPS 提升了很多。</p><p>最后一点就是，java 1.7 比 java 1.6 性能高很多！因为 Netty 的编写风格是事件机制的，看似是 AIO。 可 java 1.6 是没有 AIO 的，java 1.7 是支持 AIO 的，所以如果用 java 1.7 的话，性能也会有显著提升。</p><h2 id="最后成果"><a href="#最后成果" class="headerlink" title="最后成果"></a>最后成果</h2><p>经过几周的不断压测和不断优化了，我们在一台16核、120G内存(JVM只分配8G)的机器上，用 java 1.6 达到了60万的连接和20万的QPS。</p><p>其实这还不是极限，JVM 只分配了8G内存，内存配置再大一点连接数还可以上去；</p><p>QPS 看似很高，System Load Average 很低，也就是说明瓶颈不在 CPU 也不在内存，那么应该是在 IO 了！ 上面的 Linux 配置是为了达到百万连接而配置的，并没有针对我们自己的业务场景去做优化。</p><p>因为目前性能完全够用，线上单机 QPS 最多才 1W，所以我们先把精力放在了其他地方。 相信后面我们还会去继续优化这块的性能，期待 QPS 能有更大的突破！</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal原理机制</title>
      <link href="/2020/02/04/java/java-advanced/ThreadLocal%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/02/04/java/java-advanced/ThreadLocal%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="ThreadLocal原理机制"><a href="#ThreadLocal原理机制" class="headerlink" title="ThreadLocal原理机制"></a>ThreadLocal原理机制</h1><blockquote><p>参考<a href="https://mp.weixin.qq.com/s/mo3-y-45_ao54b5T7ez7iA">Java多线程之隔离技术ThreadLocal源码详解</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ThreadLocal存取的数据，总是与当前线程相关，也就是说，JVM为每个运行的线程绑定了私有的本地实例存取空间，从而为多线程环境常出现的并发访问问题提供了一种隔离机制。</p><p>ThreadLocal是如何做到为每一个线程维护变量的副本的呢？实现的思路很简单，在ThreadLocal类中有一个Map，用于存储每一个线程的变量的副本。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>T get()</code></li></ul><p>返回此线程局部变量的当前线程副本中的值，如果这是线程第一次调用该方法，则创建并初始化此副本。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void set(T value)</code></li></ul><p>将此线程的局部变量的当前线程副本中的值设置为指定值。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void remove()</code></li></ul><p>有助于减少线程局部变量的存储需求。</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>epoll浅析以及nio中的Selector</title>
      <link href="/2020/02/04/java/java-advanced/epoll%E6%B5%85%E6%9E%90%E4%BB%A5%E5%8F%8Anio%E4%B8%AD%E7%9A%84Selector/"/>
      <url>/2020/02/04/java/java-advanced/epoll%E6%B5%85%E6%9E%90%E4%BB%A5%E5%8F%8Anio%E4%B8%AD%E7%9A%84Selector/</url>
      
        <content type="html"><![CDATA[<h1 id="epoll浅析以及nio中的Selector"><a href="#epoll浅析以及nio中的Selector" class="headerlink" title="epoll浅析以及nio中的Selector"></a>epoll浅析以及nio中的Selector</h1><blockquote><p>引用自<a href="https://my.oschina.net/hosee/blog/730598">epoll浅析以及nio中的Selector</a></p></blockquote><h2 id="epoll基本原理"><a href="#epoll基本原理" class="headerlink" title="epoll基本原理"></a>epoll基本原理</h2><p>首先介绍下epoll的基本原理，网上有很多版本，这里选择一个个人觉得相对清晰的讲解（详情见reference）：</p><p>首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I&#x2F;O操作的内核对象。</p><p>不管是文件，还是套接字，还是管道，我们都可以把他们看作流。</p><p>之后我们来讨论I&#x2F;O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），这时候该怎么办？</p><p>阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。</p><p>非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”</p><p>很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。</p><p>大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。</p><p>为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I&#x2F;O事件解释清楚。缓冲区的引入是为了减少频繁I&#x2F;O操作而引起频繁的系统调用（你知道它很慢的），当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。</p><p>假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。</p><p>假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，这个事件姑且称之为“缓冲区非空”。</p><p>但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I&#x2F;O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。</p><p>假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”</p><p>也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。</p><p>这四个情形涵盖了四个I&#x2F;O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。这四个I&#x2F;O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。</p><p>然后我们来说说阻塞I&#x2F;O的缺点。但是阻塞I&#x2F;O模式下，一个线程只能处理一个流的I&#x2F;O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，很不幸这两种方法效率都不高。</p><p>于是再来考虑非阻塞忙轮询的I&#x2F;O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i in stream[]; &#123;</span><br><span class="line">        <span class="keyword">if</span> i has data</span><br><span class="line">            read until unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。这里要补充一点，阻塞模式下，内核对于I&#x2F;O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I&#x2F;O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。</p><p>为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，可以同时观察许多流的I&#x2F;O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I&#x2F;O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流（于是我们可以把“忙”字去掉了）。代码长这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    select(streams[])</span><br><span class="line">    <span class="keyword">for</span> i in streams[] &#123;</span><br><span class="line">        <span class="keyword">if</span> i has data</span><br><span class="line">            read until unavailable</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，如果没有I&#x2F;O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I&#x2F;O事件发生了，但却并不知道是那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。</p><p>但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次</p><p>说了这么多，终于能好好解释epoll了</p><p>epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I&#x2F;O事件通知我们。此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）</p><p>在讨论epoll的实现细节之前，先把epoll的相关操作列出：</p><p>epoll_create 创建一个epoll对象，一般epollfd &#x3D; epoll_create()</p><p>epoll_ctl （epoll_add&#x2F;epoll_del的合体），往epoll对象中增加&#x2F;删除某一个流的某一个事件</p><p>比如</p><p>epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);&#x2F;&#x2F;注册缓冲区非空事件，即有数据流入</p><p>epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);&#x2F;&#x2F;注册缓冲区非满事件，即流可以被写入</p><p>epoll_wait(epollfd,…)等待直到注册的事件发生</p><p>（注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write&#x2F;read会返回-1，并设置errno&#x3D;EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。</p><p>一个epoll模式的代码大概的样子是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    active_stream[] = epoll_wait(epollfd)</span><br><span class="line">    <span class="keyword">for</span> i in active_stream[] &#123;</span><br><span class="line">        read or write till</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>限于篇幅，我只说这么多，以揭示原理性的东西，至于epoll的使用细节，请参考man和google，实现细节，请参阅linux kernel source。</p><h2 id="epoll实现"><a href="#epoll实现" class="headerlink" title="epoll实现"></a>epoll实现</h2><p>上文提到了epoll可以将哪个流发生了什么事件主动通知，而不需要轮询。那么到底是如何实现通知的呢？</p><p>这就和操作系统的原理相关，<strong>在内核的最底层是中断，类似系统回调的机制。网卡设备对应一个中断号, 当网卡收到网络端的消息的时候会向CPU发起中断请求, 然后CPU处理该请求. 通过驱动程序 进而操作系统得到通知, 系统然后通知epoll, epoll通知用户代码</strong>。它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集合来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。</p><p>epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立slab层，简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</p><p>所以简单总结下epoll和select的区别：</p><p>进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select;这样select&#x2F;poll可以帮我们侦测许多fd是否就绪；但是select&#x2F;poll是顺序扫描fd是否就绪，而且支持的fd数量有限。linux还提供了一个epoll系统调用，epoll是基于事件驱动方式，而不是顺序扫描,当有fd就绪时，立即回调函数rollback</p><p>这种epoll的方式是不是能联想起Java nio，关于nio请查看<a href="http://my.oschina.net/hosee/blog/615269">[高并发Java 八] NIO和AIO</a>。</p><p>不过nio中的Selector的取名总让我以为是类似于select&#x2F;poll的模型，但是你会发现，当有数据被准备好时，调用完select()后，会返回一个SelectionKey，SelectionKey表示在某个selector上的某个Channel的数据已经被准备好了。那到底底层实现是使用select&#x2F;poll还是epoll呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">PrivilegedAction</span> <span class="variable">pa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetPropertyAction</span>(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">osname</span> <span class="operator">=</span> (String) AccessController.doPrivileged(pa);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;SunOS&quot;</span>.equals(osname)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">sun</span>.nio.ch.DevPollSelectorProvider();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// use EPollSelectorProvider for Linux kernels &gt;= 2.6</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;Linux&quot;</span>.equals(osname)) &#123;</span><br><span class="line">        pa = <span class="keyword">new</span> <span class="title class_">GetPropertyAction</span>(<span class="string">&quot;os.version&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">osversion</span> <span class="operator">=</span> (String) AccessController.doPrivileged(pa);</span><br><span class="line">        String[] vers = osversion.split(<span class="string">&quot;\\.&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (vers.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">major</span> <span class="operator">=</span> Integer.parseInt(vers[<span class="number">0</span>]);</span><br><span class="line">                <span class="type">int</span> <span class="variable">minor</span> <span class="operator">=</span> Integer.parseInt(vers[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (major &gt; <span class="number">2</span> || (major == <span class="number">2</span> &amp;&amp; minor &gt;= <span class="number">6</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">sun</span>.nio.ch.EPollSelectorProvider();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException x) &#123;</span><br><span class="line">                <span class="comment">// format not recognized</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">sun</span>.nio.ch.PollSelectorProvider();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在Linux下，内核版本大于2.6时使用epoll，小于2.6时使用poll。</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
            <tag> epoll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Java类库</title>
      <link href="/2020/02/04/java/java-advanced/%E5%B8%B8%E7%94%A8Java%E7%B1%BB%E5%BA%93/"/>
      <url>/2020/02/04/java/java-advanced/%E5%B8%B8%E7%94%A8Java%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="常用Java类库"><a href="#常用Java类库" class="headerlink" title="常用Java类库"></a>常用Java类库</h1><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><ul><li>JVM虚拟机注册一个钩子，当虚拟机要关闭时，会执行预先注册的线程任务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;## stop the canal client&quot;</span>);</span><br><span class="line">            clientTest.stop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;##something goes wrong when stopping canal:\n&#123;&#125;&quot;</span>, ExceptionUtils.getFullStackTrace(e));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;## canal client is down.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/z5bfW8OJOYMK-fzSzDOkdg">ShutdownHook - java中优雅地停止服务</a></p><ul><li>获取JVM的内存空间信息</li></ul><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><ul><li><p>StringBuffer 线程安全</p></li><li><p>StringBuilder 非线程安全，适用于单线程，速度快</p></li></ul><h2 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h2><ul><li><p>Date</p></li><li><p>Calendar</p></li><li><p>DateFormat</p></li><li><p>SimpleDateFormat</p></li><li><p>LocalDate、LocalTime、LocalDateTime、Instant、Period、Duration（Java8的java.time包下新的日期时间操作类）</p></li></ul><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>数学操作相关，提供一系列的数学操作方法。比如：求平方根，两数的最大值，两数的最小值，四舍五入，2的3次方，绝对值，三角函数等。</p><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><p>可以指定一个随机数的范围，然后产生此范围内的任意数字。</p><h2 id="DecimalFormat"><a href="#DecimalFormat" class="headerlink" title="DecimalFormat"></a>DecimalFormat</h2><p>Format的一个子类，可以根据用户自定义的格式来格式化数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df=<span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.###&quot;</span>);</span><br><span class="line">df.format(<span class="number">1234232.1456</span>);</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line"><span class="number">1</span>,<span class="number">234</span>,<span class="number">232.146</span></span><br></pre></td></tr></table></figure><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>大整数类。如果在操作时一个整型数据超过了Long类型整数的最大长度，可以使用此类。</p><p>提供了一系列方法，用于基本运算。</p><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>float和double无法做到准确的精度计数，如果需要精确的计算结果，可以使用此类。</p><p>注：通常涉及到钱的计算，比如交易订单各种折扣、优惠混合计算，最好使用此类。</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>数组元素的查找、数组内容的填充、排序等。</p><h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p>比较器，排序时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Arrays.sort(Object[] a)方法或者Collections.sort(List list)方法组合使用。当类没有实现Comparable接口时，可以使用Comparator接口实现该类的比较逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Collections.sort(List, Comparator&lt;? <span class="built_in">super</span> T&gt;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见锁</title>
      <link href="/2020/02/04/java/java-advanced/%E5%B8%B8%E8%A7%81%E9%94%81/"/>
      <url>/2020/02/04/java/java-advanced/%E5%B8%B8%E8%A7%81%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="常见锁"><a href="#常见锁" class="headerlink" title="常见锁"></a>常见锁</h1><p><strong>基础概念：</strong></p><ul><li><p>并发（Concurrency）：一个处理器“同时”处理多个任务</p></li><li><p>并行（Parallelism）：多个处理器“同时”处理多个任务</p></li></ul><h2 id="互斥锁（Mutex）"><a href="#互斥锁（Mutex）" class="headerlink" title="互斥锁（Mutex）"></a>互斥锁（Mutex）</h2><ul><li><p>同步块 synchronized block</p></li><li><p>对象锁 object.lock()</p></li><li><p>可重入锁</p></li></ul><p>可重入锁，也叫做递归锁，指的是同一线程外层方法获得锁之后，内层递归方法仍然有获取该锁的代码，但不受影响。ReentrantLock和synchronized都是可重入锁。</p><p>在lock方法内，应验证线程是否为已经获得锁的线程。当unlock()第一次调用时，实际上不应释放锁。（采用计数进行统计）</p><p>可重入锁最大的特点是避免死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId());</span><br><span class="line">        set();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Test ss=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">返回结果：</span><br><span class="line"></span><br><span class="line">9</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">11</span><br><span class="line">10</span><br><span class="line">10</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(Thread.currentThread().getId());</span><br><span class="line">set();</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(Thread.currentThread().getId());</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(ss).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h2><ul><li>公平和非公平</li></ul><p>公平信号量的效果是线程的启动顺序与调用Semaphore.acquire（）顺序有关，即先启动的线程优先得到许可。</p><p>非公平信号量的效果是与线程的启动顺序与调用Semaphore.acquire（）顺序无关，也就是说先启动的线程并不一定先获得许可。</p><ul><li>实现原理</li></ul><p>Semaphore是用来保护一个或者多个共享资源的访问，Semaphore内部维护了一个计数器，其值为可以访问的共享资源的个数。一个线程要访问共享资源，先获得信号量，如果信号量的计数器值大于1，意味着有共享资源可以访问，则使其计数器值减去1，再访问共享资源。</p><p>如果计数器值为0,线程进入休眠。当某个线程使用完共享资源后，释放信号量，并将信号量内部的计数器加1，之前进入休眠的线程将被唤醒并再次试图获得信号量。</p><h2 id="乐观锁（CAS）"><a href="#乐观锁（CAS）" class="headerlink" title="乐观锁（CAS）"></a>乐观锁（CAS）</h2><p><a href="http://www.hollischuang.com/archives/934">深入理解乐观锁与悲观锁</a></p><p><a href="http://www.hollischuang.com/archives/1537">乐观锁的一种实现方式——CAS</a></p><ul><li>ABA问题：无锁堆栈实现</li></ul><p><a href="https://blog.csdn.net/u012834750/article/details/69387975">CAS 和ABA问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见问题</title>
      <link href="/2020/02/04/java/java-advanced/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/04/java/java-advanced/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol><li><p>SimpleDateFormat不是线程安全的</p><p> 使用过程中不要定义为静态全局变量。</p><p> 正确使用：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 时间是否是今天</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isToday</span><span class="params">(Long second)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (second == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">today</span> <span class="operator">=</span> sf.format(System.currentTimeMillis());</span><br><span class="line">    <span class="type">String</span> <span class="variable">compare</span> <span class="operator">=</span> sf.format(<span class="keyword">new</span> <span class="title class_">Date</span>(second * <span class="number">1000L</span>));</span><br><span class="line">    <span class="keyword">return</span> StringUtils.equals(today, compare);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 或者使用ThreadLocal：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;DateFormat&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> DateFormat <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>cache模型里面字段数据范围</p><p> 通常预发环境和线上环境会共用一套cache，如何避免两套环境间的数据干扰。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写入：DO -&gt; cacheModel</span><br><span class="line">读出：cacheModel -&gt; DO</span><br><span class="line">查询接口：DO -&gt; ServiceModel</span><br></pre></td></tr></table></figure></li><li><p>字符串不变性</p><p> 下面这张图展示了这段代码做了什么。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">s = s.concat(<span class="string">&quot;ef&quot;</span>);</span><br></pre></td></tr></table></figure><p> <img src="/images/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/string-immutable.png" alt="string-immutable"></p></li><li><p>HashCode被设计用来提高性能</p><p> equals()方法与hashCode()方法的区别在于：</p><p> 如果两个对象equals，那么它们一定有相同的hashCode。如果两个对象的hashCode相同，但它们未必equals。</p><p> 注：<code>==</code> 表示两个对象内存地址相同。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/02/04/java/java-advanced/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/04/java/java-advanced/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><table><thead><tr><th>规则</th><th>表达式</th></tr></thead><tbody><tr><td>一个或多个汉字</td><td><code>^[\u0391-\uFFE5]+$</code></td></tr><tr><td>邮政编码</td><td><code>^[1-9]\d&#123;5&#125;$</code></td></tr><tr><td>QQ号码</td><td><code>^[1-9]\d&#123;4,10&#125;$</code></td></tr><tr><td>用户名（字母开头 + 数字&#x2F;字母&#x2F;下划线）</td><td><code>^[A-Za-z][A-Za-z1-9_-]+$</code></td></tr><tr><td>手机号码</td><td><code>^1([358][0-9]|4[579]|66|7[0135678]|9[89])[0-9]&#123;8&#125;$</code></td></tr><tr><td>URL</td><td><code>^((http|https)://)?([\w-]+\\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></td></tr><tr><td>18位身份证号</td><td><code>^(\d&#123;6&#125;)(18|19|20)?(\d&#123;2&#125;)([01]\d)([0123]\d)(\d&#123;3&#125;)(\d|X|x)?$</code></td></tr><tr><td>邮箱</td><td><code>^[a-zA-Z_]&#123;1,&#125;[0-9]&#123;0,&#125;@(([a-zA-z0-9]-*)&#123;1,&#125;\\.)&#123;1,3&#125;[a-zA-z\\-]&#123;1,&#125;$</code></td></tr></tbody></table><ul><li><p>示例</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\\[img(\\=(\\d+)\\,(\\d+))?\\](((http\\:|https\\:)?\\/\\/[a-zA-Z|\\.|0-9]*\\/)?[a-zA-Z|\\/|0-9]*\\.[a-zA-Z]*)\\[\\/img\\]</span><br><span class="line"></span><br><span class="line">[img=225,165]http://bbsimg.wacdn.com/forum/201702/07/120732h4p5yw6wk4bwyk5q.jpg[/img]火炉上一分钟如一小时那</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group（0）=[img=225,165]http://bbsimg.wacdn.com/forum/201702/07/120732h4p5yw6wk4bwyk5q.jpg[/img]</span><br><span class="line">group（1）==225,165</span><br><span class="line">group（2）=225</span><br><span class="line">group（3）=165</span><br><span class="line">group（4）=http://bbsimg.wacdn.com/forum/201702/07/120732h4p5yw6wk4bwyk5q.jpg</span><br><span class="line">group（5）=http://bbsimg.wacdn.com/</span><br><span class="line">group（6）=http:</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度解读Tomcat中的NIO模型</title>
      <link href="/2020/02/04/java/java-advanced/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/02/04/java/java-advanced/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="深度解读Tomcat中的NIO模型"><a href="#深度解读Tomcat中的NIO模型" class="headerlink" title="深度解读Tomcat中的NIO模型"></a>深度解读Tomcat中的NIO模型</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/Nk7gcwsgBhgMWTRkgAFpRA">深度解读 Tomcat 中的 NIO 模型</a></p></blockquote><blockquote><p>摘要: I&#x2F;O复用模型，是同步非阻塞，这里的非阻塞是指I&#x2F;O读写，对应的是recvfrom操作，因为数据报文已经准备好，无需阻塞。</p></blockquote><p>说它是同步，是因为，这个执行是在一个线程里面执行的。有时候，还会说它又是阻塞的，实际上是指阻塞在select上面，必须等到读就绪、写就绪等网络事件。</p><h2 id="I-x2F-O复用模型解读"><a href="#I-x2F-O复用模型解读" class="headerlink" title="I&#x2F;O复用模型解读"></a>I&#x2F;O复用模型解读</h2><p>Tomcat的NIO是基于I&#x2F;O复用来实现的。对这点一定要清楚，不然我们的讨论就不在一个逻辑线上。下面这张图学习过I&#x2F;O模型知识的一般都见过，出自《UNIX网络编程》，I&#x2F;O模型一共有阻塞式I&#x2F;O，非阻塞式I&#x2F;O，I&#x2F;O复用(select&#x2F;poll&#x2F;epoll)，信号驱动式I&#x2F;O和异步I&#x2F;O。这篇文章讲的是I&#x2F;O复用。</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/io%E5%A4%8D%E7%94%A8.webp" alt="io复用"></p><p>这里先来说下用户态和内核态，直白来讲，如果线程执行的是用户代码，当前线程处在用户态，如果线程执行的是内核里面的代码，当前线程处在内核态。更深层来讲，操作系统为代码所处的特权级别分了4个级别。</p><p>不过现代操作系统只用到了0和3两个级别。0和3的切换就是用户态和内核态的切换。更详细的可参照《深入理解计算机操作系统》。I&#x2F;O复用模型，是同步非阻塞，这里的非阻塞是指I&#x2F;O读写，对应的是recvfrom操作，因为数据报文已经准备好，无需阻塞。</p><p>说它是同步，是因为，这个执行是在一个线程里面执行的。有时候，还会说它又是阻塞的，实际上是指阻塞在select上面，必须等到读就绪、写就绪等网络事件。有时候我们又说I&#x2F;O复用是多路复用，这里的多路是指N个连接，每一个连接对应一个channel，或者说多路就是多个channel。</p><p>复用，是指多个连接复用了一个线程或者少量线程(在Tomcat中是Math.min(2,Runtime.getRuntime().availableProcessors()))。</p><p>上面提到的网络事件有连接就绪，接收就绪，读就绪，写就绪四个网络事件。I&#x2F;O复用主要是通过Selector复用器来实现的，可以结合下面这个图理解上面的叙述。</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/selector%E5%9B%BE%E8%A7%A3.webp" alt="selector图解"></p><h2 id="Tomcat对IO模型的支持"><a href="#Tomcat对IO模型的支持" class="headerlink" title="Tomcat对IO模型的支持"></a>Tomcat对IO模型的支持</h2><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/tomcat%E6%94%AF%E6%8C%81io%E7%B1%BB%E5%9E%8B.webp" alt="tomcat支持io类型"></p><p>tomcat从6以后开始支持NIO模型，实现是基于JDK的java.nio包。这里可以看到对read body 和response body是Blocking的。关于这点在第6.3节源代码阅读有重点介绍。</p><h2 id="Tomcat中NIO的配置与使用"><a href="#Tomcat中NIO的配置与使用" class="headerlink" title="Tomcat中NIO的配置与使用"></a>Tomcat中NIO的配置与使用</h2><p>在Connector节点配置protocol&#x3D;”org.apache.coyote.http11.Http11NioProtocol”，Http11NioProtocol协议下默认最大连接数是10000，也可以重新修改maxConnections的值，同时我们可以设置最大线程数maxThreads，这里设置的最大线程数就是Excutor的线程池的大小。</p><p>在BIO模式下实际上是没有maxConnections，即使配置也不会生效，BIO模式下的maxConnections是保持跟maxThreads大小一致，因为它是一请求一线程模式。</p><h2 id="NioEndpoint组件关系图解读"><a href="#NioEndpoint组件关系图解读" class="headerlink" title="NioEndpoint组件关系图解读"></a>NioEndpoint组件关系图解读</h2><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/tomcat%E7%9A%84io%E7%BB%84%E6%88%90.webp" alt="tomcat的io组成"></p><p>我们要理解tomcat的nio最主要就是对NioEndpoint的理解。它一共包含LimitLatch、Acceptor、Poller、SocketProcessor、Excutor5个部分。</p><p>LimitLatch是连接控制器，它负责维护连接数的计算，nio模式下默认是10000，达到这个阈值后，就会拒绝连接请求。Acceptor负责接收连接，默认是1个线程来执行，将请求的事件注册到事件列表。</p><p>有Poller来负责轮询，Poller线程数量是cpu的核数Math.min(2,Runtime.getRuntime().availableProcessors())。由Poller将就绪的事件生成SocketProcessor同时交给Excutor去执行。Excutor线程池的大小就是我们在Connector节点配置的maxThreads的值。</p><p>在Excutor的线程中，会完成从socket中读取http request，解析成HttpServletRequest对象，分派到相应的servlet并完成逻辑，然后将response通过socket发回client。</p><p>在从socket中读数据和往socket中写数据的过程，并没有像典型的非阻塞的NIO的那样，注册OP_READ或OP_WRITE事件到主Selector，而是直接通过socket完成读写，这时是阻塞完成的，但是在timeout控制上，使用了NIO的Selector机制，但是这个Selector并不是Poller线程维护的主Selector，而是BlockPoller线程中维护的Selector，称之为辅Selector。详细源代码可以参照 <a href="#nioblockingselector%E5%92%8Cblockpoller%E4%BB%8B%E7%BB%8D">NioBlockingSelector和BlockPoller介绍</a>。</p><h2 id="NioEndpoint执行序列图"><a href="#NioEndpoint执行序列图" class="headerlink" title="NioEndpoint执行序列图"></a>NioEndpoint执行序列图</h2><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/tomcat%E7%9A%84io%E5%BA%8F%E5%88%97%E5%9B%BE.webp" alt="tomcat的io序列图"></p><p>在下一小节NioEndpoint源码解读中我们将对步骤1-步骤11依次找到对应的代码来说明。</p><h2 id="NioEndpoint源码解读"><a href="#NioEndpoint源码解读" class="headerlink" title="NioEndpoint源码解读"></a>NioEndpoint源码解读</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>无论是BIO还是NIO，开始都会初始化连接限制，不可能无限增大，NIO模式下默认是10000。</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-1.webp" alt="nio-code-1"></p><h3 id="步骤解读"><a href="#步骤解读" class="headerlink" title="步骤解读"></a>步骤解读</h3><p>下面我们着重叙述跟NIO相关的流程，共分为11个步骤，分别对应上面序列图中的步骤。</p><p><strong>步骤1</strong>：绑定IP地址及端口，将ServerSocketChannel设置为阻塞。</p><p>这里为什么要设置成阻塞呢，我们一直都在说非阻塞。Tomcat的设计初衷主要是为了操作方便。这样这里就跟BIO模式下一样了。只不过在BIO下这里返回的是</p><p>Socket，NIO下这里返回的是SocketChannel。</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-2.webp" alt="nio-code-2"></p><p><strong>步骤2</strong>：启动接收线程</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-3.webp" alt="nio-code-3"></p><p><strong>步骤3</strong>：ServerSocketChannel.accept()接收新连接</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-4.webp" alt="nio-code-4"></p><p><strong>步骤4</strong>：将接收到的链接通道设置为非阻塞<br><strong>步骤5</strong>：构造NioChannel对象<br><strong>步骤6</strong>：register注册到轮询线程</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-5.webp" alt="nio-code-5"></p><p><strong>步骤7</strong>：构造PollerEvent，并添加到事件队列</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-6.webp" alt="nio-code-6"></p><p><strong>步骤8</strong>：启动轮询线程</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-7.webp" alt="nio-code-7"></p><p><strong>步骤9</strong>：取出队列中新增的PollerEvent并注册到Selector</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-8.webp" alt="nio-code-8"></p><p><strong>步骤10</strong>：Selector.select()</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-9.webp" alt="nio-code-9"><br><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-10.webp" alt="nio-code-10"></p><p><strong>步骤11</strong>：根据选择的SelectionKey构造SocketProcessor提交到请求处理线程<br><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-11.webp" alt="nio-code-11"></p><h3 id="NioBlockingSelector和BlockPoller介绍"><a href="#NioBlockingSelector和BlockPoller介绍" class="headerlink" title="NioBlockingSelector和BlockPoller介绍"></a>NioBlockingSelector和BlockPoller介绍</h3><p>上面的序列图有个地方我没有描述，就是NioSelectorPool这个内部类，是因为在整体理解tomcat的nio上面在序列图里面不包括它更好理解。</p><p>在有了上面的基础后，我们在来说下NioSelectorPool这个类，对更深层了解Tomcat的NIO一定要知道它的作用。NioEndpoint对象中维护了一个NioSelecPool对象，这个NioSelectorPool中又维护了一个BlockPoller线程，这个线程就是基于辅Selector进行NIO的逻辑。</p><p>以执行servlet后，得到response，往socket中写数据为例，最终写的过程调用NioBlockingSelector的write方法。代码如下：</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-12.webp" alt="nio-code-12"><br><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-13.webp" alt="nio-code-13"></p><p>也就是说当socket.write()返回0时，说明网络状态不稳定，这时将socket注册OP_WRITE事件到辅Selector，由BlockPoller线程不断轮询这个辅Selector，直到发现这个socket的写状态恢复了，通过那个倒数计数器，通知Worker线程继续写socket动作。看一下BlockSelector线程的代码逻辑：</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/nio-code-14.webp" alt="nio-code-14"></p><p>使用这个辅Selector主要是减少线程间的切换，同时还可减轻主Selector的负担。</p><h2 id="关于性能"><a href="#关于性能" class="headerlink" title="关于性能"></a>关于性能</h2><p>下面这份报告是我们压测的一个结果，跟想象的是不是不太一样？几乎没有差别，实际上NIO优化的是I&#x2F;O的读写，如果瓶颈不在这里的话，比如传输字节数很小的情况下，BIO和NIO实际上是没有差别的。</p><p>NIO的优势更在于用少量的线程hold住大量的连接。还有一点，我们在压测的过程中，遇到在NIO模式下刚开始的一小段时间内容，会有错误，这是因为一般的压测工具是基于一种长连接，也就是说比如模拟1000并发，那么同时建立1000个连接，下一时刻再发送请求就是基于先前的这1000个连接来发送，还有TOMCAT的NIO处理是有POLLER线程来接管的，它的线程数一般等于CPU的核数，如果一瞬间有大量并发过来，POLLER也会顿时处理不过来。</p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/%E5%8E%8B%E6%B5%8B1.webp" alt="压测1"></p><p><img src="/images/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBTomcat%E4%B8%AD%E7%9A%84NIO%E6%A8%A1%E5%9E%8B/%E5%8E%8B%E6%B5%8B2.webp" alt="压测2"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>NIO只是优化了网络IO的读写，如果系统的瓶颈不在这里，比如每次读取的字节说都是500b，那么BIO和NIO在性能上没有区别。NIO模式是最大化压榨CPU，把时间片都更好利用起来。</p><p>对于操作系统来说，线程之间上下文切换的开销很大，而且每个线程都要占用系统的一些资源如内存，有关线程资源可参照这篇文章《一台java服务器可以跑多少个线程》。</p><p>因此，使用的线程越少越好。而I&#x2F;O复用模型正是利用少量的线程来管理大量的连接。在对于维护大量长连接的应用里面更适合用基于I&#x2F;O复用模型NIO，比如web qq这样的应用。所以我们要清楚系统的瓶颈是I&#x2F;O还是CPU的计算。</p>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="/2020/02/04/java/java-base/ArrayList/"/>
      <url>/2020/02/04/java/java-base/ArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/g1E3GQU1JJzpAxV4zwRKgg">图解集合 1 ：ArrayList</a></p></blockquote><h2 id="包含元素"><a href="#包含元素" class="headerlink" title="包含元素"></a>包含元素</h2><p>ArrayList包含的元素：</p><table><thead><tr><th>元素</th><th>作用</th></tr></thead><tbody><tr><td>transient Object[] elementData;</td><td>ArrayList是基于数组的一个实现，elementData就是底层的数组</td></tr><tr><td>private int size;</td><td>ArrayList里面元素的个数，这里要注意一下，size是按照调用add、remove方法的次数进行自增或者自减的，所以add一个null进入ArrayList，size也会加1</td></tr></tbody></table><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>ArrayList是否允许空</td><td>允许</td></tr><tr><td>ArrayList是否允许重复数据</td><td>允许</td></tr><tr><td>ArrayList是否有序</td><td>有序</td></tr><tr><td>ArrayList是否线程安全</td><td>非线程安全</td></tr></tbody></table><h2 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将元素添加到elementData中，并将size加1，ensureCapacityInternal方法是用来扩容的。</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>构造ArrayList时，如果没有指定容量参数capacity，默认的element数组的大小是10。</p><p>当底层数组的大小不够时，ArrayList会进行动态扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">// oldCapacity &gt;&gt; 1相当于oldCapacity / 2，即扩容至原容量的1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays.copyOf最终调用下面的copyOf方法将数组里的元素复制到新的数组里面去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="type">int</span> newLength, Class&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                        Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>按下标删除和按元素删除的核心代码如下，根据下标将指定元素后面位置的所有元素，利用System.arraycopy方法整体向前移动一个位置，最后一个位置的元素指定为null，这样让gc可以去回收它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                        numMoved);</span><br><span class="line">elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                        size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入的时候，按照指定位置，把从指定位置开始的所有元素利用System,arraycopy方法做一个整体的复制，向后移动一个位置（当然先要用ensureCapacityInternal方法进行判断，加了一个元素之后数组会不会不够大），然后指定位置的元素设置为需要插入的元素，完成了一次插入的操作。</p><h2 id="ArrayList的优缺点"><a href="#ArrayList的优缺点" class="headerlink" title="ArrayList的优缺点"></a>ArrayList的优缺点</h2><ul><li><p>优点</p><ol><li><p>ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快</p></li><li><p>ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已</p></li></ol></li><li><p>缺点</p><ol><li><p>删除元素的时候，涉及到一次元素复制，如果要复制的元素很多，那么就会比较耗费性能</p></li><li><p>插入元素的时候，涉及到一次元素复制，如果要复制的元素很多，那么就会比较耗费性能</p></li></ol></li></ul><p>因此，ArrayList比较适合顺序添加、随机访问的场景。</p><h2 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h2><p>ArrayList是线程非安全的，这很明显，因为ArrayList中所有的方法都不是同步的，在并发下一定会出现线程安全问题。那么我们想要使用ArrayList并且让它线程安全怎么办？一个方法是用Collections.synchronizedList方法把你的ArrayList变成一个线程安全的List，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; synchronizedList = Collections.synchronizedList(list);</span><br><span class="line">synchronizedList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">synchronizedList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; synchronizedList.size(); i++)&#123;</span><br><span class="line">    System.out.println(synchronizedList.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个方法就是Vector，它是ArrayList的线程安全版本，其实现90%和ArrayList都完全一样，区别在于：</p><ol><li><p>Vector是线程安全的，ArrayList是线程非安全的</p></li><li><p>Vector可以指定增长因子，如果该增长因子指定了，那么扩容的时候会每次新的数组大小会在原数组的大小基础上加上增长因子；如果不指定增长因子，那么就给原数组大小*2，源代码是这样的：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                        capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么ArrayList的elementData是用transient修饰的？"><a href="#为什么ArrayList的elementData是用transient修饰的？" class="headerlink" title="为什么ArrayList的elementData是用transient修饰的？"></a>为什么ArrayList的elementData是用transient修饰的？</h2><p>看到ArrayList实现了Serializable接口，这意味着ArrayList是可以被序列化的，用transient修饰elementData意味着我不希望elementData数组被序列化。这是为什么？因为序列化ArrayList的时候，ArrayList里面的elementData未必是满的，比方说elementData有10的大小，但是我只用了其中的3个，那么是否有必要序列化整个elementData呢？显然没有这个必要，因此ArrayList中重写了writeObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次序列化的时候调用这个方法，先调用defaultWriteObject()方法序列化ArrayList中的非transient元素，elementData不去序列化它，然后遍历elementData，只序列化那些有的元素，这样：</p><ol><li><p>加快了序列化的速度</p></li><li><p>减小了序列化之后的文件大小</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection接口</title>
      <link href="/2020/02/04/java/java-base/Collection%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/02/04/java/java-base/Collection%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/images/Collection%E6%8E%A5%E5%8F%A3/Collection%E7%B1%BB%E5%9B%BE.png" alt="Collection类图"></p><blockquote><p>引用自<a href="http://www.cnblogs.com/LittleHann/p/3690187.html">Java集合类: Set、List、Map、Queue使用场景梳理</a></p></blockquote><p>Collection类的父接口Iterable是迭代器接口。实现了Iterable接口的对象允许使用foreach进行遍历，所以，所有Collection集合对象都具有”foreach可遍历性”。</p><p>Collection代表一组Object的集合，这些Object被称作Collection的元素。Collection是一个接口，用以提供规范定义，不能被实例化使用。</p><h2 id="Collection和Map的区别"><a href="#Collection和Map的区别" class="headerlink" title="Collection和Map的区别"></a>Collection和Map的区别</h2><p>Collection和Map的区别在于容器中每个位置保存的元素类别。</p><p>Collection每个位置只能保存一个元素（对象）；Map保存的是”键值对”，类似于一个小型数据库，可以通过”键”找到对应的”值”。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CopyOnWriteArrayList</title>
      <link href="/2020/02/04/java/java-base/CopyOnWriteArrayList/"/>
      <url>/2020/02/04/java/java-base/CopyOnWriteArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/riVaKy4IR2uRGZzKMLVtAQ">图解集合 3 : CopyOnWriteArrayList</a></p></blockquote><ol><li><p>CopyOnWriteArrayList位于java.util.concurrent包下，可想而知，这个类是为并发而设计的</p></li><li><p>CopyOnWriteArrayList，顾名思义，Write的时候总是要Copy，也就是说对于CopyOnWriteArrayList，任何可变的操作（add、set、remove等等）都是伴随复制这个动作的</p></li></ol><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>CopyOnWriteArrayList是否允许空</td><td>允许</td></tr><tr><td>CopyOnWriteArrayList是否允许重复数据</td><td>允许</td></tr><tr><td>CopyOnWriteArrayList是否有序</td><td>有序</td></tr><tr><td>CopyOnWriteArrayList是否线程安全</td><td>线程安全</td></tr></tbody></table><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>对于CopyOnWriteArrayList来说，增加、删除、修改、插入的原理都是一样的，所以用增加元素来分析以下Copy’O’n’Write’Array’List的底层实现机制就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这段代码做了什么，先是第二行实例化一个新的CopyOnWriteArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8673264195747942595L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The lock protecting all mutators */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The array, accessed only via getArray/setArray. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the array.  Non-private so as to also be accessible</span></span><br><span class="line"><span class="comment">     * from CopyOnWriteArraySet class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Object[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the array.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(Object[] a)</span> &#123;</span><br><span class="line">        array = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an empty list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CopyOnWriteArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        setArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到，对于CopyOnWriteArrayList来说，底层就是一个Object[] array，然后实例化一个CopyOnWriteArrayList，用图来表示非常简单：</p><p><img src="/images/CopyOnWriteArrayList/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="数据结构"></p><p>就是这样，Object array指向一个数组大小为0的数组。接着看一下，第4行的add一个整数1做了什么，add的源代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一次add大致经历了几个步骤：</p><ol><li>加锁</li><li>拿到原数组，得到新数组的大小（原数组大小+1），实例化出一个新的数组来</li><li>把原数组的元素复制到新数组中去</li><li>新数组最后一个位置设置为待添加的元素（因为新数组的大小是按照原数组大小+1来的）</li><li>把Object array引用指向新数组</li><li>解锁</li></ol><p>整个过程看起来比较像ArrayList的扩容。</p><p>另外，插入、删除、修改操作也都是一样，每一次的操作都是以对Object[] array进行一次复制为基础的，如果上面的流程看懂了，那么研究插入、删除、修改的源代码应该不难。</p><h2 id="普通List的缺陷"><a href="#普通List的缺陷" class="headerlink" title="普通List的缺陷"></a>普通List的缺陷</h2><p>常用的List有ArrayList、LinkedList、Vector，其中前两个是线程非安全的，最后一个是线程安全的。我有一种场景，两个线程操作了同一个List，分别对同一个List进行迭代和删除，就如同下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyOnWriteArrayListSample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LIST_SIZE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">T1</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.list = list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">T2</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.list = list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">T3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">T3</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.list = list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">                list.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(LIST_SIZE);</span><br><span class="line">        List&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;(LIST_SIZE);</span><br><span class="line">        List&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; LIST_SIZE; i++) &#123;</span><br><span class="line">            list1.add(i);</span><br><span class="line">            list2.add(i);</span><br><span class="line">            list3.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">T1</span> <span class="variable">t11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>(list1);</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>(list1);</span><br><span class="line">        t11.start();</span><br><span class="line">        t12.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">T1</span> <span class="variable">t21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>(list2);</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>(list2);</span><br><span class="line">        t21.start();</span><br><span class="line">        t22.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">T1</span> <span class="variable">t31</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>(list3);</span><br><span class="line">        <span class="type">T3</span> <span class="variable">t32</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T3</span>(list3);</span><br><span class="line">        t31.start();</span><br><span class="line">        t32.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从运行结果可以看出，使用非线程安全的ArrayList和线程安全的Vector都会出现 <code>java.util.ConcurrentModificationException</code> 的错误。</p><p>Vector虽然是线程安全的，但是只是一种相对的线程安全而不是绝对的线程安全，它只能够保证增、删、改、查的单个操作一定是原子的，不会被打断，但是如果组合起来用，并不能保证线程安全性。比如就像上面的线程1在遍历一个Vector中的元素、线程2在删除一个Vector中的元素一样，势必产生并发修改异常，也就是fail-fast。</p><h2 id="CopyOnWriteArrayList的作用"><a href="#CopyOnWriteArrayList的作用" class="headerlink" title="CopyOnWriteArrayList的作用"></a>CopyOnWriteArrayList的作用</h2><p>CopyOnWriteArrayList在上述代码能够正常运行。CopyOnWriteArrayList的缺点，就是修改代价十分昂贵，每次修改都伴随着一次的数组复制；但同时优点也十分明显，就是在并发下不会产生任何的线程安全问题，也就是绝对的线程安全，这也是为什么我们要使用CopyOnWriteArrayList的原因。</p><p>附带说明一下，CopyOnWriteArray的默认迭代器实现COWIterator并不支持迭代器的 <code>remove</code>、<code>set</code>、<code>add</code> 方法，会直接抛出 <code>UnsupportedOperationException</code> 异常。因此在迭代删除CopyOnWriteArray的元素时使用 <code>List.remove(E e)</code> 方法。</p><p>另外，有两点必须讲一下。我认为CopyOnWriteArrayList这个并发组件，其实反映的是两个十分重要的分布式理念：</p><ul><li><p><strong>读写分离</strong></p><p>  我们读取CopyOnWriteArrayList的时候读取的是CopyOnWriteArrayList中的Object[] array，但是修改的时候，操作的是一个新的Object[] array，读和写操作的不是同一个对象，这就是读写分离。这种技术数据库用的非常多，在高并发下为了缓解数据库的压力，即使做了缓存也要对数据库做读写分离，读的时候使用读库，写的时候使用写库，然后读库、写库之间进行一定的同步，这样就避免同一个库上读、写的IO操作太多。</p></li><li><p><strong>最终一致</strong></p><p>  对CopyOnWriteArrayList来说，线程1读取集合里面的数据，未必是最新的数据。因为线程2、线程3、线程4四个线程都修改了CopyOnWriteArrayList里面的数据，但是线程1拿到的还是最老的那个Object[] array，新添加进去的数据并没有，所以线程1读取的内容未必准确。不过这些数据虽然对于线程1是不一致的，但是对于之后的线程一定是一致的，它们拿到的Object[] array一定是三个线程都操作完毕之后的Object array[]，这就是最终一致。最终一致对于分布式系统也非常重要，它通过容忍一定时间的数据不一致，提升整个分布式系统的可用性与分区容错性。当然，最终一致并不是任何场景都适用的，像火车站售票这种系统用户对于数据的实时性要求非常非常高，就必须做成强一致性的。</p></li></ul><p>最后总结一点，随着CopyOnWriteArrayList中元素的增加，CopyOnWriteArrayList的修改代价将越来越昂贵，因此，CopyOnWriteArrayList适用于读操作远多于修改操作的并发场景中。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> CopyOnWriteArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File类</title>
      <link href="/2020/02/04/java/java-base/File%E7%B1%BB/"/>
      <url>/2020/02/04/java/java-base/File%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><blockquote><p>引用自<a href="http://www.cnblogs.com/rollenholt/archive/2011/09/11/2173787.html">java中的IO整理</a></p></blockquote><ul><li><p>初始化变量</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILENAME</span> <span class="operator">=</span> <span class="string">&quot;E:\\hello.txt&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILENAME_WITH_SEPARATOR</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator + <span class="string">&quot;world.txt&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DIRECTORY_NAME</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator + <span class="string">&quot;hello&quot;</span> + File.separator + <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROOT_DIRECTORY</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FAIL</span> <span class="operator">=</span> <span class="string">&quot;失败&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建一个新文件"><a href="#创建一个新文件" class="headerlink" title="创建一个新文件"></a>创建一个新文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCreateFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">createResult</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;创建文件&quot;</span> + FILENAME + (createResult ? SUCCESS : FAIL));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File类的两个常量"><a href="#File类的两个常量" class="headerlink" title="File类的两个常量"></a>File类的两个常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fileConstants</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(File.separator);</span><br><span class="line">    System.out.println(File.pathSeparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建包含File-separator的文件"><a href="#创建包含File-separator的文件" class="headerlink" title="创建包含File.separator的文件"></a>创建包含File.separator的文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCreateFileWithSeparator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME_WITH_SEPARATOR);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">createResult</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;创建文件&quot;</span> + FILENAME_WITH_SEPARATOR + (createResult ? SUCCESS : FAIL));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除一个文件"><a href="#删除一个文件" class="headerlink" title="删除一个文件"></a>删除一个文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDeleteFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME_WITH_SEPARATOR);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">deleteResult</span> <span class="operator">=</span> file.delete();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除文件&quot;</span> + FILENAME_WITH_SEPARATOR + (deleteResult ? SUCCESS : FAIL));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个文件夹"><a href="#创建一个文件夹" class="headerlink" title="创建一个文件夹"></a>创建一个文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCreateDirectory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(DIRECTORY_NAME);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> directory.mkdirs();</span><br><span class="line">    System.out.println(<span class="string">&quot;创建文件夹&quot;</span> + DIRECTORY_NAME + (result ? SUCCESS : FAIL));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列出指定目录的全部文件（包括隐藏文件）"><a href="#列出指定目录的全部文件（包括隐藏文件）" class="headerlink" title="列出指定目录的全部文件（包括隐藏文件）"></a>列出指定目录的全部文件（包括隐藏文件）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">rootDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(ROOT_DIRECTORY);</span><br><span class="line">    String[] files = rootDirectory.list();</span><br><span class="line">    <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">        Arrays.stream(files).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列出指定目录完整路径的全部文件（包括隐藏文件）"><a href="#列出指定目录完整路径的全部文件（包括隐藏文件）" class="headerlink" title="列出指定目录完整路径的全部文件（包括隐藏文件）"></a>列出指定目录完整路径的全部文件（包括隐藏文件）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testListFiles</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">rootDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(ROOT_DIRECTORY);</span><br><span class="line">    File[] files = rootDirectory.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">        Arrays.stream(files).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断一个指定的路径是否为目录"><a href="#判断一个指定的路径是否为目录" class="headerlink" title="判断一个指定的路径是否为目录"></a>判断一个指定的路径是否为目录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testIsDirectory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(DIRECTORY_NAME);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    System.out.println(DIRECTORY_NAME + <span class="string">&quot;是文件夹：&quot;</span> + directory.isDirectory());</span><br><span class="line">    System.out.println(FILENAME + <span class="string">&quot;是文件夹：&quot;</span> + file.isDirectory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索指定目录的全部内容"><a href="#搜索指定目录的全部内容" class="headerlink" title="搜索指定目录的全部内容"></a>搜索指定目录的全部内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testListAllFiles</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">rootDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(ROOT_DIRECTORY);</span><br><span class="line">    printFile(rootDirectory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            File[] subFiles = file.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (subFiles != <span class="literal">null</span>) &#123;</span><br><span class="line">                Arrays.stream(subFiles).forEach(FileTest::printFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用RandomAccessFile写入文件"><a href="#使用RandomAccessFile写入文件" class="headerlink" title="使用RandomAccessFile写入文件"></a>使用RandomAccessFile写入文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWriteFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf.writeBytes(<span class="string">&quot;lfdasj;fdalsj&quot;</span>);</span><br><span class="line">        raf.writeInt(<span class="number">42342</span>);</span><br><span class="line">        raf.writeBoolean(<span class="literal">false</span>);</span><br><span class="line">        raf.writeChar(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        raf.writeFloat(<span class="number">45.5f</span>);</span><br><span class="line">        raf.writeDouble(<span class="number">76876.34</span>);</span><br><span class="line">        raf.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="/2020/02/04/java/java-base/HashMap/"/>
      <url>/2020/02/04/java/java-base/HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/SyKckwLfV2ypJOzTFA7R_g">图解集合 4 ：HashMap</a></p></blockquote><p>HashMap是一种非常常见、方便和有用的集合，是一种键值对（K-V）形式的存储结构，下面将还是用图示的方式解读HashMap的实现原理。</p><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>HashMap是否允许空</td><td>Key和Value都允许为空</td></tr><tr><td>HashMap是否允许重复数据</td><td>Key重复会覆盖、Value允许重复</td></tr><tr><td>HashMap是否有序</td><td>无序，特别说明这个无序指的是<strong>遍历HashMap的时候，得到的元素顺序基本不可能是put的顺序</strong></td></tr><tr><td>HashMap是否线程安全</td><td>非线程安全</td></tr></tbody></table><h2 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>HashMap的存储单元Entry：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Basic hash bin node, used for most entries.  (See below for</span></span><br><span class="line"><span class="comment"> * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry组成的是一个单向链表，因为里面只有Entry的后继Entry，而灭有Entry的前驱Entry。用图标识应该是这么一个数据结构：</p><p><img src="/images/HashMap/Entry%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="Entry数据结构"></p><p>接下来，假设我有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下做了什么。首先new了一个HashMap出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    threshold = (<span class="type">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一下第5行的init()是个空方法，它是HashMap的子类比如LinkedHashMap构造的时候使用的。DEFAULT_INITIAL_CAPACITY为16，也就是说，HashMap在new的时候构造出了一个大小为16的Entry数组，Entry内所有数据都取默认值，如图示为：</p><p><img src="/images/HashMap/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE1.webp" alt="添加数据1"></p><p>看到new出了一个大小为16的Entry数组来。接着第4行，put了一个Key和Value同为111的字符串，看一下put的时候底层做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下put方法的几个步骤：</p><ol><li>第2行~第3行就是HashMap允许Key值为空的原因，空的Key会默认放在第0位的数组位置上</li><li>第4行拿到Key值的HashCode，由于HashCode是Object的方法，因此每个对象都有一个HashCode，对这个HashCode做一次hash计算。按照JDK源码注释的说法，这次hash的作用是根据给定的HashCode对它做一次打乱的操作，防止一些糟糕的Hash算法产生的糟糕的Hash值，至于为什么要防止糟糕的Hash值，HashMap添加元素的最后会讲到</li><li>第5行根据重新计算的HashCode，对Entry数组的大小取模得到一个Entry数组的位置。看到这里使用了&amp;，移位加快一点代码运行效率。另外，这个取模操作的正确性依赖于length必须是2的N次幂，这个熟悉二进制的朋友一定理解，因此注意HashMap构造函数中，如果你指定HashMap初始数组的大小initialCapacity，如果initialCapacity不是2的N次幂，HashMap会算出大于initialCapacity的最小2的N次幂的值，作为Entry数组的初始化大小。这里为了讲解方便，我们假定字符串111和字符串222算出来的i都是1</li><li>第6行~第14行会先判断一下原数据结构中是否存在相同的Key值，存在则覆盖并返回，不执行后面的代码。注意一下recordAccess这个方法，它也是HashMap的子类比如LinkedHashMap用的，HashMap中这个方法为空。另外，注意一点，对比Key是否相同，是先比HashCode是否相同，HashCode相同再判断equals是否为true，这样大大增加了HashMap的效率，对HashCode不熟悉的朋友可以看一下我的这篇文章讲讲HashCode的作用</li><li>第16行的modeCount++是用于fail-fast机制的，每次修改HashMap数据结构的时候都会自增一次这个值</li></ol><p>然后就到了关键的addEntry方法了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Entry(<span class="type">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">    value = v;</span><br><span class="line">    next = n;</span><br><span class="line">    key = k;</span><br><span class="line">    hash = h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设new出来的Entry地址为0×00000001，那么，put(“111″, “111″)用图表示应该是这样的：</p><p><img src="/images/HashMap/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE2.webp" alt="添加数据2"></p><p>每一个新增的Entry都位于table[1]上，另外，里面的hash是rehash之后的hash而不是Key最原始的hash。看到table[1]上存放了111—-&gt;111这个键值对，它持有原table[1]的引用地址，因此可以寻址到原table[1]，这就是单向链表。 再看一下put(“222″, “222″)做了什么，一张图就可以理解了：</p><p><img src="/images/HashMap/%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE3.webp" alt="添加数据3"></p><p>新的Entry再次占据table[1]的位置，并且持有原table[1]，也就是111—-&gt;111这个键值对。</p><p>至此，HashMap进行put数据的过程就呈现清楚了。不过还有一个问题，就是HashMap如何进行扩容，再看一下addEntry方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到第4行~第5行，也就是说在每次放置完Entry之后都会判断是否需要扩容。这里不讲扩容是因为HashMap扩容在不正确的使用场景下将会导致死循环，这是一个值得探讨的话题，也是我工作中实际遇到过的一个问题，因此下一篇文章将会详细说明为什么不正确地使用HashMap会导致死循环。</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">    map.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第6行删除元素，看一下删除元素的时候做了什么，第4行~第5行添加了两个键值对就沿用上面的图，HashMap删除指定键值对的源代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">      Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">      <span class="keyword">return</span> (e == <span class="literal">null</span> ? <span class="literal">null</span> : e.value);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">removeEntryForKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">if</span> (prev == e)</span><br><span class="line">                table[i] = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev.next = next;</span><br><span class="line">            e.recordRemoval(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e;</span><br><span class="line">        e = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下remove元素的时候做了几步：</p><ol><li><p>根据key的hash找到待删除的键值对位于table的哪个位置上</p></li><li><p>记录一个prev表示待删除的Entry的前一个位置Entry，e可以认为是当前位置</p></li><li><p>从table[i]开始遍历链表，假如找到了匹配的Entry，要做一个判断，这个Entry是不是table[i]：</p><ol><li>是的话，也就是第14行~第15行，table[i]就直接是table[i]的下一个节点，后面的都不需要动</li><li>不是的话，也就是第16行~第17行，e的前一个Entry也就是prev，prev的next指向e的后一个节点，也就是next，这样，e所代表的Entry就被踢出了，e的前后Entry就连起来了</li></ol></li></ol><p><code>remove(&quot;111&quot;)</code>用图表示就是：</p><p><img src="/images/HashMap/%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE.webp" alt="删除数据"></p><p>整个过程只需要修改一个节点的next的值即可，非常方便。</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>修改元素也是put，看一下源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个其实前面已经提到过了，第6行~第14行就是修改元素的逻辑，如果某个Key已经在数据结构中存在的话，那么就会覆盖原value，也就是第10行的代码。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>所谓”插入元素”，在我的理解里，一定是基于数据结构是有序的前提下的。像ArrayList、LinkedList，再远点说就是数据库，一条一条都是有序的。</p><p>而HashMap，它的顺序是基于HashCode，HashCode是一个随机性很强的数字，所以HashMap中的Entry完全是随机存放的。HashMap又不像LinkedHashMap这样维护了插入元素的顺序，所以对HashMap这个数据结构谈插入元素是没有意义的。</p><p>所以，HashMap并没有插入的概念。</p><h2 id="再谈HashCode的重要性"><a href="#再谈HashCode的重要性" class="headerlink" title="再谈HashCode的重要性"></a>再谈HashCode的重要性</h2><p>前面讲到了，HashMap中对Key的HashCode要做一次rehash，防止一些糟糕的Hash算法生成的糟糕的HashCode，那么为什么要防止糟糕的HashCode？</p><p>糟糕的HashCode意味着的是Hash冲突，即多个不同的Key可能得到的是同一个HashCode，糟糕的Hash算法意味着的就是Hash冲突的概率增大，这意味着HashMap的性能将下降，表现在两方面：</p><ol><li><p>有10个Key，可能6个Key的HashCode都相同，另外四个Key所在的Entry均匀分布在table的位置上，而某一个位置上却连接了6个Entry。这就失去了HashMap的意义，HashMap这种数据结构性高性能的前提是，Entry均匀地分布在table位置上，但现在确是1 1 1 1 6的分布。所以，我们要求HashCode有很强的随机性，这样就尽可能地可以保证了Entry分布的随机性，提升了HashMap的效率。</p></li><li><p>HashMap在一个某个table位置上遍历链表的时候的代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br></pre></td></tr></table></figure><p> 看到，由于采用了”&amp;&amp;”运算符，因此先比较HashCode，HashCode都不相同就直接pass了，不会再进行equals比较了。HashCode因为是int值，比较速度非常快，而equals方法往往会对比一系列的内容，速度会慢一些。Hash冲突的概率大，意味着equals比较的次数势必增多，必然降低了HashMap的效率了。</p></li></ol><h2 id="HashMap的table为什么是transient的"><a href="#HashMap的table为什么是transient的" class="headerlink" title="HashMap的table为什么是transient的"></a>HashMap的table为什么是transient的</h2><p>一个非常细节的地方：</p><p><code>transient Entry[] table;</code></p><p>看到table用了transient修饰，也就是说table里面的内容全都不会被序列化，不知道大家有没有想过这么写的原因？</p><p>在我看来，这么写是非常必要的。因为HashMap是基于HashCode的，HashCode作为Object的方法，是native的：</p><p><code>public native int hashCode();</code></p><p>这意味着的是：HashCode和底层实现相关，不同的虚拟机可能有不同的HashCode算法。再进一步说得明白些就是，可能同一个Key在虚拟机A上的HashCode&#x3D;1，在虚拟机B上的HashCode&#x3D;2，在虚拟机C上的HashCode&#x3D;3。</p><p>这就有问题了，Java自诞生以来，就以跨平台性作为最大卖点，好了，如果table不被transient修饰，在虚拟机A上可以用的程序到虚拟机B上可以用的程序就不能用了，失去了跨平台性，因为：</p><ol><li>Key在虚拟机A上的HashCode&#x3D;100，连在table[4]上</li><li>Key在虚拟机B上的HashCode&#x3D;101，这样，就去table[5]上找Key，明显找不到</li></ol><p>整个代码就出问题了。因此，为了避免这一点，Java采取了重写自己序列化table的方法，在writeObject选择将key和value追加到序列化的文件最后面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = (size &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out number of buckets</span></span><br><span class="line">    s.writeInt(table.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size (number of Mappings)</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out keys and values (alternating)</span></span><br><span class="line">    <span class="keyword">if</span> (i != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            s.writeObject(e.getKey());</span><br><span class="line">            s.writeObject(e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在readObject的时候重构HashMap数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets and allocate the bucket array;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numBuckets</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[numBuckets];</span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size (number of Mappings)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一种麻烦的方式，但却保证了跨平台性。</p><p>这个例子也告诉了我们：尽管使用的虚拟机大多数情况下都是HotSpot，但是也不能对其它虚拟机不管不顾，有跨平台的思想是一件好事。</p><h2 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h2><p>HashMap和Hashtable是一组相似的键值对集合，它们的区别也是面试常被问的问题之一，我这里简单总结一下HashMap和Hashtable的区别：</p><ol><li><p>Hashtable是线程安全的，Hashtable所有对外提供的方法都使用了synchronized，也就是同步，而HashMap则是线程非安全的</p></li><li><p>Hashtable不允许空的value，空的value将导致空指针异常，而HashMap则无所谓，没有这方面的限制</p></li><li><p>上面两个缺点是最主要的区别，另外一个区别无关紧要，我只是提一下，就是两个的rehash算法不同，Hashtable的是：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="comment">// hashSeed will be zero if alternative hashing is disabled.</span></span><br><span class="line">    <span class="keyword">return</span> hashSeed ^ k.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这个hashSeed是使用sun.misc.Hashing类的randomHashSeed方法产生的。HashMap的rehash算法上面看过了，也就是：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型</title>
      <link href="/2020/02/04/java/java-base/Java%E6%B3%9B%E5%9E%8B/"/>
      <url>/2020/02/04/java/java-base/Java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><blockquote><p>引用自<a href="https://blog.csdn.net/s10461/article/details/53941091">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>泛型，即”参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用&#x2F;调用时传入具体的类型（类型实参）。</strong></p><p><strong>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。</strong> 也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法种，分别被称为泛型类、泛型接口、泛型方法。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> (String) list.get(i);</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br></pre></td></tr></table></figure><p>ArrayList可以存放任意类型，例子中添加了一个String类型，添加了一个Integer类型，在使用时都以String的方式使用，因此程序崩溃了。为了解决类似这样的额问题（在编译阶段就可以解决），泛型应运而生。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>泛型只在编译阶段有效。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">stringList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; integerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">integerList.add(<span class="number">111</span>);</span><br><span class="line">integerList.add(<span class="number">222</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">stringClass</span> <span class="operator">=</span> stringList.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">integerClass</span> <span class="operator">=</span> integerList.getClass();</span><br><span class="line"><span class="keyword">if</span> (stringClass.equals(integerClass)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;类型相同，类型为：&quot;</span> + stringClass.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型相同，类型为：java.util.ArrayList</span><br></pre></td></tr></table></figure><p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java种的泛型只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦除，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。</p><p>总结：<strong>泛型类型在逻辑上可以看成是多个不同的类型，实际上都是相同的基本类型</strong>。</p><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><p>泛型有三种使用方式：泛型类、泛型接口、泛型方法。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。</p><p>泛型类的最基本写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型的类型参数只能是引用类型，不能是基本数据类型。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>泛型接口与泛型类的定义及使用基本相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当实现泛型接口的类未传入泛型实参时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中</span></span><br><span class="line"><span class="comment"> * 即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;&#123;</span></span><br><span class="line"><span class="comment"> * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错：&quot;Unknown class&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitGenerator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当实现泛型接口的类传入泛型实参时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入泛型实参时：</span></span><br><span class="line"><span class="comment"> * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator&lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。</span></span><br><span class="line"><span class="comment"> * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型</span></span><br><span class="line"><span class="comment"> * 即：Generator&lt;T&gt;，public T next();中的的T都要替换成传入的String类型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitGenerator</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] fruits = &#123;<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Pear&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">return</span> fruits[rand.nextInt(<span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h3><p>类型通配符一般是使用 <code>?</code> 代替具体的类型实参，注意 <strong>此处的 <code>?</code> 是类型实参，而不是类型形参</strong>。再直白点的意思就是，此处的 <code>?</code> 和Number、String、Integer一样都是一种实际的类型，可以把 <code>?</code> 看成所有类型的父类。</p><p>当具体类型不确定的时候，可以使用类型通配符 <code>?</code>；当操作类型时，不需要使用类型的具体方法，只使用Object类中的方法，那么可以使用 <code>?</code> 通配符来表示未知类型。</p><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p><strong>泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型方法的基本介绍</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tClass 传入的泛型实参</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T 返回值为T类型</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。</span></span><br><span class="line"><span class="comment"> *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。</span></span><br><span class="line"><span class="comment"> *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。</span></span><br><span class="line"><span class="comment"> *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">genericMethod</span><span class="params">(Class&lt;T&gt; tClass)</span><span class="keyword">throws</span> InstantiationException ,</span><br><span class="line">  IllegalAccessException&#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> tClass.newInstance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类中的静态方法使用泛型时，静态方法无法访问类上定义的泛型；如果静态方法操作的引用数据类型不确定的时候，必须要将泛型定义在方法上。</p><p>简单的说：<strong>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticGenerator</span>&lt;T&gt; &#123;</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span></span><br><span class="line"><span class="comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span></span><br><span class="line"><span class="comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span></span><br><span class="line"><span class="comment">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型上下边界"><a href="#泛型上下边界" class="headerlink" title="泛型上下边界"></a>泛型上下边界</h3><p>在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或者某种类型的子类。</p><ul><li>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showKeyValue1</span><span class="params">(Generic&lt;? extends Number&gt; obj)</span>&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;key value is &quot;</span> + obj.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; T <span class="title function_">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;container key :&quot;</span> + container.getKey());</span><br><span class="line">    <span class="type">T</span> <span class="variable">test</span> <span class="operator">=</span> container.getKey();</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为泛型添加下边界，即传入的类型实参必须是指定类型的父类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showKeyValue1</span><span class="params">(Generic&lt;Number extends ?&gt; obj)</span>&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;泛型测试&quot;</span>,<span class="string">&quot;key value is &quot;</span> + obj.getKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><p>在Java中是 <strong>不能创建一个确切的泛型类型的数组</strong>。</p><p>也就是说下面的这个例子是不可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>而使用通配符创建泛型数组是可以的，如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;?&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>这样也是可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap</title>
      <link href="/2020/02/04/java/java-base/LinkedHashMap/"/>
      <url>/2020/02/04/java/java-base/LinkedHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h1><p>大多数情况下，只要不涉及线程安全问题，Map基本都可以使用HashMap，不过HashMap有一个问题，就是迭代HashMap的顺序并不是HashMap放置的顺序，也就是无序。HashMap的这一缺点往往会带来困扰，因为有些场景，我们期待一个有序的Map。</p><p>LinkedHashMap解决了这个问题，它虽然增加了时间和空间上的开销，但是通过维护一个运行于所有条目的双向链表，LinkedHashMap保证了元素迭代的顺序。</p><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>LinkedHashMap是否允许空</td><td>Key和Value都允许为空</td></tr><tr><td>LinkedHashMap是否允许重复数据</td><td>Key重复会覆盖、Value允许重复</td></tr><tr><td>LinkedHashMap是否有序</td><td>有序</td></tr><tr><td>LinkedHashMap是否线程安全</td><td>非线程安全</td></tr></tbody></table><h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><p>关于LinkedHashMap，先提两点：</p><ol><li>LinkedHashMap可以认为是HashMap+LinkedList，即它既使用HashMap操作数据结构，又使用LinkedList维护插入元素的先后顺序</li><li>LinkedHashMap的基本实现思想就是 — 多态。可以说，理解多态，再去理解LinkedHashMap原理会事半功倍；反之也是，对于LinkedHashMap原理的学习，也可以促进和加深对于多态的理解。</li></ol><p>为什么可以这么说，首先看一下，LinkedHashMap的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到，LinkedHashMap是HashMap的子类，自然LinkedHashMap也就继承了HashMap中所有非private的方法。再看一下LinkedHashMap中本身的方法：</p><p><img src="/images/LinkedHashMap/%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89.webp" alt="方法定义"></p><p>看到LinkedHashMap中并没有什么操作数据结构的方法，也就是说LinkedHashMap操作数据结构（比如put一个数据），和HashMap操作数据的方法完全一样，无非就是细节上有一些的不同罢了。</p><p>LinkedHashMap和HashMap的区别在于它们的基本数据结构上，看一下LinkedHashMap的基本数据结构，也就是Entry：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="type">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列一下Entry里面有的一些属性吧：</p><ul><li>K key</li><li>V value</li><li>Entry&lt;K, V&gt; next</li><li>int hash</li><li>Entry&lt;K, V&gt; before</li><li>Entry&lt;K, V&gt; after</li></ul><p>其中前面四个，也就是红色部分是从HashMap.Entry中继承过来的；后面两个，也就是蓝色部分是LinkedHashMap独有的。不要搞错了next和before、After，next是用于维护HashMap指定table位置上连接的Entry的顺序的，before、After是用于维护Entry插入的先后顺序的。</p><p>还是用图表示一下，列一下属性而已：</p><p><img src="/images/LinkedHashMap/Entry%E5%B1%9E%E6%80%A7.webp" alt="Entry属性"></p><h2 id="初始化LinkedHashMap"><a href="#初始化LinkedHashMap" class="headerlink" title="初始化LinkedHashMap"></a>初始化LinkedHashMap</h2><p>假如有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    LinkedHashMap&lt;String, String&gt; linkedHashMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">    linkedHashMap.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    linkedHashMap.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是第2行，new一个LinkedHashMap出来，看一下做了什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    accessOrder = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    threshold = (<span class="type">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    header = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;K,V&gt;(-<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    header.before = header.after = header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The head of the doubly linked list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</span><br></pre></td></tr></table></figure><p>这里出现了第一个多态：init()方法。尽管init()方法定义在HashMap中，但是由于：</p><ol><li>LinkedHashMap重写了init方法</li><li>实例化出来的是LinkedHashMap</li></ol><p>因此实际调用的init方法是LinkedHashMap重写的init方法。假设header的地址是0×00000000，那么初始化完毕，实际上是这样的：</p><p><img src="/images/LinkedHashMap/%E5%88%9D%E5%A7%8B%E5%8C%96LinkedHashMap.webp" alt="初始化LinkedHashMap"></p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>继续看LinkedHashMap添加元素，也就是put(“111″,”111″)做了什么，首先当然是调用HashMap的put方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第16行又是一个多态，因为LinkedHashMap重写了addEntry方法，因此addEntry调用的是LinkedHashMap重写了的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove eldest entry if instructed, else grow capacity if appropriate</span></span><br><span class="line">    Entry&lt;K,V&gt; eldest = header.after;</span><br><span class="line">    <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</span><br><span class="line">        removeEntryForKey(eldest.key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= threshold)</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为LinkedHashMap由于其本身维护了插入的先后顺序，因此LinkedHashMap可以用来做缓存，第5行~第7行是用来支持FIFO算法的，这里暂时不用去关心它。看一下createEntry方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;K,V&gt;(hash, key, value, old);</span><br><span class="line">    table[bucketIndex] = e;</span><br><span class="line">    e.addBefore(header);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> &#123;</span><br><span class="line">    after  = existingEntry;</span><br><span class="line">    before = existingEntry.before;</span><br><span class="line">    before.after = <span class="built_in">this</span>;</span><br><span class="line">    after.before = <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第2行~第4行的代码和HashMap没有什么不同，新添加的元素放在table[i]上，差别在于LinkedHashMap还做了addBefore操作，这四行代码的意思就是让新的Entry和原链表生成一个双向链表。假设字符串111放在位置table[1]上，生成的Entry地址为0×00000001，那么用图表示是这样的：</p><p><img src="/images/LinkedHashMap/%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A01.webp" alt="添加元素1"></p><p>如果熟悉LinkedList的源码应该不难理解，还是解释一下，注意下existingEntry表示的是header：</p><ol><li>after&#x3D;existingEntry，即新增的Entry的after&#x3D;header地址，即after&#x3D;0×00000000</li><li>before&#x3D;existingEntry.before，即新增的Entry的before是header的before的地址，header的before此时是0×00000000，因此新增的Entry的before&#x3D;0×00000000</li><li>before.after&#x3D;this，新增的Entry的before此时为0×00000000即header，header的after&#x3D;this，即header的after&#x3D;0×00000001</li><li>after.before&#x3D;this，新增的Entry的after此时为0×00000000即header，header的before&#x3D;this，即header的before&#x3D;0×00000001</li></ol><p>这样，header与新增的Entry的一个双向链表就形成了。再看，新增了字符串222之后是什么样的，假设新增的Entry的地址为0×00000002，生成到table[2]上，用图表示是这样的：</p><p><img src="/images/LinkedHashMap/%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A02.webp" alt="添加元素2"></p><p>就不细解释了，只要before、after清除地知道代表的是哪个Entry的就不会有什么问题。</p><p>总得来看，再说明一遍，LinkedHashMap的实现就是HashMap+LinkedList的实现方式，以HashMap维护数据结构，以LinkList的方式维护数据插入顺序。</p><h2 id="利用LinkedHashMap实现LRU算法缓存"><a href="#利用LinkedHashMap实现LRU算法缓存" class="headerlink" title="利用LinkedHashMap实现LRU算法缓存"></a>利用LinkedHashMap实现LRU算法缓存</h2><p>前面讲了LinkedHashMap添加元素，删除、修改元素就不说了，比较简单，和HashMap+LinkedList的删除、修改元素大同小异，下面讲一个新的内容。</p><p>LinkedHashMap可以用来作缓存，比方说LRUCache，看一下这个类的代码，很简单，就十几行而已：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(maxSize, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        maxElements = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(java.util.Map.Entry eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; maxElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> maxElements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顾名思义，LRUCache就是基于LRU算法的Cache（缓存），这个类继承自LinkedHashMap，而类中看到没有什么特别的方法，这说明LRUCache实现缓存LRU功能都是源自LinkedHashMap的。LinkedHashMap可以实现LRU算法的缓存基于两点：</p><ol><li>LinkedList首先它是一个Map，Map是基于K-V的，和缓存一致</li><li>LinkedList提供了一个boolean值可以让用户指定是否实现LRU</li></ol><p>那么，首先我们了解一下什么是LRU：LRU即Least Recently Used，最近最少使用，也就是说，当缓存满了，会优先淘汰那些最近最不常访问的数据。比方说数据a，1天前访问了；数据b，2天前访问了，缓存满了，优先会淘汰数据b。</p><p>我们看一下LinkedList带boolean型参数的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是这个accessOrder，它表示：</p><p>（1）false，所有的Entry按照插入的顺序排列</p><p>（2）true，所有的Entry按照访问的顺序排列</p><p>第二点的意思就是，如果有1 2 3这3个Entry，那么访问了1，就把1移到尾部去，即2 3 1。每次访问都把访问的那个数据移到双向队列的尾部去，那么每次要淘汰数据的时候，双向队列最头的那个数据不就是最不常访问的那个数据了吗？换句话说，双向链表最头的那个数据就是要淘汰的数据。</p><p>“访问”，这个词有两层意思：</p><ol><li>根据Key拿到Value，也就是get方法</li><li>修改Key对应的Value，也就是put方法</li></ol><p>首先看一下get方法，它在LinkedHashMap中被重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是put方法，沿用父类HashMap的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key.hashCode());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改数据也就是第6行~第14行的代码。看到两端代码都有一个共同点：都调用了recordAccess方法，且这个方法是Entry中的方法，也就是说每次的recordAccess操作的都是某一个固定的Entry。</p><p>recordAccess，顾名思义，记录访问，也就是说你这次访问了双向链表，我就把你记录下来，怎么记录？把你访问的Entry移到尾部去。这个方法在HashMap中是一个空方法，就是用来给子类记录访问用的，看一下LinkedHashMap中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> &#123;</span><br><span class="line">    LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</span><br><span class="line">    <span class="keyword">if</span> (lm.accessOrder) &#123;</span><br><span class="line">        lm.modCount++;</span><br><span class="line">        remove();</span><br><span class="line">        addBefore(lm.header);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    before.after = after;</span><br><span class="line">    after.before = before;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> &#123;</span><br><span class="line">    after  = existingEntry;</span><br><span class="line">    before = existingEntry.before;</span><br><span class="line">    before.after = <span class="built_in">this</span>;</span><br><span class="line">    after.before = <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到每次recordAccess的时候做了两件事情：</p><ol><li>把待移动的Entry的前后Entry相连</li><li>把待移动的Entry移动到尾部</li></ol><p>当然，这一切都是基于accessOrder&#x3D;true的情况下。最后用一张图表示一下整个recordAccess的过程吧：</p><p><img src="/images/LinkedHashMap/recordAccess%E8%BF%87%E7%A8%8B.webp" alt="recordAccess过程"></p><h2 id="演示LinkedHashMap按照访问顺序排序的效果"><a href="#演示LinkedHashMap按照访问顺序排序的效果" class="headerlink" title="演示LinkedHashMap按照访问顺序排序的效果"></a>演示LinkedHashMap按照访问顺序排序的效果</h2><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMapSample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(CAPACITY, FACTOR, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;333&quot;</span>, <span class="string">&quot;333&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;444&quot;</span>, <span class="string">&quot;444&quot;</span>);</span><br><span class="line">        printMap(map);</span><br><span class="line"></span><br><span class="line">        map.get(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        printMap(map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;2222&quot;</span>);</span><br><span class="line">        printMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.print(key + <span class="string">&quot;=&quot;</span> + value + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testLinkedHashMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的构造方法要用三个参数那个且最后的要传入true，这样才表示按照访问顺序排序。</p><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">111=111222=222333=333444=444</span><br><span class="line">222=222333=333444=444111=111</span><br><span class="line">333=333444=444111=111222=2222</span><br></pre></td></tr></table></figure><p>结论：</p><ol><li>LinkedList是有序的；</li><li>每次访问一个元素（get或put），被访问的元素都被提到最后面去了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LinkedHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList</title>
      <link href="/2020/02/04/java/java-base/LinkedList/"/>
      <url>/2020/02/04/java/java-base/LinkedList/</url>
      
        <content type="html"><![CDATA[<h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/oA0D1BjzBi7z0Xuvt4O-PQ">图解集合 2 ：LinkedList</a></p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>LinkedList是基于链表实现的，所以先讲解一下什么是链表。链表原先是C&#x2F;C++的概念，是一种线性的存储结构，意思是将要存储的数据存在一个存储单元里面，这个存储单元里面除了存放有待存储的数据以外，还存储有其下一个存储单元的地址（下一个存储单元的地址是必要的，有些存储结构还存放有其前一个存储单元的地址），每次查找数据的时候，通过某个存储单元中的下一个存储单元的地址寻找其后面的那个存储单元。</p><p>这么讲可能有点抽象，先提一句，LinkedList是一种双向链表，双向链表我认为有两点含义：</p><ol><li><p>链表中任意一个存储单元都可以通过向前或者向后寻址的方式获取到其前一个存储单元和其后一个存储单元</p></li><li><p>链表的尾节点的后一个节点是链表的头结点，链表的头结点的前一个节点是链表的尾节点</p></li></ol><h2 id="包含元素"><a href="#包含元素" class="headerlink" title="包含元素"></a>包含元素</h2><p>LinkedList既然是一种双向链表，必然有一个存储单元，看一下LinkedList的基本存储单元，它是LinkedList中的一个内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>‹E› &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node‹E› next;</span><br><span class="line">    Node‹E› prev;</span><br><span class="line"></span><br><span class="line">    Node(Node‹E› prev, E element, Node‹E› next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到LinkedList的Node中的”E element”，就是它真正存储的数据。”Node‹E› next”和”Node‹E› prev”表示的就是这个存储单元的前一个存储单元的引用地址和后一个存储单元的引用地址。</p><p>除了存储单元外，LinkedList还定义了size、first头节点、last尾节点三个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to first node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node‹E› first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pointer to last node.</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node‹E› last;</span><br></pre></td></tr></table></figure><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>LinkedList是否允许空</td><td>允许</td></tr><tr><td>LinkedList是否允许重复数据</td><td>允许</td></tr><tr><td>LinkedList是否有序</td><td>有序</td></tr><tr><td>LinkedList是否线程安全</td><td>非线程安全</td></tr></tbody></table><h2 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› l = last;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加元素的过程为：获取列表原来的尾节点，并新建一个节点，该节点的前置节点为原来的尾节点，后置节点为null。将列表的尾节点更新为新建的节点。原列表没有元素时，将列表的头节点设置为新建节点，反之更新原尾节点的后置节点为新建的节点。列表的size加1。</p><h3 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node‹E› node(<span class="type">int</span> index) &#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node‹E› x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node‹E› x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于LinkedList是双向链表，所以LinkedList既可以向前查找，也可以向后查找。当index小于数组大小的一半的时候（size &gt;&gt; 1表示size &#x2F; 2，使用移位运算提升代码运行效率），向后查找；否则，向前查找。</p><p>这样，在我的数据结构里面有10000个元素，刚巧查找的又是第10000个元素的时候，就不需要从头遍历10000次了，向后遍历即可，一次就能找到我要的元素。</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node‹E› x)</span> &#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将删除元素前置节点的后置指向删除元素的后置节点，将删除元素后置节点的前置指向删除元素的前置节点，并将元素内容设为null。</p><p>待删除节点的prev、item、next设为null是为了让虚拟机可以回收这个Node。</p><p>按照Java虚拟机HotSpot采用的垃圾回收检测算法—-根节点搜索算法来说，即使prev、item、next不设置为null也是可以回收这个Node的，因为此时这个Node已经没有任何地方会指向它了，所以这块Node会被当做”垃圾”对待。之所以还要将prev、item、next设置为null，我认为可能是为了兼容另外一种垃圾回收检测算法—-引用计数法，这种垃圾回收检测算法，只要对象之间存在相互引用，那么这块内存就不会被当作”垃圾”对待。</p><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› l = last;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node‹E› succ)</span> &#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node‹E› pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node‹E› newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果插入元素的位置在列表尾，直接在尾部添加元素；插入的位置不在列表尾则在该位置原来的元素前插入新的元素。</p><h2 id="LinkedList和ArrayList的对比"><a href="#LinkedList和ArrayList的对比" class="headerlink" title="LinkedList和ArrayList的对比"></a>LinkedList和ArrayList的对比</h2><ol><li><p>顺序插入速度ArrayList会比较快，因为ArrayList是基于数组实现的，数组是事先new好的，只要往指定位置塞一个数据就好了；LinkedList则不同，每次顺序插入的时候LinkedList将new一个对象出来，如果对象比较大，那么new的时间势必会长一点，再加上一些引用赋值的操作，所以顺序插入LinkedList必然慢于ArrayList</p></li><li><p>基于上一点，因为LinkedList里面不仅维护了待插入的元素，还维护了Entry的前置Entry和后继Entry，如果一个LinkedList中的Entry非常多，那么LinkedList将比ArrayList更耗费一些内存</p></li><li><p>数据遍历的速度，看最后一部分，这里就不细讲了，结论是：使用各自遍历效率最高的方式，ArrayList的遍历效率会比LinkedList的遍历效率高一些</p></li><li><p>有些说法认为LinkedList做插入和删除更快，这种说法其实是不准确的：</p><ul><li><p>LinkedList做插入、删除的时候，慢在寻址，快在只需要改变前后Entry的引用地址</p></li><li><p>ArrayList做插入、删除的时候，慢在数组元素的批量copy，快在寻址</p></li></ul></li></ol><p>所以，如果待插入、删除的元素是在数据结构的前半段尤其是非常靠前的位置的时候，LinkedList的效率将大大快过ArrayList，因为ArrayList将批量copy大量的元素；越往后，对于LinkedList来说，因为它是双向链表，所以在第2个元素后面插入一个数据和在倒数第2个元素后面插入一个元素在效率上基本没有差别，但是ArrayList由于要批量copy的元素越来越少，操作速度必然追上乃至超过LinkedList。</p><p>从这个分析看出，如果你十分确定你插入、删除的元素是在前半段，那么就使用LinkedList；如果你十分确定你删除、删除的元素在比较靠后的位置，那么可以考虑使用ArrayList。如果你不能确定你要做的插入、删除是在哪儿呢？那还是建议你使用LinkedList吧，因为一来LinkedList整体插入、删除的执行效率比较稳定，没有ArrayList这种越往后越快的情况；二来插入元素的时候，弄得不好ArrayList就要进行一次扩容，记住，ArrayList底层数组扩容是一个既消耗时间又消耗空间的操作，在我的文章Java代码优化中，第9点有详细的解读。</p><h2 id="LinkedList以及ArrayList的迭代"><a href="#LinkedList以及ArrayList的迭代" class="headerlink" title="LinkedList以及ArrayList的迭代"></a>LinkedList以及ArrayList的迭代</h2><p>ArrayList使用最普通的for循环遍历，LinkedList使用forEach循环比较快，看一下两个List的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>‹E› <span class="keyword">extends</span> <span class="title class_">AbstractList</span>‹E›</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>‹E›, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>‹E›</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>‹E›</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>‹E›, Deque‹E›, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>注意到ArrayList是实现了RandomAccess接口而LinkedList则没有实现这个接口，关于RandomAccess这个接口的作用，看一下JDK API上的说法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marker interface used by &lt;tt&gt;List&lt;/tt&gt; implementations to indicate that</span></span><br><span class="line"><span class="comment"> * they support fast (generally constant time) random access.  The primary</span></span><br><span class="line"><span class="comment"> * purpose of this interface is to allow generic algorithms to alter their</span></span><br><span class="line"><span class="comment"> * behavior to provide good performance when applied to either random or</span></span><br><span class="line"><span class="comment"> * sequential access lists.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The best algorithms for manipulating random access lists (such as</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;ArrayList&lt;/tt&gt;) can produce quadratic behavior when applied to</span></span><br><span class="line"><span class="comment"> * sequential access lists (such as &lt;tt&gt;LinkedList&lt;/tt&gt;).  Generic list</span></span><br><span class="line"><span class="comment"> * algorithms are encouraged to check whether the given list is an</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;instanceof&lt;/tt&gt; this interface before applying an algorithm that would</span></span><br><span class="line"><span class="comment"> * provide poor performance if it were applied to a sequential access list,</span></span><br><span class="line"><span class="comment"> * and to alter their behavior if necessary to guarantee acceptable</span></span><br><span class="line"><span class="comment"> * performance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It is recognized that the distinction between random and sequential</span></span><br><span class="line"><span class="comment"> * access is often fuzzy.  For example, some &lt;tt&gt;List&lt;/tt&gt; implementations</span></span><br><span class="line"><span class="comment"> * provide asymptotically linear access times if they get huge, but constant</span></span><br><span class="line"><span class="comment"> * access times in practice.  Such a &lt;tt&gt;List&lt;/tt&gt; implementation</span></span><br><span class="line"><span class="comment"> * should generally implement this interface.  As a rule of thumb, a</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;List&lt;/tt&gt; implementation should implement this interface if,</span></span><br><span class="line"><span class="comment"> * for typical instances of the class, this loop:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     for (int i=0, n=list.size(); i &amp;lt; n; i++)</span></span><br><span class="line"><span class="comment"> *         list.get(i);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * runs faster than this loop:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *     for (Iterator i=list.iterator(); i.hasNext(); )</span></span><br><span class="line"><span class="comment"> *         i.next();</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html&quot;&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RandomAccess</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZE</span> <span class="operator">=</span> <span class="number">500000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">linkedListTimeTest</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList测试：&quot;</span>);</span><br><span class="line">        listLoop(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arrayListTimeTest</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayList测试：&quot;</span>);</span><br><span class="line">        listLoop(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listLoop</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通for循环耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;forEach循环耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        list.forEach(integer -&gt; &#123;&#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;lambda表达式forEach循环耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(SIZE);</span><br><span class="line">        List&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">            arrayList.add(i);</span><br><span class="line">            linkedList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        arrayListTimeTest(arrayList);</span><br><span class="line">        linkedListTimeTest(linkedList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList测试：</span><br><span class="line">普通for循环耗时：0ms</span><br><span class="line">forEach循环耗时：15ms</span><br><span class="line">lambda表达式forEach循环耗时：90ms</span><br><span class="line">LinkedList测试：</span><br><span class="line">普通for循环耗时：265710ms</span><br><span class="line">forEach循环耗时：16ms</span><br><span class="line">lambda表达式forEach循环耗时：0ms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List相关</title>
      <link href="/2020/02/04/java/java-base/List%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/02/04/java/java-base/List%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="List相关"><a href="#List相关" class="headerlink" title="List相关"></a>List相关</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/images/List%E7%9B%B8%E5%85%B3/List%E7%B1%BB%E5%9B%BE.png" alt="List类图"></p><p>List接口继承Collection接口，List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许加入重复元素，因为它可以通过索引来访问指定位置的集合元素。List集合默认按元素的添加顺序设置元素的索引。</p><h2 id="List实现类"><a href="#List实现类" class="headerlink" title="List实现类"></a>List实现类</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList时基于数组实现的List类，它封装了一个可以动态扩容的数组。详情见<a href="../sourcecode/README.md">ArrayList源码分析</a>。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList实现了List和Deque接口，具备列表和双端队列的一些特性。详情见<a href="../sourcecode/LinkedList.md">LinkedList源码分析</a>。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>Vector和ArrayList在用法上几乎完全相同，并且Vector时线程安全的。Stack是Vector的一个子类，实现了”栈”这种数据接口，栈的特性是LIFO后进先出。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map相关</title>
      <link href="/2020/02/04/java/java-base/Map%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/02/04/java/java-base/Map%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Map相关"><a href="#Map相关" class="headerlink" title="Map相关"></a>Map相关</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/images/Map%E7%9B%B8%E5%85%B3/Map%E7%B1%BB%E5%9B%BE.png" alt="Map类图"></p><p><img src="/images/Map%E7%9B%B8%E5%85%B3/Map%E7%9A%84Entry%E7%B1%BB%E5%9B%BE.png" alt="Map的Entry类图"></p><p>Map用于保存具有”映射关系”的数据，因此Map集合里保存着两组值，一组值用于保存Map里的key，另外一组值用于保存Map里的value。key和value都可以是任何引用类型的数据。Map的key不允许重复，即同一个Map对象的任何两个key通过equals方法比较结果总是返回false。</p><p>Map的实现类和子接口中key集的存储形式和Set集合相同（即key不能重复）；Map的实现类和子接口中value集的存储形式和List非常类似（即value可以重复、根据索引进行查找）。</p><h2 id="Map实现类"><a href="#Map实现类" class="headerlink" title="Map实现类"></a>Map实现类</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap保存的key-value对是无序的，判断HashMap中的两个key是否相等的标准是：两个key通过equals()方法比较返回true、同时两个key的hashCode值也必需相等。</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>LinkedHashMap使用双向链表来维护key-value对的次序，该链表负责维护Map的迭代顺序，与key-value对的插入顺序一致。</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>线程安全的Map实现类。</p><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>Properties对象在处理属性文件时特别方便，Properties类可以把Map对象和属性文件关联起来，从而可以把Map对象中的key-value对写入到属性文件中，也可以把属性文件中的”属性名-属性值”加载到Map对象中。</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap时一个红黑树数据结构，每个key-value对作为红黑树的一个节点。TreeMap存储key-value对时，需要根据key对节点进行排序。TreeMap可以保证所有的key-value对处于有序状态。</p><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><p>WeakHashMap与HashMap的用法基本相似。区别在于，HashMap的key保留了对实际对象的”强引用”，这意味着只要该HashMap对象不被销毁，该HashMap所引用的对象就不会被GC。而WeakHash的key只保留了对实际对象的弱引用，这意味着如果被引用的实际对象没有被其他强引用变量所引用，则这些key所引用的对象可能被GC，当引用的对象被GC之后，WeakHashMap也可能自动删除这些key所对应的key-value对。</p><h3 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a>IdentityHashMap</h3><p>IdentityHashMap的实现机制与HashMap基本相似，区别在于，在IdentityHashMap中，当且仅当两个key严格相等（key1 &#x3D;&#x3D; key2）时，IdentityHashMap才认为两个key相等。</p><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3><p>EnumMap时一个与枚举类一起使用的Map实现，EnumMap中的所有key都必需是单个枚举类的枚举值。创建EnumMap时必须显式或隐式指定它对应的枚举类。EnumMap根据key的自然顺序（即枚举值在枚举类中的定义顺序）进行排序。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue相关</title>
      <link href="/2020/02/04/java/java-base/Queue%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/02/04/java/java-base/Queue%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Queue相关"><a href="#Queue相关" class="headerlink" title="Queue相关"></a>Queue相关</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/images/Queue%E7%9B%B8%E5%85%B3/Queue%E7%B1%BB%E5%9B%BE.png" alt="Queue类图"></p><p>Queue用于模拟”队列”这种数据结构，其特性为FIFO先进先出。队列的头部保存着队列中存放时间最长的元素，队列的尾部保存着队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素，队列不允许随机访问元素。</p><h2 id="Queue实现类"><a href="#Queue实现类" class="headerlink" title="Queue实现类"></a>Queue实现类</h2><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>PriorityQueue优先级队列，它并不是一个比较标准的队列实现，PriorityQueue保存元素的顺序并不是按照加入队列的顺序，而是按照队列元素的大小进行排序的。</p><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><p>Deque双端队列接口，双端队列可以同时从两端来添加、删除元素，因此Deque的实现类既可以当成队列使用、也可以当成栈使用。</p><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><p>ArrayDeque是一个基于数组的双端队列，和ArrayList类似，它们的底层都采用一个可动态扩容的Object[]数组来存储集合元素。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runnable</title>
      <link href="/2020/02/04/java/java-base/Runnable/"/>
      <url>/2020/02/04/java/java-base/Runnable/</url>
      
        <content type="html"><![CDATA[<h1 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h1><p>在Java中创建线程除了继承Thread类之外，还可以通过实现Runnable接口来实现类似的功能。实现Runnable接口必须重写其run方法。</p><p>Runnable的中文意思是”任务”，顾名思义，通过实现Runnable接口，我们 定义了一个子任务，然后将子任务交由Thread去执行。注意，这种方式必须将Runnable作为Thread类的参数，然后通过Thread类的start方法来创建一个新线程来执行该子任务。如果调用Runnable的run方法的话，是不会创建新线程的，这跟普通的方法调用没有任何区别。</p><p>事实上，查看Thread类的实现源代码会发现Thread类是实现了Runnable接口的。</p><p>在Java中，继承Thread类和实现Runnable接口这两种方式都可以用来创建线程去执行子任务，具体选择哪一种方式要看自己的需求。直接继承Thread类的话，可能比实现Runnable接口看起来更加简洁，但是由于Java只允许单继承，所以如果自定义类需要继承其他类，则只能选择实现Runnable接口。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set相关</title>
      <link href="/2020/02/04/java/java-base/Set%E7%9B%B8%E5%85%B3/"/>
      <url>/2020/02/04/java/java-base/Set%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="Set相关"><a href="#Set相关" class="headerlink" title="Set相关"></a>Set相关</h1><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>Set接口继承Collection接口</p><p><img src="/images/Set%E7%9B%B8%E5%85%B3/Set%E7%B1%BB%E5%9B%BE.png" alt="Set类图"></p><p>Set集合里的多个对象之间没有明显的顺序。Set继承自Collection接口，不能包含有重复元素（这是整个Set相关类的共有属性）。</p><p>Set判断两个对象相同使用的是equals方法。也就是说，当Set中加入一个新元素时，如果这个新元素对象和Set中已有对象进行equals比较都返回false，则Set就会接收这个新元素对象加入，否则拒绝。</p><p>因为Set的这个制约，在使用Set集合的时候，需要为Set集合里的元素的实现类实现一个有效的equals(Object)方法。</p><h2 id="Set实现类"><a href="#Set实现类" class="headerlink" title="Set实现类"></a>Set实现类</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>HashSet是否允许空</td><td>允许</td></tr><tr><td>HashSet是否允许重复数据</td><td>不允许</td></tr><tr><td>HashSet是否有序</td><td>无序</td></tr><tr><td>HashSet是否线程安全</td><td>非线程安全</td></tr></tbody></table><p>HashSet时Set接口的典型实现，HashSet使用HASH算法来存储集合中的元素，因此具有良好的存取和查找性能。HashSet的底层实现其实是一个HashMap，该HashMap存储的键是元素对象，值则是HashSet中定义的PRESENT变量（Object对象）。使用add(E)方法向HashSet中添加重复的元素时，会返回false。contains方法用于判断HashSet中是否存在某个元素，实际上是使用元素对象的equals方法进行判断。HashSet的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><table><thead><tr><th>集合关注点</th><th>结论</th></tr></thead><tbody><tr><td>LinkedHashSet是否允许空</td><td>允许</td></tr><tr><td>LinkedHashSet是否允许重复数据</td><td>不允许</td></tr><tr><td>LinkedHashSet是否有序</td><td>有序</td></tr><tr><td>LinkedHashSet是否线程安全</td><td>非线程安全</td></tr></tbody></table><p>LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但和HashSet不同的是，它同时使用链表维护元素的次序，这样使的元素看起来是以插入的顺序保存的。</p><p>当遍历LinkdedHashSet集合里的元素时，LinkedHashSet将会按元素的添加顺序来访问集合里的元素。</p><p>LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能，但在迭代访问Set里的全部元素时（遍历）将有很好的性能（链表很适合进行遍历）。</p><p>LinkedHashSet底层实现是一个LinkedHashMap，通过LinkedHashMap，LinkedHashSet实现了元素的有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。</p><p>SortedSet接口主要用于排序操作。</p><h3 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h3><p>EnumSet是一个专门为枚举类设计的集合类，EnumSet中所有元素都必须是指定枚举类型的枚举值，该枚举类型在创建EnumSet时显式或隐式地指定。EnumSet地集合元素也是有序的，它们以枚举值在Enum类中的定义顺序来决定集合元素的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP编程</title>
      <link href="/2020/02/04/java/java-base/TCP%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/02/04/java/java-base/TCP%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h1><blockquote><p>引用自<a href="https://blog.csdn.net/qq_23473123/article/details/51461894">JAVA 通过 Socket 实现 TCP 编程</a></p></blockquote><h2 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h2><p>TCP（Transmission Control Protocol传输控制协议）是一种面向 <strong>连接的、可靠的、基于字节流</strong> 的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层 <strong>传输层</strong> 所指定的功能，用户数据报协议（UDP）是同一层内另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上、应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。</p><p>应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分成适当长度的报文段（通常受该计算机连接的网络的数据链路层的最大传输单元（MTU）的限制）。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失，将会被进行重传。TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</p><h2 id="Java-Socket简介"><a href="#Java-Socket简介" class="headerlink" title="Java Socket简介"></a>Java Socket简介</h2><p>socket通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄。应用程序通常 <strong>通过”套接字”向网络发出请求或者应答网络请求</strong>。</p><p>Socket和ServerSocket类库位于<code>java.net</code>包中。<strong>ServerSocket用于服务器端，Socket是建立网络连接时使用的</strong>。在连接成功时，应用程序两端都会产生一个Socket实例，操作这个实例，完成所需的会话。对于一个网络连接来说，套接字是平等的，并没有差别，不因为在服务器端或在客户端而产生不同级别。不管是Socket还是ServerSocket，它们的工作都是通过 <strong>SocketImpl类机器子类完成的</strong>。</p><ul><li>简单示例：</li></ul><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpSocketServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span>  <span class="operator">=</span> <span class="number">1122</span>;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TcpSocketServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已启动!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;建立新的连接，客户端：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;:&quot;</span> + socket.getPort());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">TcpSocketServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TcpSocketServer</span>();</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        server.service();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpSocketClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1122</span>;</span><br><span class="line">        Socket[] sockets = <span class="keyword">new</span> <span class="title class_">Socket</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            sockets[i] = <span class="keyword">new</span> <span class="title class_">Socket</span>(host, port);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;次连接成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            sockets[i].close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务端已启动!</span><br><span class="line">建立新的连接，客户端：127.0.0.1:65463</span><br><span class="line">建立新的连接，客户端：127.0.0.1:65464</span><br><span class="line">建立新的连接，客户端：127.0.0.1:65465</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第1次连接成功</span><br><span class="line">第2次连接成功</span><br><span class="line">第3次连接成功</span><br><span class="line">Exception in thread &quot;main&quot; java.net.ConnectException: Connection refused: connect</span><br></pre></td></tr></table></figure><ul><li>多线程示例：</li></ul><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpMultiThreadSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ServerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServerThread</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream = socket.getInputStream();</span><br><span class="line">                inputStreamReader = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">                String message;</span><br><span class="line">                <span class="comment">// 循环读取客户端的信息</span></span><br><span class="line">                <span class="keyword">while</span> ((message = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端 -&gt; 服务端：&quot;</span> + message);</span><br><span class="line">                &#125;</span><br><span class="line">                socket.shutdownInput();</span><br><span class="line">                <span class="comment">// 获取输出流，响应客户端的请求</span></span><br><span class="line">                outputStream = socket.getOutputStream();</span><br><span class="line">                writer = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line">                writer.write(<span class="string">&quot;欢迎您！&quot;</span>);</span><br><span class="line">                <span class="comment">// 调用flush()方法将缓冲输出</span></span><br><span class="line">                writer.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                        writer.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        bufferedReader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (inputStreamReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        inputStreamReader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">11222</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务端启动，等待客户端连接&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                <span class="type">ServerThread</span> <span class="variable">serverThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerThread</span>(socket);</span><br><span class="line">                serverThread.start();</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端的数量：&quot;</span> + count);</span><br><span class="line">                System.out.println(<span class="string">&quot;当前客户端IP：&quot;</span> + socket.getInetAddress().getHostAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpMultiThreadSocketClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">11222</span>);</span><br><span class="line">            <span class="comment">// 获取输出流，向服务端发送信息</span></span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line">            writer = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outputStream);</span><br><span class="line">            writer.write(<span class="string">&quot;用户名：IsMe&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            <span class="comment">// 获取输入流，读取服务端的响应信息</span></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">            String message;</span><br><span class="line">            <span class="keyword">while</span> ((message = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务端 -&gt; 客户端：&quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">服务端启动，等待客户端连接</span><br><span class="line">客户端的数量：1</span><br><span class="line">当前客户端IP：127.0.0.1</span><br><span class="line">客户端 -&gt; 服务端：用户名：IsMe</span><br><span class="line">客户端的数量：2</span><br><span class="line">当前客户端IP：127.0.0.1</span><br><span class="line">客户端 -&gt; 服务端：用户名：IsMe</span><br><span class="line">客户端的数量：3</span><br><span class="line">当前客户端IP：127.0.0.1</span><br><span class="line">客户端 -&gt; 服务端：用户名：IsMe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务端 -&gt; 客户端：欢迎您！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread</title>
      <link href="/2020/02/04/java/java-base/Thread/"/>
      <url>/2020/02/04/java/java-base/Thread/</url>
      
        <content type="html"><![CDATA[<h1 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h1><p>线程的实现方式之一，继承Thread类。</p><p>在<code>java.lang</code>包中定义，继承Thread类必须重写run()方法。</p><p>创建好了自定义的线程类之后，就可以创建线程对象了，然后通过start()方法去启动线程。注意，不是调用run()方法启动线程，run()方法中只是定义需要执行的任务，如果调用run()方法，即相当于在主线程中执行run()方法，跟普通的方法调用没有任何区别，此时并不会创建一个新的线程来执行定义的任务。新线程创建的过程不会阻塞主线程的后续执行。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDP编程</title>
      <link href="/2020/02/04/java/java-base/UDP%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/02/04/java/java-base/UDP%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h1><blockquote><p>引用自<a href="https://blog.csdn.net/qq_23473123/article/details/51464272">JAVA Socket 实现 UDP 编程</a></p></blockquote><h2 id="UDP简介"><a href="#UDP简介" class="headerlink" title="UDP简介"></a>UDP简介</h2><p>UDP是User Datagram Protocal的简称，中文名是用户数据报协议，是OSI（Open System Interconnection，开方式系统互联）参考模型中一种<strong>无连接</strong>的传输层协议，提供面向事务的<strong>简单不可靠</strong>信息传送服务，IETF RFC 768是UDP的正式规范。UDP在IP报文的协议号是17。</p><p>UDP有 <strong>不提供数据包分组、组装</strong> 和 <strong>不能对数据博爱进行排序</strong> 的缺点，也就是说，当报文发送之后，<strong>是无法得知其是否安全完整到达的</strong>。UDP用来支持那些需要在计算机之间传输数据的网络应用。包括网络视频会议系统在内的众多C&#x2F;S模式的网络应用都需要使用UDP协议。UDP协议从问世至今已经被使用了很多年，虽然其最初的光彩已经被一些类似协议所掩盖，但是即使在今天UDP仍然不失为一种非常实用和可行的网络传输层协议。</p><p>与所熟知的TCP（传输控制协议）一样，UDP直接位于IP（网际协议）的顶层。根据OSI参考模型，UDP和TCP都属于传输层协议。<strong>UDP协议的主要作用是将网络数据流量压缩成数据包的形式</strong>。一个典型的数据包就是一个二进制数据的传输单位。每一个数据包的前8个字节用来包含头信息，剩余字节则用来包含具体的传输数据。</p><h2 id="UDP和TCP的优缺点"><a href="#UDP和TCP的优缺点" class="headerlink" title="UDP和TCP的优缺点"></a>UDP和TCP的优缺点</h2><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>优点</td><td><strong>可靠、稳定</strong>：<br>TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源。</td><td><strong>快、比TCP稍安全</strong>：<br>UDP没有TCP的握手、确认、窗口、重传、拥塞控制等机制，UDP是一个无状态的传输协议，所以它在传递数据时非常快。没有TCP的这些机制，UDP较TCP被攻击者利用的漏洞就要少一些。但UDP也是无法避免攻击的，比如UDP Flood攻击。</td></tr><tr><td>缺点</td><td><strong>慢、效率低、占用系统资源高、易被攻击</strong>：<br>TCP在传递数据之前，要先建连接，这会消耗时间，而且在数据传递时，确认机制、重传机制、拥塞机制等都会消耗大量的实践，而且要在每台设备上维护所有的传输连接，事实上，每个连接都会占用系统的CPU、内存等硬件资源。而且，因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用，实现DOS、DDOS、CC等攻击。</td><td><strong>不可靠、不稳定</strong>：<br>因为UDP没有TCP那些保证可靠性的机制，在数据传递时，如果网络质量不好，很容易就会丢包。</td></tr></tbody></table><ul><li><p>什么时候应该实用TCP？</p><p>  当对网络通讯质量有要求的时候，比如：整个数据要准确无误地传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。</p><p>  日常生活中，常见的使用TCP协议的应用有：浏览器，用的HTTP；FlashFXP，用的FTP；Outlook，用的POP、SMTP；Putty，用的Telnet、SSH；QQ文件传输。</p></li><li><p>什么时候应该使用UDP？</p><p>  当对网络通讯质量要求不高，要求网络通讯速度能尽量快，这时就可以使用UDP。</p><p>  日常生活中，常见使用UDP协议的应用有：QQ语音、QQ视频、TFTP等。</p></li><li><p>简单示例：</p></li></ul><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">2233</span>);</span><br><span class="line">        <span class="type">byte</span>[] receiveData = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">receivePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(receiveData, receiveData.length);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端已启用，等待客户端发送数据&quot;</span>);</span><br><span class="line">        <span class="comment">// 接收客户端发送的数据</span></span><br><span class="line">        socket.receive(receivePacket);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(receiveData, <span class="number">0</span>, receivePacket.getLength());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 -&gt; 服务端：&quot;</span> + info);</span><br><span class="line">        <span class="comment">// 向客户端响应数据</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> receivePacket.getAddress();</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> receivePacket.getPort();</span><br><span class="line">        <span class="type">byte</span>[] sendData = <span class="string">&quot;欢迎您！&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">sendPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(sendData, sendData.length, address, port);</span><br><span class="line">        socket.send(sendPacket);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpSocketClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 向服务端发送数据</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">2233</span>;</span><br><span class="line">        <span class="type">byte</span>[] sendData = <span class="string">&quot;用户名：IsMe&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">sendPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(sendData, sendData.length, address, port);</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        socket.send(sendPacket);</span><br><span class="line">        <span class="comment">// 接收服务端响应的数据</span></span><br><span class="line">        <span class="type">byte</span>[] receiveData = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">receivePacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(receiveData, receiveData.length);</span><br><span class="line">        socket.receive(receivePacket);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(receiveData, <span class="number">0</span>, receivePacket.getLength());</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 -&gt; 客户端：&quot;</span> + info);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端已启用，等待客户端发送数据</span><br><span class="line">客户端 -&gt; 服务端：用户名：IsMe</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务端 -&gt; 客户端：欢迎您！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 网络 </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Callable</title>
      <link href="/2020/02/04/java/java-base/callable/"/>
      <url>/2020/02/04/java/java-base/callable/</url>
      
        <content type="html"><![CDATA[<h1 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h1><p>在Java中，使用ExecutorService、Callable、Future可以实现有返回结果的多线程。</p><p>ExecutorService、Callable、Future都是属于Executor框架中的功能类。详细了解Executor框架可以参考<a href="http://www.iteye.com/topic/366591">java并发编程-Executor框架</a>。返回结果的线程是在JDK1.5中引入的新特征。</p><p>可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须实现Runnable接口。执行Callable任务后，可以获取一个Future对象，在该对象上调用get方法就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现有返回结果的多线程了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThreadSample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">taskSize</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 创建一个线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        <span class="comment">// 创建多个有返回值的任务</span></span><br><span class="line">        List&lt;Future&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; taskSize; i++) &#123;</span><br><span class="line">            <span class="type">Callable</span> <span class="variable">callable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>(i);</span><br><span class="line">            <span class="comment">// 执行任务并获取Future对象</span></span><br><span class="line">            <span class="type">Future</span> <span class="variable">future</span> <span class="operator">=</span> pool.submit(callable);</span><br><span class="line">            list.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (Future future : list) &#123;</span><br><span class="line">            <span class="comment">// 从Future对象获取任务的返回值</span></span><br><span class="line">            System.out.println(future.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序总的运行时间：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Object&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> taskNum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyCallable</span><span class="params">(<span class="type">int</span> taskNum)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.taskNum = taskNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;任务[&quot;</span> + taskNum + <span class="string">&quot;]耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;ms&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码说明：</p><p>Executors类提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。</p><ul><li><p><code>public static ExecutorService newFixedThreadPool(int nThreads);</code>：创建固定数目线程的线程池。</p></li><li><p><code>public static ExecutorService newCachedThreadPool();</code>：创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到线程池中。终止并从缓存中移除那些已经超过60秒钟未被使用的线程。</p></li><li><p><code>public static ExecutorService newSingleThreadExecutor();</code>：创建一个单线程化的Executor。</p></li><li><p><code>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize);</code>：创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p></li></ul><p>ExecutorService提供了submit()方法，传递一个Callable或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，则调用返回Future对象的get()方法，会阻塞直到计算完成。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package与jar包</title>
      <link href="/2020/02/04/java/java-base/package%E4%B8%8Ejar%E5%8C%85/"/>
      <url>/2020/02/04/java/java-base/package%E4%B8%8Ejar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="package与jar包"><a href="#package与jar包" class="headerlink" title="package与jar包"></a>package与jar包</h1><blockquote><p>引用自<a href="https://blog.csdn.net/wu_lai_314/article/details/8654461">JAVA 包与包之间访问（package）</a></p></blockquote><h2 id="package的用处"><a href="#package的用处" class="headerlink" title="package的用处"></a>package的用处</h2><p>Java中的package用处和特点有：</p><ul><li><p>对类文件进行分类管理。</p></li><li><p>给类提供多层命名空间。</p></li><li><p>写在程序文件的第一行。</p></li><li><p>类名的全称是：包名.类名</p></li><li><p>包也是一种封装形式。</p></li></ul><h2 id="package之间的访问"><a href="#package之间的访问" class="headerlink" title="package之间的访问"></a>package之间的访问</h2><p>包之间访问时，需要遵循以下规则：</p><ul><li><p>包与包之间进行访问，被访问的包中的类以及类中的成员，需要用public修饰。</p></li><li><p>不同包中的子类可以直接访问父类中被protected修饰的成员。</p></li><li><p>包与包之间可以使用的权限只有两种，public和protected。</p></li></ul><p>访问权限具体的对应关系如下表：</p><table><thead><tr><th>访问类-被访问类的修饰符-能否访问</th><th align="center">public</th><th align="center">protected</th><th align="center">default</th><th align="center">private</th></tr></thead><tbody><tr><td>同一类中</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>同一包中</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td>子类</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td>不同包类中</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="import导入package"><a href="#import导入package" class="headerlink" title="import导入package"></a>import导入package</h2><p>通过import可以简化类名的书写。包名一般使用url，因为url具有唯一性，例如：<code>package com.qq.demo;</code></p><p>导包的写法为：<code>import com.qq.demo.*;</code>，其中 <code>*</code> 是通配符，表示导入 com.qq.demo包下的所有类，开发中推荐使用导入具体类名的写法，需要哪个类就导入哪个类，可以节省内存开销，例如：<code>import com.qq.demo.ClassA;</code></p><p>当我们在一个类中导入了两个包，并且这两个包中有相同的类ClassA存在，那么在使用ClassA类的时候必须知名使用哪个包下的ClassA类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package1.<span class="type">ClassA</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">package1</span>.ClassA();</span><br><span class="line">package2.<span class="type">ClassA</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">package2</span>.ClassA();</span><br></pre></td></tr></table></figure><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>jar包是Java的压缩包，主要作用有：1、方便项目的携带；2、方便使用，只要在classpath中设置jar路径即可使用jar中的Java类。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2020/02/04/java/java-base/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2020/02/04/java/java-base/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><blockquote><p>引用自<a href="http://niceaz.com/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/">JAVA动态代理</a></p></blockquote><h2 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h2><p>为了使代理类和被代理类对第三方有相同的函数，代理类和被代理类一般实现一个公共的interface，该interface定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">add</span><span class="params">(Integer num1, Integer num2)</span>;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">minus</span><span class="params">(Integer num1, Integer num2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理类定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">add</span><span class="params">(Integer num1, Integer num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;in calculatorImpl, res: &quot;</span> + ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">minus</span><span class="params">(Integer num1, Integer num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> num1 - num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;int calculatorImpl, res: &quot;</span> + ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理需求：在add函数和minus函数调用前后分别输出before invocation和after invocation字样</p><h2 id="静态代理解决方案"><a href="#静态代理解决方案" class="headerlink" title="静态代理解决方案"></a>静态代理解决方案</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticCalculatorProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    Calculator obj;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StaticCalculatorProxy</span><span class="params">(Calculator obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">add</span><span class="params">(Integer num1, Integer num2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in StaticCalculatorProxy, before invocation&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ret</span> <span class="operator">=</span> obj.add(num1, num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;in StaticCalculatorProxy, after invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">minus</span><span class="params">(Integer num1, Integer num2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in StaticCalculatorProxy, before invocation&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ret</span> <span class="operator">=</span> obj.minus(num1, num2);</span><br><span class="line">        System.out.println(<span class="string">&quot;in StaticCalculatorProxy, after invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理解决方案"><a href="#动态代理解决方案" class="headerlink" title="动态代理解决方案"></a>动态代理解决方案</h2><p>首先编写实现InvocationHandler接口的类，用于请求转发，实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> Object obj; <span class="comment">//被代理类</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorHandler</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in calculatorhandler, before invocation&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> method.invoke(obj, args);  <span class="comment">//执行被代理类方法</span></span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">&quot;in calculationhandler, after invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CalculatorImpl</span> <span class="variable">calculatorImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>();<span class="comment">//被代理类</span></span><br><span class="line"><span class="type">CalculatorHandler</span> <span class="variable">calculatorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorHandler</span>(calculatorImpl);</span><br><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> (Calculator) Proxy.newProxyInstance(calculatorImpl.getClass().getClassLoader(), calculatorImpl.getClass().getInterfaces(), calculatorHandler);</span><br><span class="line">System.out.println(calculator.add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">System.out.println(calculator.minus(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>无论calculator中包含多少函数，动态代理只需实现一次，实际工程中，System.out.println(“in calculatorhandler, before invocation”)可能是加缓存，打日志等操作</p><h2 id="动态代理如何工作的"><a href="#动态代理如何工作的" class="headerlink" title="动态代理如何工作的"></a>动态代理如何工作的</h2><p>为了搞清楚动态代理如何工作，首先看看生成的动态代理的代码是什么，借助[1]中ProxyUtil代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtils</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save proxy class to path</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path path to save proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxyClassName name of proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces interfaces of proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">saveProxyClass</span><span class="params">(String path, String proxyClassName, Class[] interfaces)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (proxyClassName == <span class="literal">null</span> || path == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// get byte of proxy class</span></span><br><span class="line">        <span class="type">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyClassName, interfaces);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">            out.write(classFile);</span><br><span class="line">            out.flush();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到了生成的动态代理代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationhandler)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationhandler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                obj</span><br><span class="line">            &#125;)).booleanValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">minus</span><span class="params">(Integer integer, Integer integer1)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                integer, integer1</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">add</span><span class="params">(Integer integer, Integer integer1)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                integer, integer1</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>)).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;com.langrx.mq.Calculator&quot;</span>).getMethod(<span class="string">&quot;minus&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>), Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.langrx.mq.Calculator&quot;</span>).getMethod(<span class="string">&quot;add&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>), Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchMethodException nosuchmethodexception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(nosuchmethodexception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(ClassNotFoundException classnotfoundexception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classnotfoundexception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先分析静态代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">m4 = Class.forName(<span class="string">&quot;com.langrx.mq.Calculator&quot;</span>).getMethod(<span class="string">&quot;minus&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>), Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">m3 = Class.forName(<span class="string">&quot;com.langrx.mq.Calculator&quot;</span>).getMethod(<span class="string">&quot;add&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>), Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>)</span><br><span class="line">                &#125;);</span><br><span class="line">m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>得到公共interface中的add函数和minus函数对应的Method方法，同事也得到了equals，toString，hashCode三个函数的Method，所以调用代理类的equals，toString，hashCode也是要执行被代理类的方法的，知道这点很有必要</p><p>构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $Proxy0(InvocationHandler invocationhandler)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationhandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化了内部的InvocationHandler变量，也就是下文的super.h</p><p>以add为例看一下请求的转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">add</span><span class="params">(Integer integer, Integer integer1)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">            integer, integer1</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super.h.invoke就是invocationhandler.invoke就是传入的CalculatorHandler中实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;in calculatorhandler, before invocation&quot;</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> method.invoke(obj, args);  <span class="comment">//执行被代理类方法</span></span><br><span class="line">     </span><br><span class="line">    System.out.println(<span class="string">&quot;in calculationhandler, after invocation&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行的就是CalculatorHandler对应的invoke函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> (Calculator) Proxy.newProxyInstance(calculatorImpl.getClass().getClassLoader(), calculatorImpl.getClass().getInterfaces(), calculatorHandler);</span><br></pre></td></tr></table></figure><p>生成动态代理的过程步骤如下[2]：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InvocationHandlerImpl 实现了 InvocationHandler 接口，并能实现方法调用从代理类到委托类的分派转发</span></span><br><span class="line"><span class="comment">// 其内部通常包含指向委托类实例的引用，用于真正执行分派转发过来的方法调用</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandlerImpl</span>(..); </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 通过 Proxy 为包括 Interface 接口在内的一组接口动态创建代理类的类对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Proxy.getProxyClass(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Interface.class, ... &#125;); </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 通过反射从生成的类对象获得构造函数对象</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; InvocationHandler.class &#125;); </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 通过构造函数对象创建动态代理类实例</span></span><br><span class="line"><span class="type">Interface</span> <span class="variable">Proxy</span> <span class="operator">=</span> (Interface)constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; handler &#125;);</span><br></pre></td></tr></table></figure><p>Proxy.newProxyInstance帮我们做了2，3，4步，直接返回给我们一个动态代理对象，代理对象最终执行InvocationHandler中invoke函数。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩流</title>
      <link href="/2020/02/04/java/java-base/%E5%8E%8B%E7%BC%A9%E6%B5%81/"/>
      <url>/2020/02/04/java/java-base/%E5%8E%8B%E7%BC%A9%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="压缩流"><a href="#压缩流" class="headerlink" title="压缩流"></a>压缩流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testZipFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="type">File</span> <span class="variable">zipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(ZIP_FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zipOs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipFile));</span><br><span class="line">        zipOs.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(file.getName()));</span><br><span class="line">        zipOs.setComment(<span class="string">&quot;Test ZIP&quot;</span>);</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span> ((temp = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            zipOs.write(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        zipOs.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;原始文件大小：&quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;压缩文件大小：&quot;</span> + zipFile.length());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原始文件大小：171953</span><br><span class="line">压缩文件大小：55905</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本数据类型</title>
      <link href="/2020/02/04/java/java-base/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/02/04/java/java-base/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><blockquote><p>引用自<a href="http://www.runoob.com/java/java-basic-datatypes.html">Java 基本数据类型</a></p></blockquote><p>变量就是申请内存来储存值。当创建变量得时候，需要在内存中申请空间。内存管理系统根据变量的类型为其分配存储空间，分配的空间只能用来储存该类型数据。</p><p>Java中有两大数据类型：内置数据类型、引用数据类型。</p><h2 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h2><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><table><thead><tr><th>类型</th><th>长度</th><th>最小值</th><th>最大值</th><th>默认值</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-128（-2^7）</td><td>127（2^7 - 1）</td><td>0</td><td>byte a &#x3D; 100, byte b &#x3D; -50</td><td>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一</td></tr><tr><td>short</td><td>16位</td><td>-2^15</td><td>2^15 - 1</td><td>0</td><td>short s &#x3D; 1000, short r &#x3D; -20000</td><td>Short 数据类型也可以像 byte 那样节省空间，一个short变量是int型变量所占空间的二分之一</td></tr><tr><td>int</td><td>32位</td><td>-2^31</td><td>2^31 - 1</td><td>0</td><td>int a &#x3D; 100000, int b &#x3D; -200000</td><td>一般地整型变量默认为 int 类型</td></tr><tr><td>long</td><td>64位</td><td>-2^63</td><td>2^63 -1</td><td>0L</td><td>long a &#x3D; 1000000L, long b &#x3D; -2000000L</td><td>主要使用在需要比较大整数的系统上</td></tr><tr><td>float</td><td>32位、单精度、符合IEEE 754标准的浮点数</td><td></td><td></td><td>0.0f</td><td>float f1 &#x3D; 234.5f</td><td>float 在储存大型浮点数组的时候可节省内存空间，浮点数不能用来表示精确的值，如货币</td></tr><tr><td>double</td><td>64位、双精度、符合IEEE 754标准的浮点数</td><td></td><td></td><td>0.0d</td><td>doble d1 &#x3D; 123.4</td><td>浮点数的默认类型为double类型，double类型同样不能表示精确的值，如货币</td></tr><tr><td>boolean</td><td>1位</td><td></td><td></td><td>false</td><td>boolean isReal &#x3D; true</td><td>boolean类型只有两个取值：true 和 false；该类型只作为一种标志来记录 true&#x2F;false 情况</td></tr><tr><td>char</td><td>16位Unicode字符</td><td>\u0000（0）</td><td>\uffff（65,535）</td><td>无</td><td>char letter &#x3D; ‘A’</td><td>char 数据类型可以储存任何字符</td></tr></tbody></table><p>float和double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是<code>3.14 × 10^3 = 3140</code>，3.14E-3 就是 <code>3.14 x 10^-3 = 0.00314</code>。</p><p>实际上，Java中还存在一种基本类型void，它也有对应的包装类 <code>java.lang.Void</code>，不过我么无法直接对它们进行操作。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li><p>Java中的引用类型变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如Employee、Puppy等。</p></li><li><p>对象、数组都是引用数据类型。</p></li><li><p>所有引用类型的默认值都是null。</p></li><li><p>一个引用变量可以用来引用任何与之兼容的类型。</p></li><li><p>示例：Site site &#x3D; new Site(“<a href="http://xxxx.com/&quot;">http://xxxx.com/&quot;</a>)</p></li></ul><h2 id="Java常量"><a href="#Java常量" class="headerlink" title="Java常量"></a>Java常量</h2><p>常量在程序运行时是不能被修改的。Java中使用 <code>final</code> 关键字来修饰常量，声明方式和变量类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br></pre></td></tr></table></figure><h2 id="十进制、16进制、8进制"><a href="#十进制、16进制、8进制" class="headerlink" title="十进制、16进制、8进制"></a>十进制、16进制、8进制</h2><p>byte、int、long、short都可以用十进制、16进制和8进制的方式来表示。前缀 <code>0</code> 表示8进制，前缀 <code>0x</code> 表示16进制。</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th>符号</th><th>字符含义</th></tr></thead><tbody><tr><td>\n</td><td>换行（0x0a）</td></tr><tr><td>\r</td><td>回车（0x0d）</td></tr><tr><td>\f</td><td>换页符（0x0c）</td></tr><tr><td>\b</td><td>退格（0x08）</td></tr><tr><td>\0</td><td>空字符（0x20）</td></tr><tr><td>\s</td><td>字符串</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\ddd</td><td>八进制字符（ddd）</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符（xxxx）</td></tr></tbody></table><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>运算中，不同类型的数据先转化为同一类型，然后进行运算。</p><p>转换从低级到高级：<code>byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double</code></p><p>数据类型转换必须满足如下规则：</p><ul><li><p>不能对boolean类型进行类型转换。</p></li><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或者损失精度。</p></li><li><p>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入。</p></li></ul><p>自动类型转换：必须满足转换前的数据类型的位数要低于转换后的数据类型。例如：short数据类型的位数为16位，就可以自动转换成位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><p>强制类型转换：1、转换的数据类型必须是兼容的；2、格式：(type) value。type是要强制转换类型后的目标数据类型。</p><p>隐性强制类型转换：1、整数的默认类型是int；2、浮点型不存在这种情况，因为在定义float类型时必须在数字后面跟上F或者f。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流</title>
      <link href="/2020/02/04/java/java-base/%E5%AD%97%E7%AC%A6%E6%B5%81/"/>
      <url>/2020/02/04/java/java-base/%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><ul><li><p>初始化变量</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILENAME</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="向文件中写入数据"><a href="#向文件中写入数据" class="headerlink" title="向文件中写入数据"></a>向文件中写入数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWriteFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//如果是向文件追加内容，则改为 new FileWriter(file, true)</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">        writer.write(txt);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从文件中读取内容"><a href="#从文件中读取内容" class="headerlink" title="从文件中读取内容"></a>从文件中读取内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReadFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> reader.read(chars);</span><br><span class="line">        reader.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取长度：&quot;</span> + length);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReadFileUnknownSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span> ((temp = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            chars[count++] = (<span class="type">char</span>) temp;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流</title>
      <link href="/2020/02/04/java/java-base/%E5%AD%97%E8%8A%82%E6%B5%81/"/>
      <url>/2020/02/04/java/java-base/%E5%AD%97%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul><li><p>初始化变量</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILENAME</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="向文件中写入字符串"><a href="#向文件中写入字符串" class="headerlink" title="向文件中写入字符串"></a>向文件中写入字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWriteFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//默认覆盖原内容，不向文件中追加新内容</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;你好，世界！&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = txt.getBytes();</span><br><span class="line">        os.write(bytes);</span><br><span class="line">        os.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWriteFileWithByte</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//向文件中追加内容</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">txt</span> <span class="operator">=</span> <span class="string">&quot;你好，世界！&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = txt.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            os.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReadFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> is.read(bytes);</span><br><span class="line">        is.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取长度：&quot;</span> + length);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReadFileUnknownSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//注意byte数组的初始大小，如果读取的数据大小超出时会报错</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="comment">//只有当读到文件末尾的时候会返回-1</span></span><br><span class="line">        <span class="keyword">while</span>((temp = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bytes[count++] = (<span class="type">byte</span>) temp;</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化与反序列化</title>
      <link href="/2020/02/04/java/java-base/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2020/02/04/java/java-base/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><blockquote><p>引用自<a href="http://www.importnew.com/18024.html">深入分析Java的序列化与反序列化</a>、<a href="http://www.importnew.com/17964.html">Java对象的序列化与反序列化</a></p></blockquote><h2 id="序列化与反序列化-1"><a href="#序列化与反序列化-1" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化（Serialization）是将对象的状态信息转换为可以存储或传输的形式的过程。一般将一个对象存储至一个存储媒介，例如档案或是记忆体缓冲等。在网络传输过程中，可以是字节或是XML等格式。而通过字节或XML编码格式可以还原完全相等的对象，这个还原的过程称为反序列化。</p><h2 id="Java对象的序列化与反序列化"><a href="#Java对象的序列化与反序列化" class="headerlink" title="Java对象的序列化与反序列化"></a>Java对象的序列化与反序列化</h2><p>在Java中，我们可以通过多种方式来创建对象，并且只要对象没有被回收我们都可以复用该对象。但是，我们创建出来的这些Java对象都是存在于JVM的堆内存中。只有JVM处于运行状态的收，这些对象才可能存在。一旦JVM停止运行，这些对象的状态也就随之丢失了。</p><p>在真实的应用场景中，我们需要将这些对象持久化下来，并且能够在需要的时候把对象重新读取出来。Java的对象序列化可以帮助我们实现该功能。</p><p>对象序列化机制（object serialization）是Java语言内建的一种对象持久化方式，通过对象序列化，可以把对象的状态保存为字节数组，并且可以在有需要的时候将这个字节数组通过反序列化的方式再转换成对象。对象序列化可以很容易地在JVM中的活动对象和字节数组（流）之间进行转换。</p><p>在Java中，对象的序列化和反序列化被广泛应用到RMI（远程方法调用）及网络传输中。</p><h2 id="相关接口及类"><a href="#相关接口及类" class="headerlink" title="相关接口及类"></a>相关接口及类</h2><p>Java为了方便开发人员将Java对象进行序列化及反序列化提供了一套方便的API来支持。其中包括以下接口和类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.io.Serializable</span><br><span class="line">java.io.Externalizable</span><br><span class="line">ObjectOutput</span><br><span class="line">ObjectInput</span><br><span class="line">ObjectOutputStream</span><br><span class="line">ObjectInputStream</span><br></pre></td></tr></table></figure><h2 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h2><p>类通过实现<code>java.io.Serializable</code>接口以启用其序列化功能。为实现此接口的类将无法使其任何状态序列化或反序列化。可序列化类的所有子类型本身都是可序列化的。<strong>序列化接口没有方法或字段，仅用于标识可序列化的语义</strong>。</p><p>当试图对一个对象进行序列化的时候，如果遇到不支持Serializable接口的对象的情况下，将抛出 <code>NotSerializableException</code>。</p><p>如果要序列化的类有父类，想同时将父类中定义过的变量持久化下来，那么父类也应该继承<code>java.io.Serializable</code>接口。</p><h2 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h2><p>除了Serializable之外，Java中还提供了另一个序列化接口<code>Externalizalbe</code>。</p><p>Externalizable继承了Serializable，该接口中定义了两个抽象方法：<code>writeExternal()</code> 与 <code>readExternal()</code>。当使用Externalizable接口来进行序列化与反序列化的时候需要开发人员重写<code>wirteExernal()</code> 与 <code>readExternal()</code>方法。在使用Externalizable进行序列化的时候，在读取对象时，会调用被序列化类的无参构造方法去创建一个新的对象，然后再将被保存对象的字段的值分别填充到新对象中。所以，实现Externalizable接口的类必须要提供一个public的无参构造方法。</p><h2 id="ObjectOutput和ObjectInput接口"><a href="#ObjectOutput和ObjectInput接口" class="headerlink" title="ObjectOutput和ObjectInput接口"></a>ObjectOutput和ObjectInput接口</h2><p>ObjectInput接口扩展自DataInput接口以包含对象的读操作。</p><blockquote><p>DataInput接口用于从二进制流中读取字节，并根据所有Java基本类型数据进行重构。同时还提供根据UTF-8修改版格式的数据重构String的工具。</p></blockquote><blockquote><p>对于此接口中的所有数据读取例程来说，如果再读取所需字节数之前已经到达文件末尾（end of file），则将抛出EOFException（IOException的一种）。如果因为到达文件末尾以外的其它原因无法读取字节，则将抛出IOException而不是EOFException。尤其是，再输入流已关闭的情况下，将抛出IOException。</p></blockquote><p>ObjectOutput扩展DataOutput接口以包含对象的写入操作。</p><blockquote><p>DataOutput接口用于将数据从任意Java基本类型转换为一系列字节，并将这些字节写入二进制流。同时还提供了一个将String转换成UTF-8修改版格式并写入所得到的系列字节的工具。</p></blockquote><blockquote><p>对于此接口中写入字节的所有方法，如果由于某种原因无法写入某个字节，将抛出IOException。</p></blockquote><h2 id="ObjectOutputStream类和ObjectInputStream类"><a href="#ObjectOutputStream类和ObjectInputStream类" class="headerlink" title="ObjectOutputStream类和ObjectInputStream类"></a>ObjectOutputStream类和ObjectInputStream类</h2><p>在Java中，一般使用ObjectOutputStream的<code>writeObject</code>方法把一个对象进行持久化。再使用ObjectInputStream的<code>readObject</code>方法从持久化存储中把对象读取出来。</p><h2 id="transient关键字"><a href="#transient关键字" class="headerlink" title="transient关键字"></a>transient关键字</h2><p>transient关键字的作用时控制变量的序列化，再变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient变量的值被设为初始值，如 int 型的是0，引用类型是 null。</p><h2 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h2><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化ID是否一致（即类变量 <code>private static final long serialVersionUID</code>）。</p><p>序列化ID在常见的IDE（如Eclipse、IDEA）中提供了两种生成策略，一个是固定的1L，一个是随机生成的一个不重复的long类型数据（实际上是使用JDK工具生成），在这里有一个建议，如果没有特殊需求，就是用默认的1L就可以，这样可以确保代码一致时反序列化成功。那么随机生成的序列化ID有什么作用呢，有些时候，通过改变序列化ID可以用来限制某些用户的使用。</p><h2 id="自定义序列化策略"><a href="#自定义序列化策略" class="headerlink" title="自定义序列化策略"></a>自定义序列化策略</h2><p>在序列化过程中，如果被序列化的类中定义了<code>writeObject</code>和<code>readObject</code>方法，虚拟机会试图调用对象类里的<code>writeObject</code>和<code>readObject</code>方法，进行用户自定义的序列化和反序列化。</p><p>如果没有这样的方法，则默认调用的时ObjectOutputStream的<code>defaultWriteObject</code>方法以及ObjectInputStream的<code>defaultReadObject</code>方法。</p><p>用户自定义的<code>writeObject</code>和<code>readObject</code>方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。</p><p>在使用ObjectOutputStream的<code>writeObject</code>方法和ObjectInputStream的<code>readObject</code>方法时，会通过反射的方式调用。<code>writeObject</code>方法会对类型进行检查，要求被序列化的类必须属于Enum、Array和Serializable类型中的任何一种。</p><p>类型检查的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NotSerializableException</span>(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>writeObject</code>的调用栈为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writeObject -&gt; writeObject0 -&gt; writeOrdinaryObject -&gt; writeSerialData -&gt; invokeWriteObject</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 序列化 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/2020/02/04/java/java-base/%E5%BC%82%E5%B8%B8/"/>
      <url>/2020/02/04/java/java-base/%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p><p>异常发生的原因由很多，通常包含以下几类：</p><ul><li><p>用户输入了非法数据。</p></li><li><p>要打开的文件不存在。</p></li><li><p>网络通信时连接中断，或者JVM内存溢出。</p></li></ul><p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。要理解Java异常处理是如何工作的，需要掌握以下三种类型的异常：</p><ul><li><p><strong>检查性异常</strong>：最具代表的检查性异常是用户的错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件是，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p></li><li><p><strong>运行时异常</strong>：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p></li><li><p><strong>错误</strong>：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译时是检查不到的。</p></li></ul><p>图中红色部分为受检查异常。它们必须被捕获，或者在方法中声明为抛出该异常。</p><p><img src="/images/Java%E5%BC%82%E5%B8%B8/Java%E5%BC%82%E5%B8%B8%E7%B1%BB.png" alt="Java异常类"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提供api方法取得类的结构</title>
      <link href="/2020/02/04/java/java-base/%E6%8F%90%E4%BE%9Bapi%E6%96%B9%E6%B3%95%E5%8F%96%E5%BE%97%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/04/java/java-base/%E6%8F%90%E4%BE%9Bapi%E6%96%B9%E6%B3%95%E5%8F%96%E5%BE%97%E7%B1%BB%E7%9A%84%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="提供api方法取得类的结构"><a href="#提供api方法取得类的结构" class="headerlink" title="提供api方法取得类的结构"></a>提供api方法取得类的结构</h1><blockquote><p>引用自<a href="http://www.importnew.com/17616.html">Java 反射</a></p></blockquote><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><p>动态语言，是指程序在运行时可以改变其结构：新的函数可以被引进，已有的函数可以被删除等在结构上的变化。比如众所周知的ECMAScript(JavaScript)便是一个动态语言。除此之外如Ruby、Python等也都属于动态语言，而C、C++等语言则不属于动态语言。(引自: 百度百科)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> execString = <span class="string">&quot;alert(Math.floor(Math.random()*10));&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(execString);</span><br></pre></td></tr></table></figure><h2 id="Class反射机制"><a href="#Class反射机制" class="headerlink" title="Class反射机制"></a>Class反射机制</h2><ul><li><p>指的是可以于运行时加载,探知和使用编译期间完全未知的类。</p></li><li><p>程序在运行状态中, 可以动态加载一个只有名称的类, 对于任意一个已经加载的类,都能够知道这个类的所有属性和方法; 对于任意一个对象,都能调用他的任意一个方法和属性。</p></li><li><p>加载完类之后, 在堆内存中会产生一个Class类型的对象(一个类只有一个Class对象), 这个对象包含了完整的类的结构信息,而且这个Class对象就像一面镜子,透过这个镜子看到类的结构,所以被称之为：反射。</p><blockquote><p>Instances of the class Class represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a Class object that is shared by all arrays with the same element type and number of dimensions(维度). The primitive Java types (boolean, byte, char, short, int, long, float, anddouble), and the keyword void are also represented as Class objects.</p></blockquote></li><li><p>每个类被加载进入内存之后,系统就会为该类生成一个对应的java.lang.Class对象,通过该Class对象就可以访问到JVM中的这个类。</p></li></ul><h3 id="Class对象的获取"><a href="#Class对象的获取" class="headerlink" title="Class对象的获取"></a>Class对象的获取</h3><ul><li><p>对象的getClass()方法;</p></li><li><p>类的.class(最安全&#x2F;性能最好)属性;</p></li><li><p>运用Class.forName(String className)动态加载类,className需要是类的全限定名(最常用).</p></li></ul><h3 id="从Class中获取信息"><a href="#从Class中获取信息" class="headerlink" title="从Class中获取信息"></a>从Class中获取信息</h3><p>Class类提供了大量的实例方法来获取该Class对象所对应的详细信息,Class类大致包含如下方法,其中每个方法都包含多个重载版本,因此我们只是做简单的介绍,详细请参考<a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html">JDK文档</a>。</p><ul><li>获取类的信息</li></ul><table><thead><tr><th>获取的内容</th><th>方法签名</th></tr></thead><tbody><tr><td>构造器</td><td>Constructor‹T› getConstructor(Class‹?›… parameterTypes)</td></tr><tr><td>包含的方法</td><td>Method getMethod(String name, Class‹?›… parameterTypes)</td></tr><tr><td>包含的属性</td><td>Field getField(String name)</td></tr><tr><td>包含的Annotation</td><td>‹A extends Annotation› A getAnnotation(Class‹A› annotationClass)</td></tr><tr><td>内部类</td><td>Class‹?›[] getDeclaredClasses()</td></tr><tr><td>外部类</td><td>Class‹?› getDeclaringClass()</td></tr><tr><td>所实现的接口</td><td>Class‹?›[] getInterfaces()</td></tr><tr><td>修饰符</td><td>int getModifiers()</td></tr><tr><td>所在包</td><td>Package getPackage()</td></tr><tr><td>类名</td><td>String getName()</td></tr><tr><td>简称</td><td>String getSimpleName()</td></tr></tbody></table><ul><li>一些判断类本身信息的方法</li></ul><table><thead><tr><th>判断内容</th><th>方法签名</th></tr></thead><tbody><tr><td>注解类型?</td><td>boolean isAnnotation()</td></tr><tr><td>使用了该Annotation修饰?</td><td>boolean isAnnotationPresent(Class‹? extends Annotation› annotationClass)</td></tr><tr><td>匿名类?</td><td>boolean isAnonymousClass()</td></tr><tr><td>数组?</td><td>boolean isArray()</td></tr><tr><td>枚举?</td><td>boolean isEnum()</td></tr><tr><td>原始类型?</td><td>boolean isPrimitive()</td></tr><tr><td>接口?</td><td>boolean isInterface()</td></tr><tr><td>obj是否是该Class的实例</td><td>boolean isInstance(Object obj)</td></tr></tbody></table><ul><li>使用反射生成并操作对象</li></ul><p>Method Constructor Field这些类都实现了java.lang.reflect.Member接口,程序可以通过Method对象来执行相应的方法,通过Constructor对象来调用对应的构造器创建实例,通过Filed对象直接访问和修改对象的成员变量值。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>通过反射来生成对象的方式有两种:</p><ul><li><p>使用Class对象的newInstance()方法来创建该Class对象对应类的实例(这种方式要求该Class对象的对应类有默认构造器).</p></li><li><p>先使用Class对象获取指定的Constructor对象, 再调用Constructor对象的newInstance()方法来创建该Class对象对应类的实例(通过这种方式可以选择指定的构造器来创建实例).</p></li></ul><h2 id="访问成员变量"><a href="#访问成员变量" class="headerlink" title="访问成员变量"></a>访问成员变量</h2><p>通过Class对象的的getField()方法可以获取该类所包含的全部或指定的成员变量Field,Filed提供了如下两组方法来读取和设置成员变量值.</p><ul><li><p>getXxx(Object obj): 获取obj对象的该成员变量的值, 此处的Xxx对应8中基本类型,如果该成员变量的类型是引用类型, 则取消get后面的Xxx;</p></li><li><p>setXxx(Object obj, Xxx val): 将obj对象的该成员变量值设置成val值.此处的Xxx对应8种基本类型, 如果该成员类型是引用类型, 则取消set后面的Xxx;</p></li></ul><blockquote><p>getDeclaredField方法可以获取所有的成员变量，包括private修饰的成员变量。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">client</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">idFiled</span> <span class="operator">=</span> User.class.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        setAccessible(idFiled);</span><br><span class="line">        idFiled.setInt(user, <span class="number">46</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> User.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setAccessible(nameFiled);</span><br><span class="line">        nameFiled.set(user, <span class="string">&quot;feiqing&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Field</span> <span class="variable">passwordField</span> <span class="operator">=</span> User.class.getDeclaredField(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        setAccessible(passwordField);</span><br><span class="line">        passwordField.set(user, <span class="string">&quot;ICy5YqxZB1uWSwcVLSNLcA==&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(AccessibleObject object)</span> &#123;</span><br><span class="line">        object.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用反射获取泛型信息"><a href="#使用反射获取泛型信息" class="headerlink" title="使用反射获取泛型信息"></a>使用反射获取泛型信息</h2><p>为了通过反射操作泛型以迎合实际开发的需要, Java新增了java.lang.reflect.ParameterizedType java.lang.reflect.GenericArrayTypejava.lang.reflect.TypeVariable java.lang.reflect.WildcardType几种类型来代表不能归一到Class类型但是又和原始类型同样重要的类型.</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>ParameterizedType</td><td>一种参数化类型, 比如Collection‹String›</td></tr><tr><td>GenericArrayType</td><td>一种元素类型是参数化类型或者类型变量的数组类型</td></tr><tr><td>TypeVariable</td><td>各种类型变量的公共接口</td></tr><tr><td>WildcardType</td><td>一种通配符类型表达式, 如? ? extends Number ? super Integer</td></tr></tbody></table><p>其中, 我们可以使用ParameterizedType来获取泛型信息.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; objectMap;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Map&lt;String, User&gt; map, String string)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Map&lt;User, Bean&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试属性类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFieldType</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Client.class.getDeclaredField(<span class="string">&quot;objectMap&quot;</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">gType</span> <span class="operator">=</span> field.getGenericType();</span><br><span class="line">        <span class="comment">// 打印type与generic type的区别</span></span><br><span class="line">        System.out.println(field.getType());</span><br><span class="line">        System.out.println(gType);</span><br><span class="line">        System.out.println(<span class="string">&quot;**************&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (gType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            <span class="type">ParameterizedType</span> <span class="variable">pType</span> <span class="operator">=</span> (ParameterizedType) gType;</span><br><span class="line">            Type[] types = pType.getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type type : types) &#123;</span><br><span class="line">                System.out.println(type.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试参数类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParamType</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">testMethod</span> <span class="operator">=</span> Client.class.getMethod(<span class="string">&quot;test&quot;</span>, Map.class, String.class);</span><br><span class="line">        Type[] parameterTypes = testMethod.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type type : parameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;type -&gt; &quot;</span> + type);</span><br><span class="line">            <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                Type[] actualTypes = ((ParameterizedType) type).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualType : actualTypes) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;\tactual type -&gt; &quot;</span> + actualType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试返回值类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnType</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">testMethod</span> <span class="operator">=</span> Client.class.getMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">returnType</span> <span class="operator">=</span> testMethod.getGenericReturnType();</span><br><span class="line">        System.out.println(<span class="string">&quot;return type -&gt; &quot;</span> + returnType);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            Type[] actualTypes = ((ParameterizedType) returnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualType : actualTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\tactual type -&gt; &quot;</span> + actualType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用反射获取注解"><a href="#使用反射获取注解" class="headerlink" title="使用反射获取注解"></a>使用反射获取注解</h2><blockquote><p>详情参考博客<a href="http://blog.csdn.net/zjf280441589/article/details/50444343">Java注解实践</a>。</p></blockquote><h2 id="反射在JVM中的实现"><a href="#反射在JVM中的实现" class="headerlink" title="反射在JVM中的实现"></a>反射在JVM中的实现</h2><blockquote><p>详情参考<a href="http://www.importnew.com/21211.html">Java反射在JVM的实现</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/02/04/java/java-base/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/02/04/java/java-base/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="Java中的正则表达式"><a href="#Java中的正则表达式" class="headerlink" title="Java中的正则表达式"></a>Java中的正则表达式</h2><p>正则表达式定义了字符串的模式，可以用来搜索、编辑或处理文本。</p><p>在Sun的Java JDK 1.4版本中，Java自带了支持正则表达式的包，位于<code>java.util.regex</code>，该包主要包括以下三个类：</p><ul><li><p><strong>Pattern</strong>类：Pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，必须要调用其公共静态的compile方法，它返回一个Pattern对象。该方法接收一个正则表达式作为它的第一个参数。</p></li><li><p><strong>Matcher</strong>类：Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法，需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p></li><li><p><strong>PatternSyntaxException</strong>类：PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><p>Matcher类的常用方法：</p><ul><li><p>matches()：返回整个目标字符串与Pattern是否匹配</p></li><li><p>find()：返回与Pattern匹配的下一个子串</p></li><li><p>group()：返回上一次与Pattern匹配的子串中的内容。group是针对（）来说的，group（0）就是指的整个串，group（1） 指的是第一个括号里的东西，group（2）指的第二个括号里的东西</p></li><li><p>start()：返回上一次与Pattern匹配的子串在目标字符串中的开始位置</p></li><li><p>end()：返回上一次与Pattern匹配的子串在目标字符串中的结束位置加1</p></li></ul><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配\n。“\n”匹配换行符。序列“\”匹配“\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，“zo”以及“zoo”。</em>等价于{0,}</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。</td></tr><tr><td>{n}</td><td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td></tr><tr><td>{n,}</td><td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td></tr><tr><td>{n,m}</td><td>m和n均为非负整数，其中n&lt;&#x3D;m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>x|y</td><td>匹配x或y。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td></tr><tr><td>.</td><td>可以匹配任何字符</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于[^0-9]</td></tr><tr><td>\s</td><td>匹配所有的空白字符，包括空格、制表符、换页符、换行符、回车符 等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配所有的非空白字符</td></tr></tbody></table><p>更多内容参考：<a href="http://www.runoob.com/java/java-regular-expressions.html">Java 正则表达式</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/2020/02/04/java/java-base/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/02/04/java/java-base/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>Java作为一种面向对象语言，支持以下基本概念：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多态、继承、封装、抽象、类、对象、实例、方法、重载</span><br></pre></td></tr></table></figure><p>类：类是一个模板，它描述一类对象的行为和状态。</p><p>对象：对象是类的一个实例，有状态和行为。</p><h2 id="Java中的对象"><a href="#Java中的对象" class="headerlink" title="Java中的对象"></a>Java中的对象</h2><p>对象的状态就是属性，行为通过方法体现。方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p><h2 id="Java中的类"><a href="#Java中的类" class="headerlink" title="Java中的类"></a>Java中的类</h2><p>类可以看成是创建Java对象的模板。一个类可以包含以下类型变量：</p><ul><li><p>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li><p>成员变量：成员变量是定义在类中、方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</p></li><li><p>类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。</p></li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器会为该类提供一个默认构造方法。在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。类的构造方法中可以调用该类的另外一个构造方法。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程优先级</title>
      <link href="/2020/02/04/java/java-base/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2020/02/04/java/java-base/%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。</p><p>设置线程优先级有助于帮”线程规划器”确定下一次选择哪一个线程来优先执行。</p><p>设置线程的优先级使用setPriority()方法，此方法在JDK的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span> &#123;</span><br><span class="line">    ThreadGroup g;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((g = getThreadGroup()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">            newPriority = g.getMaxPriority();</span><br><span class="line">        &#125;</span><br><span class="line">        setPriority0(priority = newPriority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，线程的优先级分为1~10这10个等级，如果小于1或者大于10，则抛出IllegalArgumentException异常。</p><p>Thread类中有三个常量预置定义优先级的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_PRIORITY</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NORM_PRIORITY</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_PRIORITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>线程优先级特性：</p><ul><li><p>继承性：比如A线程启动B线程，则B线程的优先级与A是一样的。</p></li><li><p>规则性：高优先级的线程总是大部分先执行完，但不代表高优先级线程全部先执行完。</p></li><li><p>随机性：优先级较高的线程不一定每一次都先执行完。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程状态</title>
      <link href="/2020/02/04/java/java-base/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2020/02/04/java/java-base/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><blockquote><p>引用自<a href="http://www.importnew.com/21136.html">Java 多线程干货系列（1）</a></p></blockquote><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><ol><li><p><strong>线程</strong>：进程中负责程序执行的执行单元。线程本身依靠程序进行运行。线程是程序中的顺序控制流，只能使用分配给程序的资源和环境。</p></li><li><p><strong>进程</strong>：执行中的程序。一个进程至少包含一个线程。</p></li><li><p><strong>单线程</strong>：程序中只存在一个线程，实际上主方法就是一个主线程。</p></li><li><p><strong>多线程</strong>：在一个程序中运行多个任务，目的是更好地使用CPU资源。</p></li></ol><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程的状态有以下几种：</p><ul><li><p>创建状态（new）：准备好了一个多线程的对象</p></li><li><p>就绪状态（runnable）：调用了start()方法，等待CPU进行调度</p></li><li><p>运行状态（running）：执行run()方法</p></li><li><p>阻塞状态（blocked）：暂时停止执行，可能将资源交给其它线程使用</p></li><li><p>终止状态（dead）：线程销毁</p></li></ul><p>当需要新起一个线程来执行某个子任务时，就创建了一个线程。但是线程创建之后，不会立即进入就绪状态，因为线程的运行需要一些条件（比如内存资源），只有线程运行需要的所有条件满足了，才进入就绪状态。</p><p>当线程进入就绪状态后，不代表立刻就能获取CPU执行时间，也许此时CPU正在执行其它的事情，因此它要等待。当得到CPU执行时间之后，线程便真正进入运行状态。</p><p>线程在运行状态过程中，可能有多个原因导致当前线程不继续运行下去，比如用户主动让线程睡眠（睡眠一定的时间之后再重新执行）、用户主动让线程等待，或者被同步块给阻塞，此时就对应着多个状态：time waiting（睡眠或等待一定的时间）、waiting（等待被唤醒）、blocked（阻塞）。</p><p>当由于突然中断或者子任务执行完毕，线程就会被消亡。</p><p>下面这幅图描述了线程从创建到消亡之间的状态：</p><p><img src="/images/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="线程的生命周期.jpg"></p><p>有些教程将blocked、waiting、time waiting统称为阻塞状态，这个也是可以的。这里想将线程的状态和Java中的方法调用联系起来，所以将waiting和time waiting两个状态分离出来。</p><p>【注】sleep和wait的区别：</p><ul><li><p>sleep是Thread类的方法，wait是Object类中定义的方法。</p></li><li><p>Thread.sleep不会导致锁行为的改变，如果当前线程是拥有锁的，那么Thread.sleep不会让线程释放锁。</p></li><li><p>Thread.sleep和Object.wait都会暂停当前的线程。OS会将执行时间分配给其它线程。区别是，调用wait后，需要别的线程执行notify&#x2F;notifyAll才能够重新获得CPU执行时间。</p></li></ul><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>对于单核CPU来说（相对于多核CPU，此处就理解为一个核），CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转而去运行另外一个线程，这个叫做线程上下文切换（对于进程也是类似）。</p><p>由于当前线程的任务可能并没有执行完毕，所以在切换时需要保存线程的运行状态，以便下次重新切换回来时能够继续切换之前的状态运行。举个简单的例子：线程A正在读取一个文件的内容，正读到文件的一般，此时需要暂停线程A，转去执行线程B，当再次切换回来执行线程A的时候，我们不希望线程A又从文件的开头来读取。</p><p>因此需要记录线程A的运行状态，那么会记录哪些数据呢？因为下次恢复时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值是多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录程序计数器、CPU寄存器状态等数据。</p><p>简单的说：对于线程的上下文切换实际上就是 <strong>存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</strong>。</p><p>虽然多线程可以使得任务执行的效率得到提升，但是由于在线程切换时同样会带来一定开销代价，并且多个线程会导致系统资源占用的增加，所以在进行多线程编程时要注意这些因素。</p><h2 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public void start()</code></td><td>使该线程开始执行；Java虚拟机调用该线程的run()方法。</td></tr><tr><td><code>public void run()</code></td><td>如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法；否则，该方法不执行任何操作并返回。</td></tr><tr><td><code>public final void setName(String name)</code></td><td>改变线程名称，使之与参数name相同。</td></tr><tr><td><code>public final void setPriority(int priority)</code></td><td>更改线程的优先级。</td></tr><tr><td><code>public final void setDaemon(boolean on)</code></td><td>将该线程标记为守护线程或用户线程。</td></tr><tr><td><code>public final void join(long millisec)</code></td><td>等待该线程终止的时间最长为millis毫秒。</td></tr><tr><td><code>public void interrupt()</code></td><td>中断线程。</td></tr><tr><td><code>public final boolean isAlive()</code></td><td>测试线程是否处于活动状态。</td></tr><tr><td><code>public static void yield()</code></td><td>暂停当前正在执行的线程对象，并执行其它线程。</td></tr><tr><td><code>public static void sleep(long millisec)</code></td><td>在指定的毫秒数内让正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td></tr><tr><td><code>public static Thread currentThread()</code></td><td>返回当前正在执行的线程对象的引用。</td></tr></tbody></table><p>Thread类中的方法调用引起线程状态变化的说明如下图：</p><p><img src="/images/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9A%84%E5%8F%98%E5%8C%96.jpg" alt="线程状态的变化.jpg"></p><ul><li><p><strong>停止线程</strong></p><p>  停止线程是在多线程开发时很重要的技术点，掌握此技术可以对线程的停止进行有效地处理。</p><p>  停止一个线程可以使用Thread.stop()方法，但最好不要用。该方法是不安全地，已被弃用。</p><p>  在Java中有下列3种方法可以终止正在运行地线程：</p><ul><li><p>使用退出标志，使线程正常退出，也就是当run()方法完成后线程终止。</p></li><li><p>使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样，都是作废过期地方法，使用它们可能产生不可预料地结果。</p></li><li><p>使用interrupt方法中断线程，但这个不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。</p></li></ul></li><li><p><strong>暂停线程</strong></p><p>  使用interrupt()方法。</p></li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>在Java线程中有两种线程，一种是User Thread（用户线程），另一种是Daemon Thread（守护线程）。</p><p>Daemon的作用是为其它线程的运行提供服务，比如说GC线程。其实User Thread和Daemon Thread本质上来说没什么区别，唯一的区别之处在于虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没线程可以服务的了，所以虚拟机也就退出了。</p><p>守护线程并非虚拟机内部才可以提供，用户也可以自行设定守护线程，使用方法 <code>public final void setDeamon(boolean on);</code> 但是有几点需要注意：</p><ul><li><p>threadsetDaemon(true)必须在thread.start()之前设置，否则会抛出IllegalThreadStateException异常。不能把正在运行的常规线程设置为守护线程。（这点与守护进程有者明显的区别，守护进程是创建后，让进程摆脱原会话的控制、让进程摆脱原进程组的控制、让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有者本质上面的区别。）</p></li><li><p>在守护线程种产生的新线程也是Deamon的。（这点又是有着本质的区别了：守护进程fork()出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的父进程不是init进程，所谓的守护进程本质上说就是 **”父进程挂掉，init收养，然后文件0,1,2都是&#x2F;dev&#x2F;null，当前目录到&#x2F;“**。）</p></li><li><p>不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。因为在Daemon Thread还没来得及进行操作时，虚拟机可能已经退出了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承与实现</title>
      <link href="/2020/02/04/java/java-base/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/02/04/java/java-base/%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="继承与实现"><a href="#继承与实现" class="headerlink" title="继承与实现"></a>继承与实现</h1><blockquote><p>引用自<a href="https://blog.csdn.net/lyflower/article/details/4204449">Java接口实现和继承关系</a></p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>有时候，我们可能想要构造一个很抽象的父类对象，它可能仅仅代表一个分类或抽象概念，它的实例没有任何意义，因此不希望它被实例化。</p><p>在Java中，通过在class关键字前增加abstract修饰符，就可以将一个类定义成抽象类。抽象类不能被实例化。</p><p>抽象类除了能像普通类一样可以拥有一般的属性和方法，也可以拥有抽象方法（abstract method）。抽象方法与抽象的行为相对应，通常是这个行为对父对象没有意义，而子对象有具体动作。抽象类可以有抽象方法也可以没有抽象方法；但是如果一个类有抽象方法，那么这个类只能定义为抽象类。</p><p>抽象方法还有一个特点是，它强迫子类要么仍然保持抽象性（即不具体实现该方法并仍然定义为抽象类），要么具体表现出这个方法的行为（实现具体的动作或者通过抛出UnsupportedOperationException异常来表明不支持该行为）。这样也可以强化多态性。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>Java适用关键字interface定义一个接口。接口也是抽象对象，并且接口中的方法都是抽象方法。</p><p>一个接口可以继承其他接口；一个类通过关键字implements声明要实现一个接口，并具体实现接口的方法。</p><p>如果是抽象类实现一个接口，那么抽象类中可以不具体实现接口的方法（保持其抽象性），而由子类去实现。</p><h2 id="抽象类和接口对比"><a href="#抽象类和接口对比" class="headerlink" title="抽象类和接口对比"></a>抽象类和接口对比</h2><p>共同点：都可以有抽象方法。</p><p>不同点：1、抽象类可以有实例变量，而接口不能拥有实例变量，接口中的变量都是静态（static）的常量（final）；2、抽象类可以有非抽象方法，而接口只能由抽象方法。</p><p>Java允许一个接口继承多个父接口，也允许一个类实现多个接口。</p><p>对于一个类实现多个接口的情况，因为接口只有抽象方法，具体方法只能由实现接口的类去实现，在调用的时候始终只会调用实现类的方法（不存在歧义）；而又因为接口只有静态的常量，但是由于静态变量是在编译器决定调用关系的，即使存在一定的冲突也会在编译时提示出错；而引用静态变量一般直接使用类名或接口名，从而避免产生歧义。对于一个接口继承多个父接口的情况也一样不存在这些缺点。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用类的方法</title>
      <link href="/2020/02/04/java/java-base/%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/04/java/java-base/%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="调用类的方法"><a href="#调用类的方法" class="headerlink" title="调用类的方法"></a>调用类的方法</h1><blockquote><p>引用自 <a href="http://www.importnew.com/23902.html">深入分析Java方法反射的实现原理</a></p></blockquote><h2 id="方法反射实例"><a href="#方法反射实例" class="headerlink" title="方法反射实例"></a>方法反射实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectCase</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Proxy.class.getDeclaredMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        method.invoke(target);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Java的反射机制，可以在运行期间调用对象的任何方法，如果大量使用这种方式进行调用，会有性能或内存隐患么？为了彻底了解方法的反射机制，只能从底层代码入手了。</p><h2 id="Method获取"><a href="#Method获取" class="headerlink" title="Method获取"></a>Method获取</h2><p>调用Class类的getDeclaredMethod可以获取指定方法名和参数的方法对象Method。</p><h3 id="getDeclaredMethod"><a href="#getDeclaredMethod" class="headerlink" title="getDeclaredMethod"></a>getDeclaredMethod</h3><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/getDeclaredMethod.png" alt="getDeclaredMethod"></p><p>其中privateGetDeclaredMethods方法从缓存或JVM中获取该Class中申明的方法列表，searchMethods方法将从返回的方法列表里找到一个匹配名称和参数的方法对象。</p><h3 id="searchMethods"><a href="#searchMethods" class="headerlink" title="searchMethods"></a>searchMethods</h3><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/searchMethods.png" alt="searchMethods"></p><p>如果找到一个匹配的Method，则重新copy一份返回，即Method.copy()方法</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/copy.png" alt="copy"></p><p>所以每次调用getDeclaredMethod方法返回的Method对象其实都是一个新的对象，且新对象的root属性都指向原来的Method对象，如果需要频繁调用，最好把Method对象缓存起来。</p><h3 id="privateGetDeclaredMethods"><a href="#privateGetDeclaredMethods" class="headerlink" title="privateGetDeclaredMethods"></a>privateGetDeclaredMethods</h3><p>从缓存或JVM中获取该Class中申明的方法列表，实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/privateGetDeclaredMethods.png" alt="privateGetDeclaredMethods"></p><p>其中reflectionData()方法实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/reflectionData.png" alt="reflectionData"></p><p>这里有个比较重要的数据结构ReflectionData，用来缓存从JVM中读取类的如下属性数据：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/ReflectionData-struct.png" alt="ReflectionData-struct"></p><p>从reflectionData()方法实现可以看出：reflectionData对象是SoftReference类型的，说明在内存紧张时可能会被回收，不过也可以通过-XX:SoftRefLRUPolicyMSPerMB参数控制回收的时机，只要发生GC就会将其回收，如果reflectionData被回收之后，又执行了反射方法，那只能通过newReflectionData方法重新创建一个这样的对象了，newReflectionData方法实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/newReflectionData.png" alt="newReflectionData"></p><p>通过unsafe.compareAndSwapObject方法重新设置reflectionData字段；</p><p>在privateGetDeclaredMethods方法中，如果通过reflectionData()获得的ReflectionData对象不为空，则尝试从ReflectionData对象中获取declaredMethods属性，如果是第一次，或则被GC回收之后，重新初始化后的类属性为空，则需要重新到JVM中获取一次，并赋值给ReflectionData，下次调用就可以使用缓存数据了。</p><h2 id="Method调用"><a href="#Method调用" class="headerlink" title="Method调用"></a>Method调用</h2><p>获取到指定的方法对象Method之后，就可以调用它的invoke方法了，invoke实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/invoke.png" alt="invoke"></p><p>应该注意到：这里的MethodAccessor对象是invoke方法实现的关键，一开始methodAccessor为空，需要调用acquireMethodAccessor生成一个新的MethodAccessor对象，MethodAccessor本身就是一个接口，实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/MethodAccessor.png" alt="MethodAccessor"></p><p>在acquireMethodAccessor方法中，会通过ReflectionFactory类的newMethodAccessor创建一个实现了MethodAccessor接口的对象，实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/newMethodAccessor.png" alt="newMethodAccessor"></p><p>在ReflectionFactory类中，有2个重要的字段：noInflation(默认false)和inflationThreshold(默认15)，在checkInitted方法中可以通过-Dsun.reflect.inflationThreshold&#x3D;xxx和-Dsun.reflect.noInflation&#x3D;true对这两个字段重新设置，而且只会设置一次；</p><p>如果noInflation为false，方法newMethodAccessor都会返回DelegatingMethodAccessorImpl对象，DelegatingMethodAccessorImpl的类实现</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/DelegatingMethodAccessorImpl.png" alt="DelegatingMethodAccessorImpl"></p><p>其实，DelegatingMethodAccessorImpl对象就是一个代理对象，负责调用被代理对象delegate的invoke方法，其中delegate参数目前是NativeMethodAccessorImpl对象，所以最终Method的invoke方法调用的是NativeMethodAccessorImpl对象invoke方法，实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/NativeMethodAccessorImpl.png" alt="NativeMethodAccessorImpl"></p><p>这里用到了ReflectionFactory类中的inflationThreshold，当delegate调用了15次invoke方法之后，如果继续调用就通过MethodAccessorGenerator类的generateMethod方法生成MethodAccessorImpl对象，并设置为delegate对象，这样下次执行Method.invoke时，就调用新建的MethodAccessor对象的invoke()方法了。</p><p>这里需要注意的是：<br>generateMethod方法在生成MethodAccessorImpl对象时，会在内存中生成对应的字节码，并调用ClassDefiner.defineClass创建对应的class对象，实现如下：</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/doPrivileged.png" alt="doPrivileged"></p><p>在ClassDefiner.defineClass方法实现中，每被调用一次都会生成一个DelegatingClassLoader类加载器对象</p><p><img src="/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/defineClass.png" alt="defineClass"></p><p>这里每次都生成新的类加载器，是为了性能考虑，在某些情况下可以卸载这些生成的类，因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的，如果用了原来的类加载器，那可能导致这些新创建的类一直无法被卸载，从其设计来看本身就不希望这些类一直存在内存里的，在需要的时候有就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转换流</title>
      <link href="/2020/02/04/java/java-base/%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
      <url>/2020/02/04/java/java-base/%E8%BD%AC%E6%8D%A2%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h1><ul><li><p>初始化变量</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILENAME</span> <span class="operator">=</span> <span class="string">&quot;E:&quot;</span> + File.separator + <span class="string">&quot;hello.txt&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="字节输出流转换为字符输出流"><a href="#字节输出流转换为字符输出流" class="headerlink" title="字节输出流转换为字符输出流"></a>字节输出流转换为字符输出流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWriter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        writer.write(<span class="string">&quot;Today is sunday.&quot;</span>);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节输入流转换为字符输入流"><a href="#字节输入流转换为字符输入流" class="headerlink" title="字节输入流转换为字符输入流"></a>字节输入流转换为字符输入流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testReader</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(FILENAME);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> reader.read(chars);</span><br><span class="line">        reader.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取长度：&quot;</span> + length);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2020/02/04/java/java-base/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/02/04/java/java-base/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><blockquote><p>引用自<a href="http://www.runoob.com/java/java-operators.html">Java 运算符</a></p></blockquote><p>Java中提供的运算符可以分为以下几组：</p><ul><li><p>算术运算符</p></li><li><p>关系运算符</p></li><li><p>位运算符</p></li><li><p>逻辑运算符</p></li><li><p>赋值运算符</p></li><li><p>其他运算符</p></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>示例：A &#x3D; 10, B &#x3D; 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法 - 运算符两侧的值相加</td><td>A + B 等于 30</td></tr><tr><td>-</td><td>减法 - 左操作书减去右操作数</td><td>A - B 等于 -10</td></tr><tr><td>*</td><td>乘法 - 操作符两侧的值相乘</td><td>A * B 等于 200</td></tr><tr><td>&#x2F;</td><td>除法 - 左操作数除以右操作数</td><td>B &#x2F; A 等于 2</td></tr><tr><td>%</td><td>取模 - 左操作数除以右操作数的余数</td><td>B % A 等于 0</td></tr><tr><td>++</td><td>自增 - 操作数的值加1</td><td>B++ 或 ++B 等于21</td></tr><tr><td>–</td><td>自减 - 操作数的值减1</td><td>B– 或 –B 等于19</td></tr></tbody></table><p>前缀自增自减（++a, –a）：先进行自增或自减运算，再进行表达式运算。</p><p>后缀自增自减（a++, a–）：先进行表达式运算，再进行自增或自减运算。</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>示例：A &#x3D; 10, B &#x3D; 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>检查两个操作数的值是否相等，相等返回true</td><td>A &#x3D;&#x3D; B 为false</td></tr><tr><td>!&#x3D;</td><td>检查两个操作数的值是否不等，不相等返回true</td><td>A !&#x3D; B 为true</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，大于则返回true</td><td>A &gt; B 为false</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，小于则返回true</td><td>A &lt; B 为true</td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否大于或等于右操作数的值，大于或等于则返回true</td><td>A &gt;&#x3D; B 为false</td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否小于或等于右操作数的值，小于或等于则返回true</td><td>A &lt;&#x3D; B 为true</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java定义了位运算符，可应用于int、long、short、char、byte等类型。位运算符作用在所有的位上，并且按位运算。</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>如果相对应的位都是1，结果为1，否则为0</td></tr><tr><td>|</td><td>如果相对应的位都是0，结果为0，否则为1</td></tr><tr><td>^</td><td>如果相对应位的值相同，结果为0，否则为1</td></tr><tr><td>~</td><td>按位取反运算符，翻转操作数的每一位，即0变成1，1变成0</td></tr><tr><td>&lt;&lt;</td><td>按位左移运算符，左操作数按位左移右操作数指定的位数</td></tr><tr><td>&gt;&gt;</td><td>按位右移运算符，左操作数按位右移右操作数指定的位数</td></tr><tr><td>&gt;&gt;&gt;</td><td>按位右移补零操作符，左操作数的值按右操作数指定的位数右移，移动得到的空位用0填充</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例：A = 60, B = 13</span><br><span class="line">A = 0011 1100</span><br><span class="line">B = 0000 1101</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">A &amp; B = 0000 1100</span><br><span class="line">A | B = 0011 1101</span><br><span class="line">A ^ B = 0011 0001</span><br><span class="line">~A = 1100 0011</span><br><span class="line">A &lt;&lt; 2 = 1111 0000</span><br><span class="line">A &gt;&gt; 2 = 1111</span><br><span class="line">A &gt;&gt;&gt; 2 = 0000 1111</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>示例：A &#x3D; true, B &#x3D; false</p><table><thead><tr><th>操作符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与运算符，当且仅当两个操作数都为true，才返回true</td><td>A &amp;&amp; B 为false</td></tr><tr><td>||</td><td>逻辑或运算符，两个操作数中任意一个为true，就返回true</td><td>A || B 为true</td></tr><tr><td>!</td><td>逻辑非运算符，反转操作数的逻辑状态，操作数为true，则结果为false</td><td>!(A &amp;&amp; B) 为true</td></tr></tbody></table><p>短路逻辑运算符：当使用逻辑与运算符时，当第一个操作数为false时，其结果必定为false，此时不会再判断第二个操作数了；同样的，再使用逻辑或运算符时，当第一个操作数为true时，也不会再判断第二个操作数了。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>操作符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单赋值运算符，将右操作数的值赋给左操作数</td><td>C &#x3D; A + B 将A + B得到的值赋给C</td></tr><tr><td>+&#x3D;</td><td>加和赋值运算符，将两侧操作数相加赋值给左操作数</td><td>C +&#x3D; A 等价于 C &#x3D; C + A</td></tr><tr><td>-&#x3D;</td><td>减和赋值运算符，将左操作数减去右操作数的结果赋值给左操作数</td><td>C -&#x3D; A 等价于 C &#x3D; C - A</td></tr><tr><td>*&#x3D;</td><td>乘和赋值运算符，将两侧操作数相乘赋值给左操作数</td><td>C *&#x3D; A 等价于 C &#x3D; C * A</td></tr><tr><td>&#x2F;&#x3D;</td><td>除和赋值运算符，将左操作数除以右操作数的结果赋值给左操作数</td><td>C &#x2F;&#x3D; A 等价于 C &#x3D; C &#x2F; A</td></tr><tr><td>%&#x3D;</td><td>取模和赋值运算符，将左操作数和右操作数取模后赋值给左操作数</td><td>C %&#x3D; A 等价于 C &#x3D; C % A</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移位赋值运算符</td><td>C &lt;&lt;&#x3D; 2 等价于 C &#x3D; C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移位赋值运算符</td><td>C &gt;&gt;&#x3D; 2 等价于 C &#x3D; C &gt;&gt; 2</td></tr><tr><td>&amp;&#x3D;</td><td>按位与赋值运算符</td><td>C &amp;&#x3D; 2 等价于 C &#x3D; C &amp; 2</td></tr><tr><td>^&#x3D;</td><td>按位异或赋值运算符</td><td>C ^&#x3D; 2 等价于 C &#x3D; C ^ 2</td></tr><tr><td>|&#x3D;</td><td>按位或赋值运算符</td><td>C |&#x3D; 2 等价于 C &#x3D; C | 2</td></tr></tbody></table><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><ul><li><p>条件运算符（又称三目运算符、三元运算符）</p><p>  该运算符有三个操作数，并且需要判断布尔表达式的值。该运算符的主要功能是经过判断之后决定哪个值应该赋值给变量。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = (expression) ? val1 : val2;</span><br></pre></td></tr></table></figure><p>  expression为true时，将val1赋值给a；为false时将val2赋值给a。</p></li><li><p>instanceof运算符</p><p>  instanceof 运算符用来在运行时指出对象是否是特定类的一个实例。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> object <span class="keyword">instanceof</span> class</span><br></pre></td></tr></table></figure><p>  如果object是class的一个实例，则instanceof运算符返回true，反之若object不是指定class的一个实例或者object为null，则返回false。在判断一个实例引用的类型时，使用的是实际类型，而不是声明的类型。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择与循环语句</title>
      <link href="/2020/02/04/java/java-base/%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/02/04/java/java-base/%E9%80%89%E6%8B%A9%E4%B8%8E%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="选择与循环语句"><a href="#选择与循环语句" class="headerlink" title="选择与循环语句"></a>选择与循环语句</h1><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>一个if语句包含一个布尔表达式和一条或多条执行语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果布尔表达式的值为true，则执行if语句中的代码块，否则执行if语句块后面的代码。</p><h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p>if语句后面可以跟else语句，当if语句的布尔表达式值为false时，else语句块会被执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式为false将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if…else-if…else语句"><a href="#if…else-if…else语句" class="headerlink" title="if…else if…else语句"></a>if…else if…else语句</h3><p>if语句后面可以跟else if…else语句，这种语句可以检测到多种可能的情况。使用该语句的时候，需要注意：</p><ul><li><p>if语句最多有1个else语句，else语句在所有的else if语句之后。</p></li><li><p>if语句可以有若干个else if语句，它们必须在else语句之前。</p></li><li><p>一旦其中一个else if语句检测为true，其他的else if以及else语句都将跳过执行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式1为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式2为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果布尔表达式3为true将执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果以上布尔表达式都不为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>switch语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选</span></span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 可选</span></span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句有以下规则：</p><ul><li><p>switch语句中的变量类型可以是：byte、short、int、char、枚举类。从Java7开始支持String类型，并且case标签的值必须是字符串常量或者字面常量。</p></li><li><p>switch与剧中可以拥有多个case语句。每个case后面跟一个要比较的值和冒号。</p></li><li><p>case语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</p></li><li><p>当变量的值与case语句的值相等时，那么case语句之后的语句开始执行，知道break语句出现才会跳出switch语句。</p></li><li><p>当遇到break语句时，switch语句终止。程序跳转到switch语句后面的语句执行。case语句不必包含break语句。如果没有break语句出现，程序会继续执行下一条case语句，直到出现break语句。</p></li><li><p>switch语句可以包含一个default分支，该分支必须是switch语句的最后一个分支。default在没有case语句的值和变量值相等的时候执行。default分支不需要break语句。</p></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>循环语句用于同样的操作需要执行多次的情况。Java中有三种主要的循环结构。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (布尔表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要布尔表达式为true，循环就会一直执行下去。</p><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>对于while语句而言，如果不满足条件是不能进入循环的。但有时候我们需要在即使不满足条件时也至少执行一次，这时就需要使用do…while循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125; <span class="keyword">while</span> (布尔表达式);</span><br></pre></td></tr></table></figure><p>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。如果布尔表达式的值为true，则语句块一直执行，知道布尔表达式的值为false。</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环执行的次数是在执行前就确定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 布尔表达式; 更新语句) &#123;</span><br><span class="line">    <span class="comment">// 循环执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用for循环时，有以下几点需要说明：</p><ul><li><p>最先执行初始化语句。可以声明一种类型，可以初始化一个或多个循环控制变量，也可以时空语句。</p></li><li><p>随后，检查布尔表达式的值。为true，执行循环体；为false，循环终止，开始执行for代码块后面的语句。</p></li><li><p>执行一次循环后，在更新语句中更新循环控制变量。</p></li><li><p>更新语句执行后，再次检测布尔表达式。循环执行上面的过程。</p></li></ul><h3 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h3><p>break主要用在循环语句或者switch语句中，用来跳出整个语句块。break跳出最里层的循环，并且继续执行循环语句块后面的语句。</p><h3 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h3><p>continue适用于任何循环控制结构中。作用时让程序立刻跳转到下一次循环的迭代。</p><p>在for循环中，continue语句使程序立即跳转到更新语句。在while或者do…while循环中，程序立即跳转到布尔表达式的判断语句。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载与覆盖</title>
      <link href="/2020/02/04/java/java-base/%E9%87%8D%E8%BD%BD%E4%B8%8E%E8%A6%86%E7%9B%96/"/>
      <url>/2020/02/04/java/java-base/%E9%87%8D%E8%BD%BD%E4%B8%8E%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h1 id="重载与覆盖"><a href="#重载与覆盖" class="headerlink" title="重载与覆盖"></a>重载与覆盖</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载（overloading）是在一个类里面，方法名称相同，而参数不同。返回类型可以相同也可以不同。</p><p>每个重载的方法（包括构造方法）都必须有一个独一无二的参数类型列表。</p><p>重载规则：</p><ul><li><p>被重载的方法必须改变参数列表（参数个数或类型不一样）。</p></li><li><p>被重载的方法可以改变返回类型。</p></li><li><p>被重载的方法可以改变访问修饰符。</p></li><li><p>被重载的方法可以声明新的或更广的检查异常。</p></li><li><p>方法能够在同一个类中或者在一个子类中被重载。</p></li><li><p>无法以返回值类型作为重载方法的区分标准。</p></li></ul><h2 id="覆盖（又称重写）"><a href="#覆盖（又称重写）" class="headerlink" title="覆盖（又称重写）"></a>覆盖（又称重写）</h2><p>覆盖（Override）是子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。</p><p>覆盖的好处在于子类可以根据需要，定义特定于自己的行为，也就是说子类能够根据需要实现父类的方法。</p><p>覆盖方法不能抛出新的检查异常或者比被覆盖方法声明更加宽泛的异常。</p><p>覆盖规则：</p><ul><li><p>参数列表必须完全于被覆盖方法的相同。</p></li><li><p>返回类型必须完全于被覆盖方法的返回类型相同。</p></li><li><p>访问权限不能比父类中被覆盖的方法的访问权限更低。例如：如果父类的一个方法被声明为public，在子类中覆盖该方法就不能声明为protected。</p></li><li><p>父类的成员方法只能被它的子类覆盖。</p></li><li><p>声明为final的方法不能被覆盖。</p></li><li><p>声明为static的方法不能被覆盖，但是能够被再次声明（不使用@Override注解修饰方法）。</p></li><li><p>子类和父类在同一个包中，子类可以覆盖父类所有方法，除了声明为private和final的方法。</p></li><li><p>子类和父类不在同一个包中，子类只能够覆盖父类声明为public和protected的非final方法。</p></li><li><p>覆盖的方法能够抛出任何非强制类异常，无论被覆盖的方法是否抛出异常。但是，覆盖的方法不能抛出新的强制性异常，或者比被覆盖方法声明的更广泛的强制性异常。</p></li><li><p>构造方法不能被覆盖。</p></li><li><p>如果不能继承一个方法，则不能覆盖这个方法。</p></li></ul><p>super关键字的使用：当需要在子类中调用父类的被覆盖方法时，需要使用super关键字。</p><h2 id="两者的区别与联系"><a href="#两者的区别与联系" class="headerlink" title="两者的区别与联系"></a>两者的区别与联系</h2><table><thead><tr><th>区别点</th><th>重载</th><th>覆盖</th></tr></thead><tbody><tr><td>参数列表</td><td>必须修改</td><td>不能修改</td></tr><tr><td>返回类型</td><td>可以修改</td><td>不能修改</td></tr><tr><td>异常</td><td>可以修改</td><td>可以减少或删除，不能抛出新的或更宽泛的异常</td></tr><tr><td>访问</td><td>可以修改</td><td>不能做更严格的限制（可以降低限制）</td></tr></tbody></table><p>方法的重载和覆盖时Java多态性的不同表现，覆盖时父类与子类之间多态性的一种表现，重载可以理解为多态的具体表现形式。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数</title>
      <link href="/2020/02/04/java/java-jvm/JVM%E5%8F%82%E6%95%B0/"/>
      <url>/2020/02/04/java/java-jvm/JVM%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h1><h2 id="JVM参数-1"><a href="#JVM参数-1" class="headerlink" title="JVM参数"></a>JVM参数</h2><ul><li>-Xms</li></ul><p>堆最小值</p><ul><li>-Xmx</li></ul><p>堆最大值。-Xms与-Xmx的单位默认字节都是以k、m做单位的。通常着两个配置参数相等，避免每次空间不足，动态扩容带来的影响。</p><ul><li>-Xmn</li></ul><p>新生代大小</p><ul><li>-Xss</li></ul><p>每个线程池的堆栈大小。在jdk5以上的版本，每个线程堆栈大小为1m，jdk5以前的版本是每个线程池大小为256k。一般在相同物理内存下，如果减少 -Xss 值会产生更大的线程数，但不同的操作系统堆进程内线程数是有限制的，不能无限生成。</p><ul><li>-XX:NewRatio</li></ul><p>设置新生代与老年代比值，-XX:NewRatio&#x3D;4 表示新生代与老年代所占比例为 1:4，新生代占比整个堆的五分之一。如果设置了-Xmn的情况下，该参数是不需要再设置的。</p><ul><li>-XX:PermSize</li></ul><p>设置持久代初始值，默认是物理内存的64分之一</p><ul><li>-XX:MaxPermSize</li></ul><p>设置持久代最大值，默认是物理内存的四分之一</p><ul><li>-XX:MaxTenuringThreshold</li></ul><p>新生代中对象存活次数，默认是15。（若对象再eden区，经历一次MinorGC后还活着，则被移动到Survivor区，年龄加1。以后，对象每次经理MinorGC，年龄都加1。达到阈值，则移入老年代）</p><ul><li>-XX:SurvivorRatio</li></ul><p>Eden区与Survivor区大小的比值，如果设置为8，两个Survivor区与一个Eden区的比值为2:8，一个Survivor区占整个新生代的十分之一</p><ul><li>-XX:+UseFastAccessorMethods</li></ul><p>原始类型快速优化</p><ul><li>-XX:+AggressiveOpts</li></ul><p>编译速度加快</p><ul><li>-XX:PretenureSizeThreshold</li></ul><p>对象超过多大值时直接再老年代中分配</p><blockquote><p>整个堆大小的计算公式：JVM堆大小 &#x3D; 年轻代大小 + 年老代大小 + 持久代大小。</p></blockquote><blockquote><p>增大新生代大小就会减少对应的年老代大小，设置-Xmn值对系统性能影响较大，所以如果设置新生代大小的调整，则需要严格的测试调整。而新生代是用来存放新创建的对象，大小是随着堆大小增大和减少而有相应的变化，默认值是保持堆大小的十五分之一，-Xmn参数就是设置新生代的大小，也可以通过-XX:NewRatio来设置新生代与年老代的比例，Java官方推荐配置为3:8。</p></blockquote><blockquote><p>新生代的特点就是内存中的对象更新速度快，在短时间内容易产生大量的无用对象，使用这个参数时就需要考虑垃圾回收期设置参数也需要进行调整。推荐使用：复制清除算法和并行收集器进行垃圾回收，而新生代的垃圾回收叫做初级回收。</p></blockquote><blockquote><p>StackOverflowError和OutOfMemoryException。当线程中的请求的栈的深度大于最大可用深度，就会抛出前者；如果内存空间不够，则无法创建新的线程，则会抛出后者。栈的大小直接决定了函数调用的最大深度，栈越大，函数嵌套可调用次数就越多。</p></blockquote><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><ol><li>-Xmn用于设置新生代的大小。过小会增加Minor GC频率，过大会减小老年代的大小。一般设为整个堆空间的1&#x2F;4或1&#x2F;3。</li><li>-XX:SurvivorRatio用于设置新生代中survivor空间（from&#x2F;to）和eden空间的大小比例；-XX:TargetSurvivorRatio表示当经历Minor GC后，survivor空间占有量（百分比）超过它的时候，就会压缩进入老年代（当然，如果survivor空间不够，则直接进入老年代）。默认值为50%。</li><li>为了性能考虑，一开始尽量将新生代对象留在新生代，避免新生的大对象直接进入老年代。因为新生对象大部分都是短期的，这就造成了老年代的内存浪费，并且回收代价也高（Full GC发生在老年代和方法去Perm）。</li><li>当 -Xms&#x3D;-Xmx，可以使得堆相对稳定，避免不停震荡。</li><li>一般来说，MaxPermSize设为64Mb可以满足绝大多数的应用了。如果依然出现方法区溢出，则可以设为128Mb。如果128Mb还不能满足需求，那么就应该考虑程序优化了，减少<strong>动态类</strong>的产生。</li></ol><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><ul><li><p>引用计数法：会有循环引用的问题，古老的方法；</p></li><li><p>Mark-Sweep：标记清除。根可达判断，最大的问题是空间碎片（清除垃圾之后剩下不连续的内存空间）；</p></li><li><p>Copying：复制算法。对于短命对象来说有用，否则需要复制大量的对象，效率低。<strong>如Java的新生代堆空间中就是使用了它（survivor空间的from和to区）</strong>；</p></li><li><p>Mark-Compact：标记整理。对于老年对象来说有用，无需复制，不会产生内存碎片。</p></li></ul><h3 id="GC考虑的指标"><a href="#GC考虑的指标" class="headerlink" title="GC考虑的指标"></a>GC考虑的指标</h3><ul><li><p>吞吐量：应用耗时和实际耗时的比值；</p></li><li><p>停顿时间：垃圾回收的时候，由于Stop the world，应用程序的所有线程会挂起，造成应用停顿。</p></li></ul><blockquote><p>吞吐量和停顿时间是互斥的。</p></blockquote><blockquote><p>对于后端服务（比如后台计算任务），吞吐量优先考虑（并行垃圾回收）；</p></blockquote><blockquote><p>对于前端应用，RT响应时间优先考虑，减少垃圾收集时的停顿时间，使用场景是Web系统（并发垃圾回收）。</p></blockquote><h3 id="回收期的JVM参数"><a href="#回收期的JVM参数" class="headerlink" title="回收期的JVM参数"></a>回收期的JVM参数</h3><ul><li>-XX:+UseSerialGC</li></ul><p>串行垃圾回收，现在基本很少使用。</p><ul><li>-XX:+UseParNewGC</li></ul><p>新生代使用并行，老年代使用串行。</p><ul><li>-XX:+UseConcMarkSweepGC</li></ul><p>新生代使用并行，老年代使用CMS（一般都是使用这种方式），CMS是Concurrent Mark Sweep的缩写，并发标记清除，一看就是老年代的算法，所以，它可以作为老年代的垃圾回收器。CMS不是独占式的，它关注停顿时间。</p><ul><li>-XX:ParallelGCThreads</li></ul><p>指定并行的垃圾回收线程的数量，最好等于CPU数量。</p><ul><li>-XX:+DisableExplicitGC</li></ul><p>禁用System.gc()，因为它会触发Full GC，这是很浪费性能的，JVM会在需要GC的时候自己触发GC。</p><ul><li>-XX:CMSFullGCsBeforeCompaction</li></ul><p>在多少次GC后进行内存压缩，这个是因为并行收集器不对内存空间进行压缩的，所以运行一段时间后会产生很多碎片，使得运行效率降低。</p><ul><li>-XX:+CMSParallelRemarkEnabled</li></ul><p>降低标记停顿。</p><ul><li>-XX:+UseCMSCompactAtFullCollection</li></ul><p>在每次一Full GC时对老年代区域碎片整理，因为CMS是不会移动内存的，因此会非常容易出现碎片导致内存不够用。</p><ul><li>-XX:+UseCmsInitiatingOccupancyOnly</li></ul><p>使用手动触发或者自定义触发cms收集，同时也会禁止hotspot自行出发CMS GC。</p><ul><li>-XX:CMSInitiatingOccupancyFraction</li></ul><p>使用CMS作为垃圾回收，使用70%后开始CMS收集。</p><ul><li>-XX:CMSInitiatingPermOccupancyFraction</li></ul><p>使用perm gen使用达到多少百分比时触发垃圾回收，默认时92%。</p><ul><li>-XX:+CMSIncrementalMode</li></ul><p>设置为增量模式。</p><ul><li>-XX:+CMSClassUnloadingEnabled</li></ul><p>CMS是不会默认对永久代进行垃圾回收的，设置此参数则是开启。</p><ul><li>-XX:+PrintGCDetails</li></ul><p>开启详细GC日志模式，日志的格式是和所使用的算法有关。</p><ul><li>-XX:+PrintGCDateStamps</li></ul><p>将时间和日期也加入到GC日志中。</p><p><strong>配置参考</strong></p><p><img src="/images/JVM%E5%8F%82%E6%95%B0/jvm-param-config.png" alt="jvm-param-config"></p><p><strong>案例分享</strong></p><p><img src="/images/JVM%E5%8F%82%E6%95%B0/jvm-param-sample.png" alt="jvm-param-sample"></p>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优</title>
      <link href="/2020/02/04/java/java-jvm/JVM%E8%B0%83%E4%BC%98/"/>
      <url>/2020/02/04/java/java-jvm/JVM%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/ydkEkh_Uc1paftJLKIsm0w">如何优化Java GC</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/bOarreWhQJmS6VTZfFcsZw">大型跨境电商 JVM 调优经历</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/4c9K5eYMFGVV2WyKaYXVBA">Jvm知识汇总</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/jt_BCAo8krxPAhLhhLdIrg">海量连接服务端jvm参数调优杂记</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存结构</title>
      <link href="/2020/02/04/java/java-jvm/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>/2020/02/04/java/java-jvm/%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/li3ISdodGu2EK_Fo_4NJPA">JVM内存结构</a></p></li><li><p><a href="https://www.cnblogs.com/paddix/p/5309550.html">java8 去除永久代增加元数据区Metaspace</a></p></li></ul><h2 id="虚拟机运行时的数据区"><a href="#虚拟机运行时的数据区" class="headerlink" title="虚拟机运行时的数据区"></a>虚拟机运行时的数据区</h2><p><img src="/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/jvm-memory.jpg" alt="jvm-memory"></p><ul><li><p>程序计数器（program counter register），一块较小的内存空间，可以看作当前线程所执行的字节码的行号指示器。由于Java虚拟机是采用多线程，通过线程切换获得时间片得到cpu的控制权。为了线程切换后能恢复到正确的执行位置。</p></li><li><p>虚拟机栈，调用一个方法时会创建一个栈帧，用于存储局部变量、对象引用、方法返回值，每一个方法从调用到执行完成，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。通过 -Xss 控制大小，如果线程请求的栈深度大于虚拟机所允许的深度，会抛出StackOverflowError。通过递归死锁会引发这种问题。</p></li><li><p>本地方法栈，与虚拟机栈相似，主要是针对native方法服务。</p></li><li><p>堆（heap），所有线程共享，通过new操作产生对象，存放对象实例，分为年轻代（eden、两个survivor）和年老代，通过 -Xmx 和 -Xms 控制大小，如果内存不足会抛OutOfMemoryError。通过GC释放。</p></li><li><p>方法区：主要是类信息、常量、静态变量，也叫持久代，通过 -XXMaxPerSize 控制大小，当方法区无法满足内存分配需求时也会抛出 OutOfMemoryError。特别注意动态代理子类，在运行期会创建很多新的子类，导致空间不足。</p></li></ul><p><img src="/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/gc-memory.jpg" alt="gc-memory"></p><ul><li>Young GC</li></ul><p>Eden Space满了；Survivor Space满了</p><ul><li>Full GC</li></ul><p>老年代满了；持久代满了</p><p><code>jstat –gcutil  进程ID  刷新时间（可以实时监控jvm 的gc情况)</code></p>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垃圾回收</title>
      <link href="/2020/02/04/java/java-jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2020/02/04/java/java-jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><ul><li><p><a href="https://mp.weixin.qq.com/s/olNXcRAT3PTK-hV_ehtmtw">GC算法 垃圾收集器</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/S3PcA2KIzCVB2hJmsbVzyQ">Java GC 分析</a></p></li><li><p><a href="https://yq.aliyun.com/articles/94557?spm=5176.100239.blogcont217385.73.SaQb9l">Java应用频繁FullGC分析</a></p></li><li><p>GC日志</p><ul><li><p><a href="https://blog.csdn.net/renfufei/article/details/49230943">快速解读GC日志</a></p></li><li><p><a href="https://blog.csdn.net/zqz_zqz/article/details/70568819">CMS垃圾回收器详解</a></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构探索</title>
      <link href="/2020/02/04/architecture/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2/"/>
      <url>/2020/02/04/architecture/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><a href="https://www.processon.com/diagraming/5d0aec8ee4b0d4ba353d4127">系统架构</a></p><h2 id="LB（负载均衡）"><a href="#LB（负载均衡）" class="headerlink" title="LB（负载均衡）"></a>LB（负载均衡）</h2><h3 id="负载均衡选型-Nginx"><a href="#负载均衡选型-Nginx" class="headerlink" title="负载均衡选型 Nginx"></a>负载均衡选型 Nginx</h3><h2 id="RPC-【待定，需参考实际使用场景】"><a href="#RPC-【待定，需参考实际使用场景】" class="headerlink" title="RPC 【待定，需参考实际使用场景】"></a>RPC 【待定，需参考实际使用场景】</h2><h3 id="RPC框架选型-gPRC"><a href="#RPC框架选型-gPRC" class="headerlink" title="RPC框架选型 gPRC"></a>RPC框架选型 gPRC</h3><p>gPRC适合服务间通信的场景，无需与前端应用进行交互，适用于当前的系统架构。</p><p><a href="https://grpc.io/docs/">gRPC文档</a></p><h2 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h2><h3 id="框架选型-etcd"><a href="#框架选型-etcd" class="headerlink" title="框架选型 etcd"></a><del>框架选型 etcd</del></h3><ul><li><p>服务发现</p><ol><li><p>强一致性、高可用的服务存储目录。基于Raft算法的etcd本身就是一个强一致性高可用的服务存储目录。</p></li><li><p>注册服务和监控服务健康状态的机制。可以在etcd中注册服务，并且对注册的服务设置key TTL，定时保持服务的心跳以达到监控健康状态的效果。</p></li><li><p>查找和连接服务的机制。通过在etcd指定的主题下注册的服务也能在对应的主题下查找到。为了确保连接，我们可以在每个服务机器上都部署一个proxy模式的etcd，这样就可以确保能访问etcd集群的服务都能互相连接。</p></li></ol></li><li><p>配置中心</p><p>  应用中用到的一些配置信息放到etcd上集中进行管理。应用在启动的时候主动从etcd获取一次配置信息，同时，在etcd节点上注册一个watcher并等待，以后每次配置有更新的时候，etcd都会实时通知订阅者，以此达到获取最新配置信息的目的。</p></li><li><p>分布式通知与协调</p><ol><li><p>低耦合的心跳检测。检测系统和被检测系统通过etcd上某个目录关联而非直接关联起来，这样可以大大减少系统的耦合性。</p></li><li><p>系统调度。某系统有控制台和推送系统两部分组成，控制台的职责是控制推送系统进行相应的推送工作。管理人员在控制台做的一些操作，实际上是修改了etcd上某些目录节点的状态，而etcd就把这些变化通知给注册了watcher的推送系统客户端，推送系统作出相应的推送任务。</p></li><li><p>工作汇报。大部分类似的任务分发系统，子任务启动后，到etcd来注册一个临时工作目录，并且定时将自己的进度进行汇报（将进度写入到这个临时目录），这样任务管理者就能够实时知道任务进度。</p></li></ol></li><li><p>分布式锁</p><p>  因为etcd使用Raft算法保持了数据的强一致性，某次操作存储到集群中的值必然是全局一致的，所以很容易实现分布式锁。有保持独占，控制时序两种使用方式。</p><ol><li><p>保持独占，即所有获取锁的用户最终只有一个可以得到。etcd为此提供了一套实现分布式锁原子操作CAS（CompareAndSwap）的API。通过设置prevExist值，可以保证在多个节点同时去创建某个目录时，只有一个成功。而创建成功的用户就可以认为是获得了锁。</p></li><li><p>控制时序，即所有想要获得锁的用户都会被安排执行，但是获得锁的顺序也是全局唯一的，同时决定了执行顺序。etcd为此也提供了一套API（自动创建有序键），创建一个目录时指定为POST动作，这样etcd会自动在目录下生成一个当前最大的值为键，存储这个新的值（客户端编号）。同时还可以使用API按顺序列出所有当前目录下的键值。此时这些键的值就是客户端的时序，而这些键中存储的值可以是代表客户端的编号。</p></li></ol></li></ul><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>Raft算法在做决策时需要多数节点的投票，所以etcd集群一般部署奇数（推荐3、5、7）个数节点。</p><ul><li><p>集群启动</p><p>  etcd有三种集群化启动的配置方案，分别为静态配置启动、etcd自身服务发现、通过DNS进行服务发现。通过配置内容的不同，你可以对不同的方式进行选择。</p><ol><li><p>静态配置</p><p> 这种方式比较适用于离线环境，在启动整个集群之前，你就已经预先清楚所要配置的集群大小，以及集群上各节点的地址和端口信息。那么启动时，你就可以通过配置initial-cluster参数进行etcd集群的启动。</p><p> 在每个etcd机器启动时，配置环境变量或者添加启动参数的方式如下。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ETCD_INITIAL_CLUSTER=&quot;infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380&quot;</span><br><span class="line">ETCD_INITIAL_cluster_STATE=new</span><br></pre></td></tr></table></figure><p> 参数方法：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-initial-cluster infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380 -initial-cluster-state new</span><br></pre></td></tr></table></figure><p> 值得注意的是，<code>-initial-cluster</code> 参数中配置的url地址必须与各个节点启动时设置的 <code>initial-advertise-peer-urls</code> 参数相同。（<code>initial-advertise-peer-urls</code> 参数表示节点监听其他节点同步信号的地址）。</p><p> 如果你所在的网络环境配置了多个etcd集群，为了避免意外发生，最好使用 <code>-initial-cluster-token</code> 参数为每个集群单独配置一个token认证。这样就可以确保每个集群和集群的成员都拥有独特的ID。</p><p> 综上所述，如果你要配置包含3个etcd节点的集群，那么你在三个机器上的启动命令分别如下所示。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ etcd -name infra0 -initial-advertise-peer-urls http://10.0.1.10:2380 \</span><br><span class="line">-listen-peer-urls http://10.0.1.10:2380 \</span><br><span class="line">-initial-cluster-token etcd-cluster-1 \</span><br><span class="line">-initial-cluster infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380 \</span><br><span class="line">-initial-cluster-state new</span><br><span class="line"></span><br><span class="line">$ etcd -name infra1 -initial-advertise-peer-urls http://10.0.1.11:2380 \</span><br><span class="line">-listen-peer-urls http://10.0.1.11:2380 \</span><br><span class="line">-initial-cluster-token etcd-cluster-1 \</span><br><span class="line">-initial-cluster infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380 \</span><br><span class="line">-initial-cluster-state new</span><br><span class="line"></span><br><span class="line">$ etcd -name infra2 -initial-advertise-peer-urls http://10.0.1.12:2380 \</span><br><span class="line">-listen-peer-urls http://10.0.1.12:2380 \</span><br><span class="line">-initial-cluster-token etcd-cluster-1 \</span><br><span class="line">-initial-cluster infra0=http://10.0.1.10:2380,infra1=http://10.0.1.11:2380,infra2=http://10.0.1.12:2380 \</span><br><span class="line">-initial-cluster-state new</span><br></pre></td></tr></table></figure><p> 在初始化完成后，etcd还提供动态增、删、改etcd集群节点的功能，这个需要用到etcdctl命令进行操作。</p></li><li><p>etcd自发现模式</p><p> 通过自发现方式启动etcd集群需要事先准备一个etcd集群。如果你已经有一个etcd集群，首先你可以执行如下命令设定集群的大小，假设为3。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT http://myetcd.local/v2/keys/discovery/6c007a14875d53d9bf0ef5a6fc0257c817f0fb83/_config/size -d value=3</span><br></pre></td></tr></table></figure><p> 然后你要把这个url地址 <code>http://myetcd.local/v2/keys/discovery/6c007a14875d53d9bf0ef5a6fc0257c817f0fb83</code> 作为 <code>-discovery</code> 参数来启动etcd。节点会自动使用 <code>http://myetcd.local/v2/keys/discovery/6c007a14875d53d9bf0ef5a6fc0257c817f0fb83</code> 目录进行etcd的注册和发现服务。</p><p> 最终你在某个机器上启动etcd的命令如下。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ etcd -name infra0 -initial-advertise-peer-urls http://10.0.1.10:2380 \</span><br><span class="line">-listen-peer-urls http://10.0.1.10:2380 \</span><br><span class="line">-discovery http://myetcd.local/v2/keys/discovery/6c007a14875d53d9bf0ef5a6fc0257c817f0fb83</span><br></pre></td></tr></table></figure><p> 如果你本地没有可用的etcd集群，etcd官网提供了一个可以公网访问的etcd存储地址。你可以通过如下命令得到etcd服务的目录，并把它作为 <code>-discovery</code> 参数使用。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://discovery.etcd.io/new?size=3</span><br><span class="line">http://discovery.etcd.io/3e86b59982e49066c5d813af1c2e2579cbf573de</span><br></pre></td></tr></table></figure><p> 同样的，当你完成了集群的初始化后，这些信息就失去了作用。当你需要增加节点时，需要使用etcdctl来进行操作。</p><p> 为了安全，请务必每次启动新etcd集群式，都是用新的descovery token进行注册。另外，如果你初始化时启动的节点超过了指定的数量，多余的节点会自动转化为Proxy模式的etcd。</p></li><li><p>DNS自发现模式</p><p> etcd还支持使用DNS SRV记录进行启动。关于DNS SRV记录如何进行服务发现，可以参阅<a href="http://tools.ietf.org/html/rfc2782">RFC2782</a>，所以，你要在DNS服务器上进行相应的配置。</p><ol><li><p>开启DNS服务器上SRV记录查询，并添加相应的域名记录，使得查询到的结果类似如下。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig +noall +answer SRV _etcd-server._tcp.example.com</span><br><span class="line">_etcd-server._tcp.example.com. 300 IN   SRV 0 0 2380 infra0.example.com.</span><br><span class="line">_etcd-server._tcp.example.com. 300 IN   SRV 0 0 2380 infra1.example.com.</span><br><span class="line">_etcd-server._tcp.example.com. 300 IN   SRV 0 0 2380 infra2.example.com.</span><br></pre></td></tr></table></figure></li><li><p>分别为各个域名配置相关的A记录指向etcd核心节点对应的机器IP。使得查询结果类似如下。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dig +noall +answer infra0.example.com infra1.example.com infra2.example.com</span><br><span class="line">infra0.example.com. 300 IN  A   10.0.1.10</span><br><span class="line">infra1.example.com. 300 IN  A   10.0.1.11</span><br><span class="line">infra2.example.com. 300 IN  A   10.0.1.12</span><br></pre></td></tr></table></figure></li></ol><p> 做好了上述两步DNS的配置，就可以使用DNS启动etcd集群了。配置DNS解析的url参数为 <code>-discovery-srv</code>，其中某一个节点的启动命令如下。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ etcd -name infra0 \</span><br><span class="line">-discovery-srv example.com \</span><br><span class="line">-initial-advertise-peer-urls http://infra0.example.com:2380 \</span><br><span class="line">-initial-cluster-token etcd-cluster-1 \</span><br><span class="line">-initial-cluster-state new \</span><br><span class="line">-advertise-client-urls http://infra0.example.com:2379 \</span><br><span class="line">-listen-client-urls http://infra0.example.com:2379 \</span><br><span class="line">-listen-peer-urls http://infra0.example.com:2380</span><br></pre></td></tr></table></figure><p> 当然，你也可以直接把节点的域名改成IP来启动。</p></li></ol></li><li><p>运行时节点变更</p><p>  etcd集群启动完毕后，可以在运行的过程中对集群进行重构，包括核心节点的增加、删除、迁移、替换等。运行时重构使得etcd集群无须重启即可改变集群的配置，这也是新版etcd区别于旧版包含的新特性。</p><p>  只有当集群中多数节点正常的情况下，你才可以进行运行时的配置管理。因为配置更改的信息也会被etcd当成一个信息存储和同步，如果集群多数节点损坏，集群就失去了写入数据的能力。所以在配置etcd集群数量时，强烈推荐至少配置3个核心节点。</p><ol><li><p>节点迁移、替换</p><p> 当节点所在的机器出现硬件故障，或者节点出现如数据目录损坏等问题，导致节点永久性的不可恢复时，就需要对节点进行迁移或者替换。当一个节点失效以后，必须尽快修复，因为etcd集群正常运行的必要条件时集群中多数节点都正常工作。</p><p> 迁移一个节点需要进行四步操作：</p><ul><li>暂停正在运行的节点程序进程</li><li>把数据目录从现有机器拷贝到新机器</li><li>使用api更新etcdd中对应节点指向机器的url记录更新为新机器的ip</li><li>使用同样的配置项和数据目录，在新的机器上启动etcd。</li></ul></li><li><p>节点增加</p><p> 增加节点可以让etcd的高可用性更强。例如，3个节点最多允许1个节点失效；5个节点时就可以允许有2个节点失效。同时增加节点还可以让etcd集群具有更好的读性能，因为etcd的节点都是实时同步的，每个节点上都存储了所有的信息，增加节点可以从整体上提升读的吞吐量。</p><p> 增加一个节点需要进行两步操作：</p><ul><li>在集群中添加这个节点的url记录，同时获得集群的信息</li><li>使用获得的集群信息启动新etcd节点</li></ul></li><li><p>节点移除</p><p> 有时不得不在提高etcd的写性能和增加集群高可用性上进行权衡。Leader节点在提交一个写记录时，会把这个消息同步到每个节点，当得到多数节点的同意反馈后，才会真正写入数据。所以节点越多，写入性能越差。在节点过多时，你可能需要移除一个或多个。</p><p> 移除节点只需要一部操作，就是把集群中这个节点的记录删除。然后对应机器上的该节点就会自动停止。</p></li><li><p>强制性重启集群</p><p> 当集群超过半数的节点都失效时，就需要通过手动的方式，强制性让某个节点以自己为Leader，利用原有数据启动一个新集群。</p><p> 此时需要进行两步操作：</p><ul><li>备份原有数据到新机器</li><li>使用 <code>-force-new-cluster</code> 加备份的数据重新启动节点</li></ul><p> 注意：强制性重启是一个迫不得已的选择，它会破坏一致性协议保证的安全性（如果操作时集群中尚有其它节点在正常工作，就会出错），所以在操作前请务必要保存好数据。</p></li></ol></li></ul><h4 id="Proxy模式"><a href="#Proxy模式" class="headerlink" title="Proxy模式"></a>Proxy模式</h4><p>etcd作为一个反向代理把客户的请求转发给可用的etcd集群。这样你就可以在每一台机器都部署一个Proxy模式的etcd作为本地服务，如果这些etcd Proxy都能正常运行，那么你的服务发现必然是稳定可靠的。</p><p>Proxy并不是直接加入到符合强一致性的etcd集群中，同样的，Proxy并没有增加集群的可靠性，也没有降低集群的写入性能。</p><ul><li><p>Proxy取代Standby模式的原因</p><p>  为什么要有Proxy模式而不是直接增加etcd核心节点呢？实际上etcd每增加一个核心节点（peer），都会增加Leader节点一定程度的包括网络、CPU和磁盘的负担，因为每次信息的变化都需要进行同步备份。增加etcd的核心节点可以让整个集群具有更高的可靠性，但是当数量达到一定程度以后，增加可靠性带来的好处就变得不那么明显，反倒是降低了集群写入同步的性能。因此，增加一个轻量级的Proxy模式etcd节点是对直接增加etcd核心节点的一个有效替代。</p><p>  Proxy模式实际上是取代了原先的Standby模式。Standby模式除了转发代理的功能以外，还会再核心节点因为故障导致数量不足的时候，从Standby模式转为正常节点模式。而当那个故障的节点恢复时，发现etcd的核心节点数量已经达到预先设置的值，就会转为Standby模式。</p><p>  但是在新版etcd中，只会在最初启动etcd的集群时，发现核心节点的数量已经满足要求时，自动启用Proxy模式，反之则并未实现。主要原因有：</p><ol><li><p>etcd是用来保证高可用的组件，因此它所需要的系统资源（包括内存、硬盘和CPU）都应该得到充分保障以保证高可用。任由集群的自动变换随意地改变核心节点，无法让机器保证性能。所以etcd官方鼓励在大型集群中为运行etcd准备专有机器集群。</p></li><li><p>因为etcd集群是支持高可用的，部分机器故障并不会导致功能失效。所以机器发生故障时，管理员有充分的时间对机器进行检查和修复。</p></li><li><p>自动转换使得etcd集群变得复杂，尤其是如今etcd支持多种网络环境的监听和交互。在不同网络间进行转换，更容易发生错误，导致集群不稳定。</p></li></ol><p>  基于上述原因，目前Proxy模式有转发代理功能，而不会进行角色转换。</p></li></ul><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>etcd的存储分为内存存储和持久化（硬盘）存储两部分，内存中的存储除了顺序化的记录下所有用户对节点数据变更的记录外，还会对用户数据进行索引、建堆等方便查询的操作。而持久化则使用预写式日志（WAL：Write Ahead Log）进行记录存储。</p><p>在WAL的体系中，所有的数据在提交之前都会进行日志记录。在etcd的持久化存储目录中，有两个子目录。一个WAL，存储着所有事务的变化记录；另一个式snapshot，用于存储某一个时刻etcd所有目录的数据。通过WAL和snapshot相结合的方式，etcd可以有效地进行数据存储和节点故障恢复等操作。</p><p>既然有了WAL实时存储了所有的变更，为什么还需要snapshot呢？随着使用量的增加，WAL存储的数据会暴增，为了防止磁盘很快就爆满，etcd默认每10000条记录做一次snapshot，经过snapshot以后的WAL文件就可以删除。而通过API可以查询的历史etcd操作默认为1000条。</p><p>首次启动时，etcd会把启动的配置信息存储到data-dir参数指定的数据目录中。配置信息包括本地节点的ID、集群ID和初始时集群信息。用户需要避免etcd从一个过期的数据目录中重新启动，因为使用过期的数据目录启动的节点会与集群中的其他节点产生不一致（如：之前已经记录并同意Leader节点存储某个信息，重启后又向Leader节点申请这个信息）。所以，为了最大化集群的安全性，一旦有任何数据损坏或丢失的可能性，你就应该把这个节点从集群中移除，然后加入一个不带数据目录的新节点。</p><ul><li><p>预写式日志（WAL）</p><p>  WAL最大的作用是记录了整个数据变化的全部历程。在etcd中，所有数据的修改在提交前，都要先写入到WAL中。使用WAL进行数据的存储使得etcd拥有两个重要功能。</p><ul><li><p>故障快速恢复：当你的数据遭到破坏时，就可以通过执行所有WAL中记录的修改操作，快速从最原始的数据恢复到数据损坏前的状态。</p></li><li><p>数据回滚（undo）&#x2F;重做（redo）：因为所有的修改操作都被记录在WAL中，需要回滚或重做，只需要反向或正向执行日志中的操作即可。</p></li></ul></li></ul><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><ul><li><a href="https://github.com/soyking/e3w">e3w</a></li><li><a href="https://github.com/yodlr/CoreGI">CoreGI</a></li></ul><h3 id="注册中心ZooKeeper"><a href="#注册中心ZooKeeper" class="headerlink" title="注册中心ZooKeeper"></a>注册中心ZooKeeper</h3><p><a href="http://zookeeper.apache.org/">ZooKeeper文档</a></p><h3 id="配置中心Apollo"><a href="#配置中心Apollo" class="headerlink" title="配置中心Apollo"></a>配置中心Apollo</h3><p><a href="https://github.com/ctripcorp/apollo/wiki">Apollo文档</a></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><ul><li><p>更新操作：</p><ol><li>更新数据库；</li><li>删除本地缓存和分布式缓存。</li></ol></li><li><p>查询操作：</p><ol><li>查询本地缓存；</li><li>本地缓存命中，返回缓存数据；</li><li>本地缓存未命中，查询分布式缓存；</li><li>分布式缓存命中，更新本地缓存，返回缓存数据；</li><li>分布式缓存未命中，查询数据库，更新本地缓存和分布式缓存，返回数据。</li></ol></li></ul><h3 id="缓存框架选型"><a href="#缓存框架选型" class="headerlink" title="缓存框架选型"></a>缓存框架选型</h3><ul><li><p>分布式缓存：Redis</p></li><li><p>分布式缓存集群：<del>Codis3.x + etcd</del> Redis Cluster</p><p>  <del><a href="https://github.com/CodisLabs/codis">https://github.com/CodisLabs/codis</a></del></p></li><li><p>Redis客户端：lettuce</p></li><li><p>本地缓存：Guava Cache</p></li><li><p>Redis开发规范</p></li></ul><h3 id="应用集成"><a href="#应用集成" class="headerlink" title="应用集成"></a>应用集成</h3><ul><li>服务调用方需要传入是否缓存至本地缓存、是否缓存至分布式缓存参数，而不应该做缓存读取及更新操作；服务提供方按需整合缓存中间件。</li><li>缓存中间件需要处理缓存的读取及更新，设置并应用读取及更新策略，还需要支持缓存数据类型的自动适配。</li></ul><h2 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h2><h3 id="ORM框架选型-Mybatis-Plus"><a href="#ORM框架选型-Mybatis-Plus" class="headerlink" title="ORM框架选型 Mybatis-Plus"></a>ORM框架选型 Mybatis-Plus</h3><p>Spring生态当前比较流行的ORM框架主要有JPA（默认实现使用hibernate）和Mybaits（推荐Mybatis-Plus框架）。针对实际开发时会有部分联表分页查询的情况，选择更为灵活的Mybatis-Plus作为ORM框架。</p><p><a href="https://mp.baomidou.com/guide/">Mybatis-Plus使用指南</a></p><h3 id="支持多租户方案"><a href="#支持多租户方案" class="headerlink" title="支持多租户方案"></a>支持多租户方案</h3><p>常见的支持多租户的方式有三种：</p><ol><li>每个租户有独立的物理数据库</li><li>每个租户共享物理数据库，有独立的数据库（Schema，MySQL中Schema等同Database）</li><li>每个租户共享数据库</li></ol><p>这里根据实际情况选择第二种方式，每个租户独立的数据库（Schema）。</p><p>具体实现参考如下文档：</p><ul><li><p><del><a href="https://mp.baomidou.com/guide/dynamic-datasource.html">动态数据源</a></del></p></li><li><p><del><a href="https://gitee.com/baomidou/dynamic-datasource-spring-boot-starter/wikis/pages?sort_id=1030624&doc_id=147063">动态参数解析数据源</a></del></p></li><li><p><a href="https://mp.baomidou.com/guide/dynamic-table-name-parser.html">动态表名SQL解析器</a></p></li></ul><h3 id="sql语句审核"><a href="#sql语句审核" class="headerlink" title="sql语句审核"></a>sql语句审核</h3><p>Mybatis对sql的灵活支持可能导致开发人员编写低质量的sql语句，因此需要增加sql语句审核流程。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="MySQL高可用方案-MHA-【待定，考虑使用天翼云RDS】"><a href="#MySQL高可用方案-MHA-【待定，考虑使用天翼云RDS】" class="headerlink" title="MySQL高可用方案 - MHA 【待定，考虑使用天翼云RDS】"></a>MySQL高可用方案 - MHA 【待定，考虑使用天翼云RDS】</h3><p>使用MHA + Keepalived + MySQL主从复制方式实现MySQL高可用。</p><p><a href="https://www.lmfe.org/2017/11/28/MHA+Keepalived+MySQL%E4%B8%BB%E4%BB%8E/">MHA+Keepalived+MySQL主从</a></p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><ul><li>技术选型：<a href="https://shardingsphere.apache.org/document/current/cn/overview/">sharding-jdbc</a> 【待定】</li></ul><h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><h3 id="分布式文件服务-fastdfs"><a href="#分布式文件服务-fastdfs" class="headerlink" title="分布式文件服务 fastdfs"></a>分布式文件服务 fastdfs</h3><ul><li><p>fasfdfs服务端</p><p>  <a href="https://github.com/happyfish100/fastdfs/wiki">部署文档</a></p></li><li><p>fastdfs客户端</p><p>  使用tobato&#x2F;FastDFS_Client，已集成到SpringBoot。</p><p>  <a href="https://github.com/tobato/FastDFS_Client">FastDFS-Client</a></p></li></ul><h2 id="认证鉴权"><a href="#认证鉴权" class="headerlink" title="认证鉴权"></a>认证鉴权</h2><h3 id="开放平台"><a href="#开放平台" class="headerlink" title="开放平台"></a>开放平台</h3><ul><li>Spring Security OAuth2</li></ul><h3 id="客户管理系统"><a href="#客户管理系统" class="headerlink" title="客户管理系统"></a>客户管理系统</h3><ul><li>Spring Security</li></ul><h3 id="企业平台管理"><a href="#企业平台管理" class="headerlink" title="企业平台管理"></a>企业平台管理</h3><ul><li><del>Spring Security LDAP</del> 【云服务器无法接入内网LDAP服务】</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="消息队列技术选型-RabbitMQ"><a href="#消息队列技术选型-RabbitMQ" class="headerlink" title="消息队列技术选型 RabbitMQ"></a>消息队列技术选型 RabbitMQ</h3><p>RabbitMQ可以比较容易地实现延时、重试队列，适用于当前地系统架构。而且Spring Boot Starter已经整合了AMQP（RabbitMQ是AMQP协议地实现），开发起来快捷方便。</p><h3 id="集群搭建-1"><a href="#集群搭建-1" class="headerlink" title="集群搭建"></a>集群搭建</h3><ul><li><p>RabbitMQ Cluster</p></li><li><p>Mirror queue policy</p></li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志方案-slf4j-log4j2-RabbitMQ-Kafka-ELK"><a href="#日志方案-slf4j-log4j2-RabbitMQ-Kafka-ELK" class="headerlink" title="日志方案 slf4j + log4j2 + RabbitMQ Kafka + ELK"></a>日志方案 slf4j + log4j2 + <del>RabbitMQ</del> Kafka + ELK</h3><ul><li>slf4j：日志门面</li><li>log4j2：日志功能实现</li><li><del>RabbitMQ：日志队列异步传入logstash，性能更好，避免磁盘IO限制了日志地输出性能</del></li><li>Kafka: 日志队列异步传入logstash，性能更好，避免磁盘IO限制了日志地输出性能</li><li>ELK：日志收集存储展示</li></ul><h2 id="监控-x2F-预警"><a href="#监控-x2F-预警" class="headerlink" title="监控&#x2F;预警"></a>监控&#x2F;预警</h2><h3 id="监控系统-Prometheus"><a href="#监控系统-Prometheus" class="headerlink" title="监控系统 Prometheus"></a>监控系统 Prometheus</h3><h3 id="监控可视化-Grafana"><a href="#监控可视化-Grafana" class="headerlink" title="监控可视化 Grafana"></a>监控可视化 Grafana</h3><h3 id="预警-Prometheus-alertmanager"><a href="#预警-Prometheus-alertmanager" class="headerlink" title="预警 Prometheus alertmanager"></a>预警 Prometheus alertmanager</h3><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><h3 id="手机客户端APP通知推送"><a href="#手机客户端APP通知推送" class="headerlink" title="手机客户端APP通知推送"></a>手机客户端APP通知推送</h3><p><del><a href="http://docs.getui.com/getui/server/java/start/">个推服务端Java快速入门</a></del> 【待定，需要调研其他第三方推送平台】</p><h3 id="网页消息推送"><a href="#网页消息推送" class="headerlink" title="网页消息推送"></a>网页消息推送</h3><ul><li><p>WebSocket协议</p><ul><li>服务端：<a href="https://github.com/TooTallNate/Java-WebSocket/wiki">Java-WebSocket</a></li><li>客户端：<a href="https://github.com/sockjs/sockjs-client">sockjs-client</a> 或者 浏览器原生WebSocket</li></ul></li></ul><h3 id="短信发送"><a href="#短信发送" class="headerlink" title="短信发送"></a>短信发送</h3><ul><li>使用当前已经接入的短信发送平台</li><li>短信回复统一处理</li></ul><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><ul><li>spring-boot-starter-mail</li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="工作流框架选型-Activiti-【待定，现阶段只需对当前工作流功能改进即可】"><a href="#工作流框架选型-Activiti-【待定，现阶段只需对当前工作流功能改进即可】" class="headerlink" title="工作流框架选型 Activiti 【待定，现阶段只需对当前工作流功能改进即可】"></a>工作流框架选型 Activiti 【待定，现阶段只需对当前工作流功能改进即可】</h3><ul><li>activiti-spring-boot-starter-basic</li></ul><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><h3 id="分布式任务调度框架-xxl-job"><a href="#分布式任务调度框架-xxl-job" class="headerlink" title="分布式任务调度框架 xxl-job"></a>分布式任务调度框架 xxl-job</h3><p><a href="http://www.xuxueli.com/xxl-job/#/">xxl-job文档</a></p><h3 id="集群搭建-2"><a href="#集群搭建-2" class="headerlink" title="集群搭建"></a>集群搭建</h3><p><a href="http://www.xuxueli.com/xxl-job/#/?id=%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89%EF%BC%9A">xxl-job调度中心集群</a></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><ul><li><p>Metabase</p></li><li><p>Redash</p></li></ul><h2 id="搜索-【待定，无使用场景】"><a href="#搜索-【待定，无使用场景】" class="headerlink" title="搜索 【待定，无使用场景】"></a>搜索 【待定，无使用场景】</h2><h3 id="搜索技术选型-Elasticsearch"><a href="#搜索技术选型-Elasticsearch" class="headerlink" title="搜索技术选型 Elasticsearch"></a>搜索技术选型 Elasticsearch</h3><ul><li>spring-boot-starter-data-elasticsearch</li></ul><h3 id="Elasticsearch集群搭建"><a href="#Elasticsearch集群搭建" class="headerlink" title="Elasticsearch集群搭建"></a>Elasticsearch集群搭建</h3><p>配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.zen.ping.unicast.hosts: [&quot;10.0.0.23&quot;,&quot;10.0.0.25&quot;]</span><br></pre></td></tr></table></figure><h2 id="在线文档预览"><a href="#在线文档预览" class="headerlink" title="在线文档预览"></a>在线文档预览</h2><ul><li><p><a href="https://github.com/kekingcn/kkFileView">kkFileView</a></p><p>  <a href="https://kkfileview.keking.cn/zh-cn/index.html">kkFileView文档</a></p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://github.com/aalansehaiyang/technology-talk#%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84">technology-talk 系统架构</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md">系统设计入门</a></li><li><a href="https://github.com/xingshaocheng/architect-awesome">《后端架构师技术图谱》</a></li><li><a href="https://coderxing.gitbooks.io/architecture-evolution/content/">从部落到帝国 - 后端技术栈的演进及开源实践</a></li><li><a href="http://www.phppan.com/2018/04/svr-stack/">从零开始搭建创业公司后台技术栈</a></li><li><a href="https://mp.baomidou.com/guide/dynamic-datasource.html">Mybatis Plus动态数据源</a></li><li><a href="https://zhuanlan.zhihu.com/p/59109781">谈谈怎么做服务隔离</a></li><li><a href="http://doc.oschina.net/grpc">gRPC 官方文档中文版</a></li><li><a href="https://www.cnblogs.com/ivictor/p/5686275.html">MySQL高可用方案MHA的部署和原理</a></li><li><a href="https://www.lmfe.org/2017/11/28/MHA+Keepalived+MySQL%E4%B8%BB%E4%BB%8E/">MHA+Keepalived+MySQL主从</a></li><li><a href="https://mp.weixin.qq.com/s/mcsyvqyu_re5EwoPpEY3Qw">缓存的那些事</a></li><li><a href="https://www.infoq.cn/article/etcd-interpretation-application-scenario-implement-principle">etcd：从应用场景到实现原理的全方位解读</a></li><li><a href="https://www.secrss.com/articles/8139">中通统一安全文件存储服务实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/33943882">JIRA中的史诗、故事、版本与冲刺</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 技术选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找算法</title>
      <link href="/2020/02/04/datastructure-algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/04/datastructure-algorithm/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><ul><li><p><strong>思想：</strong> 这是最简单的算法，从头开始遍历每个元素，并将每个元素与查找元素比较，如果一致则返回。</p></li><li><p><strong>时间复杂度：</strong> O(n)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == num) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ul><li><p><strong>思想：</strong> 二分查找前提是查找的数组是有序的，利用数据有序的特性提高查找性能。首先与数组中间位置的值比较，如果查找值大于中间位置值，则对数组右边以相同的思路查找，否则在左边以相同方式查找。这种方式使得每次查找范围变为原来的1&#x2F;2。</p></li><li><p><strong>时间复杂度：</strong> O(log2n)</p></li><li><p><strong>空间复杂度：</strong> O(1)</p></li><li><p><strong>代码示例：</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">halfSearch</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + ((hi - lo) &gt;&gt; <span class="number">1</span>); <span class="comment">//此处考虑边界问题不能使用 (lo + hi) / 2</span></span><br><span class="line">        <span class="keyword">if</span> (array[mid] == num) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; num) &#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h2><ul><li><strong>思想：</strong> 哈希表是根据设定的<strong>哈希函数H(key)和处理冲突方法</strong>将一组关键字映射到一个有限的地址区间上，并将关键字对应的值存储在该地址空间，可以通过关键字快速获取对应的值，这种表成为哈希表或散列，所得存储位置称为哈希地址或散列地址。作为线性数据结构与表格和队列等相比，哈希表无疑是查找速度比较快的一种。</li><li><strong>时间复杂度：</strong> O(1)</li></ul><ol><li><p>哈希函数：</p><ol><li>直接寻址法：取关键字或关键字的某个线性函数值为散列地址。即H(key)&#x3D;key或H(key)&#x3D;a?key + b，其中a和b为常数（这种散列函数叫做自身函数）。</li><li>数字分析法：数字分析法就是找出数字的规律，尽可能利用这些数据来构造冲突几率较低的散列地址。比如一组员工的出生年月日，这时我们发现出生年月日的前几位数字大体相同，这样的话，出现冲突的几率就会很大，但是我们发现年月日的后几位表示月份和具体日期的数字差别很大，如果用后面的数字来构成散列地址，则冲突的几率会明显降低。</li><li>平方取中法：取关键字平方后的中间几位作为散列地址。</li><li>折叠法：将关键字分割成位数相同的几部分，最后一部分位数可以不同，然后取这几部分的叠加（去除进位）作为散列地址。</li><li>除留余数法：取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。即H(key)&#x3D; key MOD p，p &lt;&#x3D; m。不仅可以对关键字直接取模，也可在折叠、平方取中等运算之后取模。对p的选择很重要，一般取素数或m，若p选的不好，容易产生同义词。</li></ol></li><li><p>hash冲突及解决</p><p> hash冲突在所难免，解决冲突是一个复杂问题。冲突主要取决于：</p><ul><li>与散列函数有关，一个好的散列函数的值应尽可能平均分布。</li><li>与解决冲突的哈希冲突函数有关。</li><li>与负载因子的大小有关。太大不一定就好，而且浪费空间严重，负载因子和散列函数是联动的。</li></ul><p> 解决冲突的办法：</p><ul><li>开放地址法：线性探查法、平方探查法、伪随机序列法、双哈希函数法。</li><li>拉链法：把所有同义词，及hash值相同的记录，用单链表连接起来。</li></ul></li><li><p>应用：字符串哈希；加密哈希；集合哈希；布隆过滤器</p></li><li><p>不足：获取有序序列复杂度高</p></li></ol><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><ul><li><strong>思想：</strong> 二叉查找树（Binary Search Tree），也称有序二叉树（Ordered Binary Tree），排序二叉树（Sorted Binary Tree），是指一棵空树或者具有下列性质的二叉树：1. 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；2. 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；3. 任意节点的左、右子树也分别为二叉查找树；4. 没有键值相等的节点（no duplicate nodes）。</li><li><strong>时间复杂度：</strong> 插入和查找的时间复杂度均为O(logn)，最坏为O(n)</li></ul><ol><li><p>插入</p><ul><li>如果当前节点是null，则创建新节点返回。</li><li>如果插入节点比当前节点值大，则插入其右孩子节点中。</li><li>如果插入节点比当前节点值小，则插入其左孩子节点中。<ul><li><p>复杂度：平均O(logn) 最坏O(n)</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">insert</span><span class="params">(Tree root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (val == root.val) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; root.val) &#123;</span><br><span class="line">        root.right = insert(root.right, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.left = insert(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>查找</p><ul><li><p>某个值</p><ul><li><p>思想：查找方式有点类似二分查找方法，只是这里采用的树结构进行存储。首先与根节点进行判断:</p><ol><li>如果当前节点为null，则直接返回null。</li><li>如果当前节点值与查找值相同则返回当前节点。</li><li>如果当前节点值小于查找值，则以递归方式到当前节点的右孩子查找。</li><li>如果当前节点值大于查找值，则以递归方式到当前节点的左孩子查找。</li></ol></li><li><p>时间复杂度：平均O(logn) 最坏O(n)</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">search</span><span class="params">(Tree root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val = val) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> search(root.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> search(root.right, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查找最小值</p><ul><li><p>思想：根据二叉查找树的特点，最小节点都是在最左节点上或者如果根节点无左孩子便是其本身。</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">min</span><span class="params">(Tree root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> min(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查找最大节点</p><ul><li><p>思想：同最小节点。</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">max</span><span class="params">(Tree root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> max(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>删除</p><ul><li><p>删除最小节点</p><ul><li><p>思想：找到根节点最左节点，如果其不存在右孩子则直接删除，否则用右孩子替换最左节点。需要注意的是根节点可能为null和不存在左孩子的情况。</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">deleteMin</span><span class="params">(Tree root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        root.left = deleteMin(root.left);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除最大节点</p><ul><li><p>思想：与删除最小节点类似，根据二叉搜索树的特性，最大节点是根节点的最右孩子。所以只要找到最右孩子节点，其存在左节点的话就用左节点替换否则直接删除。</p></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">deleteMax</span><span class="params">(Tree root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">        root.right = deleteMax(root.right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除某个节点</p><ul><li><p>思想：要删除一个节点首先需要找到该节点的位置，采用上面的查找方式进行查找。找到节点后就是删除的问题，可以按照下面的策略进行删除。</p><ol><li>如果一个节点无左孩子和右孩子，那么就可以直接删除。</li><li>如果只存在一个孩子节点，则用孩子节点替换。</li><li>如果存在两个孩子节点，那么可以用其左孩子最大的节点或者右孩子最小节点替换，并删除最左孩子节点或最右孩子节点。</li></ol></li><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Tree <span class="title function_">delete</span><span class="params">(Tree root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.val == val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left != <span class="literal">null</span> &amp;&amp; root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Tree</span> <span class="variable">leftBig</span> <span class="operator">=</span> max(root.left);</span><br><span class="line">            root.val = leftBig.val;</span><br><span class="line">            root.left = delete(root.left, leftBig.val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">        root.right  = delete(root.right, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.left = delete(root.left, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="AVL查找树"><a href="#AVL查找树" class="headerlink" title="AVL查找树"></a>AVL查找树</h2><ul><li><strong>思想：</strong> 二叉树查找树在插入时没有对二叉树的深度和结构做一个调整，使得叶子节点深度不一，在查找时深度越深的节点时间复杂度越高。为了改进查找的时间复杂度，于是出现了平衡二叉树（AVL）。平衡二叉树使得每个节点的左节点和右节点的深度差不超过1。</li></ul><ol><li><p>查找</p><p> 查找与二叉查找树一样。</p></li><li><p>插入</p><p> 当在AVL中插入新的结点时，需要根据实际情况对AVL中的某些结点做单旋转或双旋转操作，单旋转表示做一次顺时针或逆时针的旋转操作，而双旋转则做两次单旋转操作（先顺时针后逆时针，或者先逆时针后顺时针），单旋转发生在LL型插入和RR型插入，而双旋转则发生在LR型插入和RL型插入。以下的失去平衡点都指的是离插入点最近的那个失去平衡的结点。</p><ul><li>LL型：插入点位于失去平衡点的左孩子的左子树上；</li><li>RR型：插入点位于失去平衡点的右孩子的右子树上；</li><li>LR型：插入点位于失去平衡点的左孩子的右子树上；</li><li>RR型：插入点位于失去平衡点的右孩子的左子树上。</li></ul><p> 插入思路 和二叉搜索树的插入一样，首先在树中找到对应的位置然后插入，接着自底向上向根节点折回，于在插入期间成为不平衡的所有节点上进行旋转来完成。因为折回到根节点的路途上最多有 1.5 乘 log n 个节点，而每次AVL 旋转都耗费恒定的时间，插入处理在整体上耗费 O(log n) 时间。具体插入过程如下:</p><pre><code> 1. 如果当前结点为空，创建新结点返回. 1. 如果当前结点值和插入值相同，不做处理返回。 1. 如果插入值大于当前结点则插入到右其右孩子结点中。插入完成后比较左右孩子结点进行判断树是否失去平衡。如果是判断属于那种类型(RR, RL),并响应的旋转。最后更新当前结点的深度(孩子结点的最大深度加1，默认null深度为-1)。 1. 否则插入到其做孩子上。 同样比较左右孩子的深度判断是否平衡，对于失去平衡的情况下做出调整。</code></pre><ul><li><p>代码示例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AvlNode <span class="title function_">insert</span><span class="params">(AnyType x, AvlNode t)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AvlNode</span>(x, <span class="literal">null</span>, <span class="literal">null</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> myCompare(x, t.element); </span><br><span class="line">    <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        t.left = insert(x, t.left); </span><br><span class="line">        <span class="keyword">if</span> (height(t.left) - height(t.right) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (myCompare(x, t.left.element) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//左左情况 </span></span><br><span class="line">                t = rotateWithLeftChild(t); </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//左右情况</span></span><br><span class="line">                t = doubleWithLeftChild(t); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        t.right = insert(x, t.right); </span><br><span class="line">        <span class="keyword">if</span> (height(t.right) - height(t.left) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (myCompare(x, t.right.element) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//右左情况 </span></span><br><span class="line">                t = doubleWithRightChild(t); </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//右右情况 </span></span><br><span class="line">                t = rotateWithRightChild(t); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//完了之后更新height值 </span></span><br><span class="line">    t.height = Math.max(height(t.left), height(t.right)) + <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">return</span> t; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除</p><p> 从AVL树中删除可以通过把要删除的节点向下旋转成一个叶子节点，接着直接剪除这个叶子节点来完成。因为在旋转成叶子节点期间最多有 log n个节点被旋转，而每次 AVL 旋转耗费恒定的时间，删除处理在整体上耗费 O(log n) 时间。 a.当被删除节点n是叶子节点，直接删除 b.当被删除节点n只有一个孩子，删除n，用孩子替代该节点的位置 c.当被删除结点n存在左右孩子时，真正的删除点应该是n的中序遍在前驱，或者说是左子树最大的节点，之后n的值替换为真正删除点的值。这就把c归结为a，b的问题。</p><p> 从删除的结点处自低向上向根结点折回，根据当前结点的左右孩子深度判断是否平衡，如果不平衡则按选择规则进行旋转。最后更新当前结点深度，如此递归折回到根结点。</p></li></ol><h2 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h2><ul><li><p>定义</p><p>  B-树是一种平衡的多路查找树，它在文件系统中很有用。 定义：一棵m 阶的B-树，或者为空树，或为满足下列特性的m 叉树：</p><ul><li>树中每个结点至多有m 棵子树；</li><li>若根结点不是叶子结点，则至少有两棵子树；</li><li>除根结点之外的所有非终端结点至少有⎡m&#x2F;2⎤ 棵子树；</li><li>所有的非终端结点中包含以下信息数据：（n，A0，K1，A1，K2，…，Kn，An） 其中：Ki（i&#x3D;1,2,…,n）为关键码，且Ki&lt; Ki+1，Ai 为指向子树根结点的指针(i&#x3D;0,1,…,n)，且指针Ai-1 所指子树中所有结点的关键码均小于Ki (i&#x3D;1,2,…,n)，An 所指子树中所有结点的关键码均大于Kn， ⎡m&#x2F;2⎤ −1 ≤ n ≤m −1 ，n 为关键码的个数。</li><li>所有的叶子结点都出现在同一层次上，并且不带信息（可以看作是外部结点或查找失败的结点，实际上这些结点不存在，指向这些结点的指针为空</li></ul></li><li><p>B-树的特性：</p><ol><li>关键字集合分布在整棵树中；</li><li>任何一个关键字出现且只出现在一个节点中；</li><li>搜索有可能在非叶子节点结束；</li><li>其搜索性能等价于在关键字全集内做一次二分查找；</li><li>自动层次控制。</li></ol></li></ul><ol><li><p>查找</p><p> B-树的查找是由两个基本操作交叉进行的过程，即</p><ul><li>在B-树上找结点；</li><li>在结点中找关键码。</li></ul><p> 由于，通常B-树是存储在外存上的，操作⑴就是通过指针在磁盘相对定位，将结点信息读入内存，之后，再对结点中的关键码有序表进行顺序查找或折半查找。因为，在磁盘上读取结点信息比在内存中进行关键码查找耗时多，每次向下搜索一层都需要从内存中加载磁盘信息，B-树的层次树是决定B-树查找效率的首要因素。</p></li><li><p>插入</p><p> 在B-树上插入关键码与在二叉排序树上插入结点不同，关键码的插入不是在叶结点上 进行的，而是在最底层的某个非终端结点中添加一个关键码，若该结点上关键码个数不超过m-1 个，则可直接插入到该结点上；否则，该结点上关键码个数至少达到m 个，因而使该结点的子树超过了m棵，这与B-树定义不符。所以要进行调整，即结点的“分裂”。方法为：关键码加入结点后，将结点中的关键码分成三部分，使得前后两部分关键码个数个结点将其插入到父结点中。若插入父结点而使父结点中关键码个数超过m-1，则父结点继续分裂，直到插入某个父结点，其关键码个数小于m。可见，B-树是从底向上生长的。</p></li><li><p>删除</p><p> 分两种情况： </p><ol><li><p>删除最底层结点中关键码</p><ul><li>若结点中关键码个数大于⎡m &#x2F; 2⎤ -1，直接删去。</li><li>否则除余项与左兄弟(无左兄弟，则找左兄弟)项数之和大于等于2( -1) 就与它 们父结点中的有关项一起重新分配</li></ul></li><li><p>删除为非底层结点中关键码 若所删除关键码非底层结点中的Ki，则可以指针Ai 所指子树中的最小关键码X 替代 Ki，然后，再删除关键码X，直到这个X 在最底层结点上，即转为(1)的情形</p></li></ol></li></ol><h2 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h2><ul><li><p>定义</p><ul><li>有n 棵子树的结点中含有n 个关键码；</li><li>所有的叶子结点中包含了全部关键码的信息，及指向含有这些关键码记录的指针，且 叶子结点本身依关键码的大小自小而大的顺序链接。</li><li>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键码。</li></ul></li><li><p>B+树的特性</p><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中；</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li><li>更适合文件索引系统；</li></ol></li></ul><ol><li><p>查找</p><p> 对B+树可以进行两种查找运算：</p><ul><li>从最小关键字起顺序查找；</li><li>从根结点开始，进行随机查找。</li></ul><p> 在查找时，若非终端结点上的剧组机等于给定值，并不终止，而是继续向下直到叶子结点。因此，在B+树中，不管查找成功与否，每次查找都是走了一条从根到叶子结点的路径。其余同B-树的查找类似。</p></li><li><p>插入</p><p> B+树的插入与B树的插入过程类似。不同的是B+树在叶结点上进行，如果叶结点中的关键码个数超过m，就必须分裂成关键码数目大致相同的两个结点，并保证上层结点中有这两个结点的最大关键码。</p></li><li><p>删除</p><p> B+树的删除也仅在叶子结点进行，当叶子结点中的最大关键字被删除时，其在非终端结点中的值可以作为一个“分界关键字”存在。若因删除而使结点中关键字的个数少于m&#x2F;2 （m&#x2F;2结果取上界，如5&#x2F;2结果为3）时，其和兄弟结点的合并过程亦和B-树类似。</p></li></ol><h2 id="B-树和B-树最大的不同点"><a href="#B-树和B-树最大的不同点" class="headerlink" title="B+树和B-树最大的不同点"></a>B+树和B-树最大的不同点</h2><ol><li><p>B-树的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；B+树的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。</p></li><li><p>在B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；而B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。从这个角度看B-树的性能好像要比B+树好，而在实际应用中却是B+树的性能要好些。因为B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比B-树多，树高比B-树小，这样带来的好处是减少磁盘访问次数。尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且B+树的叶子节点使用指针连接在一起，方便顺序遍历(例如查看一个目录下的所有文件，一个表中的所有记录等)，这也是很多数据库和文件系统使用B+树的缘故。</p></li><li><p>B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</p></li></ol><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><ul><li><p>思想</p><p>  红黑树，一种二叉查找树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black。通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。</p></li><li><p>特性</p><ul><li>节点是红色或黑色。 </li><li>根是黑色。 </li><li>所有叶子都是黑色（叶子是NIL节点）。 </li><li>每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点) </li><li>从任一节点到其每个叶子的所有简单路径 都包含相同数目的黑色节点。</li></ul></li></ul><ol><li><p>插入</p><p> 红黑树插入的几种情况： </p><ol><li>z的叔叔y是红色的。 </li><li>z的叔叔y是黑色的，且z是右孩子 </li><li>z的叔叔y是黑色的，且z是左孩子</li></ol></li><li><p>删除</p><p> 红黑树删除的几种情况。 </p><ol><li>x的兄弟w是红色的。</li><li>x的兄弟w是黑色的，且w的俩个孩子都是黑色的。</li><li>x的兄弟w是黑色的，且w的左孩子是红色，w的右孩子是黑色。</li><li>x的兄弟w是黑色的，且w的右孩子是红色的。</li></ol></li></ol><h2 id="红黑树和AVL树的比较"><a href="#红黑树和AVL树的比较" class="headerlink" title="红黑树和AVL树的比较"></a>红黑树和AVL树的比较</h2><ul><li><p>红黑树</p><ul><li>(1)并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。</li><li>(2)此外，由于它的设计，任何不平衡都会在三次旋转之内解决。红黑树能够给我们一个比较“便宜”的解决方案。红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高。</li></ul></li><li><p>AVL树</p><ul><li>它的左子树和右子树都是AVL树，左子树和右子树的高度差不能超过;</li><li>查找、插入和删除在平均和最坏情况下都是O(log n),增加和删除可能需要通过一次或多次树旋转来重新平衡这个树;</li><li>一棵n个结点的AVL树的其高度保持在0(log2(n)),不会超过3&#x2F;2log2(n+1) 一棵n个结点的AVL树的平均搜索长度保持在0(log2(n)). 一棵n个结点的AVL树删除一个结点做平衡化旋转所需要的时间为0(log2(n)).</li></ul></li></ul><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构-算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一套摆脱疲劳的自救指南</title>
      <link href="/2020/02/04/post/%E4%B8%80%E5%A5%97%E6%91%86%E8%84%B1%E7%96%B2%E5%8A%B3%E7%9A%84%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/"/>
      <url>/2020/02/04/post/%E4%B8%80%E5%A5%97%E6%91%86%E8%84%B1%E7%96%B2%E5%8A%B3%E7%9A%84%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/cS1noYM5wPBtBs30wHFgFQ">一套摆脱疲劳的自救指南</a> <mark class="hl-label green">转载</mark> </p></blockquote><p>最近和朋友聊天，大家都有这么一个感触：</p><p>随着年龄增长，一方面，身体开始出现小问题。以前深夜工作是家常便饭，现在稍微睡得晚一点，第二天一定会头痛。</p><p>另一方面，精神状态也开始走下坡路。经常会时不时走神，忘了在做什么，一天下来总会精疲力尽。有时明明有大把时间，却什么都不想做，对什么事都提不起兴趣，就想静静瘫着，让时间给「消磨」掉……</p><p>知乎有一个经典的问题，叫做：<strong>为什么那么多人开车回家，到楼下了不下车还要在车里坐好久？</strong></p><p>下面的回答参差百态。有描述中年男人生活压力的，有嗟叹柴米油盐、家长里短的，有倾诉家庭主妇每日忙碌烦琐的，也有身在不同行业、对目标和生涯的焦虑感……总而言之，就是一个字：累。</p><p>这似乎已经成为我们这一代人的共同感受。</p><p>无论收入高低，无论工作是否满意，家庭是否和睦，似乎很少有人，能够逃脱生活的疲劳感。</p><p>它就像一只虫子，无孔不入，蚕食着我们的效率和幸福感。</p><hr><p>我很喜欢一个比喻：生活就像一场抛接球的杂耍。这些球，有的叫做家庭，有的叫做工作，有的叫做事业，有的叫做健康……</p><p>你要做的，就是尽量让它们，不要落地。</p><p>这当然很不容易。一开始，你很容易手忙脚乱 —— 但慢慢的，随着你找到自己的节奏，它们会开始稳定下来。你也会从一开始的慌乱和手足无措，过渡到平稳，再到自由。</p><p>逐渐地，不需要大脑去参与，它们会自己循着固定的路径动起来。</p><p>生活亦然。面对不断袭来的压力和信息，我们要做的，<strong>就是找到自己的节奏，建立一套稳定的模式</strong>，用来应对和处理种种事务。尽可能让一切「平稳」下来。</p><p>但很多人的模式是：每天，投入各种各样的事务之中，让自己被外在的压力淹没，奔波于此起彼伏的呼叫和应答中，亲自去推动各个节点运作，不断燃烧、透支自己的精力。</p><p>想一想，你的日常是不是这样的：「等一会」「快好了」「马上来」「别等我」「抱歉，我忘了」「太忙了，下次吧」……</p><p>这样日复一日，怎么会不感到「累」？</p><p>但这是不可持续的 —— <strong>千万不要透支自己</strong>。人生很长，没有什么事情，值得你用健康和未来的时间去换。</p><p>你要思考的是，如何建立一套稳定的流程和模式，让一切任务在它上面，能够长期持续运转下去、跑下去。</p><p>而你自己可以抽身出来，重新寻回心智和精力的自由。</p><p>这也许需要一些取舍，一些选择、牺牲和放弃 —— 但一旦这套模式能够建立起来，一切都是值得的。</p><p>这就是我今天想跟你聊的话题。</p><p>希望这些总结出来的经验，可以给你一些启发。</p><hr><h2 id="1-思虑过载"><a href="#1-思虑过载" class="headerlink" title="1. 思虑过载"></a>1. 思虑过载</h2><p>如果把大脑比作电脑，那么，每天起床，本应是我们精力最充沛、状态最佳的时刻。</p><p>但如今，有多少人一起床，想到的，是「又要面对一整天的烦心事了」，是房贷、车贷，吵闹的小孩和絮叨的长辈，是一整天望不到头的喧嚣、忙碌和琐碎……</p><p>这就像什么呢？电脑一开机，就已经加载了一堆自启动的程序，侵占了大量内存。</p><p>大脑也是一样的。太多的思维负荷，会造成认知资源占据，这就叫做思虑过载（Cognitive load）。</p><p>我们知道，作出任何思考、决策、行为，都要占用一定的认知资源。认知资源可以分为显性和隐性，就像电脑的前台和后台。这些想法，虽然没有进入「显性认知」，但已经占据了大量的「后台资源」。</p><p>这就会导致两个结果：一方面，可用的前台资源被它们挤压了，能够留给我们思考的资源就少了；另一方面，这些囤积在后台资源的念头，时不时会突破意识的封锁，涌入我们的思维中（ruminations，难以自制的思维涌动），打乱我们的日常工作。</p><p>更糟糕的是，这些念头会带来压力和负担，降低唤醒状态，让我们每一天都从压抑开始，从而造成整天工作效率的降低。</p><p>这也是造成我们一整天情绪消沉、状态低落的关键因素。</p><p>如何应对这种现象呢？一种思维方式是：</p><p><strong>变被动为主动，自己去决定「我要做什么」，重新找回「自主性」。</strong></p><p>具体而言，可以这样做：</p><h3 id="1）前一天晚上做好安排"><a href="#1）前一天晚上做好安排" class="headerlink" title="1）前一天晚上做好安排"></a>1）前一天晚上做好安排</h3><p>我会在前一天临睡前，整理一遍任务清单，从收集&#x2F;待办的池子中，挑出5-6个最重要、最关键的任务，安排到第二天。并详细列出步骤分解、注意要点和大致的时间安排。</p><p>这样，一方面，有利于前一天的睡眠；另一方面，可以大大简化第二天的思维负担，无需再从堆积如山的任务中去思考，而是一起床就可以立刻行动，用行动让自己「忙起来」，不给自己忧虑的时间。</p><h3 id="2）留出一定的宽裕度"><a href="#2）留出一定的宽裕度" class="headerlink" title="2）留出一定的宽裕度"></a>2）留出一定的宽裕度</h3><p>我们每天都有许多事情要完成，它们或许都很重要，但这其中，一定有一些比别的更重要 —— 优先去完成它们。</p><p>然后，就停止这一天的工作，给自己留出一定的宽裕时间，让自己能够自由支配。哪怕是休息，发呆，小憩，也不要陷入盲目的忙碌中。</p><p>不要想着「把所有的事情做好」，这是不可能的。你要做的，是让一切重新回到自己的掌控中。<strong>做出取舍。该舍弃的，就果断舍弃。</strong></p><p>与其把所有事情做到60分，不如把最重要的事情做到100分。</p><h3 id="3）聚焦在长期价值上"><a href="#3）聚焦在长期价值上" class="headerlink" title="3）聚焦在长期价值上"></a>3）聚焦在长期价值上</h3><p>不妨这样问问自己：我可以做些什么，来摆脱目前这种忙碌的状态？</p><p>无论是设计一套流程，还是把部分工作委托出去，又或者是把细碎的任务合并起来，还是优化、压缩任务步骤和时间……这些，长期来看都是更具价值的，也是你应该着重去聚焦的。</p><p>把它们作为你每天「最重要的事项」，想办法让自己能够抽身出来。</p><h2 id="2-被压榨感"><a href="#2-被压榨感" class="headerlink" title="2. 被压榨感"></a>2. 被压榨感</h2><p>什么是被压榨感？它是指：自己一直在劳动和付出，但却始终得不到反馈、认可和肯定，仿佛自己的付出都是无价值的。</p><p>想一想，你是否有过这些感受：</p><ul><li>辛辛苦苦准备的方案，根本连拿出来展示的机会都没有；</li><li>连续加班好几天，终于做得差不多了，老板突然又改口，前面的都白做了；</li><li>帮了别人的忙，却被人视作理所当然，连一句谢谢都不说。</li></ul><p>……</p><p>在这个时代，被压榨感是极其普遍的。</p><p>一切变化太快，为了应对变化，应对不确定性，我们不得不提高节奏，加快效率，不断连轴运转。但我们能够从中获得的、能够使我们安心的，却极其有限。</p><p>而人际之间，过度地追求「利益输送」「资源交换」「合作双赢」，追求「变现」和「收益」，也使得纯粹的理想主义者有点寸步难行。</p><p>被压榨感跟自我效能感密切相关，也跟幸福感密切相关：过度感到「被压榨」，会降低对自我价值的评价，从而导致缺乏幸福感。</p><p>如何应对这种现象呢？一种思维方式是：<strong>去发现生活中微小的幸福感。</strong></p><p>具体来说：</p><h3 id="1）5分钟给予"><a href="#1）5分钟给予" class="headerlink" title="1）5分钟给予"></a>1）5分钟给予</h3><p>哈佛商学院的一份报告指出：当我们对他人表现出慷慨、热情和友好时，我们会得到强有力的情感奖励。这种幸福感会超过绝大多数其他行动。</p><p>这种情感奖励在什么情况下最为强烈呢？当我们的馈赠，得到及时有效的回报 —— 亦即，产生了良好的社会联结（Social Connection）时，回报是最高的。</p><p>所以，我一直在鼓励一种行为，就是社群之间的链接和互助。有什么需要的东西，其他人及时伸出援手；有什么问题，及时给予鼓励和回答；发现了好东西，分享给大家，等等。</p><p>这些，未必一定能帮上忙，但是，这对于给予和接受双方，都是一种有效的情感奖励。</p><p>当然，这种做法需要反馈。哪怕只是一个肯定，一句感谢，都会非常有效。</p><h3 id="2）记录幸福感"><a href="#2）记录幸福感" class="headerlink" title="2）记录幸福感"></a>2）记录幸福感</h3><p>「被压榨感」源于什么呢？付出和收获的不对等。因此，有一个小技巧，就是每天去观察生活中有意思、有趣的事情，并记录下来。</p><p>我一直有记日记的习惯。在日记中，我会记录下每天许多一闪念的念头和灵感 —— 它们可能永远都不会「派上用场」，但光是记下来和阅读本身，就能产生一种充实的幸福感。它会让我感到，每一天都没有白白浪费掉。</p><p>你也可以在生活中，试着去探索和观察，用这种微小的幸福感，帮助自己「回血」。</p><h2 id="3-决策疲劳"><a href="#3-决策疲劳" class="headerlink" title="3. 决策疲劳"></a>3. 决策疲劳</h2><p>每一天，我们都会经历各种各样的决策，小到穿什么衣服出门，吃什么早餐，做点什么来消磨时间，大到这个报告怎么写，确定什么选题……诸如此类，不一而足。</p><p>实际上，无论决策大小，它都是一种权衡的过程，而这会消耗大量的能量和认知资源。因此，作出决策这个行为，会导致我们产生「精神耗竭」。表现出来的现象就是：烦躁。</p><p>你会觉得大脑仿佛锈住了，不愿意多加思考，觉得非常烦躁，希望快点逃离「需要决策」的情境。</p><p>这就叫做决策疲劳（Decision fatigue）。</p><p>2011 年的一项研究中，研究人员观察了美国法官做出的1100个假释。他们发现，一个人能否获得假释，影响最大的并非他们的罪名、背景和供述，而是法官作出裁决的时间：早上判决的案例中，超过70%获得了假释；而下午宣判的案例中，只有不到10%获得了假释。哪怕后者有些罪名更轻、刑期也更短。</p><p>原因很简单：经过一整天的审判和思考，法官们到了下午已经疲劳不堪，因此，他们会轻视犯人的供述，更加草率地下达判决。</p><p>这个原理，也是超市中，口香糖等零食往往放在靠近收银台位置的原因之一：当你在超市中逛了一圈，已经开始陷入「决策疲劳」，那么结账时，你对自己的控制力就会下降，更容易「放纵」自己。</p><p>所以，你可能听过一句话：「不要在晚上作出重要的决定。」原因也是一样的。</p><p>如何应对决策疲劳呢？一个思维方式是：<strong>简化自己需要做出的决策。</strong></p><p>既然作出的每一个决策，都可能导致后续决策质量的下降，那么，对于一些不重要的小事（穿什么衣服、吃什么、刷点什么消磨时间之类），尽量不要在上面耗费宝贵的脑力。</p><p>我最常用的就是 <strong>建立规则加随机决策</strong>。比如：把要做的琐事做成例行安排，时间到了按时执行，就是一个不错的做法。</p><p>再比如，当我有心情、手头又没有急事时，就打开印象笔记写一会东西 —— 这样就无需思考「什么时候写文章」了。</p><p>再比如，为什么我的笔记没有分类？很简单，判断一条笔记「该放到哪儿」本身，就是一种决策，它也是一种对认知资源的消耗，会在不知不觉之间增加你的思维负担。所以，我的规则很简单：全部放到一起，再按照「流」去定期整理。这样就可以把注意力抽离出来。把注意力抽离出来。</p><p>试一试：通过给自己设立规则，让规则帮助自己作出决策。规则覆盖不到的地方，则用随机来解决。</p><p>而如果是不伤筋动骨的小事，尽量让别人决定即可。不要浪费一分一毫的脑力。</p><p>你的精力，应该留给那些真正重要的、需要审慎思考和权衡的问题上。</p><h2 id="4-外在打扰"><a href="#4-外在打扰" class="headerlink" title="4. 外在打扰"></a>4. 外在打扰</h2><p>不妨思考一下：</p><ul><li>你每天要在多少种身份之间切换，去面对不同的人？</li><li>你每天有多少项目、任务要去关注和跟进？</li><li>你每天要在不同软件、APP之间来回切换多少次？</li></ul><p>很多人会觉得，这才是高效的表现，但这其实未必是一件好事。</p><p>经常看我文章的朋友，一定会知道：在不同状态、任务、软件间切换，一方面，其本身会消耗大量的时间和精力；另一方面，没做完的事情，会存在「契可尼效应」，继续驻留在我们的后台资源中，干扰着我们的思考和认知。</p><p>为什么我们很容易走神、分心，乃至于感到记忆力下降，突然「忘了自己刚在做什么」？很大一部分原因，就是因为，这些多任务切换，把我们的大脑空间都给塞满了。</p><p>于是，我们的注意力不断被削弱，不断被外在的信号吸引、打断、干扰。我们变得很难「坐得住」，很难真真正正地闲下来，把自己放空。</p><p>而每一次的切换，实际上发生了什么呢？</p><p>首先，我们需要唤醒「警觉网络」，注意到新信息，这时，阀门被打开；随后，「定向网络」启动，向大脑的不同部位发出指令，激活新的神经元；接着，我们从「执行网络」中脱离出来，定位到新的神经元，重新进入「执行网络」。</p><p>看上去是不是很繁琐？但每一次你从专注中被打断，或是走神，大脑都要经历一遍这个过程。</p><p>据美国 Basex 公司的测算：一名普通职员每天在工作中，平均会被打断 70 次。这至少会造成 2.1 小时被浪费在「切换」的过程中。</p><p>尤其对于内向者来说，这种模式，无异于一种折磨。</p><p>为什么？因为内向者处理一个新信息所需的时间更长，所激活的脑区更多，消耗的能量更多，同样，切换回原本状态所需要的时间和精力，也会更多。</p><p>内向者更擅长的是专注，是对一个问题的想象、思考和分析能力。但在这个社会中，却无时无刻不在经受着挑战。</p><p>应对这一点，一个思维方式是：<strong>建立你的「第二大脑」，把思维外部化。</strong></p><p>这是我一直在用的技巧，非常高效，推荐给大家。</p><p>具体怎么用呢？举个例子：我会有一页「项目工作台」的笔记，里面汇总了我所有手头上的项目，比如公众号、写作课、智识营，以及我其他的公司、投资、新项目、商业计划……</p><p>每当我有了一些进展，或是有了灵感、想法时，就会即时记录在对应的部分。并安排时间，把上面的内容整理到任务清单中，变成「流」。</p><p>这样，针对每一个项目，我做了什么，有哪些进展，遇到什么问题，有什么思路和想法，有哪些下一步的行动……就一目了然。</p><p>同样，我会有一整套「思考可视化」的方式。当我思考问题时，我会把它们画下来。这样，可以避免大脑中的信息被「冲走」，能够更好地看到整个系统的各个细节，方便我去思考和判断。</p><p>不妨试一试，在家里放一块白板，或是使用便利贴，在需要理清思路或是记录想法时，用来辅助，效果会非常好。</p><p>大脑是用来思考的，不要让它去记忆。</p><h2 id="5-信息过载"><a href="#5-信息过载" class="headerlink" title="5. 信息过载"></a>5. 信息过载</h2><p>这一点，我在之前的文章中，已经讲了太多。这里简单提几个数据吧。</p><p>来自 GIIC（Global Information Industry Center）的一份报告显示：2009年，美国人平均每天闲暇时间所接收到的信息，达到了 34 GB（约 10 万个单词）。</p><p>高瓴资本发布的报告称：2017年，平均每个成年人每天在数字媒体上花费的时间长达 5.9 个小时，包括音频视频、社交媒体、数字内容等。这其中，手机就占了 3.3 小时。</p><p>来自 IDC 的数据称：如今，每48小时所产生的数据量，相当于人类文明开始到2003年累计的数据总量。</p><p>同样是 IDC 的数据：2008年，全球产生的数据量为0.49ZB。这个数据有多大呢？是全人类历史上说过的话（约0.005ZB）的98倍。如果按一本书20万字（中文）计算，这个数据量相当于1400万亿本书，可以装满28万个图书馆。</p><p>而到了2011年，全球产生的数据总量达到多少呢？答案是1.82ZB。整整增加了2.7倍，平均每年多增加了25万个图书馆。</p><p>……</p><p>信息过载，对我们产生的影响是什么呢？我们会下意识地、难以自拔地，渴望去获取和追逐新的信息。</p><p>我自己尝试过观察：今天记下来的笔记，明天看一次，后天再看一次，就多多少少会感到厌烦 —— 我的大脑会告诉我：这条信息已经是「旧信息」了，我需要更多更新鲜的东西。</p><p>这一点，恰恰是令我们产生疲劳感的原因之一。</p><p>我们不断去追逐新信息，不断获取新鲜感的刺激，这本身是一个高耗能的行为 —— 但我们的大脑，会受到新鲜感的蛊惑，从而忽略和掩盖住这种耗能。</p><p>我们的能量，就在这种刺激之中，被用来接收、理解、记忆、处理，不知不觉地消耗殆尽。</p><p>所以，我现在也在有意识地克制自己，<strong>去做好信息的「反刍」，而非追逐新的信息。</strong></p><p>思考旧的信息间的联系，把它们进行碰撞和链接，尝试着用不同的角度思考，找出共性和新的主题 —— 这是一个很有意思的事情。</p><p>它可以优化你的信息处理模式：从「新鲜感导向」的「获取-囤积」，到「成就感导向」的「反刍-输出」。你会更容易觉察到自己的状态，摆脱被新鲜刺激所裹挟的「上瘾」状态。</p><p>不妨把它变成一种习惯：</p><p>1）试着把你记录的不同笔记放到一起，看看它们之间能产生什么联系，能否创造出新的火花。</p><p>2）在闲暇的碎片时间里，去反刍、回想自己记下的旧内容，尽量控制对新信息的摄入。</p><p>慢慢的，你会发现，你的思维会变得更清晰，对于许多东西，也不再只是停留于「模糊的印象」而已 —— 你会更透彻地理解它们。</p><hr><p>最后，再重提几点生理上的建议：</p><p>1）一定要睡好。</p><p>睡眠过程中的深度睡眠，能够有效促进腺苷到ATP的水合反应，为我们的机体储存能量、清除代谢垃圾。</p><p>请保证每天6小时以上不受干扰的睡眠，这极其重要。</p><p>2）多散步。</p><p>散步是最轻松有效的锻炼。不但能够促进血清素的合成，也能有效扩充大脑容量。波士顿大学的一项研究表明，每天步行1小时（约5000步），相当于大脑延缓衰老1.1年。</p><p>3）适当的运动。</p><p>每周 150 分钟一定强度的运动，能够有效提高心肺功能，从而提高每一天精力的上限。</p><p>这才是精力管理的关键 —— 上限太低，再怎么「管理」，也是无效的。</p><p>希望这篇文章，能够给你带来一场好觉。</p><p>没有什么比身体更重要，请好好善待它。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优秀工程师必备的一项技能，你解锁了吗？</title>
      <link href="/2020/02/04/post/%E4%BC%98%E7%A7%80%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E8%83%BD%EF%BC%8C%E4%BD%A0%E8%A7%A3%E9%94%81%E4%BA%86%E5%90%97%EF%BC%9F/"/>
      <url>/2020/02/04/post/%E4%BC%98%E7%A7%80%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E8%83%BD%EF%BC%8C%E4%BD%A0%E8%A7%A3%E9%94%81%E4%BA%86%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/q05Df_TKWUSlhK6V6KTrfw">优秀工程师必备的一项技能，你解锁了吗？</a> <mark class="hl-label green">转载</mark> </p></blockquote><blockquote><p>阿里妹导读：很多程序员在工作一段时间后会遇到迷茫期，虽有技术傍身，也难免会产生焦虑，反复思考怎样才能快速成长。关于如何提高自己的思考力，运用思考的力量推动能力提升，以此实现技术成长，阿里巴巴盒马产品技术部的岩动总结了一套思考方法，分享给每个正在成长的程序员。（本篇文章较长，阅读时间约30分钟，建议收藏后，找一个合适的时间慢慢品读哦）</p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们来看一下几类在程序员成长、发展的常见问题，如果你或多或少存在一些，那么恭喜你，这篇文章值得你仔细往下看了：</p><ul><li>你自认为付出了跟别人同样的努力，但是你的<strong>成长确实更慢一些</strong>，比如学得比别人慢，排查问题比别人慢，出方案老是有漏洞等等；</li><li>你觉得你只是在疲于应付需求，自己做的事情<strong>完全没有技术含量</strong>（很多人觉得自己做的业务开发就是没有技术含量，但我认为每个领域都有自己的技术含量，只是你有没有get到）；</li><li>你发现总是在<strong>犯同样的错误</strong>，或者做的事情不断地在同一个水平循环；</li><li>每次要晋升的时候，你发现根本<strong>讲不出来</strong>（很多人会认为是表达能力问题，但是我认为不是）；</li><li>当你换到一个新的领域，你发现<strong>自己的经验好像用不上</strong>；</li><li>你一直很难搞懂老鸟说的“认知升级”到底是什么概念？不同级别的技术思维能力到底有什么差别？为什么晋升的是他，而不是我？</li></ul><p>在这篇文章里，我会告诉大家一些<strong>技术成长的误区</strong>，我先点出来：</p><ul><li>只要把事情搞定了，成长是自然而然的事情——可能过段时间，你发现之前犯过的错误，后来一个都没有避免；</li><li>我只要努力，996甚至007，我就能够成长得比别人快——可能你发现你干得最多，但是并没有拿到最好的结果；</li><li>我尽力了，还是比别人慢，应该是我智商确实差一些——恭喜你，其实大家的智商并不会有太大差别；</li><li>别人表现好，或者晋升了，只不过是比我表达能力更强而已——我可以负责任地告诉你，这并不是仅仅是表达能力的问题。</li></ul><p>先抛一个非常重要的结论：<strong>“思考力”是程序员需要具备的一种至关重要的素质</strong>。掌握了思考力，你就掌握了在互联网领域，这种高度“智力密集型”行业成长的钥匙。上面这几个成长的问题和误区，跟没有掌握思考力有着非常重要的关系，而且我发现所有发展比较顺畅的同学，他们的思考和学习能力是非常强悍的。</p><p>我个人在工作中，一直有意或者无意地锻炼自己和团队同学的思考力，包括哪些是对我们最重要的思考力，如何去训练思考力，有一些心得，希望能够分享给大家。</p><h2 id="关于思考力"><a href="#关于思考力" class="headerlink" title="关于思考力"></a>关于思考力</h2><p>思考力是一门很深的学问，包括认知科学，心理学、教育学、逻辑学，如果要系统化学习，是需要看很多书的，我推荐以下几本：</p><p>1.<strong>《金字塔原理：思考、表达和解决问题的逻辑》</strong>-[美] 芭芭拉·明托，这本书系统阐述了思考、表达和解决问题的逻辑，也是麦肯锡的思维能力基础，算是一本比较标准的思考力教材；</p><p>2.<strong>《麦肯锡教我的思考武器》</strong>- [日] 安宅和人，作者根据自己在麦肯锡公司工作时积累的丰富经验以及脑神经学的专业背景，设计出一套极具逻辑性的问题解决思维模式；</p><p>3.<strong>《思维的本质》</strong>-[美]约翰·杜威 ，这本书是美国著名教育家约翰·杜威的代表作，阐述了思维训练的基础理论和实践；</p><p>本文并不是探讨思考力的深层理论，而是分享我们从日常的技术学习和项目过程中沉淀下来的思考力，以及如何培养这些思考力，这些思考力几乎我们每天都可以用到，只要你有一定体感，你一定会感同身受。</p><h2 id="有哪些对程序员最重要的思考力"><a href="#有哪些对程序员最重要的思考力" class="headerlink" title="有哪些对程序员最重要的思考力"></a>有哪些对程序员最重要的思考力</h2><h3 id="原理性思维：找出知识背后的原理"><a href="#原理性思维：找出知识背后的原理" class="headerlink" title="原理性思维：找出知识背后的原理"></a>原理性思维：找出知识背后的原理</h3><p>有的人会说，为什么要思考原理，而不是直接掌握知识就可以了？我只需要会用就行了啊。</p><p>我们先来举一些<strong>技术方案设计的案例</strong>：</p><ul><li><p>为什么订单创单要先create，然后enable？</p><p>  这其实是一种采用二阶段提交解决分布式事务的思路，只是从一般的事务框架延展到交易领域；</p></li><li><p>业务系统中为什么要使用消息？</p><p>  因为消息使用的是观察者模式，观察者模式的好处是可以实现多个消费事务与触发事务的解耦；</p></li><li><p>为什么业务系统中会使用DTS来做补偿？</p><p>  这本质上是一种最终一致性BASE理论解决分布式事务的一种思路；</p></li><li><p>为什么更新数据的时候一定要在sql中加上版本比对或者状态比对？</p><p>  这本质上是一种借助DB实现的乐观锁机制。</p></li></ul><p>进一步，你会发现再大到<strong>系统架构和顶层设计的案例</strong>：</p><ul><li><p>比如阿里系的技术框架NBF、TMF、早期的webx，各类框架设计理念，逃不脱设计模式，比如开闭原则，模板方法、责任链、工厂模式、开闭原则；</p></li><li><p>不管是底层中间件，错综复杂的业务系统，在设计的时候永远无法离开核心的业务建模，比如实体与实体关系的构建；在分析这类系统的设计思想时，你会发现最好的工具就是UML！</p></li></ul><p>实际上除了软件领域的原理，还有<strong>商业设计的原理</strong>，比如案例：</p><ul><li><p>所有的售中退款前必须要先取消履约，所有的履约过程中发生缺货都需要退款，为什么？因为交易的基本原则是：“钱货平衡”，钱和货的变更必须是最终同步的（允许短期的不平衡），你掌握了钱货平衡的基本原理，交易中的很多复杂的流程设计就很好理解了；</p></li><li><p>在设计财务系统、库存系统时候，业务流程、业务逻辑可能非常复杂，导致你晕头转向，这时候“有借必有贷，借贷必相等”的财务平衡性原理就发挥作用了，你只要知道这个原理，很快就能看懂各类财务流程、库存流转流程，以及各类数据对账逻辑；</p></li><li><p>在我的领域“高可用线下收银系统”进行线下系统容灾的时候，有各种容灾方案的设计，会员容灾、商品容灾、交易容灾、支付容灾……不同的容灾手段看起来让你眼花缭乱，但是他们有没有共同遵循的原则呢？有，这就是“让消费者最快速度完成交易，但保持最后追溯的能力”。你只要get到这个基本原理，设计各类容灾策略就会得心应手了。</p></li></ul><p>此外，我们的工作流程、管理手段，同样也蕴含着深层的原理，非常有意思，大家可以抽空仔细推敲一下，比如：</p><ol><li>为什么团队机制要透明？沟通要透明？</li><li>为什么要有owner意识，都是在工作，owner意识会有什么不同呢？</li><li>为什么管理者不能管得太细，也不能放羊？到底哪些该管，哪些不该管？</li></ol><p>所以，掌握了知识背后的原理，带来的好处是：</p><ul><li><p>软件系统的复杂度越来越高，我们所面对的场景越来越多，掌握原理实际上可以<strong>大幅度降低我们对于知识的记忆量，知识量是爆炸的，但是原理绝对是可控的！</strong></p></li><li><p><strong>原理性的东西比直接的知识有更强的复用度！</strong> 记住最核心的原理，当你面对新的场景时，你会惊喜地发现，你的理解速度大大加快！这个点大家应该有体会，比如可能之前我们都学习过dubbo等底层的RPC通信框架的基本原理，但是你如果仅了解了他的基本用法，你会发现对你现在做业务系统没有什么帮助！但是，当你了解的是dubbo如何寻址，如何做容灾，如何做扩展，你再去做业务系统，发现设计原理是一样的，并没有本质区别！这样你之前研究中间件的设计思想就可以快速用到业务系统上面。</p></li><li><p><strong>另外探求原理的过程，本身很有乐趣！</strong> 这是一个非常有价值的思维训练过程，不断对系统设计思想、业务设计思想、做事情的工作方式，追寻背后的原理，并找到他们之间的共性，在我看来非常有乐趣，一段时间训练以后，你会发现你看透本质的能力越来越强！</p></li></ul><p>好，那么我们程序员的工作中，<strong>究竟有哪些与原理性知识是需要我们掌握的呢？</strong> 按我们团队的实战经验来看：</p><ol><li>java，linux，数据结构和算法，数据库，网络通信与分布式计算的原理，这几类是比较重要的基础知识，我们在做方案设计、编码、问题排查中会运用得很多；</li><li>设计模式，UML这个是对系统架构设计必要要掌握的知识，当你经历了很多大规模的软件系统设计，回到根本上，你会发现逃不出这一块的理论和工具；</li><li>领域性的基本原则，比如我们上面提到的“钱货平衡”，“财务平衡公式”，“线下收银让消费者最快速度走人”，这种逻辑需要大家get到这些领域性的设计原理，甚至自己去总结出这种原理；</li><li>关于管理学，人际沟通，心理学的一些基本原理，大家可以按照自己的实际需求去看一下。</li></ol><p>如何在工作中学习和运用这些原理，我觉得有一个最佳实践：</p><ol><li><p><strong>首先，对你可能用到的领域知识，建立一个基本的概念。</strong> 看书，看文章，找行业资深的人去聊，都可以得到。注意，这里需要有一个基本的概念就可以，这样你在有可能touch到这些原理的时候，你会有意识，也不至于花很多时间；</p></li><li><p>在实践中，有个意识是 <strong>“多问一下为什么”，并一直“刨根问底”</strong>，最终肯定能够追查到背后的最终原理；这里面还要注意思考一下，为什么在这个地方会运用这个原理，也就是<strong>找到“场景”和“原理”的关联关系</strong>，这样你的理解会更加深刻；</p></li><li><p>了解了原理以后，<strong>在实践中运用一下</strong>，这样你对这个原理的理解就会非常深刻，并且你知道如何去运用这原理；</p></li><li><p>如果这是一个非常重要的原理，建议大家如有余力去结合经典的书籍<strong>系统化学习</strong>。</p></li></ol><h3 id="结构化思维：构建自己的知识树"><a href="#结构化思维：构建自己的知识树" class="headerlink" title="结构化思维：构建自己的知识树"></a>结构化思维：构建自己的知识树</h3><p>知识树要解决的问题，我们看一些场景：</p><ol><li>为什么我知道很多东西，但是当场景来的时候老是会记不起来使用；</li><li>完成一个方案你只能想到一些点状的手段，还有其他方案被漏掉了；</li><li>讲一件事情的时候逻辑非常混乱，前后没有逻辑性关联。</li></ol><p>但是很有可能你的知识都是知道的，为什么会出现这种悲剧？</p><p>这个就跟大脑中的知识结构有关，这是知识学习中 <strong>“索引”没有建立，也就是说，你的知识只有点，没有线！</strong> 大家想一想，把东西乱七八糟地丢在房间中，到用的时候没有查找的线索和路径，怎么找得到呢？</p><p>来看一下我们工作场景的结构化的典型案例，大家体会一下：</p><p>项目中测试MM提了一个bug，我总结出来的比较标准的问题定位步骤：</p><ol><li>确认刚才是否有过代码变更和部署，因为有比较高的概率是刚才变更的代码又搞坏了……</li><li>追踪链路日志看链路是否有异常；</li><li>通过RPC的控制台调用看接口输入输出是否符合预期；</li><li>追踪关键方法的入参和出参，看是否有问题；</li><li>定位到方法细节后，推理逻辑是否有问题；</li><li>如果无法通过推理，那就最后一招，回放异常流量debug，这样肯定能够找到原因。</li></ol><p>某个链路耗时比较长，需要进行<strong>性能优化</strong>，我的分析步骤是：</p><ol><li><p>通过实际流量制造一个耗时较高的trace；</p></li><li><p>进行trace分析，看清楚耗时最多的原因，然后按优先级进行排序；</p></li><li><p>针对对原因找解决方案，可能的方案有：</p><ol><li>减少数据访问次数或者计算量，常见手段是增加cache：线程内的invokeCache；分布式缓存tair；页面缓存……</li><li>增强处理速度，比如多线程加速；</li><li>减少循环调用次数，比如请求合并后再分发；</li><li>减少数据处理范围，比如减少查询内容，异步加载分页；</li><li>逻辑简化，比如逻辑进行优化，或者非核心逻辑异步化等；</li><li>……</li></ol></li></ol><p>4.改掉以后，回放同样的case，看性能消耗是否满足预期，不满足预期继续优化；</p><p><strong>如何熟悉一个新系统</strong>，我的步骤是：</p><ol><li>要一个测试账号，把相关功能走一遍，这样能非常快地了解一个系统的功能；</li><li>看关键的核心表结构，这样可以快速了解系统的领域模型；</li><li>根据功能步骤找到系统对外的接口列表，了解系统的L0业务流程；</li><li>下载系统工程，熟悉整个工程结构和模块职责；</li><li>以一个最重要的流程为入手点，阅读代码，看清楚核心的执行逻辑，可以变看边画时序图；</li><li>制造一个debug场景，以debug方式走一遍流程，这样可以实际加深一下对系统的理解；</li><li>做一个小需求，掌握相关的流程和权限；</li></ol><p>下单这里<strong>来了一个新的需求</strong>，出一个技术方案的步骤：</p><ol><li><p>看清楚之前的需求，把这个需求所在的场景和链路大致阅读一遍，搞懂；</p></li><li><p>找到需求的变化点；</p></li><li><p>分析变更的方案，涉及的内容可能会有：</p><ol><li><p>数据结构会不会变，如何变；</p></li><li><p>交互协议会不会变，如何变，交互协议分为：端和组件要不要变；和下游接口要不要变；</p></li><li><p>执行逻辑会不会变，如何变，执行逻辑变更的细化考虑点：是否变更域服务；是否变更流程编排；是否变更主干逻辑；是否变更扩展点是否变更扩展点的内部逻辑，变更内部逻辑的时候，又可以进一步拆解：</p><p> a.重构原有的方法，覆盖之前的逻辑，那就需要进行回归；<br> b.通过逻辑路由到新的方法，这里需要增加路由逻辑；</p></li></ol></li><li><p>稳定性方案；</p></li><li><p>发布方案；</p></li></ol><p>可以看到，面对任何一个场景，不管多大多小，我们所需要掌握的知识或者技能都可以构建成<strong>一个树结构，同类之间是顺序关系，上下之间是父子关系（或者粗细颗粒度）</strong>。</p><p>当这个树在大脑中构建起来以后，你会发现你<strong>做什么事情都是有一个明确的分析和执行逻辑</strong>，不太可能产生遗漏和混乱！</p><p><strong>那么如何训练出自己的知识树呢？</strong> 我给一些比较有效的实践方案：</p><ol><li><p><strong>一定要总结出自己的知识树，而不要盲从书本上的或者别人的</strong>，为什么呢？一是因为人的思维速度和习惯、技能有一定差异，不一定每个人都是一样的；二是如果没有内化别人的知识成为自己的知识，这棵树不太能够很熟练地运用；</p></li><li><p><strong>习惯性总结</strong>，做完任何一个事情，都习惯性地回顾一下，往自己的树上面挂新东西，这个是构建知识树的必备手段，这个总结不需要花很多时间，比如做完事情后花个几分钟回顾一下就可以，但是需要坚持；</p></li><li><p><strong>推荐一个很常见的工具：xmind</strong>，把自己的树记录下来；</p></li><li><p><strong>训练自己的思维习惯和做事方式变得结构化</strong>，当你做事情的时候，习惯性用树的方式推进，强迫自己按照这个方式来。</p></li></ol><h3 id="扩展性思维：举一反三，拓展思维"><a href="#扩展性思维：举一反三，拓展思维" class="headerlink" title="扩展性思维：举一反三，拓展思维"></a>扩展性思维：举一反三，拓展思维</h3><p><strong>扩展性思维的核心目标是提升我们思维的广度</strong>，也就是让我们的知识树变得更加开阔；</p><p>我在工作中总结出来的扩展性思维的两个关键的扩展方向：</p><p><strong>（1）举一反三：解决同类型的N个问题</strong></p><p>举一反三的好处是：“我们能否用同样的知识和手段去解决类似的相关联的几个类似问题”，先举一些案例：</p><ul><li>当发现某个系统的jvm参数配置存在一个错误配置，不是仅仅修复这个系统的jvm配置，而是把负责的几个系统都检查一下是否需要统一修改；</li><li>系统中存在某个bug导致产生了脏数据，不是直接订正已发现的脏数据，而是根据特征拉取出所有的脏数据，进行一次性处理；</li></ul><p><strong>这种思维方式的特征是举一反三，触类旁通，相当于产生批处理的效果</strong>，可以大大提升解决问题的效率，避免重复处理。</p><p><strong>（2）寻求更多的可能性：拓展解决问题的不同手段</strong></p><p>拓展思维常见的手段是：是否能够换更多的理解方式，或者更多的解法，举一些案例：</p><ul><li>产生故障的时候，快速止血除了回滚以外，还有哪些方案？如果故障处理经验丰富的人一定知道，除了回滚，其实还有系统降级，运营活动降级等多种方案；</li><li>除了写更加健壮的代码，还有哪些手段都可以提升系统的容错性？还有数据监控，单据闭环等多种手段；</li></ul><p>当解决问题的手段更多了，思维就开阔了。</p><h3 id="抓重点思维：提升效率，方便记忆和传递"><a href="#抓重点思维：提升效率，方便记忆和传递" class="headerlink" title="抓重点思维：提升效率，方便记忆和传递"></a>抓重点思维：提升效率，方便记忆和传递</h3><p>当我们发现知识树构建起来以后，怎么样使得记忆和使用的效率变高？而且对外传递的时候更加容易让人理解？抓重点思维要解决的场景是：</p><ol><li>如果每件事情都按照知识树方式做，效率可能不会特别高，有更快的办法么？</li><li>在对外沟通表达的时候，要表达核心思想，否则别人会很难理解你的表达内容；比如大家再晋升答辩、项目汇报的时候一定会有体会。</li></ol><p>解决这两类困惑，<strong>核心思路是要抓住重点和脉络</strong>。</p><p>但是抓住重点和知识结构化之间并不矛盾，而且我认为是有先后次序的，<strong>一定要先建立知识结构化，然后才能从里面筛选出重点</strong>，否则知识的体系是不完整的。</p><p>那么筛选重点的思路有哪些呢？</p><p><strong>（1）归纳法</strong></p><p>采用归纳法，把细节隐藏掉，呈现知识的脉络，这是一种非常好的思路；<strong>尤其是大家在准备晋升ppt时，ppt的每一页都需要归纳一个核心观点，不是全是细节，这个非常重要！</strong> 并且训练归纳的能力，本身就是对知识理解深刻程度的一种反映；</p><p><strong>（2）优先级法</strong></p><p>优先级策略往往应用于在多项任务之间<strong>找到最最关键或者收益最大</strong>的那个任务项，比如完成一个事情可能有若干个步骤，其中哪个步骤是最有效的，大致可以做一个排序。在实施的时候，你可以按照优先级去落实。</p><p>但是找到效果最好的那个任务项，在不同场景下是不同的，跟我们的熟练程度和经验有关。就像老中医把脉，越有经验判断越准，这块没有什么捷径，只能不断练习自己找到哪些任务项在什么场景下更加重要。</p><h3 id="反思性思维：思考哪里可以做得更好"><a href="#反思性思维：思考哪里可以做得更好" class="headerlink" title="反思性思维：思考哪里可以做得更好"></a>反思性思维：思考哪里可以做得更好</h3><p>反思性思维是提升知识质量和深度的一个关键能力。<strong>因为只有不断反思才能让下一次在上一次基础上升级</strong>，而不是重复循环。</p><p>常见的反思案例：</p><ul><li><p>有个问题我查了2个小时，师兄只花了10分钟，这是为什么呢？是他的业务比我熟悉？思路比我清晰？还是知道某个我不知道的工具？一定要找到关键的差异点，然后弥补掉这个差距；</p></li><li><p>一个项目项目做完了，从方案设计，研发过程，质量保障上面，哪些地方下次可以做得更好？找到不足，下次避免；</p></li></ul><p><strong>对于我们技术团队，哪些内容值得反思，我们团队的经验是：</strong></p><ol><li>这个项目商业价值OK吗？是否取得了预期的效果？</li><li>项目中我的能力有哪些问题，有哪些做得好的和不好的？</li><li>系统设计的优势和不足？</li><li>项目质量保障是否可以做得更好一些？</li><li>研发过程和项目管理是否有不足？</li></ol><p><strong>反思性思维的实践，注意有两个点比较关键：</strong></p><ol><li><p><strong>反思性思维最重要的意识：做事情的过程总有优化的空间，每次都要有进步</strong>；如果没有这种心态，那么很难持续地进行反思；</p></li><li><p><strong>反思是一种习惯和潜意识，可以在不经意之间经常进行</strong>，其实不需要很形式化地花很多时间，有时候做完一个事情，习惯性思考一下就可以。</p></li></ol><h2 id="锻炼思考力的有效实践"><a href="#锻炼思考力的有效实践" class="headerlink" title="锻炼思考力的有效实践"></a>锻炼思考力的有效实践</h2><h3 id="1-意识觉醒"><a href="#1-意识觉醒" class="headerlink" title="1.意识觉醒"></a>1.意识觉醒</h3><p><strong>意识觉醒是提升思考力最重要的一个点，我认为</strong>。只要形成了这种意识，就已经成功了一半。</p><p>很多同学思维能力没有上去，是没有意识到思考力这个概念，只是机械地做事情，做事情，做事情……每次都在同一个思维层次上面转悠，不可能有本质的提升。</p><p>从初级工程师，高级工程师，技术专家，高级专家，资深专家……级别提升靠什么？多接了多少需求？多写了多少代码？这些因素会有，但是关键因素不是这些，而是思考力在不断提升，思维方式在不断进化，进而导致业绩产出必变得更加优秀，产生的是事半功倍的效果。</p><p>能够坚持看到这里的同学，一定是能够知道思考力的重要性了。</p><h3 id="2-保持信心"><a href="#2-保持信心" class="headerlink" title="2.保持信心"></a>2.保持信心</h3><p>现在知道思考力的重要性了，很多同学可能认为自己是一个不够聪明的人。为什么我努力了，还是不行？</p><p><strong>给大家一个信心：有位大师说过：在相同的文明程度和种族背景下，每一个正常人的潜意识与意识相加之和，在精神能量意义上基本上是相等的。</strong></p><p>我几乎接触到的很努力但是成长速度不快的同学都是因为没有没有掌握正确的方法；</p><p>只要掌握了正确的方法并坚持训练，思考力绝对可以提升。</p><h3 id="3-空杯心态"><a href="#3-空杯心态" class="headerlink" title="3.空杯心态"></a>3.空杯心态</h3><p>思考的过程其实是对人的知识进行不断刷新和重构的过程，这里一定要保证空杯心态，对新的环境，新的理念，新的技术持开放态度，否则就是自己给自己制造阻力。</p><h3 id="4-思考的时间从哪里来？"><a href="#4-思考的时间从哪里来？" class="headerlink" title="4.思考的时间从哪里来？"></a>4.思考的时间从哪里来？</h3><p>常见的借口是“我连需求都做不完，哪来的时间思考”？</p><p>训练思考力其实并不需要太完整的时间，我的口诀是：<strong>“1.利用碎片时间；2.抓住工作的过程”</strong>。</p><ul><li><p>利用碎片时间，比如上下班路上的时间，吃饭的时候，可以把刚才或者今天的事情想一想，想通了，然后定期汇总一下就可以；</p></li><li><p>抓住工作的过程，注意，每次每次出技术方案，优化代码，排查问题，处理故障，准备晋升……都是一次训练的机会，在做事情的过程中就可以思考并快速实践。</p></li></ul><h3 id="5-思考力提升有没有什么判断标准？"><a href="#5-思考力提升有没有什么判断标准？" class="headerlink" title="5.思考力提升有没有什么判断标准？"></a>5.思考力提升有没有什么判断标准？</h3><p>有的，一般来说思考力有三个度：<strong>广度、深度、速度</strong>，这你自己就能够感觉出来的：</p><ul><li><p><strong>广度：</strong> 就是你自己的知识树能够长多大的范围，越广知识越渊博；比如从“如何写一个多线程程序”，提升到“如何做系统性能优化“，再到“如何做系统稳定性备战”，这就是一种广度的提升；</p></li><li><p><strong>深度：</strong> 就是你自己的知识树的叶子节点有多深，越深对知识了解越透彻；比如从“分布式事务问题解决思路”，到“利用最终一致性解决分布式事务”，再到“利用DTS解决分布式事务”，这就是一种深度的提升；</p></li><li><p><strong>速度：</strong> 就是建立和刷新知识树的速度了。比如原来你想清楚一个建模方案要一天，现在只需要半小时可以想清楚，那就是速度的提升了。</p></li></ul><h3 id="6-好的工具有推荐么？"><a href="#6-好的工具有推荐么？" class="headerlink" title="6.好的工具有推荐么？"></a>6.好的工具有推荐么？</h3><p>还是推荐一个工具：<strong>Xmind</strong>，这个最土的工具最有效。可以下载手机版和PC版本，随时进行记录。</p><h3 id="7-一定要相互分享"><a href="#7-一定要相互分享" class="headerlink" title="7.一定要相互分享"></a>7.一定要相互分享</h3><p>思考虽然主要是靠自己，但是一定要相互分享。因为思考是智力活动，相互分享完全能够取得1+1&gt;2的效果；</p><p>注意分享可以有很多形式，比如我们团队最经常的是：</p><ul><li><p><strong>项目分享：</strong> 重大项目是一定要分享的，包括架构设计经验，过程经验，质量提升经验，都需要分享出来；</p></li><li><p><strong>周会分享：</strong> 团队周会重点过进度？那太浪费啦，了解进度和风险看周报就可以了。周会是学习分享的好时机重点就是一些关键的方案，架构设计理念，好的工具，甚至工作无关的内容；</p></li><li><p><strong>群内分享：</strong> 当有个人踩坑以后，在群里面提醒一下大家，这是一个很及时的分享方案；</p></li><li><p><strong>年度&#x2F;季度分享：</strong> 这时候适合找个风景优美喝茶的地方，大家讲一讲自己的成长和思考，非常有帮助；</p></li><li><p><strong>小圈子：</strong> 大家形成自己的小圈子，随时都可以相互倾诉一下自己的心得体会，其实这种效果也很好；</p></li></ul><h3 id="8-技术Leader在训练大家思考力中的职责"><a href="#8-技术Leader在训练大家思考力中的职责" class="headerlink" title="8.技术Leader在训练大家思考力中的职责"></a>8.技术Leader在训练大家思考力中的职责</h3><p>在技术团队中，<strong>技术Leader的思考力意识、能力和实际行动，决定了一个团队的整体思考力水平和成长速度！</strong></p><p>一个团队要提高思考和学习的能力，首先得这个团队Leader的思考意识就要提上来，如果团队Leader没有思考意识，也没有把团队同学的成长放在心上，那么整个团队的思考力和成长速度绝对快不起来。</p><p>在提升团队整体思考力的实践中，技术Leader的职责：</p><ul><li><p><strong>先要把自己变成一个思考者</strong>，自己做表率，以身作则；</p></li><li><p><strong>意识心态上先变过来</strong>，要把团队同学的成长速度最为最重要的职责之一，没有这个意识都是空谈；</p></li><li><p><strong>多创造思考的条件和氛围</strong>，一定要抓住任何机会（代码reivew、方案评审、周会都可以）鼓励大家去思考和分享；</p></li><li><p><strong>控制团队节奏</strong>，给大家学习和思考留出一定的时间；</p></li><li><p><strong>及时的引导和示范</strong>，有的同学可能掌握会偏慢一些，这时候需要有耐心去引导同学找到思考的感觉；</p></li><li><p><strong>不必过多干预细节</strong>，发挥大家的群体智慧，而不必做过多干预，更不能以个人的意志去强迫别人接受。</p></li></ul><h2 id="重要观点小结"><a href="#重要观点小结" class="headerlink" title="重要观点小结"></a>重要观点小结</h2><p>好了，<strong>到这里可以给重要观点做个小结</strong>，时间紧的同学们可以直接读这一段：</p><ol><li><p>思考力对程序员的成长至关重要，团队和个人都需要有意或者无意识地提升思考能力。</p></li><li><p>对程序员最重要的思考力有：原理性思维、结构化思维、反思性思维、扩展性思维、抓重点思维。</p><ul><li>原理性思维是根基，因为没有搞懂的情况下所有的知识建构都是空谈；</li><li>结构化思维帮助我们建立了我们的知识树；</li><li>反思性思维不断对知识进行重构，是实现认知升级的必备条件；</li><li>扩展性思维可以提升知识的广度和深度；</li><li>抓重点思维可以加快知识的使用效率和传递效率；</li></ul></li><li><p>在提升思考力的实践中：</p><ul><li>思考力提升最关键的是意识的转变；</li><li>要对思考力的提升充满信心；</li><li>多在工作中去锻炼思考力，不需要花太多额外的休息时间；</li><li>多相互分享；</li><li>团队Leader要团队同学的成长和把思考力提升作为最重要的内容，并拿出实际行动。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的京东管理生涯随想</title>
      <link href="/2020/02/04/post/%E6%88%91%E7%9A%84%E4%BA%AC%E4%B8%9C%E7%AE%A1%E7%90%86%E7%94%9F%E6%B6%AF%E9%9A%8F%E6%83%B3/"/>
      <url>/2020/02/04/post/%E6%88%91%E7%9A%84%E4%BA%AC%E4%B8%9C%E7%AE%A1%E7%90%86%E7%94%9F%E6%B6%AF%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://juejin.im/post/5c5fabae51882561f34db50b">我的京东管理生涯随想</a> <mark class="hl-label green">转载</mark> </p></blockquote><h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>在京东的任职生涯马上就要结束了，回想起来，从16年校招加入京东，到今年年初离职，在这三年左右的时间里，京东在飞速的发展和变化，我也从一个刚入职场的初级后台开发成长为现在带着十来个人团队的小组长。这几年遇到了很多事，认识了很多人，也学会了很多道理，无论是技术水平还是管理能力都得到了很大的锻炼和提升。</p><p>近来无事，正好总结一下这几年工作，特别是团队管理方面的几点感悟和体会，一来方便日后翻阅，二来要是能够给大家带来一些有意义的参考和借鉴，那也是极好的。</p><h2 id="二、回顾这几年"><a href="#二、回顾这几年" class="headerlink" title="二、回顾这几年"></a>二、回顾这几年</h2><p>在京东飞速发展和变化的大环境下，总是充满了机遇和挑战。一个想法从提出到落地，再到发展为一个重点项目，整个过程都是极快的。当然了，前提一定是这个想法要有价值并得到领导的认可和支持。</p><p>16年校招加入京东时，我有幸加入了一个业务覆盖范围迅速扩大、领导高度重视、组员都非常nice的高速成长、极具潜力的项目组。更加幸运的是，我加入时整个项目在经历了几次电商大促的考验后已经日渐趋于稳定，正处于业务覆盖范围迅速扩大、系统承载流量高速增长的关键阶段。在这关键阶段，最为重要的事情除了保证业务需求正常推进外，便是系统架构优化升级、不同业务领域的功能解耦、底层数据优化和独立等一系列自研需求。为了保证系统在流量迅猛增长的情况下依旧有着优秀的性能表现和较高的稳定性，原有的两三个系统从架构优化、关注点、业务覆盖范围及业务性质等多方面进行了拆分、重构、升级，逐步演变为现在由搭建系统、渲染系统、数据系统、国际化等众多子系统共同组成的“大系统”。有幸参与其中，让我对如何搭建亿级流量的电商后台系统有了清晰深刻的认识，也为我后来独立带团队打下了坚实的基础。</p><p>在京东的这几年可以清晰地划分为两个阶段。入职的第一年，主要是参与了很多业务需求和系统架构优化等自研需求的开发，在系统架构设计及优化方面收获颇丰。后面才开始慢慢带团队，才有了今天要重点讲的团队管理方面的心得和体会。</p><h2 id="三、团队管理的心得和体会"><a href="#三、团队管理的心得和体会" class="headerlink" title="三、团队管理的心得和体会"></a>三、团队管理的心得和体会</h2><p>由于我带的团队负责的项目，在部门里算是一块相对独立的新业务，所以团队内的大部分事情基本上都由我来直接负责。从新人招聘、培训到业务需求跟进，再到电商大促备战等，基本上都亲力亲为。在这个过程中，我深刻地认识到了，在以业务需求为驱动和导向的大环境下，根据组员技术水平、擅长的技术点、以往项目经历等合理分配开发任务，并保证业务需求按时保质保量完成，只是一个合格组长的最基本要求。除此之外，你还需要考虑团队文化建设、团队技术水平提升、团队稳定性、如何做好上通下达等方方面面。一路走来，踩了很多坑，也学到了很多知识，对于管理团队也有了很多自己的心得体会，下面我就讲讲我认为比较重要的几点。</p><h3 id="1-团队文化听起来很虚，但是真的很重要"><a href="#1-团队文化听起来很虚，但是真的很重要" class="headerlink" title="1. 团队文化听起来很虚，但是真的很重要"></a>1. 团队文化听起来很虚，但是真的很重要</h3><p>看过一句话，是这么说的：对于一个企业而言，决定短期的是技巧，决定中期的是战略，决定长期的是文化。我想，对于一个团队来说，亦是如此。几乎每个企业都有自己独特的企业文化，对于每个团队来说，也应该有自己的团队文化。团队文化，一听起来就感觉假大空，其实，我们可以换一个名词，团队氛围。我认为，一个团队的氛围好坏和团队文化有着密切的关系，甚至可以理解为，团队文化是内在本质，而团队氛围是外在表现。</p><p>那怎么样的团队文化才算是一种好的文化？我认为，团队文化是否独特，是否彰显个性，并不重要，重要的主要是两方面，一方面，团队文化要得到团队内大多数人的认可，例如：某个团队宣扬，如果家庭生活和工作无法平衡，你可以选择离婚。我想，这样的团队文化，即使表面上没人反对，但是绝大多数人心里都是不认可的，这就不是一种好的文化；另一方面，这个文化说起来可以很抽象，但是必须有具体的例子可以参照或者可以具体执行或实施。那些只能意会、言传，不能落实到实际行动的文化，都未免有点假大空的嫌疑，正向效果也不显著。例如：某个团队宣扬，大家要有激情、要奋斗、要勇于为公司未来奉献青春，这些当做口号还行，喊着确实振奋人心。但是，振奋之后呢？冷静下来想一下，怎么做才算有激情？怎么做才算奋斗？怎么做才是为公司未来奉献青春？这种就很虚，除了喊的时候激情澎湃，真正作用却不大。</p><h3 id="2-做好上通下达，拒绝越级上报"><a href="#2-做好上通下达，拒绝越级上报" class="headerlink" title="2. 做好上通下达，拒绝越级上报"></a>2. 做好上通下达，拒绝越级上报</h3><p>作为一个管理者，特别是金字塔最底层的管理者，做好上通下达非常重要。你要让你的组员清晰地知道，一方面，上层领导传达下来的事情，你一定会及时地周知到大家，在你正式周知前，组员间尽量不要讨论道听途说来的消息；另一方面，每个组员的努力、付出、成果、个人诉求等，你都会在评优选先或其他恰当的时机和上层领导如实反馈，绝对不会埋没大家的声音。让自己成为一个承上启下、上通下达的中间桥梁，让双方都能够及时顺畅地交换信息，当然了，适当地过滤、加工也是非常有必要的。</p><p>在这种大前提下，实践中我发现，将上层领导的消息传达给组员相对来说比较容易，你可以采用晨会、周会、一对一私聊等多种方式进行沟通。但是，将组员反馈的信息在恰当的时机同步到领导那里，处理起来就要视时机、视具体内容、视领导处事风格等多种因素综合考量。一般来说，归属上层领导的最底层的员工数量众多，领导平时也有很多事情要处理，如果你每个组员的每件事都要反馈的话，难免对领导造成骚扰，但是，如果你什么都不反馈的话，又没有做好上通这个点。</p><p>以如何反馈组员成果为例：如果有很突出的表现或者很强有力的数据佐证，这种的可以直接抄送上级领导和组内同学，并加上你对组员成果的认可和激励。但是，这种事情并不多，大家平时工作内容更多的是普通的业务需求、自研需求，也是我们常常自嘲的“增删改查”，那这种工作应该怎么总结或反馈呢？我一般是鼓励组员写月度总结、季度总结、年度总结等，特别要注意的是，这类总结必须要认真对待，认真写。如何让大家认真对待，其实方法很多，例如：可以找个时间让大家每个人都把自己的总结讲一下，总结要抄送组内所有人，组长要做个带头作用等等，我就不展开说了。<br>当你把这类总结的事情贯彻落实后，你就会发现作用很强大，用途也很多。如果组员很多的话，作为组长在月末的时候，很难做到很清晰地了解每个人这个月都做了什么，甚至是对于组员自己来说，也极有可能对自己这个月做了什么很模糊，这个时候月度总结就非常有帮助了，另外，你还可以择优抄送上级领导和组员。而季度总结，年度总结，可以尽量让组员做成PPT汇报的形式，一方面，可以锻炼组员的总结、表达、沟通等能力；另一方面，还可以邀请上级领导参加，也可以把时间选在绩效评定、升职加薪评定等时间点前，会带来诸多好处和便利。大家都知道，研发一般加班较多，常常总结才能清晰地让自己、同事、领导都知道你都做了些什么有价值有意义的事情。</p><p>其实，做好了上面说的几点，做好了上通下达，也就不存在越级汇报的情况了。但是，这个点呢还是可以和组员再次强调下的。</p><h3 id="3-注重培养归属感、责任感、主动性"><a href="#3-注重培养归属感、责任感、主动性" class="headerlink" title="3. 注重培养归属感、责任感、主动性"></a>3. 注重培养归属感、责任感、主动性</h3><p>说实话，虽然大家都不愿意承认，但是自私确实是人的天性。不是自己的东西，很难谈什么责任感，更不用说主动性了。所以，我们才要强调培养主人翁意识，即培养归属感，这是后两者的前提和基础。</p><p>那么，怎么培养归属感，怎么培养主人翁意识呢？你可以将系统、业务范围等根据组员的兴趣点、以往项目经历等多种因素划分给指定人负责，并明确赏罚机制。要清晰地传达一种思想，那就是，这块东西就是你的，干好了评优、升职、加薪等都会优先考虑，干不好，出事情了，你要负责，我也会负责。</p><p>有了归属感，责任感也就自然有了，当然了，前提是他要是一个负责的人。而，对于主动性呢，就需要多多鼓励，慢慢培养了。这个主动性呢，一言以蔽之，就是主动规划或者做了一些除了你安排下去的任务之外的，对他负责的那块未来有意义有帮助的事情。</p><h3 id="4-建立backup机制"><a href="#4-建立backup机制" class="headerlink" title="4. 建立backup机制"></a>4. 建立backup机制</h3><p>backup机制，即互备机制，就是尽量让组内的每一个人都有一个或多个备份存在，特别是在组内发挥重要作用的人。直白点说，就是尽量要让组内的任何一个人都是可替代的，当然了，这里面也包括你自己。要尽量达到一种状态，那就是如果突然某天某个人不在组内了，这个小组以及负责的业务必须能够保证正常运转。</p><p>为什么要这么做呢？首先，我们任何一个人都无法保证“7*24小时”随时待命，那么，我们假设在某个时间点，有一块线上业务出现问题，而熟悉这块业务的只有一个人，这个人又恰巧不在公司且无法远程支持，那这个问题处理起来就会非常棘手。但是，如果除了这个人外还有一个或多个熟悉这块业务的人在，那情况就不一样了。其次，我们都知道互联网从业人员跳槽频繁，万一某一天某个人离职了，如果这块业务只有他熟悉，那必然会造成交接成本升高，交接后的隐患也会更多。所以，其实很多公司都要求中高层的管理者，上任之后必须在规定的时间内培养一个或多个可以接替自己工作的人。对于最底层的小团队来说，也是一样的，只有尽最大努力贯彻落实backup机制，才能最大程度上保证团队及业务的稳定性。</p><h3 id="5-灵活的“7-24”，而不盲目推崇固定的“996”"><a href="#5-灵活的“7-24”，而不盲目推崇固定的“996”" class="headerlink" title="5. 灵活的“7*24”，而不盲目推崇固定的“996”"></a>5. 灵活的“7*24”，而不盲目推崇固定的“996”</h3><p>谈到“996”，其实有很多互联网公司是强制规定上下班时间的，强制大家执行“996”。从我加入京东到现在，并没有遇到公司强制要求”996”的情况，至少我所在的部门还没有强制推行。偶尔，项目比较忙的时候，“995”还是有的，周末或节假日过来加班也是有的。</p><p>相对于“996”，我更喜欢和提倡灵活的“7*24”，这里并不是指大家要一周7天24小时一直工作，而是说，无论什么时间，是工作日还是休息日，是白天还是晚上，如果公司有事情需要你支持，例如：紧急的线上问题，紧急的需求开发等等，而你又比较方便的情况下，能够随时赶到公司或者在家远程支持。</p><p>对于加班这件事呢，我一般都是提倡：事情多的时候，大家就辛苦点，多加点班；事情少的时候，大家就早点回家，多休息休息，养精蓄锐而不是在公司干耗着混加班时间。如果休息日有特殊情况，需要大家牺牲自己休息时间来支持的，我们可以后续找一些恰当的时间请个调休假补偿一下。目的其实只有一个，让大家保持热情，线上出现问题时能够积极及时处理，而不是用固定的“996”把大家搞得很疲惫，结果休息日出现问题的时候，没有人愿意支持处理。毕竟对于电商类产品来说，休息日也是用户使用量较高的时间，保证良好的用户体验也是非常重要的。</p><h3 id="6-流程、规范、稳定高于一切"><a href="#6-流程、规范、稳定高于一切" class="headerlink" title="6. 流程、规范、稳定高于一切"></a>6. 流程、规范、稳定高于一切</h3><p>要保证团队稳定、业务稳定，那这个团队就一定要制定属于自己的流程和规范。每件事情都要按照指定的流程走，比如上线功能就必须按照测试、灰度、全量等流程走，任何步骤都不允许跳过；每件事都要按照指定的规范来，比如文档资料要按照统一的格式来，而不是随心所欲。我们要清晰地认识到，很多线上事故都是执行者未按照流程、规范操作导致的，或者如果执行者按照流程、规范来做，就能够避免事故的发生，至少能够降低事故的负面影响。</p><h3 id="7-崇尚技术深度，而不盲目崇尚“新技术”"><a href="#7-崇尚技术深度，而不盲目崇尚“新技术”" class="headerlink" title="7. 崇尚技术深度，而不盲目崇尚“新技术”"></a>7. 崇尚技术深度，而不盲目崇尚“新技术”</h3><p>作为一名研发人员，技术自然是大家的安身立命之本。很多研发人员都喜欢研究新出现的前沿新技术，不是说这样不好，而是说，深度地学习和掌握工作中常用的现有技术才是更加重要的。一方面，我们要清晰地认识到好多线上问题都是因为对现有技术理解有偏差或者对用法掌握不到位导致的；另一方面，新技术在稳定性上往往有待验证，自己玩玩是可以，但是用在重要的项目上基本上不可能，万一出现问题，后果是非常严重的。记住，永远都不要拿项目的稳定性开玩笑。</p><h3 id="8-技术成长与业务需求相结合，产品需求和自研需求相结合"><a href="#8-技术成长与业务需求相结合，产品需求和自研需求相结合" class="headerlink" title="8. 技术成长与业务需求相结合，产品需求和自研需求相结合"></a>8. 技术成长与业务需求相结合，产品需求和自研需求相结合</h3><p>好多人抱怨我平时只是在做“增删改查”，毫无技术含量，更不要扯什么技术水平提升了。我觉得，并不都是这样，好多业务需求还是很需要架构设计和细节把控的。技术和业务相结合，技术才有了价值，如果只会技术，那岂不是成了纸上谈兵。<br>另外，作为组长，一定要控制下产品需求的进度和占比，尽量留出一些时间用来做自研需求。毕竟随着系统中的功能越来越多，重构和优化往往是难以避免的，特别是那些比较急的需求很有可能采用了很暴力的设计和开发，是必须要尽早填上的坑，不然后患无穷。</p><h2 id="四、团队管理的小技巧"><a href="#四、团队管理的小技巧" class="headerlink" title="四、团队管理的小技巧"></a>四、团队管理的小技巧</h2><h3 id="1-做好新人培训"><a href="#1-做好新人培训" class="headerlink" title="1. 做好新人培训"></a>1. 做好新人培训</h3><p>无论是工作多年的职场老手，还是刚入职场的应届生，在刚刚入职的那段时间都像一张白纸。他经历了怎样的新人培训，很大程度上影响着他未来在公司工作的态度和方式。另一方面，新人培训的好坏以及是否规范，也直接影响着新人对公司的第一印象。所以，新人培训是非常重要的，要认真谨慎对待，下面是我认为几个比较重要的点：</p><ul><li><strong>流程规范培训要优先于技术培训：</strong> 技术水平不行，可以慢慢学。但是，流程和规范一定要第一时间好好培训和指导。一旦某种不好的习惯养成了，后面再改就很难了。新人引发的问题中，很多都是由于操作不按照流程，不遵守规范导致的。</li><li><strong>老人踩过的坑，新人也很有可能会踩：</strong> 每个团队都应该整理一份“踩坑手册”，记录一下以前踩过的坑，遇到的线上问题及对应的分析总结。然后，每个新人入职时，都把这些常见的坑提前多熟悉几遍，不要求全都一一记住，至少要在脑海中留个印象，能够极大地降低踩“同类坑”的几率。一个人踩过的坑，尽量让整个团队的人都不要再掉进这个坑里了。</li><li><strong>明确新人熟悉系统、技术等的顺序和进度安排：</strong> 千万不要和新人说，我们需要用到A、B、C、D等，好吧，你自己看吧。最好可以制定一个合理的熟悉顺序和进度安排，明确好每天熟悉什么，几天熟悉完。你要知道，正确的熟悉顺序确实可以帮助新人提高效率，加快上手速度。另外，不要忘记，任务以及对应的deadline才是第一生产力。</li><li><strong>一对一导师制：</strong> 尽量不要和新人说，组内每个人都很nice，有问题随便问任何人都可以。尽量安排一对一的导师，这种方式效果更好。</li><li><strong>新人手册：</strong> 每个团队尽量都要有一份新人手册，可以大家一起维护编辑。这样同一件事情就不用和N个新人说N遍了，大家自己翻阅即可，有问题再找带你的导师问。极大地节省了大家的宝贵时间，也方便了未来遗忘时查阅。</li></ul><h3 id="2-巧用主题池，做好团队技术分享"><a href="#2-巧用主题池，做好团队技术分享" class="headerlink" title="2. 巧用主题池，做好团队技术分享"></a>2. 巧用主题池，做好团队技术分享</h3><p>团队技术分享的好坏和分享主题的选择有着极大的关系。那么，什么样的分享主题才算是一个好主题呢？我认为，最重要的一点就是，分享主题要尽量和平时工作有点关联，可以是平时用到的技术点的深入研究，也可以是同类技术的横向对比。可以维护一个技术分享的主题池，每个人可以把自己想知道的问题点、技术点加到池子中，组长来做统一的把关和过滤，每个人分享的时候，一定要在过滤后的池子里面选。这样，既有一定的灵活性，可以让组员自由选择分享主题，又能在一定程度上控制好主题选择的范围，保证主题都是大家想知道和了解的，对大家工作和技术提升有意义的。</p><h3 id="3-建立时间线记录，辅助排查线上问题"><a href="#3-建立时间线记录，辅助排查线上问题" class="headerlink" title="3. 建立时间线记录，辅助排查线上问题"></a>3. 建立时间线记录，辅助排查线上问题</h3><p>当出现线上问题时，第一要务必然是要尽快找到问题原因，尽快修复问题。那么，如何快速定位到问题原因呢？总结分析了很多线上问题后，我发现了一个规律。那就是，线上问题大致可以分为以下两类：</p><ul><li><strong>主动类问题：</strong> 由研发人员主动操作引发的问题，我叫做主动类问题，即，由功能上线、修改配置、修改开关状态等引发的问题。</li><li><strong>被动类问题：</strong> 不是由研发人员主动操作引发的问题，我叫做被动类问题，即，由用户访问量激增、非研发人员的常态化操作等引发的问题。</li></ul><p>而，无论哪种类型的问题都是和时间强相关的。例如，如果你刚刚完成系统的上线发布，而后发现出现了线上问题，这个问题的出现时间又恰巧和你的发布时间相吻合，那么极大概率就是这次上线引发的问题。再例如，我们每年都非常关注的双十一大促，每到0点的时候，各系统的流量必然会达到一个峰值，而这个时候也是最容易出问题的时候。那么，应该如何应对这两类问题呢？</p><p>针对主动类问题，建立时间线记录。将团队内的每一次功能上线、修改配置、修改开关状态等一切可能影响线上系统状态的操作，都记录下来。记录内容可以简单地写一下操作时间点及操作内容概述，大家一起负责维护和编辑。这样，一旦发现线上问题，第一时间看一下问题的发生时间点附近是否有研发人员主动操作了什么。如果有的话，大概率和这些操作有关，能够较快地定位问题原因。</p><p>针对被动类问题，因为我们无法控制用户、非研发人员的行为，所以只能靠预测和演练。例如，双十一之前我们可以按照预测的流量进行演练，压测等。再例如，如果系统运行地好好的，突然出现线上问题，而出现问题的时间点在时间线上又找不到对应的主动操作，那么可以关注下该时间点用户访问量，系统调用量是否存在波动，是否由于非研发人员的操作导致。</p><h2 id="五、感谢"><a href="#五、感谢" class="headerlink" title="五、感谢"></a>五、感谢</h2><p>起初只是想简单总结记录一下，没想到洋洋洒洒写了这么多。说实话，我做管理的时间也不长，有些想法也没有深入去实践，难免有些偏颇和误差，欢迎大家随时交流和指正。</p><p>我在京东这三年来得到的锻炼和成长，要由衷感谢一路走来的领导、同事、朋友。大家都非常优秀，无论是工作上还是生活上，都给我很多的帮助和指导，让我获益匪浅。感谢这三年时光里的每一个人，每一件事，每一个难忘的瞬间。</p>]]></content>
      
      
      <categories>
          
          <category> 文章收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring知识点</title>
      <link href="/2020/02/04/spring/Spring%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/02/04/spring/Spring%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring知识点"><a href="#Spring知识点" class="headerlink" title="Spring知识点"></a>Spring知识点</h1><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><h3 id="什么是Spring？"><a href="#什么是Spring？" class="headerlink" title="什么是Spring？"></a>什么是Spring？</h3><p>Spring 是个java企业级应用的开源开发框架。Spring主要用来开发Java应用，但是有些扩展是针对构建J2EE平台的web应用。Spring 框架目标是简化Java企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。</p><h3 id="使用Spring框架的好处是什么？"><a href="#使用Spring框架的好处是什么？" class="headerlink" title="使用Spring框架的好处是什么？"></a>使用Spring框架的好处是什么？</h3><ul><li><strong>轻量：</strong> Spring 是轻量的，基本的版本大约2MB。</li><li><strong>控制反转：</strong> Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。</li><li><strong>面向切面的编程(AOP)：</strong> Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</li><li><strong>容器：</strong> Spring 包含并管理应用中对象的生命周期和配置。</li><li><strong>MVC框架：</strong> Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。</li><li><strong>事务管理：</strong> Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。</li><li><strong>异常处理：</strong> Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</li></ul><h3 id="Spring由哪些模块组成？"><a href="#Spring由哪些模块组成？" class="headerlink" title="Spring由哪些模块组成？"></a>Spring由哪些模块组成？</h3><p>以下是Spring 框架的基本模块：</p><ul><li>Core module</li><li>Bean module</li><li>Context module</li><li>Expression Language module</li><li>JDBC module</li><li>ORM module</li><li>OXM module</li><li>Java Messaging Service(JMS) module</li><li>Transaction module</li><li>Web module</li><li>Web-Servlet module</li><li>Web-Struts module</li><li>Web-Portlet module</li></ul><h3 id="核心容器（应用上下文）模块"><a href="#核心容器（应用上下文）模块" class="headerlink" title="核心容器（应用上下文）模块"></a>核心容器（应用上下文）模块</h3><p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。</p><h3 id="BeanFactory-BeanFactory-实现举例"><a href="#BeanFactory-BeanFactory-实现举例" class="headerlink" title="BeanFactory - BeanFactory 实现举例"></a>BeanFactory - BeanFactory 实现举例</h3><p>Bean工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从真正的应用代码中分离。</p><p>最常用的BeanFactory 实现是XmlBeanFactory 类。</p><h3 id="XMLBeanFactory"><a href="#XMLBeanFactory" class="headerlink" title="XMLBeanFactory"></a>XMLBeanFactory</h3><p>最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。</p><h3 id="解释AOP模块"><a href="#解释AOP模块" class="headerlink" title="解释AOP模块"></a>解释AOP模块</h3><p>AOP模块用于发给我们的Spring应用做面向切面的开发， 很多支持由AOP联盟提供，这样就确保了Spring和其他AOP框架的共通性。这个模块将元数据编程引入Spring。</p><h3 id="解释JDBC抽象和DAO模块"><a href="#解释JDBC抽象和DAO模块" class="headerlink" title="解释JDBC抽象和DAO模块"></a>解释JDBC抽象和DAO模块</h3><p>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。</p><h3 id="解释对象-x2F-关系映射集成（ORM）模块"><a href="#解释对象-x2F-关系映射集成（ORM）模块" class="headerlink" title="解释对象&#x2F;关系映射集成（ORM）模块"></a>解释对象&#x2F;关系映射集成（ORM）模块</h3><p>Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象&#x2F;关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate,JDO和 iBATIS SQL Maps。Spring的事务管理同样支持以上所有ORM框架及JDBC。</p><h3 id="解释WEB模块"><a href="#解释WEB模块" class="headerlink" title="解释WEB模块"></a>解释WEB模块</h3><p>Spring的WEB模块是构建在application context 模块基础之上，提供一个适合web应用的上下文。这个模块也包括支持多种面向web的任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。它也有对Jakarta Struts的支持。</p><h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><p>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</p><h3 id="什么是Spring-IOC容器？"><a href="#什么是Spring-IOC容器？" class="headerlink" title="什么是Spring IOC容器？"></a>什么是Spring IOC容器？</h3><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="IOC的优点是什么？"><a href="#IOC的优点是什么？" class="headerlink" title="IOC的优点是什么？"></a>IOC的优点是什么？</h3><p>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><h3 id="ApplicationContext通常的实现是什么？"><a href="#ApplicationContext通常的实现是什么？" class="headerlink" title="ApplicationContext通常的实现是什么？"></a>ApplicationContext通常的实现是什么？</h3><ul><li><strong>FileSystemXmlApplicationContext ：</strong> 此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。</li><li><strong>ClassPathXmlApplicationContext：</strong> 此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</li><li><strong>WebXmlApplicationContext：</strong> 此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</li></ul><h3 id="Bean工厂和Application-Contenxts有什么区别？"><a href="#Bean工厂和Application-Contenxts有什么区别？" class="headerlink" title="Bean工厂和Application Contenxts有什么区别？"></a>Bean工厂和Application Contenxts有什么区别？</h3><p>Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h3 id="一个Spring的应用看起来像什么？"><a href="#一个Spring的应用看起来像什么？" class="headerlink" title="一个Spring的应用看起来像什么？"></a>一个Spring的应用看起来像什么？</h3><ul><li>一个定义了一些功能的接口。</li><li>这实现包括属性，它的Setter ， getter 方法和函数等。</li><li>Spring AOP。</li><li>Spring 的XML 配置文件。</li><li>使用以上功能的客户端程序。</li></ul><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="什么是Spring的依赖注入？"><a href="#什么是Spring的依赖注入？" class="headerlink" title="什么是Spring的依赖注入？"></a>什么是Spring的依赖注入？</h3><p>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><h3 id="有哪些不同类型的IOC（依赖注入）方式？"><a href="#有哪些不同类型的IOC（依赖注入）方式？" class="headerlink" title="有哪些不同类型的IOC（依赖注入）方式？"></a>有哪些不同类型的IOC（依赖注入）方式？</h3><ul><li><strong>构造器依赖注入：</strong> 构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。</li><li><strong>Setter方法注入：</strong> Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</li></ul><h3 id="哪种依赖注入方式你建议使用，构造器注入，还是Setter方法注入？"><a href="#哪种依赖注入方式你建议使用，构造器注入，还是Setter方法注入？" class="headerlink" title="哪种依赖注入方式你建议使用，构造器注入，还是Setter方法注入？"></a>哪种依赖注入方式你建议使用，构造器注入，还是Setter方法注入？</h3><p>你两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</p><h2 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring Beans"></a>Spring Beans</h2><h3 id="什么是Spring-Beans？"><a href="#什么是Spring-Beans？" class="headerlink" title="什么是Spring Beans？"></a>什么是Spring Beans？</h3><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中 <code>&lt;bean&gt;</code> 的形式定义。</p><p>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</p><h3 id="一个Spring-Bean定义包含什么？"><a href="#一个Spring-Bean定义包含什么？" class="headerlink" title="一个Spring Bean定义包含什么？"></a>一个Spring Bean定义包含什么？</h3><p>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><h3 id="如何给Spring容器提供配置元数据？"><a href="#如何给Spring容器提供配置元数据？" class="headerlink" title="如何给Spring容器提供配置元数据？"></a>如何给Spring容器提供配置元数据？</h3><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><ul><li>XML配置文件。</li><li>基于注解的配置。</li><li>基于java的配置。</li></ul><h3 id="你怎样定义类的作用域？"><a href="#你怎样定义类的作用域？" class="headerlink" title="你怎样定义类的作用域？"></a>你怎样定义类的作用域？</h3><p>当定义一个 <code>&lt;bean&gt;</code> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</p><h3 id="解释Spring支持的几种Bean的作用域"><a href="#解释Spring支持的几种Bean的作用域" class="headerlink" title="解释Spring支持的几种Bean的作用域"></a>解释Spring支持的几种Bean的作用域</h3><p>Spring框架支持以下五种bean的作用域：</p><ul><li><strong>singleton：</strong> bean在每个Spring ioc 容器中只有一个实例。</li><li><strong>prototype：</strong> 一个bean的定义可以有多个实例。</li><li><strong>request：</strong> 每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li><strong>session：</strong> 在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li><li><strong>global-session：</strong> 在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li></ul><p>缺省的Spring bean 的作用域是Singleton.</p><h3 id="Spring框架中的单例Bean是线程安全的吗？"><a href="#Spring框架中的单例Bean是线程安全的吗？" class="headerlink" title="Spring框架中的单例Bean是线程安全的吗？"></a>Spring框架中的单例Bean是线程安全的吗？</h3><p>不，Spring框架中的单例bean不是线程安全的。</p><h3 id="解释Spring框架中Bean的生命周期"><a href="#解释Spring框架中Bean的生命周期" class="headerlink" title="解释Spring框架中Bean的生命周期"></a>解释Spring框架中Bean的生命周期</h3><ul><li>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</li><li>Spring根据bean的定义填充所有的属性。</li><li>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</li><li>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</li><li>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</li><li>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</li><li>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</li><li>如果bean实现了 DisposableBean，它将调用destroy()方法。</li></ul><h3 id="哪些是重要的Bean生命周期方法？你能重载它们吗？"><a href="#哪些是重要的Bean生命周期方法？你能重载它们吗？" class="headerlink" title="哪些是重要的Bean生命周期方法？你能重载它们吗？"></a>哪些是重要的Bean生命周期方法？你能重载它们吗？</h3><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。</p><p>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><h3 id="什么是Spring的内部Bean？"><a href="#什么是Spring的内部Bean？" class="headerlink" title="什么是Spring的内部Bean？"></a>什么是Spring的内部Bean？</h3><p>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在  <code>&lt;property/&gt;</code> 或 <code>&lt;constructor-arg/&gt;</code> 元素内使用 <code>&lt;bean/&gt;</code> 元素，内部bean通常是匿名的，它们的Scope一般是prototype。</p><h3 id="在Spring中如何注入一个Java集合？"><a href="#在Spring中如何注入一个Java集合？" class="headerlink" title="在Spring中如何注入一个Java集合？"></a>在Spring中如何注入一个Java集合？</h3><p>Spring提供以下几种集合的配置元素：</p><ul><li><code>&lt;list&gt;</code> 类型用于注入一列值，允许有相同的值。</li><li><code>&lt;set&gt;</code> 类型用于注入一组值，不允许有相同的值。</li><li><code>&lt;map&gt;</code> 类型用于注入一组键值对，键和值都可以为任意类型。</li><li><code>&lt;props&gt;</code> 类型用于注入一组键值对，键和值都只能为String类型。</li></ul><h3 id="什么是Bean装配？"><a href="#什么是Bean装配？" class="headerlink" title="什么是Bean装配？"></a>什么是Bean装配？</h3><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><h3 id="什么是Bean的自动装配？"><a href="#什么是Bean的自动装配？" class="headerlink" title="什么是Bean的自动装配？"></a>什么是Bean的自动装配？</h3><p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要 <code>&lt;constructor-arg&gt;</code> 和 <code>&lt;property&gt;</code> 配置，能通过Bean工厂自动处理bean之间的协作。</p><h3 id="解释不同方式的自动装配"><a href="#解释不同方式的自动装配" class="headerlink" title="解释不同方式的自动装配"></a>解释不同方式的自动装配</h3><p>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入。</p><ul><li><strong>no：</strong> 默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</li><li><strong>byName：</strong> 通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</li><li><strong>byType：</strong> 通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li><li><strong>constructor：</strong> 这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li><li><strong>autodetect：</strong> 首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li></ul><h3 id="自动装配有哪些局限性？"><a href="#自动装配有哪些局限性？" class="headerlink" title="自动装配有哪些局限性？"></a>自动装配有哪些局限性？</h3><p>自动装配的局限性是：</p><ul><li><strong>重写：</strong> 你仍需用 <code>&lt;constructor-arg&gt;</code> 和 <code>&lt;property&gt;</code> 配置来定义依赖，意味着总要重写自动装配。</li><li><strong>基本数据类型：</strong> 你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li><li><strong>模糊特性：</strong> 自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li></ul><h3 id="你可以在Spring中注入一个null和一个空字符串吗？"><a href="#你可以在Spring中注入一个null和一个空字符串吗？" class="headerlink" title="你可以在Spring中注入一个null和一个空字符串吗？"></a>你可以在Spring中注入一个null和一个空字符串吗？</h3><p>可以。</p><h2 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h2><h3 id="什么是基于Java的Spring注解配置？给一些注解的例子。"><a href="#什么是基于Java的Spring注解配置？给一些注解的例子。" class="headerlink" title="什么是基于Java的Spring注解配置？给一些注解的例子。"></a>什么是基于Java的Spring注解配置？给一些注解的例子。</h3><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。</p><p>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。</p><h3 id="什么是基于注解的容器配置？"><a href="#什么是基于注解的容器配置？" class="headerlink" title="什么是基于注解的容器配置？"></a>什么是基于注解的容器配置？</h3><p>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。</p><p>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><h3 id="怎样开启注解装配？"><a href="#怎样开启注解装配？" class="headerlink" title="怎样开启注解装配？"></a>怎样开启注解装配？</h3><p>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 <code>&lt;context:annotation-config/&gt;</code> 元素。</p><h3 id="Requried注解"><a href="#Requried注解" class="headerlink" title="@Requried注解"></a>@Requried注解</h3><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><h3 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h3><p>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和&#x2F;或多个参数的PN方法。</p><h3 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@Qualifier注解"></a>@Qualifier注解</h3><p>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><h2 id="Spring数据访问"><a href="#Spring数据访问" class="headerlink" title="Spring数据访问"></a>Spring数据访问</h2><h3 id="在Spring框架中如何更有效地使用JDBC？"><a href="#在Spring框架中如何更有效地使用JDBC？" class="headerlink" title="在Spring框架中如何更有效地使用JDBC？"></a>在Spring框架中如何更有效地使用JDBC？</h3><p>使用SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate。</p><h3 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h3><p>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p><h3 id="Spring对DAO的支持"><a href="#Spring对DAO的支持" class="headerlink" title="Spring对DAO的支持"></a>Spring对DAO的支持</h3><p>Spring对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。</p><h3 id="使用Spring通过什么方式访问Hibernate？"><a href="#使用Spring通过什么方式访问Hibernate？" class="headerlink" title="使用Spring通过什么方式访问Hibernate？"></a>使用Spring通过什么方式访问Hibernate？</h3><p>在Spring中有两种方式访问Hibernate：</p><ul><li>控制反转  Hibernate Template和 Callback。</li><li>继承 HibernateDAOSupport提供一个AOP 拦截器。</li></ul><h3 id="Spring支持的ORM"><a href="#Spring支持的ORM" class="headerlink" title="Spring支持的ORM"></a>Spring支持的ORM</h3><p>Spring支持以下ORM：</p><ul><li>Hibernate</li><li>iBatis</li><li>JPA (Java Persistence API)</li><li>TopLink</li><li>JDO (Java Data Objects)</li><li>OJB</li></ul><h3 id="如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"><a href="#如何通过HibernateDaoSupport将Spring和Hibernate结合起来？" class="headerlink" title="如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"></a>如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</h3><p>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：</p><ul><li>配置the Hibernate SessionFactory。</li><li>继承HibernateDaoSupport实现一个DAO。</li><li>在AOP支持的事务中装配。</li></ul><h3 id="Spring支持地事务管理类型"><a href="#Spring支持地事务管理类型" class="headerlink" title="Spring支持地事务管理类型"></a>Spring支持地事务管理类型</h3><p>Spring支持两种类型的事务管理：</p><ul><li><strong>编程式事务管理：</strong> 这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li><li><strong>声明式事务管理：</strong> 这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li></ul><h3 id="Spring框架地事务管理有哪些特点？"><a href="#Spring框架地事务管理有哪些特点？" class="headerlink" title="Spring框架地事务管理有哪些特点？"></a>Spring框架地事务管理有哪些特点？</h3><ul><li>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li><li>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</li><li>它支持声明式事务管理。</li><li>它和Spring各种数据访问抽象层很好得集成。</li></ul><h3 id="你更倾向用哪种事务管理类型？"><a href="#你更倾向用哪种事务管理类型？" class="headerlink" title="你更倾向用哪种事务管理类型？"></a>你更倾向用哪种事务管理类型？</h3><p>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。</p><h2 id="Spring面向切面编程（AOP）"><a href="#Spring面向切面编程（AOP）" class="headerlink" title="Spring面向切面编程（AOP）"></a>Spring面向切面编程（AOP）</h2><h3 id="解释AOP"><a href="#解释AOP" class="headerlink" title="解释AOP"></a>解释AOP</h3><p>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><h3 id="Aspect切面"><a href="#Aspect切面" class="headerlink" title="Aspect切面"></a>Aspect切面</h3><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><h3 id="在Spring-AOP中，关注点和横切关注点的区别是什么？"><a href="#在Spring-AOP中，关注点和横切关注点的区别是什么？" class="headerlink" title="在Spring AOP中，关注点和横切关注点的区别是什么？"></a>在Spring AOP中，关注点和横切关注点的区别是什么？</h3><p>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。<br>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</p><p>Spring切面可以应用五种类型的通知：</p><ul><li><strong>before:</strong> 前置通知，在一个方法执行前被调用。</li><li><strong>after:</strong> 在方法执行之后调用的通知，无论方法执行是否成功。</li><li><strong>after-returning:</strong> 仅当方法成功完成后执行的通知。</li><li><strong>after-throwing:</strong> 在方法抛出异常退出时执行的通知。</li><li><strong>around:</strong> 在方法执行之前和之后调用的通知。</li></ul><h3 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h3><p>切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><h3 id="什么是引入？"><a href="#什么是引入？" class="headerlink" title="什么是引入？"></a>什么是引入？</h3><p>引入允许我们在已存在的类中增加新的方法和属性。</p><h3 id="什么是目标对象？"><a href="#什么是目标对象？" class="headerlink" title="什么是目标对象？"></a>什么是目标对象？</h3><p>被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</p><h3 id="什么是代理？"><a href="#什么是代理？" class="headerlink" title="什么是代理？"></a>什么是代理？</h3><p>代理是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</p><h3 id="有几种不同类型的自动代理？"><a href="#有几种不同类型的自动代理？" class="headerlink" title="有几种不同类型的自动代理？"></a>有几种不同类型的自动代理？</h3><p>BeanNameAutoProxyCreator</p><p>DefaultAdvisorAutoProxyCreator</p><p>Metadata autoproxying</p><h3 id="什么是织入？什么是织入应用的不同点？"><a href="#什么是织入？什么是织入应用的不同点？" class="headerlink" title="什么是织入？什么是织入应用的不同点？"></a>什么是织入？什么是织入应用的不同点？</h3><p>织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。</p><p>织入可以在编译时，加载时，或运行时完成。</p><h3 id="解释基于XML-Schema方式的切面实现"><a href="#解释基于XML-Schema方式的切面实现" class="headerlink" title="解释基于XML Schema方式的切面实现"></a>解释基于XML Schema方式的切面实现</h3><p>在这种情况下，切面由常规类以及基于XML的配置实现。</p><h3 id="解释基于注解的切面实现"><a href="#解释基于注解的切面实现" class="headerlink" title="解释基于注解的切面实现"></a>解释基于注解的切面实现</h3><p>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</p><h2 id="Spring的MVC"><a href="#Spring的MVC" class="headerlink" title="Spring的MVC"></a>Spring的MVC</h2><h3 id="什么是Spring的MVC框架？"><a href="#什么是Spring的MVC框架？" class="headerlink" title="什么是Spring的MVC框架？"></a>什么是Spring的MVC框架？</h3><p>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</p><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h3 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h3><p>WebApplicationContext 继承了ApplicationContext  并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><h3 id="什么是Spring-MVC框架的控制器？"><a href="#什么是Spring-MVC框架的控制器？" class="headerlink" title="什么是Spring MVC框架的控制器？"></a>什么是Spring MVC框架的控制器？</h3><p>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</p><h3 id="Controller注解"><a href="#Controller注解" class="headerlink" title="@Controller注解"></a>@Controller注解</h3><p>该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。</p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h3><p>该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
            <tag> Web </tag>
            
            <tag> AOP </tag>
            
            <tag> IOC </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程知识汇总(1)</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(1)/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程知识汇总-1"><a href="#Java多线程知识汇总-1" class="headerlink" title="Java多线程知识汇总(1)"></a>Java多线程知识汇总(1)</h1><blockquote><p>引用自<a href="https://blog.csdn.net/u013256816/article/details/51325246">Java多线程知识小抄集(一)</a></p></blockquote><ol><li><p>interrupted与isInterrupted的区别</p><p> interrupted()：测试当前线程是否已经是中断状态，执行后具有状态标志清除为false的功能。<br> isInterrupted()：测试线程Thread对象是否已经是中断状态，但不清除状态标志。</p><p> 方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">interrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">isInterrupted</span><span class="params">(<span class="type">boolean</span> ClearInterrupted)</span>;<span class="number">1234567</span></span><br></pre></td></tr></table></figure></li><li><p>终止正在运行的线程的三种方法：</p><p> 使用退出标志，是线程正常退出，也就是当run方法完成后线程终止；<br> 使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样都是作废过期的方法，使用它们可能产生不可预料的结果；<br> 使用interrupt方法中断线程；（推荐）</p></li><li><p>yield方法</p><p> yield()方法的作用是放弃当前的CPU资源，将它让给其他的任务去占用CPU执行时间。但放弃时间不确定，有可能刚刚放弃，马上又获得CPU时间片。这里需要注意的是yield()方法和sleep方法一样，线程并不会让出锁，和wait不同。</p></li><li><p>线程的优先级</p><p> Java中线程的优先级分为1-10这10个等级，如果小于1或大于10则JDK抛出IllegalArgumentException()的异常，默认优先级是5。在Java中线程的优先级具有继承性，比如A线程启动B线程，则B线程的优先级与A是一样的。注意程序正确性不能依赖线程的优先级高低，因为操作系统可以完全不理会Java线程对于优先级的决定。</p></li><li><p>Java中线程的状态</p><p> New, Runnable, Blocked, Waiting, Time_waiting, Terminated.</p></li><li><p>守护线程</p><p> Java中有两种线程，一种是用户线程，另一种是守护线程。当进程中不存在非守护线程了，则守护线程自动销毁。通过setDaemon(true)设置线程为后台线程。注意thread.setDaemon(true)必须在thread.start()之前设置，否则会报IllegalThreadStateException异常；在Daemon线程中产生的新线程也是Daemon的；在使用ExecutorSerice等多线程框架时，会把守护线程转换为用户线程，并且也会把优先级设置为Thread.NORM_PRIORITY。在构建Daemon线程时，不能依靠finally块中的内容来确保执行关闭或清理资源的逻辑。更多详细内容可参考《Java守护线程概述》</p></li><li><p>synchronized的类锁与对象锁</p><p> 类锁：在方法上加上static synchronized的锁，或者synchronized(xxx.class)的锁。如下代码中的method1和method2：<br> 对象锁：参考method4, method5,method6.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">Object</span> <span class="variable">object1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(LockStrategy.class)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method6</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(object1)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意方法method4和method5中的同步块也是互斥的。<br> 下面做一道习题来加深一下对对象锁和类锁的理解：<br> 有一个类这样定义</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么，有SynchronizedTest的两个实例a和b，对于一下的几个选项有哪些能被一个以上的线程同时访问呢？<br> A. a.method1() vs. a.method2()<br> B. a.method1() vs. b.method1()<br> C. a.method3() vs. b.method4()<br> D. a.method3() vs. b.method3()<br> E. a.method1() vs. a.method3()<br> 答案是什么呢？BE<br> 有关Java中的锁的详细信息，可以参考<a href="http://blog.csdn.net/u013256816/article/details/51204385">《Java中的锁》</a></p></li><li><p>同步不具备继承性</p><p> 当一个线程执行的代码出现异常时，其所持有的锁会自动释放。<strong>同步不具有继承性</strong>（声明为synchronized的父类方法A，在子类中重写之后并不具备synchronized的特性）。</p></li><li><p>wait, notify, notifyAll用法</p><p> 只能在同步方法或者同步块中使用wait()方法。在执行wait()方法后，当前线程释放锁（这点与sleep和yield方法不同）。调用了wait函数的线程会一直等待，知道有其他线程调用了同一个对象的notify或者notifyAll方法才能被唤醒，需要注意的是：被唤醒并不代表立刻获得对象的锁，要等待执行notify()方法的线程执行完，即退出synchronized代码块后，当前线程才会释放锁，而呈wait状态的线程才可以获取该对象锁。</p><p> 如果调用wait()方法时没有持有适当的锁，则抛出IllegalMonitorStateException，它是RuntimeException的一个子类，因此，不需要try-catch语句进行捕获异常。</p><p> notify方法只会（随机）唤醒一个正在等待的线程，而notifyAll方法会唤醒所有正在等待的线程。如果一个对象之前没有调用wait方法，那么调用notify方法是没有任何影响的。<br> 详细可以参考<a href="http://blog.csdn.net/u013256816/article/details/50440123">《JAVA线程间协作：wait.notify.notifyAll》</a></p><p> 带参数的wait(long timeout)或者wait(long timeout, int nanos)方法的功能是等待某一时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。</p></li><li><p>管道</p><p>在Java中提供了各种各样的输入&#x2F;输出流Stream，使我们能够很方便地对数据进行操作，其中管道流（pipeStream)是一种特殊的流，用于在不同线程间直接传送数据。一个线程发送数据到输出管道，另一个线程从输入管道中读数据，通过使用管道，实现不同线程间的通信，而无须借助类似临时文件之类的东西。在JDK中使用4个类来使线程间可以进行通信：PipedInputStream, PipedOutputStream, PipedReader, PipedWriter。使用代码类似inputStream.connect(outputStream)或outputStream.connect(inputStream)使两个Stream之间产生通信连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">几种进程间的通信方式 </span><br><span class="line">- 有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。 </span><br><span class="line">- 信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。 </span><br><span class="line">- 消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。 </span><br><span class="line">- 信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。 </span><br><span class="line">- 共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。 </span><br><span class="line">- 套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</span><br></pre></td></tr></table></figure></li><li><p>join方法</p><p>如果一个线程A执行了thread.join()语句，其含义是：当前线程A等待thread线程终止之后才从thread.join()返回。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是“对象监视器”做为同步。<br>join提供了另外两种实现方法：join(long millis)和join(long millis, int nanos)，至多等待多长时间而退出等待(释放锁)，退出等待之后还可以继续运行。内部是通过wait方法来实现的。</p><p>可以参考一下一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;method main begin-----&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i++);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t.start();</span><br><span class="line">t.join(<span class="number">2000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;method main end-----&quot;</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">method main begin-----</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">method main end-----</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td></tr></table></figure></li><li><p>ThreadLocal</p><p>ThreadLocal可以实现每个线程绑定自己的值，即每个线程有各自独立的副本而互相不受影响。一共有四个方法：get, set, remove, initialValue。可以重写initialValue()方法来为ThreadLocal赋初值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; TIME_THREADLOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Long&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">initialValue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ThreadLocal建议设置为static类型的。<br>使用类InheritableThreadLocal可以在子线程中取得父线程继承下来的值。可以采用重写childValue（Object parentValue）方法来更改继承的值。<br>查看案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheriableThreadLocal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InheritableThreadLocal&lt;?&gt; itl = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;Object&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">protected</span> Object <span class="title function_">initialValue</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">protected</span> Object <span class="title function_">childValue</span><span class="params">(Object parentValue)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> parentValue+<span class="string">&quot; which plus in subThread.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main: get value = &quot;</span>+itl.get());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: get value = &quot;</span>+itl.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        a.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Main: get value = 1461585405704</span><br><span class="line">Thread-0: get value = 1461585405704 which plus in subThread.</span><br></pre></td></tr></table></figure><p>如果去掉@Override protected Object childValue(Object parentValue)方法运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Main: get value = 1461585396073</span><br><span class="line">Thread-0: get value = 1461585396073</span><br></pre></td></tr></table></figure><p><strong>注意：在线程池的情况下，在ThreadLocal业务周期处理完成时，最好显式的调用remove()方法，清空”线程局部变量”中的值。正常情况下使用ThreadLocal不会造成内存溢出，弱引用的只是threadLocal，保存的值依然是强引用的，如果threadLocal依然被其他对象强引用，”线程局部变量”是无法回收的。</strong></p></li><li><p>ReentrantLock</p><p>ReentrantLock提供了tryLock方法，tryLock调用的时候，如果锁被其他线程持有，那么tryLock会立即返回，返回结果为false；如果锁没有被其他线程持有，那么当前调用线程会持有锁，并且tryLock返回的结果为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br></pre></td></tr></table></figure><p>可以在构造ReentranLock时使用公平锁，公平锁是指多个线程在等待同一个锁时，必须按照申请锁的先后顺序来一次获得锁。synchronized中的锁时非公平的，默认情况下ReentrantLock也是非公平的，但是可以在构造函数中指定使用公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock()</span><br><span class="line">ReentrantLock(<span class="type">boolean</span> fair)</span><br></pre></td></tr></table></figure><p>对于ReentrantLock来说，还有一个十分实用的特性，它可以同时绑定多个Condition条件，以实现更精细化的同步控制。<br>ReentrantLock使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ReentrantLock中的其余方法</p><ul><li>int getHoldCount()：查询当前线程保持此锁定的个数，也就是调用lock()方法的次数。</li><li>int getQueueLength()：返回正等待获取此锁定的线程估计数。比如有5个线程，1个线程首先执行await()方法，那么在调用getQueueLength方法后返回值是4，说明有4个线程在等待lock的释放。</li><li>int getWaitQueueLength(Condition condition)：返回等待此锁定相关的给定条件Condition的线程估计数。比如有5个线程，每个线程都执行了同一个condition对象的await方法，则调用getWaitQueueLength(Condition condition)方法时返回的int值是5。</li><li>boolean hasQueuedThread(Thread thread)：查询指定线程是否正在等待获取此锁定。</li><li>boolean hasQueuedThreads()：查询是否有线程正在等待获取此锁定。</li><li>boolean hasWaiters(Condition condition)：查询是否有线程正在等待与此锁定有关的condition条件。</li><li>boolean isFair()：判断是不是公平锁。</li><li>boolean isHeldByCurrentThread()：查询当前线程是否保持此锁定。</li><li>boolean isLocked()：查询此锁定是否由任意线程保持。</li><li>void lockInterruptibly()：如果当前线程未被中断，则获取锁定，如果已经被中断则出现异常。</li></ul></li><li><p>Condition</p><p>一个Condition和一个Lock关联在一起，就想一个条件队列和一个内置锁相关联一样。要创建一个Condition，可以在相关联的Lock上调用Lock.newCondition方法。正如Lock比内置加锁提供了更为丰富的功能，Condition同样比内置条件队列提供了更丰富的功能：在每个锁上可存在多个等待、条件等待可以是可中断的或者不可中断的、基于时限的等待，以及公平的或非公平的队列操作。与内置条件队列不同的是，对于每个Lock，可以有任意数量的Condition对象。Condition对象继承了相关的Lock对象的公平性，对于公平的锁，线程会依照FIFO顺序从Condition.await中释放。</p><p>注意：在Condition对象中，与wait,notify和notifyAll方法对于的分别是await,signal,signalAll。但是，Condition对Object进行了扩展，因而它也包含wait和notify方法。一定要确保使用的版本——await和signal.</p><p>详细可参考<a href="http://blog.csdn.net/u013256816/article/details/50445241">《JAVA线程间协作：Condition》</a></p></li><li><p>读写锁ReentrantReadWriteLock</p><p>读写锁表示也有两个锁，一个是读操作相关的锁，也称为共享锁；另一个是写操作相关的锁，也叫排它锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。在没有Thread进行写操作时，进行读取操作的多个Thread都可以获取读锁，而进行写入操作的Thread只有在获取写锁后才能进行写入操作。即多个Thread可以同时进行读取操作，但是同一时刻只允许一个Thread进行写入操作。(lock.readlock.lock(), lock.readlock.unlock, lock.writelock.lock, lock.writelock.unlock)</p></li><li><p>Timer的使用</p><p>JDK中的Timer类主要负责计划任务的功能，也就是在指定时间开始执行某一任务。Timer类的主要作用就是设置计划任务，但封装任务的类却是TimerTask类（public abstract class TimerTask extends Object implements Runnable）。可以通过new Timer(true)设置为后台线程。</p><p>有以下几个方法：</p><ul><li>void schedule(TimerTask task, Date time)：在指定的日期执行某一次任务。如果执行任务的时间早于当前时间则立刻执行。</li><li>void schedule(TimerTask task, Date firstTime, long period)：在指定的日期之后，按指定的间隔周期性地无限循环地执行某一任务。如果执行任务的时间早于当前时间则立刻执行。</li><li>void schedule(TimerTask task, long delay)：以当前时间为参考时间，在此基础上延迟指定的毫秒数后执行一次TimerTask任务。</li><li>void schedule(TimerTask task, long delay, long period）：以当前时间为参考时间，在此基础上延迟指定的毫秒数，再以某一间隔无限次数地执行某一任务。</li><li>void scheduleAtFixedRate(TimerTask task, Date firstTime, long period)：下次执行任务时间参考上次任务的结束时间，且具有“追赶性”。</li></ul><p>TimerTask是以队列的方式一个一个被顺序执行的，所以执行的时间有可能和预期的时间不一致，因为前面的任务有可能消耗的时间较长，则后面的任务运行时间也会被延迟。<br>TimerTask类中的cancel方法的作用是将自身从任务队列中清除。<br>Timer类中的cancel方法的作用是将任务队列中的全部任务清空，并且进程被销毁。</p><p><strong>Timer的缺陷：</strong>Timer支持基于绝对时间而不是相对时间的调度机制，因此任务的执行对系统时钟变化很敏感，而ScheduledThreadPoolExecutor只支持相对时间的调度。Timer在执行所有定时任务时只会创建一个线程。如果某个任务的执行时间过长，那么将破坏其他TimerTask的定时精确性。Timer的另一个问题是，如果TimerTask抛出了一个未检查的异常，那么Timer将表现出糟糕的行为。Timer线程并不波或异常，因此当TimerTask抛出为检测的异常时将终止定时线程。</p><p>JDK5或者更高的JDK中已经很少使用Timer.</p></li><li><p>线程安全的单例模式</p><p>建议不要采用DCL的写法，建议使用下面这种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyInitHolderSingleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyInitHolderSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LazyInitHolderSingleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LazyInitHolderSingleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyInitHolderSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SingletonClass</span></span><br><span class="line">&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程组ThreadGroup</p><p>为了有效地对一些线程进行组织管理，通常的情况下事创建一个线程组，然后再将部分线程归属到该组中，这样可以对零散的线程对象进行有效的组织和规划。参考以下案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadGroup</span> <span class="variable">tgroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;mavelous zzh&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(tgroup, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A: Begin: &quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">while</span>(!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;A: DEAD: &quot;</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(tgroup, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B: Begin: &quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">while</span>(!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;B: DEAD: &quot;</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">System.out.println(tgroup.activeCount());</span><br><span class="line">System.out.println(tgroup.getName());</span><br><span class="line">System.out.println(tgroup.getMaxPriority());</span><br><span class="line">System.out.println(tgroup.getParent());</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">tgroup.interrupt();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A: Begin: Thread-0</span><br><span class="line">2</span><br><span class="line">mavelous zzh</span><br><span class="line">10</span><br><span class="line">B: Begin: Thread-1</span><br><span class="line">java.lang.ThreadGroup[name=main,maxpri=10]</span><br><span class="line">B: DEAD: Thread-1</span><br><span class="line">A: DEAD: Thread-0</span><br></pre></td></tr></table></figure></li><li><p>多线程的异常捕获UncaughtExceptionHandler</p><p>setUncaughtExceptionHandler()的作用是对指定线程对象设置默认的异常处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">UncaughtExceptionHandler</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span>+t.getName()+<span class="string">&quot; 出现了异常：&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程：Thread-0 出现了异常：/ by zero </span><br></pre></td></tr></table></figure><p><code>setDefaultUncaughtExceptionHandler()</code>方法对所有线程对象设置异常处理器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">UncaughtExceptionHandler</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span>+t.getName()+<span class="string">&quot; 出现了异常：&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><p>输出同上，注意两者之间的区别。如果既包含setUncaughtExceptionHandler又包含setDefaultUncaughtExceptionHandler那么会被setUncaughtExceptionHandler处理，setDefaultUncaughtExceptionHandler则忽略。更多详细信息参考<a href="http://blog.csdn.net/u013256816/article/details/50417822">《JAVA多线程之UncaughtExceptionHandler——处理非正常的线程中止》</a></p></li></ol><p>21.ReentrantLock与synchonized区别</p><pre><code>- ReentrantLock可以中断地获取锁（void lockInterruptibly() throws InterruptedException）- ReentrantLock可以尝试非阻塞地获取锁（boolean tryLock()）- ReentrantLock可以超时获取锁。通过tryLock(timeout, unit)，可以尝试获得锁，并且指定等待的时间。- ReentrantLock可以实现公平锁。通过new ReentrantLock(true)实现。- ReentrantLock对象可以同时绑定多个Condition对象，而在synchronized中，锁对象的的wait(), notify(), notifyAll()方法可以实现一个隐含条件，如果要和多于一个的条件关联的对象，就不得不额外地添加一个锁，而ReentrantLock则无需这样做，只需要多次调用newCondition()方法即可。</code></pre><ol start="22"><li><p>使用多线程的优势</p><p>更多的处理器核心；更快的响应时间；更好的编程模型。</p></li><li><p>构造线程</p><p>一个新构造的线程对象是由其parent线程来进行空间分配的，而child线程继承了parent线程的：是否为Daemon、优先级、加载资源的contextClassLoader以及InheritableThreadLocal(参考第12条)，同时还会分配一个唯一的ID来标志这个child线程。</p></li><li><p>使用多线程的方式</p><p>extends Thread 或者implements Runnable</p></li><li><p>读写锁</p><p>读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有的读线程和其他写线程均被阻塞。读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排它锁有了很大的提升。Java中使用ReentrantReadWriteLock实现读写锁，读写锁的一般写法如下(修改自JDK7中的示例)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RWDictionary</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; m = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> rwl.readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> rwl.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m.get(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] allKeys() &#123;</span><br><span class="line">        r.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String[]) m.keySet().toArray();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> m.put(key, value);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            w.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m.clear();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            w.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>26.锁降级</p><pre><code>锁降级是指写锁降级成读锁。如果当前线程拥有写锁，然后将其释放，最后获取读锁，这种分段完成的过程不能称之为锁降级。锁降级是指把持住（当前拥有的）写锁，再获取到读锁，最后释放（先前拥有的）写锁的过程。参考下面的示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> rwl.readLock();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> rwl.writeLock();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">update</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">    r.lock();</span><br><span class="line">    <span class="keyword">if</span>(!update) &#123;</span><br><span class="line">        <span class="comment">//必须先释放读锁</span></span><br><span class="line">        r.unlock();</span><br><span class="line">        <span class="comment">//锁降级从写锁获取到开始</span></span><br><span class="line">        w.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!update) &#123;</span><br><span class="line">                <span class="comment">//准备数据的流程（略）</span></span><br><span class="line">                update = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            r.lock();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            w.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//锁降级完成，写锁降级为读锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//使用数据的流程（略）</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        r.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>锁降级中的读锁是否有必要呢？答案是必要。主要是为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程（T）获取了写锁并修改了数据，那么当前线程无法感知线程T的数据更新。如果当前线程获取读锁，即遵循锁降级的步骤，则线程T将会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程知识汇总(2)</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(2)/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程知识汇总-2"><a href="#Java多线程知识汇总-2" class="headerlink" title="Java多线程知识汇总(2)"></a>Java多线程知识汇总(2)</h1><blockquote><p>引用自<a href="https://blog.csdn.net/u013256816/article/details/51325309">Java多线程知识小抄集(二)</a></p></blockquote><ol start="27"><li><p>ConcurrentHashMap</p><p>ConcurrentHashMap是线程安全的HashMap，内部采用分段锁来实现，默认初始容量为16，装载因子为0.75f，分段16，每个段的HashEntry&lt;K,V&gt;[]大小为2。<strong>键值都不能为null</strong>。每次扩容为原来容量的2倍，ConcurrentHashMap不会对整个容器进行扩容，而只对某个segment进行扩容。在获取size操作的时候，不是直接把所有segment的count相加就可以可到整个ConcurrentHashMap大小，也不是在统计size的时候把所有的segment的put, remove, clean方法全部锁住，这种方法太低效。在累加count操作过程中，之前累加过的count发生变化的几率非常小，所有ConcurrentHashMap的做法是先尝试2（RETRIES_BEFORE_LOCK）次通过不锁住Segment的方式统计各个Segment大小，如果统计的过程中，容器的count发生了变化，再采用加锁的方式来统计所有的Segment的大小。</p></li><li><p>线程安全的非阻塞队列</p><p>非阻塞队列有ConcurrentLinkedQueue, ConcurrentLinkedDeque。<strong>元素不能为null</strong>。以ConcurrentLinkedQueue为例，有头head和尾tail两个指针，遵循FIFO的原则进行入队和出队，方法有add(E e), peek()取出不删除, poll()取出删除, remove(Object o)，size(), contains(Object o), addAll(Collection c), isEmpty()。ConcurrentLinkedDeque是双向队列，可以在头和尾两个方向进行相应的操作。</p></li><li><p>阻塞队列</p><p>阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。<br>支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。<br>支持阻塞的移除方法：意思是队列为空时，获取元素的线程会等待队列变为非空。<br><strong>任何阻塞队列中的元素都不能为null.</strong></p></li><li><p>阻塞队列的插入和移除操作处理方式：</p><table><thead><tr><th>方法-处理方法</th><th>抛出异常</th><th>返回特殊值</th><th>可能阻塞等待</th><th>可设定等待时间</th></tr></thead><tbody><tr><td>入队</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,timeout,unit)</td></tr><tr><td>出队</td><td>remove()</td><td></td><td>poll()</td><td>take()</td></tr><tr><td>查看</td><td>element()</td><td>peek()</td><td>无</td><td>无</td></tr></tbody></table><p><strong>如果是无界队列，队列不可能出现满的情况，所以使用put或offer方法永远不会被阻塞，而且使用offer方法时，该方法永远返回true.</strong></p></li><li><p>Java里的阻塞队列</p><ul><li>ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列。 </li><li>LinkedeBlockingQueue:一个有链表结构组成的有界阻塞队列。 </li><li>PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列 </li><li>DelayQueue:一个使用优先级队列实现的无界阻塞队列。 </li><li>SynchronousQueue:一个不存储元素的阻塞队列。 </li><li>LinkedTransferQueue:一个由链表结构组成的无界阻塞队列。 </li><li>LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列。</li></ul></li><li><p>ArrayBlockingQueue</p><p>此队列按照FIFO的原则对元素进行排序，可以设定为公平ArrayBlockingQueue(int capacity, boolean fair)，默认为不公平。初始化时必须设定容量大小ArrayBlockingQueue(int capactiy)。</p></li><li><p>LinkedBlockingQueue</p><p>与ArrayBlockingQueue一样，按照FIFO原则进行排序，与ArrayBlockingQueue不同的是内部实现是一个链表结构，且不能设置为公平的。默认和最大长度为Integer.MAX_VALUE。</p></li><li><p>PriorityBlockingQueue</p><p>是一个支持优先级的无界阻塞队列，默认初始容量为11，默认情况下采用自然顺序升序排列，不能保证同优先级元素的顺序。内部元素要么实现Comparable接口，要么在初始化的时候指定构造函数的Comparator来对元素进行排序，有关Comparable与Comparator的细节可以参考：<a href="http://blog.csdn.net/u013256816/article/details/50899416">Comparable与Comparator浅析</a>。</p></li><li><p>DelayQueue</p><p>DelayQueue是一个支持延时获取元素的无界阻塞队列。内部包含一个PriorityQueue来实现，队列中的元素必须实现Delay接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。<br>DelayQueue非常有用，可以将DelayQueue运用在下面应用场景。 </p><ul><li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue,一旦能从DelayQueue中获取元素时，表示缓存有效期到了。 </li><li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如TimerQueue就是使用DelayQueue实现的。</li></ul></li><li><p>SynchronousQueue</p><p>是一个不存储元素的阻塞队列，每一个put操作必须等待一个take操作，否则不能继续添加元素，非常适合传递性场景。支持公平访问队列。默认情况下线程采用非公平策略访问队列。</p></li><li><p>LinkedTransferQueue</p><p>是一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。<br>transfer方法：如果当前有消费者正在等待接收元素（消费者使用take()或者带时间限制的poll方法时），transfer方法可以把生产者传入的元素立刻transfer给消费者，如果没有消费者在等待接收元素，transfer方法会将元素存放在队列的tail节点，并等到该元素被消费者消费了才返回。<br>tryTransfer方法：用来试探生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回false。和transfer方法的区别是tryTransfer方法无论消费者是否接收，方法立刻返回，而transfer方法是必须等到消费者消费了才返回。</p></li><li><p>LinkedBlockingDeque</p><p>LinkedBlockingDeque是一个由链表结构组成的双向阻塞队列。所谓双向队列是指可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相对其他的阻塞队列，LinkedBlockingDeque多了addFirst, addLast, offerFirst, offerLast, peekFirst, peekLast等方法。</p></li><li><p>Fork&#x2F;Join框架</p><p>Fork&#x2F;Join框架是JDK7提供的一个用于并行执行任务的框架，是一个把大任务切分为若干子任务并行的执行，最终汇总每个小任务后得到大任务结果的框架。我们再通过Fork和Join来理解下Fork&#x2F;Join框架。Fork就是把一个大任务划分成为若干子任务并行的执行，Join就是合并这些子任务的执行结果，最后得到这个大任务的结果。</p><p>使用Fork&#x2F;Join框架时，首先需要创建一个ForkJoin任务，它提供在任务中执行fork()和join操作的机制。通常情况下，我们不需要直接继承ForkJoinTask，只需要继承它的子类，Fork&#x2F;Join框架提供了两个子类：RecursiveAction用于没有返回结果的任务；RecursiveTask用于有返回结果的任务。ForkJoinTask需要通过ForkJoinPool来执行。</p><p>任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。（工作窃取算法work-stealing）</p><p>示例：计算1+2+3+…+100的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>‹Integer› &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountTask</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Integer <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">canCompute</span> <span class="operator">=</span> (end-start) &lt;= THRESHOLD;</span><br><span class="line">        <span class="keyword">if</span>(canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=end;i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (start+end)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">CountTask</span> <span class="variable">leftTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(start,middle);</span><br><span class="line">            <span class="type">CountTask</span> <span class="variable">rightTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(middle+<span class="number">1</span>,end);</span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftResult</span> <span class="operator">=</span> leftTask.join();</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightResult</span> <span class="operator">=</span> rightTask.join();</span><br><span class="line">            sum = leftResult+rightResult;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        <span class="type">CountTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountTask</span>(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        Future‹Integer› result = forkJoinPool.submit(task);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(task.isCompletedAbnormally()) &#123;</span><br><span class="line">            System.out.println(task.getException());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原子类</p><p>Java中Atomic包里一共提供了12个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用、原子更新属性（字段）。Atomic包里的类基本都是使用Unsafe实现的包装类。 </p><p>1）原子更新基本类型：AtomicBoolean，AtomicInteger, AtomicLong.<br>2）原子更新数组：AtomicIntegerArray，AtomicLongArray, AtomicReferenceArray.<br>3）原子更新引用类型：AtomicReference, AtomicStampedReference, AtomicMarkableReference.  </p><ol start="4"><li>原子更新字段类型：AtomicReferenceFieldUpdater, AtomicIntegerFieldUpdater, AtomicLongFieldUpdater.</li></ol></li><li><p>原子更新基本类型</p><p>AtomicBoolean，AtomicInteger, AtomicLong三个类提供的方法类似，以AtomicInteger为例：有int addAndGet(int delta), boolean compareAndSet(int expect, int update), int getAndIncrement(), void lazySet(int newValue)，int getAndSet(int newValue)。其中大多数的方法都是调用compareAndSet方法实现的，譬如getAndIncrement():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> get();</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> current + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sun.misc.Unsafe只提供三种CAS方法：compareAndSwapObject, compareAndSwapInt和compareAndSwapLong，再看AtomicBoolean源码，发现它是先把Boolean转换成整形，再使用compareAndSwapInt进行CAS，原子更新char,float,double变量也可以用类似的思路来实现。</p></li><li><p>原子更新数组</p><p>以AtomicIntegerArray为例，此类主要提供原子的方式更新数组里的整形，常用方法如下：<br>int addAndGet(int i, int delta)：以原子的方式将输入值与数组中索引i的元素相加。<br>boolean compareAndSet(int i, int expect, int update)：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。<br>AtomicIntegerArray的两个构造方法：<br>AtomicIntegerArray(int length)：指定数组的大小，并初始化为0<br>AtomicIntegerArray(int [] array)：对给定的数组进行拷贝。<br>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> value[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">AtomicIntegerArray</span> <span class="variable">aia</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(value);</span><br><span class="line">System.out.println(aia.getAndSet(<span class="number">1</span>, <span class="number">9</span>));</span><br><span class="line">System.out.println(aia.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(value[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>运行结果：2 9 2</p></li><li><p>CountDownLatch</p><p>CountDownLatch允许一个或多个线程等待其他线程完成操作。CountDownLatch的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N（CountDownLatch(int count)）。<br>CountDownLatch的方法有：await(), await(long timeout, TimeUnit unit), countDown(), getCount()等。</p><p>计数器必须大于等于0，只是等于0的时候，计数器就是零，调用await方法时不会阻塞当前线程。CountDownLatch不可能重新初始化或者修改CountDownLatch对象的内部计数器的值。一个线程调用countDown方法happens-before另一个线程调用的await()方法。</p></li><li><p>CyclicBarrier</p><p>让一组线程达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。CyclicBarrier默认的构造方法是CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经达到了屏障，然后当前线程被阻塞。CyclicBarrier还提供了一个更高级的构造函数CyclicBarrier(int parties, Runnable barrierAction)用于在线程达到屏障时，优先执行barrierAction，方便处理更复杂的业务场景，举例如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">CyclicBarrier</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">A</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="number">1</span>);</span><br><span class="line">                    c.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="number">3</span>);</span><br><span class="line">            c.await();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：3 1 5 2 4</p></li><li><p>CyclicBarrier和CountDownLatch的区别</p><p>CountDownLatch的计数器只能使用一次，而CyclicBarrier的计数器可以使用reset()方法重置。</p></li><li><p>Semaphore</p><p>Semaphore(信号量)是用来控制同事访问特定资源的线程数量，它协调各个线程，以保证合理的使用公共资源。Semaphore有两个构造函数：Semaphore(int permits)默认是非公平的，Semaphore(int permits, boolean fair)可以设置为公平的。应用案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> THREAD_COUNT=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;THREAD_COUNT;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> i;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        s.acquire();</span><br><span class="line">                        System.out.println(<span class="string">&quot;do something....&quot;</span>+a);</span><br><span class="line">                        s.release();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上例可以看出Semaphore的用法非常的简单，首先线程使用Semaphore的acquire()方法获取一个许可证，使用完之后调用release()方法归还许可证。还可以用tryAcquire()方法尝试获取许可证。Semaphore还提供了一些其他方法： int availablePermits()返回此信号量中当前可用的许可证数；int getQueueLength()返回正在等待获取许可证的线程数；boolean hasQueuedThreads()是否有线程正在等待获取许可证；void reducePermits(int reduction)减少reduction个许可证，是个protected方法；Collection‹Thread› getQueuedThreads()返回所有等待获取许可证的线程集合，也是一个protected方法。</p></li><li><p>线程间交换数据的Exchanger</p><p>Exchanger是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法。当两个线程都到达同步点时，这两个线程就可以交换数据，将本现场生产出来的数据传递给对方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> <span class="string">&quot;I&#x27;m A!&quot;</span>;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">B</span> <span class="operator">=</span> exchanger.exchange(A);</span><br><span class="line">                    System.out.println(<span class="string">&quot;In 1-&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+B);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    String B=<span class="string">&quot;I&#x27;m B!&quot;</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">A</span> <span class="operator">=</span> exchanger.exchange(B);</span><br><span class="line">                    System.out.println(<span class="string">&quot;In 2-&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+A);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In 2-pool-1-thread-2: I&#x27;m A!</span><br><span class="line">In 1-pool-1-thread-1: I&#x27;m B!</span><br></pre></td></tr></table></figure><p>如果两个线程有一个没有执行exchange(V x)方法，则会一直等待，如果担心有特殊情况发生，避免一直等待，可以使用exchange(V x, long timeout, TimeUnit unit)设置最大等待时长。</p></li><li><p>Java中的线程池ThreadPoolExecutor</p><p>可以通过ThreadPoolExecutor来创建一个线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><ul><li><p>corePoolSize（线程池基本大小）：当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，才会根据是否存在空闲线程，来决定是否需要创建新的线程。除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。</p></li><li><p>maximumPoolSize（线程池最大大小）：线程池所允许的最大线程个数。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</p></li><li><p>keepAliveTime（线程存活保持时间）：默认情况下，当线程池的线程个数多于corePoolSize时，线程的空闲时间超过keepAliveTime则会终止。但只要keepAliveTime大于0，allowCoreThreadTimeOut(boolean) 方法也可将此超时策略应用于核心线程。另外，也可以使用setKeepAliveTime()动态地更改参数。</p></li><li><p>unit（存活时间的单位）：时间单位，分为7类，从细到粗顺序：NANOSECONDS（纳秒），MICROSECONDS（微妙），MILLISECONDS（毫秒），SECONDS（秒），MINUTES（分），HOURS（小时），DAYS（天）；</p></li><li><p>workQueue（任务队列）：用于传输和保存等待执行任务的阻塞队列。可以使用此队列与线程池进行交互：</p><p>  如果运行的线程数少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。<br>  如果运行的线程数等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。<br>  如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。  </p></li><li><p>threadFactory（线程工厂）：用于创建新线程。由同一个threadFactory创建的线程，属于同一个ThreadGroup，创建的线程优先级都为Thread.NORM_PRIORITY，以及是非守护进程状态。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）;</p></li><li><p>handler（线程饱和策略）：当线程池和队列都满了，则表明该线程池已达饱和状态。</p><p>  ThreadPoolExecutor.AbortPolicy：处理程序遭到拒绝，则直接抛出运行时异常 RejectedExecutionException。(默认策略)<br>  ThreadPoolExecutor.CallerRunsPolicy：调用者所在线程来运行该任务，此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。<br>  ThreadPoolExecutor.DiscardPolicy：无法执行的任务将被删除。<br>  ThreadPoolExecutor.DiscardOldestPolicy：如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重新尝试执行任务（如果再次失败，则重复此过程）。</p></li></ul><p>可以使用两个方法向线程池提交任务，分别为execute()和submit()方法。execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。submit()方法用于提交需要返回值的任务，线程池会返回一个Future类型的对象，通过这个对象可以判断任务是否执行成功。如Future‹Object› future &#x3D; executor.submit(task);</p><p>利用线程池提供的参数进行监控，参数如下：</p><ul><li>getTaskCount()：线程池需要执行的任务数量。</li><li>getCompletedTaskCount()：线程池在运行过程中已完成的任务数量，小于或等于taskCount。</li><li>getLargestPoolSize()：线程池曾经创建过的最大线程数量，通过这个数据可以知道线程池是否满过。如等于线程池的最大大小，则表示线程池曾经满了。</li><li>getPoolSize()：线程池的线程数量。如果线程池不销毁的话，池里的线程不会自动销毁，所以这个大小只增不减。</li><li>getActiveCount()：获取活动的线程数。</li></ul></li><li><p>shutdown和shutdownNow</p><p>可以调用线程池的shutdown或者shutdownNow方法来关闭线程池。他们的原理是遍历线程池的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法停止。</p><p>区别：shutdown方法将执行平缓的关闭过程：不在接收新的任务，同时等待已提交的任务执行完成——包括哪些还未开始执行的任务。shutdownNow方法将执行粗暴的关闭过程：它将尝试取消所有运行中的任务，并且不再启动队列中尚未开始执行的任务。</p><p>只要调用了这两个关闭方法中的任意一个,isShutdown方法就会返回true，当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminated方法会返回true。至于应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。</p></li><li><p>扩展ThreadPoolExecutor</p><p>可以通过继承线程池来自定义线程池，重写线程池的beforeExecute, afterExecute和terminated方法。在执行任务的线程中将调用beforeExecute和afterExecute等方法，在这些方法中还可以添加日志、计时、监视或者统计信息收集的功能。无论任务是从run中正常返回，还是抛出一个异常而返回，afterExecute都会被调用。如果任务在完成后带有一个Error，那么就不会调用afterExecute。如果beforeExecute抛出一个RuntimeException，那么任务将不被执行，并且afterExecute也不会被调用。在线程池完成关闭时调用terminated，也就是在所有任务都已经完成并且所有工作者线程也已经关闭后，terminated可以用来释放Executor在其生命周期里分配的各种资源，此外还可以执行发送通知、记录日志或者手机finalize统计等操作。详细可以参考<a href="http://blog.csdn.net/u013256816/article/details/50403962">《JAVA多线程之扩展ThreadPoolExecutor》</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程知识汇总(3)</title>
      <link href="/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(3)/"/>
      <url>/2020/02/04/java/java-advanced/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程知识汇总-3"><a href="#Java多线程知识汇总-3" class="headerlink" title="Java多线程知识汇总(3)"></a>Java多线程知识汇总(3)</h1><blockquote><p>引用自<a href="https://blog.csdn.net/u013256816/article/details/51363643">Java多线程知识小抄集(三)</a></p></blockquote><ol start="51"><li><p>SimpleDateFormat非线程安全</p><p>当多个线程共享一个SimpleDateFormat实例的时候，就会出现难以预料的异常。 </p><p>主要原因是parse()方法使用calendar来生成返回的Date实例，而每次parse之前，都会把calendar里的相关属性清除掉。问题是这个calendar是个全局变量，也就是线程共享的。因此就会出现一个线程刚把calendar设置好，另一个线程就把它给清空了，这时第一个线程再parse的话就会有问题了。</p><p>解决方案:1. 每次使用时创建一个新的SimpleDateFormat实例；2. 创建一个共享的SimpleDateFormat实例变量，并对这个变量进行同步；3. 使用ThreadLocal为每个线程都创建一个独享的SimpleDateFormat实例变量。</p></li><li><p>CopyOnWriteArrayList</p><p>在每次修改时，都会创建并重新发布一个新的容器副本，从而实现可变现。CopyOnWriteArrayList的迭代器保留一个指向底层基础数组的引用，这个数组当前位于迭代器的起始位置，由于它不会被修改，因此在对其进行同步时只需确保数组内容的可见性。因此，多个线程可以同时对这个容器进行迭代，而不会彼此干扰或者与修改容器的线程相互干扰。“写时复制”容器返回的迭代器不会抛出ConcurrentModificationException并且返回的元素与迭代器创建时的元素完全一致，而不必考虑之后修改操作所带来的影响。显然，每当修改容器时都会复制底层数组，这需要一定的开销，特别是当容器的规模较大时，仅当迭代操作远远多于修改操作时，才应该使用“写入时赋值”容器。</p></li><li><p>工作窃取算法（work-stealing）</p><p>工作窃取算法是指某个线程从其他队列里窃取任务来执行。在生产-消费者设计中，所有消费者有一个共享的工作队列，而在work-stealing设计中，每个消费者都有各自的双端队列，如果一个消费者完成了自己双端队列中的全部任务，那么它可以从其他消费者双端队列末尾秘密地获取工作。</p><p>优点：充分利用线程进行并行计算，减少了线程间的竞争。<br>缺点：在某些情况下还是存在竞争，比如双端队列（Deque）里只有一个任务时。并且该算法会消耗了更多的系统资源，比如创建多个线程和多个双端队列。</p></li><li><p>Future &amp; FutureTask</p><p>FutureTask表示的计算是通过Callable来实现的，相当于一种可生产结果的Runnable，并且可以处于一下3种状态：等待运行，正在运行和运行完成。运行表示计算的所有可能结束方式，包括正常结束、由于取消而结束和由于异常而结束等。当FutureTask进入完成状态后，它会永远停止在这个状态上。Future.get的行为取决于任务的状态，如果任务已经完成，那么get会立刻返回结果，否则get将阻塞知道任务进入完成状态，然后返回结果或者异常。FutureTask的使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Preloader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//method1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> FutureTask‹Object› future = <span class="keyword">new</span> <span class="title class_">FutureTask</span>‹Object›(<span class="keyword">new</span> <span class="title class_">Callable</span>‹Object›()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method2</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Future‹Object› futureExecutor = executor.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>‹Object›()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span><br><span class="line">    &#123;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">        future.run();</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">        System.out.println(futureExecutor.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：yes    no<br>Callable表示的任务可以抛出受检查或未受检查的异常，并且任何代码都可能抛出一个Error.无论任务代码抛出什么异常，都会被封装到一个ExecutionException中，并在Future.get中被重新抛出。</p></li><li><p>Executors</p><p>newFixedThreadPool：创建一个固定长度的线程池，每当提交一个任务时就创建一个线程，直到达到线程池的最大数量，这时线程池的规模将不再变化（如果某个线程由于发生了未预期的Exception而结束，那么线程池会补充一个新的线程）。（LinkedBlockingQueue）<br>newCachedThreadPool：创建一个可换成的线程池，如果线程池的当前规模超过了处理需求时，那么将回收空闲的线程，而当需求增加时，则可以添加新的线程，线程池的规模不存在任何限制。（SynchronousQueue）<br>newSingleThreadExecutor：是一个单线程的Executor，它创建单个工作者线程来执行任务，如果这个线程异常结束，会创建另一个线程来替代。能确保一组任务在队列中的顺序来串行执行。（LinkedBlockingQueue）<br>newScheduledThreadPool：创建了一个固定长度的线程池，而且以延迟或者定时的方式来执行任务，类似于Timer。</p></li><li><p>ScheduledThreadPoolExecutor替代Timer</p><p>Timer有两个缺陷，在JDK5开始就很少使用Timer了，取而代之的可以使用ScheduledThreadPoolExecutor。使用实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleThreadPoolTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        exec.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            &#125;&#125;, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ScheduledFuture&lt;String&gt; future = exec.schedule(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Callable&quot;</span>;</span><br><span class="line">            &#125;&#125;, <span class="number">4</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InterruptedException | ExecutionException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        method1();</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：1 Callable</p></li><li><p>Callable &amp; Runnable</p><p>Executor框架使用Runnable作为基本的任务表示形式。Runnable是一种有很大局限的抽象，虽然run能写入到日志文件或者将结果放入某个共享的数据结构，但它不能返回一个值或抛出一个受检查的异常。</p><p>许多任务实际上都是存在延迟的计算——执行数据库查询，从网络上获取资源，或者计算某个复杂的功能。对于这些任务，Callable是一种更好的抽象：它认为主入口点（call()）将返回一个值，并可能抛出一个异常。</p><p>Runnable和Callable描述的都是抽象的计算任务。这些任务通常是有范围的，即都有一个明确的起始点，并且最终会结束。</p></li><li><p>CompletionService</p><p>如果想Executor提交了一组计算任务，并且希望在计算完成后获得结果，那么可以保留与每个任务关联的Future，然后反复使用get方法，同事将参数timeout指定为0，从而通过轮询来判断任务是否完成。这种方法虽然可行，但却有些繁琐。幸运的是，还有一种更好的方法：CompletionService。CompletionService将Executor和BlockingQueue的功能融合在一起。你可以将Callable任务提交给它来执行，然后使用类似于队列操作的take和poll等方法来获得已完成的结果，而这些结果会在完成时被封装为Future。ExecutorCompletionService实现了CompletionService,并将计算部分委托到一个Executor。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">coreNum</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(coreNum);</span><br><span class="line">CompletionService‹Object› completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>‹Object›(executor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;coreNum;i++)</span><br><span class="line">&#123;</span><br><span class="line">    completionService.submit( <span class="keyword">new</span> <span class="title class_">Callable</span>‹Object›()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;coreNum;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Future‹Object› future = completionService.take();</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InterruptedException | ExecutionException e)</span><br><span class="line">    &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-1</span><br><span class="line">pool-1-thread-2</span><br><span class="line">pool-1-thread-3</span><br><span class="line">pool-1-thread-4</span><br></pre></td></tr></table></figure><p>可以通过ExecutorCompletionService(Executor executor, BlockingQueue&lt;Future‹V›&gt; completionQueue)构造函数指定特定的BlockingQueue（如下代码剪辑），默认为LinkedBlockingQueue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BlockingQueue&lt;Future‹Object›&gt; bq = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Future‹Object›&gt;();</span><br><span class="line">CompletionService‹Object› completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>‹Object›(executor,bq);<span class="number">12</span></span><br></pre></td></tr></table></figure><p>ExecutorCompletionService的JDK源码只有100行左右，有兴趣的朋友可以看看。</p></li><li><p>通过Future来实现取消</p><p>ExecutorService.submit将返回一个Future来描述任务。Future拥有一个cancel方法，该方法带有一个boolean类型的参数mayInterruptIfRunning，表示取消操作是否成功。如果mayInterruptIfRunning为true并且任务当前正在某个线程运行，那么这个线程能被中断。如果这个参数为false，那么意味着“若任务还没启动，就不要运行它”，这种方式应该用于那些不处理中断的任务中。当Future.get抛出InterruptedException或TimeoutException时，如果你知道不再需要结果，那么就可以调用Futuure.cancel来取消任务。</p></li><li><p>处理不可中断的阻塞</p><p>对于一下几种情况，中断请求只能设置线程的中断状态，除此之外没有其他任何作用。</p><ul><li>Java.io包中的同步Socket I&#x2F;O：虽然InputStream和OutputStream中的read和write等方法都不会响应中断，但通过关闭底层的套接字，可以使得由于执行read或write等方法而被阻塞的线程抛出一个SocketException。</li><li>Java.io包中的同步I&#x2F;O：当中断一个在InterruptibleChannel上等待的线程时会抛出ClosedByInterrptException并关闭链路。当关闭一个InterruptibleChannel时，将导致所有在链路操作上阻塞的线程都抛出AsynchronousCloseException。</li><li>Selector的异步I&#x2F;O：如果一个线程在调用Selector.select方法时阻塞了，那么调用close或wakeup方法会使线程抛出ClosedSelectorException并提前返回。</li><li>获得某个锁：如果一个线程由于等待某个内置锁而阻塞，那么将无法响应中断，因为线程认为它肯定会获得锁，所以将不会理会中断请求，但是在Lock类中提供了lockInterruptibly方法，该方法允许在等待一个锁的同时仍能响应中断。</li></ul></li><li><p>关闭钩子</p><p>JVM既可以正常关闭也可以强制关闭，或者说非正常关闭。关闭钩子可以在JVM关闭时执行一些特定的操作，譬如可以用于实现服务或应用程序的清理工作。关闭钩子可以在一下几种场景中应用：1. 程序正常退出（这里指一个JVM实例）；2.使用System.exit()；3.终端使用Ctrl+C触发的中断；4. 系统关闭；5. OutOfMemory宕机；6.使用Kill pid命令干掉进程（注：在使用kill -9 pid时，是不会被调用的）。使用方法（Runtime.getRuntime().addShutdownHook(Thread hook)）。更多内容可以参考<a href="http://blog.csdn.net/u013256816/article/details/50394923">JAVA虚拟机关闭钩子(Shutdown Hook)</a></p></li><li><p>终结器finalize</p><p>终结器finalize：在回收器释放它们后，调用它们的finalize方法，从而保证一些持久化的资源被释放。在大多数情况下，通过使用finally代码块和显示的close方法，能够比使用终结器更好地管理资源。唯一例外情况在于：当需要管理对象，并且该对象持有的资源是通过本地方法获得的。但是基于一些原因（譬如对象复活），我们要尽量避免编写或者使用包含终结器的类。</p></li><li><p>线程工厂ThreadFactory</p><p>每当线程池（ThreadPoolExecutor）需要创建一个线程时，都是通过线程功夫方法来完成的。默认的线程工厂方法将创建一个新的、非守护的线程，并且不包含特殊的配置信息。通过指定一个线程工厂方法，可以定制线程池的配置信息。在ThreadFactory中只定义了一个方法newThread，每当线程池需要创建一个新线程时都会调用这个方法。默认的线程工厂(DefaultThreadFactory 是Executors的内部类)如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">poolNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                                Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> +</span><br><span class="line">                        poolNumber.getAndIncrement() +</span><br><span class="line">                        <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,</span><br><span class="line">                                namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                                <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过implements ThreadFactory可以定制线程工厂。譬如，你希望为线程池中的线程指定一个UncaughtExceptionHandler，或者实例化一个定制的Thread类用于执行调试信息的记录。</p></li><li><p>synchronized与ReentrantLock之间进行选择</p><p>由第21条可知ReentrantLock与synchronized想必提供了许多功能：定时的锁等待，可中断的锁等待、公平锁、非阻塞的获取锁等，而且从性能上来说ReentrantLock比synchronized略有胜出（JDK6起），在JDK5中是远远胜出，为嘛不放弃synchronized呢？ReentrantLock的危险性要比同步机制高，如果忘记在finnally块中调用unlock，那么虽然代码表面上能正常运行，但实际上已经埋下了一颗定时炸弹，并很可能伤及其他代码。仅当内置锁不能满足需求时，才可以考虑使用ReentrantLock.</p></li><li><p>Happens-Before规则</p><p>程序顺序规则：如果程序中操作A在操作B之前，那么在线程中A操作将在B操作之前。<br>监视器锁规则：一个unlock操作现行发生于后面对同一个锁的lock操作。<br>volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。<br>线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。<br>线程终止规则：线程的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等于段检测到线程已经终止执行。<br>线程中断规则：线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。<br>终结器规则：对象的构造函数必须在启动该对象的终结器之前执行完成。<br>传递性：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</p><p><strong>注意：</strong>如果两个操作之间存在happens-before关系，并不意味着java平台的具体实现必须要按照Happens-Before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法。</p></li><li><p>as-if-serial</p><p>不管怎么重排序，程序执行结果不能被改变。</p></li><li><p>ABA问题</p><p>ABA问题发生在类似这样的场景：线程1转变使用CAS将变量A的值替换为C，在此时，线程2将变量的值由A替换为C，又由C替换为A，然后线程1执行CAS时发现变量的值仍为A，所以CAS成功。但实际上这时的现场已经和最初的不同了。大多数情况下ABA问题不会产生什么影响。如果有特殊情况下由于ABA问题导致，可用采用AtomicStampedReference来解决，原理：乐观锁+version。可以参考下面的案例来了解其中的不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABAQuestion</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference‹Integer› atomicStampedRef = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>‹Integer›(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                atomicInt.compareAndSet(<span class="number">100</span>, <span class="number">101</span>);</span><br><span class="line">                atomicInt.compareAndSet(<span class="number">101</span>, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">c3</span> <span class="operator">=</span> atomicInt.compareAndSet(<span class="number">100</span>, <span class="number">101</span>);</span><br><span class="line">                System.out.println(c3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                atomicStampedRef.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, atomicStampedRef.getStamp(), atomicStampedRef.getStamp()+<span class="number">1</span>);</span><br><span class="line">                atomicStampedRef.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, atomicStampedRef.getStamp(), atomicStampedRef.getStamp()+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedRef.getStamp();</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">c3</span> <span class="operator">=</span> atomicStampedRef.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, stamp, stamp+<span class="number">1</span>);</span><br><span class="line">                System.out.println(c3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread3.start();</span><br><span class="line">        thread4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：true false</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux IO模式及select、poll、epoll详解</title>
      <link href="/2020/02/04/java/java-advanced/Linux%20IO%E6%A8%A1%E5%BC%8F%E5%8F%8Aselect%E3%80%81poll%E3%80%81epoll%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/02/04/java/java-advanced/Linux%20IO%E6%A8%A1%E5%BC%8F%E5%8F%8Aselect%E3%80%81poll%E3%80%81epoll%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-IO模式及select、poll、epoll详解"><a href="#Linux-IO模式及select、poll、epoll详解" class="headerlink" title="Linux IO模式及select、poll、epoll详解"></a>Linux IO模式及select、poll、epoll详解</h1><blockquote><p>引用自<a href="https://segmentfault.com/a/1190000003063859">Linux IO模式及 select、poll、epoll详解</a></p></blockquote><p><code>本文讨论的背景是Linux环境下的network IO。</code></p><h2 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h2><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p><p>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ol><p>注：<strong>总而言之就是很耗资源</strong>，具体的可以参考这篇文章：<a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/">进程切换</a></p><h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。<span style="color: red;">当进程进入阻塞状态，是不占用CPU资源的</span>。</p><h3 id="文件描述符fd"><a href="#文件描述符fd" class="headerlink" title="文件描述符fd"></a>文件描述符fd</h3><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><h3 id="缓存I-x2F-O"><a href="#缓存I-x2F-O" class="headerlink" title="缓存I&#x2F;O"></a>缓存I&#x2F;O</h3><p>缓存 I&#x2F;O 又被称作标准 I&#x2F;O，大多数文件系统的默认 I&#x2F;O 操作都是缓存 I&#x2F;O。在 Linux 的缓存 I&#x2F;O 机制中，操作系统会将 I&#x2F;O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p><strong>缓存 I&#x2F;O 的缺点：</strong></p><p>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><h2 id="IO模式"><a href="#IO模式" class="headerlink" title="IO模式"></a>IO模式</h2><p>刚才说了，对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><ol><li>等待数据准备 (Waiting for the data to be ready)</li><li>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</li></ol><p>正是因为这两个阶段，linux系统产生了下面五种网络模式的方案。</p><ul><li>阻塞 I&#x2F;O（blocking IO）</li><li>非阻塞 I&#x2F;O（nonblocking IO）</li><li>I&#x2F;O 多路复用（ IO multiplexing）</li><li>信号驱动 I&#x2F;O（ signal driven IO）</li><li>异步 I&#x2F;O（asynchronous IO）</li></ul><p>注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。</p><h3 id="阻塞I-x2F-O（blocking-IO）"><a href="#阻塞I-x2F-O（blocking-IO）" class="headerlink" title="阻塞I&#x2F;O（blocking IO）"></a>阻塞I&#x2F;O（blocking IO）</h3><p>在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p><p><img src="/images/LinuxIO%E6%A8%A1%E5%BC%8F/blocking-io.png" alt="blocking-io"></p><p>当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><blockquote><p><strong>所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</strong></p></blockquote><h3 id="非阻塞I-x2F-O（nonblocking-IO）"><a href="#非阻塞I-x2F-O（nonblocking-IO）" class="headerlink" title="非阻塞I&#x2F;O（nonblocking IO）"></a>非阻塞I&#x2F;O（nonblocking IO）</h3><p>linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p><p><img src="/images/LinuxIO%E6%A8%A1%E5%BC%8F/nonblocking-io.png" alt="nonblocking-io"></p><p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><blockquote><p>所以，nonblocking IO的特点是用户进程需要<strong>不断的主动询问</strong>kernel数据好了没有。</p></blockquote><h3 id="I-x2F-O多路复用（IO-multiplexing）"><a href="#I-x2F-O多路复用（IO-multiplexing）" class="headerlink" title="I&#x2F;O多路复用（IO multiplexing）"></a>I&#x2F;O多路复用（IO multiplexing）</h3><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select&#x2F;epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p><img src="/images/LinuxIO%E6%A8%A1%E5%BC%8F/io-multiplexing.png" alt="io-multiplexing"></p><p><span style="color: red;">当用户进程调用了select，那么整个进程会被block</span>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><blockquote><p>所以，I&#x2F;O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p></blockquote><p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>所以，如果处理的连接数不是很高的话，使用select&#x2F;epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><h3 id="异步I-x2F-O（asynchronous-IO）"><a href="#异步I-x2F-O（asynchronous-IO）" class="headerlink" title="异步I&#x2F;O（asynchronous IO）"></a>异步I&#x2F;O（asynchronous IO）</h3><p>linux下的asynchronous IO其实用得很少。先看一下它的流程：</p><p><img src="/images/LinuxIO%E6%A8%A1%E5%BC%8F/async-io.png" alt="async-io"></p><p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="blocking和non-blocking的区别"><a href="#blocking和non-blocking的区别" class="headerlink" title="blocking和non-blocking的区别"></a>blocking和non-blocking的区别</h4><p>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p><h4 id="synchronous-IO和asynchronous-IO的区别"><a href="#synchronous-IO和asynchronous-IO的区别" class="headerlink" title="synchronous IO和asynchronous IO的区别"></a>synchronous IO和asynchronous IO的区别</h4><p>在说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。POSIX的定义是这样子的：</p><ul><li>A synchronous I&#x2F;O operation causes the requesting process to be blocked until that I&#x2F;O operation completes;</li><li>An asynchronous I&#x2F;O operation does not cause the requesting process to be blocked;</li></ul><p>两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p><p>有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p><p>而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p><p><strong>各个IO Model的比较如图所示：</strong></p><p><img src="/images/LinuxIO%E6%A8%A1%E5%BC%8F/io-models.png" alt="io-models"></p><p>通过上面的图片，可以发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p><h2 id="I-x2F-O多路复用之select、poll、epoll详解"><a href="#I-x2F-O多路复用之select、poll、epoll详解" class="headerlink" title="I&#x2F;O多路复用之select、poll、epoll详解"></a>I&#x2F;O多路复用之select、poll、epoll详解</h2><p>select，poll，epoll都是IO多路复用的机制。I&#x2F;O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I&#x2F;O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I&#x2F;O则无需自己负责进行读写，异步I&#x2F;O的实现会负责把数据从内核拷贝到用户空间。</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span> <span class="params">(<span class="type">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="keyword">struct</span> timeval *timeout)</span>;</span><br></pre></td></tr></table></figure><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p><p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">poll</span> <span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">unsigned</span> <span class="type">int</span> nfds, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure><p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="type">short</span> events; <span class="comment">/* requested events to watch */</span></span><br><span class="line">    <span class="type">short</span> revents; <span class="comment">/* returned events witnessed */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>pollfd结构包含了要监视的event和发生的event，不再使用select“参数-值”传递的方式。同时，pollfd并没有最大数量限制（但是数量过大后性能也是会下降）。 和select函数一样，poll返回后，需要轮询pollfd来获取就绪的描述符。</p><blockquote><p>从上面看，select和poll都需要在返回后，<span style="color: red;">通过遍历文件描述符来获取已经就绪的socket</span>。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p></blockquote><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p><h4 id="epoll操作过程"><a href="#epoll操作过程" class="headerlink" title="epoll操作过程"></a>epoll操作过程</h4><p>epoll操作过程需要三个接口，分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">epoll_create</span><span class="params">(<span class="type">int</span> size)</span>；<span class="comment">//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd, <span class="keyword">struct</span> epoll_event *event)</span>；</span><br><span class="line"><span class="type">int</span> <span class="title function_">epoll_wait</span><span class="params">(<span class="type">int</span> epfd, <span class="keyword">struct</span> epoll_event * events, <span class="type">int</span> maxevents, <span class="type">int</span> timeout)</span>;</span><br></pre></td></tr></table></figure><ol><li><strong><code>int epoll_create(int size);</code></strong></li></ol><p>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。<br>当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看&#x2F;proc&#x2F;进程id&#x2F;fd&#x2F;，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。</p><ol start="2"><li><strong><code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code></strong></li></ol><p>函数是对指定描述符fd执行op操作。</p><ul><li>epfd：是epoll_create()的返回值。</li><li>op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。</li><li>fd：是需要监听的fd（文件描述符）</li><li>epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">  <span class="type">__uint32_t</span> events;  <span class="comment">/* Epoll events */</span></span><br><span class="line">  <span class="type">epoll_data_t</span> data;  <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//events可以是以下几个宏的集合：</span></span><br><span class="line">EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</span><br><span class="line">EPOLLOUT：表示对应的文件描述符可以写；</span><br><span class="line">EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</span><br><span class="line">EPOLLERR：表示对应的文件描述符发生错误；</span><br><span class="line">EPOLLHUP：表示对应的文件描述符被挂断；</span><br><span class="line">EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</span><br><span class="line">EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</span><br></pre></td></tr></table></figure><ol start="3"><li><strong><code>int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</code></strong></li></ol><p>等待epfd上的io事件，最多返回maxevents个事件。<br>参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。</p><h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><p>epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）</strong>和<strong>ET（edge trigger）</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：</p><p>　　<strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。</p><p>　　<strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p><ol><li><p>LT模式</p><p> LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p></li><li><p>ET模式</p><p> ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p><p> ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读&#x2F;阻塞写操作把处理多个文件描述符的任务饿死。</p></li><li><p>总结</p><p> 假如有这样一个例子：</p><ol><li>我们已经把一个用来从管道中读取数据的文件句柄(RFD)添加到epoll描述符</li><li>这个时候从管道的另一端被写入了2KB的数据</li><li>调用epoll_wait(2)，并且它会返回RFD，说明它已经准备好读取操作</li><li>然后我们读取了1KB的数据</li><li>调用epoll_wait(2)……</li></ol></li></ol><p><strong>LT模式：</strong></p><p>如果是LT模式，那么在第5步调用epoll_wait(2)之后，仍然能受到通知。</p><p><strong>ET模式：</strong></p><p>如果我们在第1步将RFD添加到epoll描述符的时候使用了EPOLLET标志，那么在第5步调用epoll_wait(2)之后将有可能会挂起，因为剩余的数据还存在于文件的输入缓冲区内，而且数据发出端还在等待一个针对已经发出数据的反馈信息。只有在监视的文件句柄上发生了某个事件的时候 ET 工作模式才会汇报事件。因此在第5步的时候，调用者可能会放弃等待仍在存在于文件输入缓冲区内的剩余数据。</p><p>当使用epoll的ET模型来工作时，当产生了一个EPOLLIN事件后，<br>读数据的时候需要考虑的是当recv()返回的大小如果等于请求的大小，那么很有可能是缓冲区还有数据未读完，也意味着该次事件还没有处理完，所以还需要再次读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs)&#123;</span><br><span class="line">  buflen = recv(activeevents[i].data.fd, buf, sizeof(buf), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(buflen &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 由于是非阻塞的模式,所以当errno为EAGAIN时,表示当前缓冲区已无数据可读</span></span><br><span class="line">    <span class="comment">// 在这里就当作是该次事件已处理处.</span></span><br><span class="line">    <span class="keyword">if</span>(errno == EAGAIN)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(buflen == <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="comment">// 这里表示对端的socket已正常关闭.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(buflen == sizeof(buf)&#123;</span><br><span class="line">      rs = <span class="number">1</span>;   <span class="comment">// 需要再次读取</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line">      rs = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Linux中的EAGAIN含义</strong></p><p>Linux环境下开发经常会碰到很多错误(设置errno)，其中EAGAIN是其中比较常见的一个错误(比如用在非阻塞操作中)。<br>从字面上来看，是提示再试一次。这个错误经常出现在当应用程序进行一些非阻塞(non-blocking)操作(对文件或socket)的时候。</p><p>例如，以 O_NONBLOCK的标志打开文件&#x2F;socket&#x2F;FIFO，如果你连续做read操作而没有数据可读。此时程序不会阻塞起来等待数据准备就绪返回，read函数会返回一个错误EAGAIN，提示你的应用程序现在没有数据可读请稍后再试。<br>又例如，当一个系统调用(比如fork)因为没有足够的资源(比如虚拟内存)而执行失败，返回EAGAIN提示其再调用一次(也许下次就能成功)。</p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p>下面是一段不完整的代码且格式不对，意在表述上面的过程，去掉了一些模板代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IPADDRESS   <span class="string">&quot;127.0.0.1&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT        8787</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE     1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTENQ     5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDSIZE      1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EPOLLEVENTS 100</span></span><br><span class="line"></span><br><span class="line">listenfd = socket_bind(IPADDRESS,PORT);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">EPOLLEVENTS</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个描述符</span></span><br><span class="line">epollfd = epoll_create(FDSIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加监听描述符事件</span></span><br><span class="line">add_event(epollfd,listenfd,EPOLLIN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环等待</span></span><br><span class="line"><span class="keyword">for</span> ( ; ; )&#123;</span><br><span class="line">    <span class="comment">//该函数返回已经准备好的描述符事件数目</span></span><br><span class="line">    ret = epoll_wait(epollfd,events,EPOLLEVENTS,<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//处理接收到的连接</span></span><br><span class="line">    handle_events(epollfd,events,ret,listenfd,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件处理函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handle_events</span><span class="params">(<span class="type">int</span> epollfd,<span class="keyword">struct</span> epoll_event *events,<span class="type">int</span> num,<span class="type">int</span> listenfd,<span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> i;</span><br><span class="line">     <span class="type">int</span> fd;</span><br><span class="line">     <span class="comment">//进行遍历;这里只要遍历已经准备好的io事件。num并不是当初epoll_create时的FDSIZE。</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; num;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         fd = events[i].data.fd;</span><br><span class="line">        <span class="comment">//根据描述符的类型和事件类型进行处理</span></span><br><span class="line">         <span class="keyword">if</span> ((fd == listenfd) &amp;&amp;(events[i].events &amp; EPOLLIN))</span><br><span class="line">            handle_accpet(epollfd,listenfd);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</span><br><span class="line">            do_read(epollfd,fd,buf);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT)</span><br><span class="line">            do_write(epollfd,fd,buf);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">add_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_ADD,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理接收到的连接</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">handle_accpet</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> listenfd)</span>&#123;</span><br><span class="line">     <span class="type">int</span> clifd;     </span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span>     </span><br><span class="line">     <span class="type">socklen_t</span>  cliaddrlen;     </span><br><span class="line">     clifd = accept(listenfd,(<span class="keyword">struct</span> sockaddr*)&amp;cliaddr,&amp;cliaddrlen);     </span><br><span class="line">     <span class="keyword">if</span> (clifd == <span class="number">-1</span>)         </span><br><span class="line">     perror(<span class="string">&quot;accpet error:&quot;</span>);     </span><br><span class="line">     <span class="keyword">else</span> &#123;         </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;accept a new client: %s:%d\n&quot;</span>,inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);                       <span class="comment">//添加一个客户描述符和事件         </span></span><br><span class="line">         add_event(epollfd,clifd,EPOLLIN);     </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读处理</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_read</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">char</span> *buf)</span>&#123;</span><br><span class="line">    <span class="type">int</span> nread;</span><br><span class="line">    nread = read(fd,buf,MAXSIZE);</span><br><span class="line">    <span class="keyword">if</span> (nread == <span class="number">-1</span>)     &#123;         </span><br><span class="line">        perror(<span class="string">&quot;read error:&quot;</span>);         </span><br><span class="line">        close(fd); <span class="comment">//记住close fd        </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLIN); <span class="comment">//删除监听 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)     &#123;         </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;client close.\n&quot;</span>);</span><br><span class="line">        close(fd); <span class="comment">//记住close fd       </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLIN); <span class="comment">//删除监听 </span></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">else</span> &#123;         </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read message is : %s&quot;</span>,buf);        </span><br><span class="line">        <span class="comment">//修改描述符对应的事件，由读改为写         </span></span><br><span class="line">        modify_event(epollfd,fd,EPOLLOUT);     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写处理</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_write</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">char</span> *buf)</span> &#123;     </span><br><span class="line">    <span class="type">int</span> nwrite;     </span><br><span class="line">    nwrite = write(fd,buf,<span class="built_in">strlen</span>(buf));     </span><br><span class="line">    <span class="keyword">if</span> (nwrite == <span class="number">-1</span>)&#123;         </span><br><span class="line">        perror(<span class="string">&quot;write error:&quot;</span>);        </span><br><span class="line">        close(fd);   <span class="comment">//记住close fd       </span></span><br><span class="line">        delete_event(epollfd,fd,EPOLLOUT);  <span class="comment">//删除监听    </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        modify_event(epollfd,fd,EPOLLIN); </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,MAXSIZE); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">delete_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改事件</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">modify_event</span><span class="params">(<span class="type">int</span> epollfd,<span class="type">int</span> fd,<span class="type">int</span> state)</span>&#123;     </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = state;</span><br><span class="line">    ev.data.fd = fd;</span><br><span class="line">    epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&amp;ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：另外一端我就省了</span></span><br></pre></td></tr></table></figure><h4 id="epoll总结"><a href="#epoll总结" class="headerlink" title="epoll总结"></a>epoll总结</h4><p>在 select&#x2F;poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而<strong>epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知</strong>。(<span style="color: red;">此处去掉了遍历文件描述符，而是通过监听回调的的机制</span>。这正是epoll的魅力所在。)</p><p><strong>epoll的优点主要是一下几个方面：</strong></p><ol><li><p>监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于2048,举个例子,在1GB内存的机器上大约是10万左 右，具体数目可以cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max察看,一般来说这个数目和系统内存关系很大。select的最大缺点就是进程打开的fd是有数量限制的。这对 于连接数量比较大的服务器来说根本不能满足。虽然也可以选择多进程的解决方案( Apache就是这样实现的)，不过虽然linux上面创建进程的代价比较小，但仍旧是不可忽视的，加上进程间数据同步远比不上线程间同步的高效，所以也不是一种完美的方案。</p></li><li><p>IO的效率不会随着监视fd的数量的增长而下降。epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的。只有就绪的fd才会执行回调函数。</p></li></ol><blockquote><p><strong>如果没有大量的idle -connection或者dead-connection，epoll的效率并不会比select&#x2F;poll高很多，但是当遇到大量的idle- connection，就会发现epoll的效率大大高于select&#x2F;poll。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap</title>
      <link href="/2020/02/04/java/java-base/ConcurrentHashMap/"/>
      <url>/2020/02/04/java/java-base/ConcurrentHashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><p>HashMap在put的时候，插入的元素数量超过了容量（由负载因子决定）的范围是会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。</p><p>我们来了解另一个键值存储集合HashTable，它是线程安全的，它在所有涉及到多线程操作的都加上了synchronized关键字来锁住整个table，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。</p><p>其实HashTable有很多的优化空间，锁住整个table这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同hash值，不会因为rehash造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的table，这就是这篇文章的主角ConcurrentHashMap JDK1.7版本的核心思想。</p><h2 id="ConcurrentHashMap在JDK-1-7的实现"><a href="#ConcurrentHashMap在JDK-1-7的实现" class="headerlink" title="ConcurrentHashMap在JDK 1.7的实现"></a>ConcurrentHashMap在JDK 1.7的实现</h2><p>在JDK1.7版本中，ConcurrentHashMap的数据结构是由一个Segment数组和多个HashEntry组成，如下图所示：</p><p><img src="/images/ConcurrentHashMap/jdk-7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="jdk-7数据结构"></p><p>Segment数组的意义就是将一个大的table分割成多个小的table来进行加锁，也就是上面的提到的锁分离技术，而每一个Segment元素存储的是HashEntry数组+链表，这个和HashMap的数据存储结构一样。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>ConcurrentHashMap的初始化是会通过位与运算来初始化Segment的大小，用ssize来表示，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sshift</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ssize</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">    ++sshift;</span><br><span class="line">    ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，因为ssize用位于运算来计算（ssize &lt;&lt;&#x3D;1），所以Segment的大小取值都是以2的N次方，无关concurrencyLevel的取值，当然concurrencyLevel最大只能用16位的二进制来表示，即65536，换句话说，Segment的大小最多65536个，没有指定concurrencyLevel元素初始化，Segment的大小ssize默认为16。</p><p>每一个Segment元素下的HashEntry的初始化也是按照位于运算来计算，用cap来表示，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">    cap &lt;&lt;= <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如上所示，HashEntry大小的计算也是2的N次方（cap &lt;&lt;&#x3D;1）， cap的初始值为1，所以HashEntry最小的容量为2。</p><h3 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h3><p>对于ConcurrentHashMap的数据插入，这里要进行两次Hash去定位数据的存储位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Segment</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br></pre></td></tr></table></figure><p>从上Segment的继承体系可以看出，Segment实现了ReentrantLock,也就带有锁的功能，当执行put操作时，会进行第一次key的hash来定位Segment的位置，如果该Segment还没有初始化，即通过CAS操作进行赋值，然后进行第二次hash操作，找到相应的HashEntry的位置，这里会利用继承过来的锁的特性，在将数据插入指定的HashEntry位置时（链表的尾端），会通过继承ReentrantLock的tryLock（）方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该Segment的锁，那当前线程会以自旋的方式去继续的调用tryLock（）方法去获取锁，超过指定次数就挂起，等待唤醒。</p><h3 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h3><p>ConcurrentHashMap的get操作跟HashMap类似，只是ConcurrentHashMap第一次需要经过一次hash定位到Segment的位置，然后再hash定位到指定的HashEntry，遍历该HashEntry下的链表进行对比，成功就返回，不成功就返回null。</p><h3 id="size操作"><a href="#size操作" class="headerlink" title="size操作"></a>size操作</h3><p>计算ConcurrentHashMap的元素大小是一个有趣的问题，因为他是并发操作的，就是在你计算size的时候，他还在并发的插入数据，可能会导致你计算出来的size和你实际的size有相差（在你return size的时候，插入了多个数据），要解决这个问题，JDK1.7版本用两种方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; segments.length; ++j) </span><br><span class="line">                ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0L</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        overflow = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">            Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">            <span class="keyword">if</span> (seg != <span class="literal">null</span>) &#123; sum += seg.modCount; <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> seg.count; <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">               overflow = <span class="literal">true</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == last) <span class="keyword">break</span>;</span><br><span class="line">        last = sum; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">            segmentAt(segments, j).unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一种方案他会使用不加锁的模式去尝试多次计算ConcurrentHashMap的size，最多三次，比较前后两次计算的结果，结果一致就认为当前没有元素加入，计算的结果是准确的；</li><li>第二种方案是如果第一种方案不符合，他就会给每个Segment加上锁，然后计算ConcurrentHashMap的size返回。</li></ol><h2 id="ConcurrentHashMap在JDK-1-8的实现"><a href="#ConcurrentHashMap在JDK-1-8的实现" class="headerlink" title="ConcurrentHashMap在JDK 1.8的实现"></a>ConcurrentHashMap在JDK 1.8的实现</h2><p>JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap，虽然在JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本。</p><p><img src="/images/ConcurrentHashMap/jdk-8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.webp" alt="jdk-8数据结构"></p><p>在深入JDK1.8的put和get实现之前要知道一些常量设计和数据结构，这些是构成ConcurrentHashMap实现结构的基础，下面看一下基本属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node数组最大容量：2^30=1073741824</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认初始值，必须是2的幕数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组可能最大值，需要与toArray（）相关方法关联</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并发级别，遗留下来的，为兼容以前的版本</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表转红黑树阀值,&gt; 8 链表转换为红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，&lt;=UNTREEIFY_THRESHOLD 则untreeify(lo)）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2^15-1，help resize的最大线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 32-16=16，sizeCtl中记录size大小的偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forwarding nodes的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 树根节点的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ReservationNode的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用处理器数量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放node的数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义</span></span><br><span class="line"><span class="comment"> * 当为负数时：-1代表正在初始化，-N代表有N-1个线程正在 进行扩容</span></span><br><span class="line"><span class="comment"> * 当为0时：代表当时的table还没有被初始化</span></span><br><span class="line"><span class="comment"> * 当为正数时：表示初始化或者下一次进行扩容的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br></pre></td></tr></table></figure><p>基本属性定义了ConcurrentHashMap的一些边界以及操作时的一些控制，下面看一些内部的一些结构组成，这些是整个ConcurrentHashMap整个数据结构的核心。</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>Node</li></ul><p>Node是ConcurrentHashMap存储结构的基本单元，继承于HashMap中的Entry，用于存储数据，源代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//链表的数据结构</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="comment">//val和next都会在扩容时发生变化，所以加上volatile来保持可见性和禁止重排序</span></span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>       &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>     &#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>   &#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不允许更新value  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                (v == (u = val) || v.equals(u)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于map中的get（）方法，子类重写</span></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="literal">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node数据结构很简单，从上可知，就是一个链表，但是只允许对数据进行查找，不允许进行修改。</p><ul><li>TreeNode</li></ul><p>TreeNode继承与Node，但是数据结构换成了二叉树结构，它是红黑树的数据的存储结构，用于红黑树中存储数据，当链表的节点数大于8时会转换成红黑树的结构，他就是通过TreeNode作为存储结构代替Node来转换成黑红树源代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//树形结构的属性定义</span></span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="type">boolean</span> red; <span class="comment">//标志红黑树的红节点</span></span><br><span class="line"></span><br><span class="line">    TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next, TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">        <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据key查找 从根节点开始找出相应的TreeNode，</span></span><br><span class="line">    <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">findTreeNode</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="literal">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">do</span>  &#123;</span><br><span class="line">                <span class="type">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> || (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp; (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TreeBin</li></ul><p>TreeBin从字面含义中可以理解为存储树形结构的容器，而树形结构就是指TreeNode，所以TreeBin就是封装TreeNode的容器，它提供转换黑红树的一些条件和锁的控制，部分源码结构如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeBin</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//指向TreeNode列表和根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> lockState;</span><br><span class="line">    <span class="comment">// 读写锁状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WRITER</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 获取写锁的状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WAITER</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 等待写锁的状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">READER</span> <span class="operator">=</span> <span class="number">4</span>; <span class="comment">// 增加数据时读锁的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">        <span class="built_in">super</span>(TREEBIN, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.first = b;</span><br><span class="line">        TreeNode&lt;K,V&gt; r = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="literal">null</span>; x = next) &#123;</span><br><span class="line">            next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">            x.left = x.right = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                x.parent = <span class="literal">null</span>;</span><br><span class="line">                x.red = <span class="literal">false</span>;</span><br><span class="line">                r = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> x.key;</span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> x.hash;</span><br><span class="line">                Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                    <span class="type">int</span> dir, ph;</span><br><span class="line">                    <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key;</span><br><span class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        dir = -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                        dir = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                              (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                             (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                        dir = tieBreakOrder(k, pk);</span><br><span class="line">                        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        x.parent = xp;</span><br><span class="line">                        <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                            xp.left = x;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            xp.right = x;</span><br><span class="line">                        r = balanceInsertion(r, x);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.root = r;</span><br><span class="line">        <span class="keyword">assert</span> <span class="title function_">checkInvariants</span><span class="params">(root)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介绍了ConcurrentHashMap主要的属性与内部的数据结构，现在通过一个简单的例子以debug的视角看看ConcurrentHashMap的具体操作细节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConcurrentHashMap</span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ConcurrentHashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(); <span class="comment">//初始化ConcurrentHashMap</span></span><br><span class="line">        <span class="comment">//新增个人信息</span></span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;andy&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="comment">//获取姓名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> map.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Assert.assertEquals(name,<span class="string">&quot;andy&quot;</span>);</span><br><span class="line">        <span class="comment">//计算大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> map.size();</span><br><span class="line">        Assert.assertEquals(size,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先通过new ConcurrentHashMap()来进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上你会发现ConcurrentHashMap的初始化其实是一个空实现，并没有做任何事，这里后面会讲到，这也是和其他的集合类有区别的地方，初始化操作并不是在构造函数实现的，而是在put操作中实现，当然ConcurrentHashMap还提供了其他的构造函数，有指定容量大小或者指定负载因子，跟HashMap一样，这里就不做介绍了。</p><h3 id="put操作-1"><a href="#put操作-1" class="headerlink" title="put操作"></a>put操作</h3><p>在上面的例子中我们新增个人信息会调用put方法，我们来看下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode()); <span class="comment">//两次hash，减少hash冲突，可以均匀分布</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; <span class="comment">//对这个table进行迭代</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//这里就是上面构造方法没有进行初始化，在这里进行判断，为null就调用initTable进行初始化，属于懒汉模式初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;<span class="comment">//如果i位置没有数据，就直接无锁插入</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)<span class="comment">//如果在进行扩容，则先进行扩容操作</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//如果以上条件都不满足，那就要进行加锁操作，也就是存在hash冲突，锁住链表或者红黑树的头结点</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">//表示该节点是链表结构</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">//这里涉及到相同的key进行put就会覆盖原先的value</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;  <span class="comment">//插入链表尾部</span></span><br><span class="line">                                pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;<span class="comment">//红黑树结构</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="comment">//红黑树结构旋转插入</span></span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123; <span class="comment">//如果链表的长度大于8时就会进行红黑树的转换</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);<span class="comment">//统计size，并且检查是否需要扩容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个put的过程很清晰，对当前的table进行无条件自循环直到put成功，可以分成以下六步流程来概述。</p><ol><li>如果没有初始化就先调用initTable（）方法来进行初始化过程</li><li>如果没有hash冲突就直接CAS插入</li><li>如果还在进行扩容操作就先进行扩容</li><li>如果存在hash冲突，就加锁来保证线程安全，这里有两种情况，一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入，</li><li>最后一个如果该链表的数量大于阈值8，就要先转换成黑红树的结构，break再一次进入循环</li><li>如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容</li></ol><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>Java 7中的ConcurrentHashMap为了实现并行访问，引入了Segment这一结构，实现了分段锁，理论上最大并发度与Segment个数相等。Java 8为了进一步提高并发性，摒弃了分段锁的方案，而是直接使用一个大的数组。同时为了提高哈希碰撞下的寻址性能，Java 8在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为O(log(N))），参考<a href="http://www.jasongj.com/java/concurrenthashmap/">Java进阶（六）从ConcurrentHashMap的演进看Java多线程核心技术</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="/2020/02/04/java/java-jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/02/04/java/java-jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/rLooaTOU_NQTJdn28KAUFw">jvm系列(一):java类的加载机制</a></p></blockquote><h2 id="什么是类的加载"><a href="#什么是类的加载" class="headerlink" title="什么是类的加载"></a>什么是类的加载</h2><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class 对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的 Class 对象， Class 对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p><p><img src="/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/class-memory.webp" alt="class-memory"></p><p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p><p><strong>加载 <code>.class</code> 文件的方式</strong></p><ul><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将Java源文件动态编译为.class文件</li></ul><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p><img src="/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/class-life-cycle.webp" alt="class-life-cycle"></p><p>其中类加载的过程包括了加载、验证、准备、解析、初始化五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>查找并加载类的二进制数据加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情：</p><ul><li>通过一个类的全限定名来获取其定义的二进制字节流。</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>在Java堆中生成一个代表这个类的 java.lang.Class对象，作为对方法区中这些数据的访问入口。</li></ul><p>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个 java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证：确保被加载的类的正确性"><a href="#验证：确保被加载的类的正确性" class="headerlink" title="验证：确保被加载的类的正确性"></a>验证：确保被加载的类的正确性</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：</p><ul><li><p><strong>文件格式验证</strong>：验证字节流是否符合Class文件格式的规范；例如：是否以 0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</p></li><li><p><strong>元数据验证</strong>：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了 java.lang.Object之外。</p></li><li><p><strong>字节码验证</strong>：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</p></li><li><p><strong>符号引用验证</strong>：确保解析动作能正确执行。</p></li></ul><p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 <code>-Xverifynone</code> 参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><h4 id="准备：为类的静态变量分配内存，并将其初始化为默认值"><a href="#准备：为类的静态变量分配内存，并将其初始化为默认值" class="headerlink" title="准备：为类的静态变量分配内存，并将其初始化为默认值"></a>准备：为类的静态变量分配内存，并将其初始化为默认值</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p><ul><li><p>1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p></li><li><p>2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p><p>  假设一个类变量的定义为： <code>public static int value=3;</code></p><p>  那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的 publicstatic指令是在程序编译后，存放于类构造器 <code>&lt;clinit&gt;()</code> 方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p><p>  <strong>这里还需要注意如下几点：</strong></p><ul><li><p>对基本数据类型来说，对于类变量（static）和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</p></li><li><p>对于同时被static和final修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</p></li><li><p>对于引用数据类型reference来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即null。</p></li><li><p>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</p></li></ul></li><li><p>3、如果类字段的字段属性表中存在 ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。</p><p>  假设上面的类变量value被定义为： publicstaticfinalintvalue&#x3D;3；</p><p>  编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据 ConstantValue的设置将value赋值为3。我们可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中</p></li></ul><h4 id="解析：把类中的符号引用转换为直接引用"><a href="#解析：把类中的符号引用转换为直接引用" class="headerlink" title="解析：把类中的符号引用转换为直接引用"></a>解析：把类中的符号引用转换为直接引用</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。</p><p>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p><ul><li>1、 声明类变量是指定初始值</li><li>2、 使用静态代码块为类变量指定初始值</li></ul><p>JVM初始化步骤</p><ul><li>1、假如这个类还没有被加载和连接，则程序先加载并连接该类</li><li>2、假如该类的直接父类还没有被初始化，则先初始化其直接父类</li><li>3、假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul><p>类初始化时机：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种：</p><ul><li>创建类的实例，也就是new的方式</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射（如 Class.forName(“com.shengsiyuan.Test”)）</li><li>初始化某个类的子类，则其父类也会被初始化</li><li>Java虚拟机启动时被标明为启动类的类（ JavaTest），直接使用 java.exe命令来运行某个主类</li></ul><h4 id="结束生命周期"><a href="#结束生命周期" class="headerlink" title="结束生命周期"></a>结束生命周期</h4><p>在如下几种情况下，Java虚拟机将结束生命周期</p><ul><li>执行了 <code>System.exit()</code> 方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(loader);</span><br><span class="line">        System.out.println(loader.getParent());</span><br><span class="line">        System.out.println(loader.getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@1540e19d</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>从上面的结果可以看出，并没有获取到 <code>ExtClassLoader</code> 的父Loader，原因是 <code>BootstrapLoader</code>（引导类加载器）是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回null。</p><p>这几种类加载器的层次关系如下图所示：</p><p><img src="/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/class-loader-layers.webp" alt="class-loader-layers"></p><p><strong>注意：</strong> 这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。</p><p>站在Java虚拟机的角度来讲，只存在两种不同的类加载器：启动类加载器：它使用C++实现（这里仅限于Hotspot，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的），是虚拟机自身的一部分；所有其它的类加载器：这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类 <code>java.lang.ClassLoader</code>，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</p><p>站在Java开发人员的角度来看，类加载器可以大致划分为以下三类：</p><ul><li><strong>启动类加载器</strong>： <code>BootstrapClassLoader</code>，负责加载存放在 <code>JDK\jre\lib</code> (JDK代表JDK的安装目录，下同)下，或被 <code>-Xbootclasspath</code> 参数指定的路径中的，并且能被虚拟机识别的类库（如rt.jar，所有的java.开头的类均被 <code>BootstrapClassLoader</code> 加载）。启动类加载器是无法被Java程序直接引用的。</li><li><strong>扩展类加载器</strong>： <code>ExtensionClassLoader</code>，该加载器由 <code>sun.misc.Launcher$ExtClassLoader</code> 实现，它负责加载 <code>JDK\jre\lib\ext</code> 目录中，或者由 <code>java.ext.dirs</code> 系统变量指定的路径中的所有类库（如javax.开头的类），开发者可以直接使用扩展类加载器。</li><li><strong>应用程序类加载器</strong>： <code>ApplicationClassLoader</code>，该类加载器由 <code>sun.misc.Launcher$AppClassLoader</code> 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点：</p><ul><li>1、在执行非置信代码之前，自动验证数字签名。</li><li>2、动态地创建符合用户特定需要的定制化构建类。</li><li>3、从特定的场所取得java class，例如数据库中和网络中。</li></ul><h3 id="JVM类加载机制"><a href="#JVM类加载机制" class="headerlink" title="JVM类加载机制"></a>JVM类加载机制</h3><ul><li><strong>全盘负责</strong>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li><strong>父类委托</strong>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li><strong>缓存机制</strong>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li></ul><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p>类加载有三种方式：</p><ul><li>1、命令行启动应用时候由JVM初始化加载</li><li>2、通过Class.forName()方法动态加载</li><li>3、通过ClassLoader.loadClass()方法动态加载</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(loader);</span><br><span class="line">        <span class="comment">//使用ClassLoader.loadClass()来加载类，不会执行初始化块</span></span><br><span class="line">        loader.loadClass(<span class="string">&quot;jvm.Test2&quot;</span>);</span><br><span class="line">        <span class="comment">//使用Class.forName()来加载类，默认会执行初始化块</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;jvm.Test2&quot;);</span></span><br><span class="line">        <span class="comment">//使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;jvm.Test2&quot;, false, loader);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态初始块执行了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Class.forName()和ClassLoader.loadClass()区别</strong></p><ul><li><p><code>Class.forName()</code>：将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；</p></li><li><p><code>ClassLoader.loadClass()</code>：只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。</p></li><li><p><code>Class.forName(name, initialize, loader)</code>带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。</p></li></ul><h2 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h2><p>双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><p>双亲委派机制:</p><ul><li>1、当 <code>AppClassLoader</code> 加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器 <code>ExtClassLoader</code> 去完成。</li><li>2、当 <code>ExtClassLoader</code> 加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给 <code>BootStrapClassLoader</code> 去完成。</li><li>3、如果 <code>BootStrapClassLoader</code> 加载失败（例如在 <code>$JAVA_HOME/jre/lib</code> 里未查找到该class），会使用 <code>ExtClassLoader</code> 来尝试加载；</li><li>4、若 <code>ExtClassLoader</code> 也加载失败，则会使用 <code>AppClassLoader</code> 来加载，如果 <code>AppClassLoader</code> 也加载失败，则会报出异常 <code>ClassNotFoundException</code>。</li></ul><p>ClassLoader源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(name, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//首先判断该类型是否已经被加载</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果存在父类加载器，就委派给父类加载器加载</span></span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span></span><br><span class="line">                c = findBootstrapClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">        resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双亲委派模型意义：</p><ul><li>系统类防止内存中出现多份同样的字节码</li><li>保证Java程序安全稳定运行</li></ul><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输Java类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 <code>ClassLoader</code> 类，从上面对 <code>loadClass</code> 方法来分析来看，我们只需要重写 findClass 方法即可。下面我们通过一个示例来演示自定义类加载器的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(String root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CustomClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomClassLoader</span>();</span><br><span class="line">        classLoader.setRoot(<span class="string">&quot;E:\\temp&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; testClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            testClass = classLoader.loadClass(<span class="string">&quot;jvm.Test2&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line">            System.out.println(object.getClass().getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InstantiationException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classData = loadClassData(name);</span><br><span class="line">        <span class="keyword">if</span> (classData == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] loadClassData(String className) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> root + File.separatorChar + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">bufferSize</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[bufferSize];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义类加载器的核心在于对字节码文件的获取，如果是加密的字节码则需要在该类中对文件进行解密。由于这里只是演示，我并未对class文件进行加密，因此没有解密的过程。这里有几点需要注意：</p><ul><li>1、这里传递的文件名需要是类的全限定性名称，即 <code>com.paddx.test.classloading.Test</code> 格式的，因为 defineClass 方法是按这种格式进行处理的。</li><li>2、最好不要重写loadClass方法，因为这样容易破坏双亲委托模式。</li><li>3、这类 <code>Test</code> 类本身可以被 <code>AppClassLoader</code> 类加载，因此我们不能把 <code>com/paddx/test/classloading/Test.class</code> 放在类路径下。否则，由于双亲委托机制的存在，会直接导致该类由 <code>AppClassLoader</code> 加载，而不会通过我们自定义类加载器来加载。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web框架Gin使用手册</title>
      <link href="/2020/02/04/golang/web%E6%A1%86%E6%9E%B6Gin%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2020/02/04/golang/web%E6%A1%86%E6%9E%B6Gin%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目地址：<a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要安装Gin软件包，您需要先安装Go并设置Go工作区。</p><ol><li><p>下载并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure></li><li><p>导入gin</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>（可选）导入 <code>net/http</code>。可以使用 <code>http.StatusOK</code> 之类的一些常量</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assume the following codes in example.go file</span></span><br><span class="line">$ <span class="built_in">cat</span> example.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run example.go and visit 0.0.0.0:8080/ping on browser</span><br><span class="line">$ go run example.go</span><br></pre></td></tr></table></figure><h2 id="使用jsoniter"><a href="#使用jsoniter" class="headerlink" title="使用jsoniter"></a>使用jsoniter</h2><p>Gin使用 <code>encoding/json</code> 作为默认的json包，您可以通过 <code>-tags</code> 参数更改为 <code>jsoniter</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -tags=jsoniter .</span><br></pre></td></tr></table></figure><h2 id="API示例"><a href="#API示例" class="headerlink" title="API示例"></a>API示例</h2><h3 id="使用-GET-POST-PUT-PATCH-DELETE-和-OPTIONS-方法"><a href="#使用-GET-POST-PUT-PATCH-DELETE-和-OPTIONS-方法" class="headerlink" title="使用 GET, POST, PUT, PATCH, DELETE 和 OPTIONS 方法"></a>使用 GET, POST, PUT, PATCH, DELETE 和 OPTIONS 方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Disable Console Color</span></span><br><span class="line"><span class="comment">// gin.DisableConsoleColor()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a gin router with default middleware:</span></span><br><span class="line"><span class="comment">// logger and recovery (crash-free) middleware</span></span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">&quot;/someGet&quot;</span>, getting)</span><br><span class="line">router.POST(<span class="string">&quot;/somePost&quot;</span>, posting)</span><br><span class="line">router.PUT(<span class="string">&quot;/somePut&quot;</span>, putting)</span><br><span class="line">router.DELETE(<span class="string">&quot;/someDelete&quot;</span>, deleting)</span><br><span class="line">router.PATCH(<span class="string">&quot;/somePatch&quot;</span>, patching)</span><br><span class="line">router.HEAD(<span class="string">&quot;/someHead&quot;</span>, head)</span><br><span class="line">router.OPTIONS(<span class="string">&quot;/someOptions&quot;</span>, options)</span><br><span class="line"></span><br><span class="line"><span class="comment">// By default it serves on :8080 unless a</span></span><br><span class="line"><span class="comment">// PORT environment variable was defined.</span></span><br><span class="line">router.Run()</span><br><span class="line"><span class="comment">// router.Run(&quot;:3000&quot;) for a hard coded port</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-Path-中的参数"><a href="#获取-Path-中的参数" class="headerlink" title="获取 Path 中的参数"></a>获取 Path 中的参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// This handler will match /user/john but will not match /user/ or /user</span></span><br><span class="line">router.GET(<span class="string">&quot;/user/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hello %s&quot;</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// However, this one will match /user/john/ and also /user/john/send</span></span><br><span class="line"><span class="comment">// If no other routers match /user/john, it will redirect to /user/john/</span></span><br><span class="line">router.GET(<span class="string">&quot;/user/:name/*action&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">action := c.Param(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">message := name + <span class="string">&quot; is &quot;</span> + action</span><br><span class="line">c.String(http.StatusOK, message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取-Query-中的参数"><a href="#获取-Query-中的参数" class="headerlink" title="获取 Query 中的参数"></a>获取 Query 中的参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query string parameters are parsed using the existing underlying request object.</span></span><br><span class="line"><span class="comment">// The request responds to a url matching:  /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class="line">router.GET(<span class="string">&quot;/welcome&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">firstname := c.DefaultQuery(<span class="string">&quot;firstname&quot;</span>, <span class="string">&quot;Guest&quot;</span>)</span><br><span class="line">lastname := c.Query(<span class="string">&quot;lastname&quot;</span>) <span class="comment">// shortcut for c.Request.URL.Query().Get(&quot;lastname&quot;)</span></span><br><span class="line"></span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Hello %s %s&quot;</span>, firstname, lastname)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multipart-x2F-Urlencoded-表单"><a href="#Multipart-x2F-Urlencoded-表单" class="headerlink" title="Multipart&#x2F;Urlencoded 表单"></a>Multipart&#x2F;Urlencoded 表单</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/form_post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">message := c.PostForm(<span class="string">&quot;message&quot;</span>)</span><br><span class="line">nick := c.DefaultPostForm(<span class="string">&quot;nick&quot;</span>, <span class="string">&quot;anonymous&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>:  <span class="string">&quot;posted&quot;</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: message,</span><br><span class="line"><span class="string">&quot;nick&quot;</span>:    nick,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Query-Post表单-请求示例"><a href="#Query-Post表单-请求示例" class="headerlink" title="Query + Post表单 请求示例"></a>Query + Post表单 请求示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /post?id=1234&amp;page=1 HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">name=manu&amp;message=this_is_great</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">id := c.Query(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">page := c.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">name := c.PostForm(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">message := c.PostForm(<span class="string">&quot;message&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;id: %s; page: %s; name: %s; message: %s&quot;</span>, id, page, name, message)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id: 1234; page: 1; name: manu; message: this_is_great</span><br></pre></td></tr></table></figure><h3 id="Query-和-Post表单中的-Map-参数"><a href="#Query-和-Post表单中的-Map-参数" class="headerlink" title="Query 和 Post表单中的 Map 参数"></a>Query 和 Post表单中的 Map 参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /post?ids[a]=1234&amp;ids[b]=hello HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">names[first]=thinkerou&amp;names[second]=tianou</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/post&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ids := c.QueryMap(<span class="string">&quot;ids&quot;</span>)</span><br><span class="line">names := c.PostFormMap(<span class="string">&quot;names&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;ids: %v; names: %v&quot;</span>, ids, names)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><p>References issue <a href="https://github.com/gin-gonic/gin/issues/774">#774</a> and detail <a href="examples/upload-file/single">example code</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// single file</span></span><br><span class="line">file, _ := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload the file to specific dst.</span></span><br><span class="line"><span class="comment">// c.SaveUploadedFile(file, dst)</span></span><br><span class="line"></span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27; uploaded!&quot;</span>, file.Filename))</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How to <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/upload \</span><br><span class="line">  -F <span class="string">&quot;file=@/Users/appleboy/test.zip&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span></span><br></pre></td></tr></table></figure><h4 id="多个文件批量上传"><a href="#多个文件批量上传" class="headerlink" title="多个文件批量上传"></a>多个文件批量上传</h4><p>查看详细示例 <a href="https://github.com/gin-gonic/gin/tree/master/examples/upload-file/multiple">示例代码</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">&quot;/upload&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// Multipart form</span></span><br><span class="line">form, _ := c.MultipartForm()</span><br><span class="line">files := form.File[<span class="string">&quot;upload[]&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload the file to specific dst.</span></span><br><span class="line"><span class="comment">// c.SaveUploadedFile(file, dst)</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">&quot;%d files uploaded!&quot;</span>, <span class="built_in">len</span>(files)))</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How to <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/upload \</span><br><span class="line">  -F <span class="string">&quot;upload[]=@/Users/appleboy/test1.zip&quot;</span> \</span><br><span class="line">  -F <span class="string">&quot;upload[]=@/Users/appleboy/test2.zip&quot;</span> \</span><br><span class="line">  -H <span class="string">&quot;Content-Type: multipart/form-data&quot;</span></span><br></pre></td></tr></table></figure><h3 id="分组路由"><a href="#分组路由" class="headerlink" title="分组路由"></a>分组路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v1</span></span><br><span class="line">v1 := router.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">v1.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">v1.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v2</span></span><br><span class="line">v2 := router.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">v2.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">v2.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化不包含中间件的默认-Gin"><a href="#初始化不包含中间件的默认-Gin" class="headerlink" title="初始化不包含中间件的默认 Gin"></a>初始化不包含中间件的默认 Gin</h3><p>Use</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default With the Logger and Recovery middleware already attached</span></span><br><span class="line">r := gin.Default()</span><br></pre></td></tr></table></figure><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Creates a router without any middleware by default</span></span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global middleware</span></span><br><span class="line"><span class="comment">// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recovery middleware recovers from any panics and writes a 500 if there was one.</span></span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Per route middleware, you can add as many as you desire.</span></span><br><span class="line">r.GET(<span class="string">&quot;/benchmark&quot;</span>, MyBenchLogger(), benchEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Authorization group</span></span><br><span class="line"><span class="comment">// authorized := r.Group(&quot;/&quot;, AuthRequired())</span></span><br><span class="line"><span class="comment">// exactly the same as:</span></span><br><span class="line">authorized := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="comment">// per group middleware! in this case we use the custom created</span></span><br><span class="line"><span class="comment">// AuthRequired() middleware just in the &quot;authorized&quot; group.</span></span><br><span class="line">authorized.Use(AuthRequired())</span><br><span class="line">&#123;</span><br><span class="line">authorized.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line">authorized.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line">authorized.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested group</span></span><br><span class="line">testing := authorized.Group(<span class="string">&quot;testing&quot;</span>)</span><br><span class="line">testing.GET(<span class="string">&quot;/analytics&quot;</span>, analyticsEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出日志文件"><a href="#输出日志文件" class="headerlink" title="输出日志文件"></a>输出日志文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Disable Console Color, you don&#x27;t need console color when writing the logs to file.</span></span><br><span class="line">    gin.DisableConsoleColor()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging to a file.</span></span><br><span class="line">    f, _ := os.Create(<span class="string">&quot;gin.log&quot;</span>)</span><br><span class="line">    gin.DefaultWriter = io.MultiWriter(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the following code if you need to write the logs to file and console at the same time.</span></span><br><span class="line">    <span class="comment">// gin.DefaultWriter = io.MultiWriter(f, os.Stdout)</span></span><br><span class="line"></span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.String(<span class="number">200</span>, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体对象的绑定和校验"><a href="#实体对象的绑定和校验" class="headerlink" title="实体对象的绑定和校验"></a>实体对象的绑定和校验</h3><p>To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo&#x3D;bar&amp;boo&#x3D;baz).</p><p>Gin uses <a href="https://github.com/go-playground/validator"><strong>go-playground&#x2F;validator.v8</strong></a> for validation. Check the full docs on tags usage <a href="http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags">here</a>.</p><p>Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set <code>json:&quot;fieldname&quot;</code>.</p><p>Also, Gin provides two sets of methods for binding:</p><ul><li><strong>Type</strong> - Must bind<ul><li><strong>Methods</strong> - <code>Bind</code>, <code>BindJSON</code>, <code>BindXML</code>, <code>BindQuery</code></li><li><strong>Behavior</strong> - These methods use <code>MustBindWith</code> under the hood. If there is a binding error, the request is aborted with <code>c.AbortWithError(400, err).SetType(ErrorTypeBind)</code>. This sets the response status code to 400 and the <code>Content-Type</code> header is set to <code>text/plain; charset=utf-8</code>. Note that if you try to set the response code after this, it will result in a warning <code>[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422</code>. If you wish to have greater control over the behavior, consider using the <code>ShouldBind</code> equivalent method.</li></ul></li><li><strong>Type</strong> - Should bind<ul><li><strong>Methods</strong> - <code>ShouldBind</code>, <code>ShouldBindJSON</code>, <code>ShouldBindXML</code>, <code>ShouldBindQuery</code></li><li><strong>Behavior</strong> - These methods use <code>ShouldBindWith</code> under the hood. If there is a binding error, the error is returned and it is the developer’s responsibility to handle the request and error appropriately.</li></ul></li></ul><p>When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use <code>MustBindWith</code> or <code>ShouldBindWith</code>.</p><p>You can also specify that specific fields are required. If a field is decorated with <code>binding:&quot;required&quot;</code> and has a empty value when binding, an error will be returned.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binding from JSON</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="type">string</span> <span class="string">`form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding JSON (&#123;&quot;user&quot;: &quot;manu&quot;, &quot;password&quot;: &quot;123&quot;&#125;)</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> json Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> json.User != <span class="string">&quot;manu&quot;</span> || json.Password != <span class="string">&quot;123&quot;</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;you are logged in&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding XML (</span></span><br><span class="line"><span class="comment">//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">//&lt;root&gt;</span></span><br><span class="line"><span class="comment">//&lt;user&gt;user&lt;/user&gt;</span></span><br><span class="line"><span class="comment">//&lt;password&gt;123&lt;/user&gt;</span></span><br><span class="line"><span class="comment">//&lt;/root&gt;)</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> xml Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> xml.User != <span class="string">&quot;manu&quot;</span> || xml.Password != <span class="string">&quot;123&quot;</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;you are logged in&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding a HTML form (user=manu&amp;password=123)</span></span><br><span class="line">router.POST(<span class="string">&quot;/loginForm&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> form Login</span><br><span class="line"><span class="comment">// This will infer what binder to use depending on the content-type header.</span></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;form); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.User != <span class="string">&quot;manu&quot;</span> || form.Password != <span class="string">&quot;123&quot;</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;you are logged in&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Sample request</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v -X POST \</span><br><span class="line">  http://localhost:8080/loginJSON \</span><br><span class="line">  -H <span class="string">&#x27;content-type: application/json&#x27;</span> \</span><br><span class="line">  -d <span class="string">&#x27;&#123; &quot;user&quot;: &quot;manu&quot; &#125;&#x27;</span></span><br><span class="line">&gt; POST /loginJSON HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.51.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; content-type: application/json</span><br><span class="line">&gt; Content-Length: 18</span><br><span class="line">&gt;</span><br><span class="line">* upload completely sent off: 18 out of 18 bytes</span><br><span class="line">&lt; HTTP/1.1 400 Bad Request</span><br><span class="line">&lt; Content-Type: application/json; charset=utf-8</span><br><span class="line">&lt; Date: Fri, 04 Aug 2017 03:51:31 GMT</span><br><span class="line">&lt; Content-Length: 100</span><br><span class="line">&lt;</span><br><span class="line">&#123;<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Key: &#x27;Login.Password&#x27; Error:Field validation for &#x27;Password&#x27; failed on the &#x27;required&#x27; tag&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>Skip validate</strong></p><p>When running the above example using the above the <code>curl</code> command, it returns error. Because the example use <code>binding:&quot;required&quot;</code> for <code>Password</code>. If use <code>binding:&quot;-&quot;</code> for <code>Password</code>, then it will not return error when running the above example again.</p><h3 id="自定义检验方法"><a href="#自定义检验方法" class="headerlink" title="自定义检验方法"></a>自定义检验方法</h3><p>It is also possible to register custom validators. See the <a href="examples/custom-validation/server.go">example code</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line"><span class="string">&quot;gopkg.in/go-playground/validator.v8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Booking <span class="keyword">struct</span> &#123;</span><br><span class="line">CheckIn  time.Time <span class="string">`form:&quot;check_in&quot; binding:&quot;required,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span></span><br><span class="line">CheckOut time.Time <span class="string">`form:&quot;check_out&quot; binding:&quot;required,gtfield=CheckIn&quot; time_format:&quot;2006-01-02&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookableDate</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,</span></span></span><br><span class="line"><span class="params"><span class="function">field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param <span class="type">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> date, ok := field.Interface().(time.Time); ok &#123;</span><br><span class="line">today := time.Now()</span><br><span class="line"><span class="keyword">if</span> today.Year() &gt; date.Year() || today.YearDay() &gt; date.YearDay() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;bookabledate&quot;</span>, bookableDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">route.GET(<span class="string">&quot;/bookable&quot;</span>, getBookable)</span><br><span class="line">route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBookable</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b Booking</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindWith(&amp;b, binding.Query); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Booking dates are valid!&quot;</span>&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;localhost:8085/bookable?check_in=2018-04-16&amp;check_out=2018-04-17&quot;</span></span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Booking dates are valid!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">$ curl <span class="string">&quot;localhost:8085/bookable?check_in=2018-03-08&amp;check_out=2018-03-09&quot;</span></span><br><span class="line">&#123;<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Key: &#x27;Booking.CheckIn&#x27; Error:Field validation for &#x27;CheckIn&#x27; failed on the &#x27;bookabledate&#x27; tag&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/go-playground/validator/releases/tag/v8.7">Struct level validations</a> can also be registered this way.<br>See the <a href="examples/struct-lvl-validations">struct-lvl-validation example</a> to learn more.</p><h3 id="仅绑定-Query"><a href="#仅绑定-Query" class="headerlink" title="仅绑定 Query"></a>仅绑定 Query</h3><p><code>ShouldBindQuery</code> function only binds the query params and not the post data. See the <a href="https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017">detail information</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span> <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">Address <span class="type">string</span> <span class="string">`form:&quot;address&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.Any(<span class="string">&quot;/testing&quot;</span>, startPage)</span><br><span class="line">route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startPage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="keyword">if</span> c.ShouldBindQuery(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;====== Only Bind By Query String ======&quot;</span>)</span><br><span class="line">log.Println(person.Name)</span><br><span class="line">log.Println(person.Address)</span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绑定-Query-或者-Post-数据"><a href="#绑定-Query-或者-Post-数据" class="headerlink" title="绑定 Query 或者 Post 数据"></a>绑定 Query 或者 Post 数据</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292">detail information</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="type">string</span>    <span class="string">`form:&quot;name&quot;`</span></span><br><span class="line">Address  <span class="type">string</span>    <span class="string">`form:&quot;address&quot;`</span></span><br><span class="line">Birthday time.Time <span class="string">`form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.GET(<span class="string">&quot;/testing&quot;</span>, startPage)</span><br><span class="line">route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startPage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="comment">// If `GET`, only `Form` binding engine (`query`) used.</span></span><br><span class="line"><span class="comment">// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).</span></span><br><span class="line"><span class="comment">// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48</span></span><br><span class="line"><span class="keyword">if</span> c.ShouldBind(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(person.Name)</span><br><span class="line">log.Println(person.Address)</span><br><span class="line">log.Println(person.Birthday)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test it with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET <span class="string">&quot;localhost:8085/testing?name=appleboy&amp;address=xyz&amp;birthday=1992-03-15&quot;</span></span><br></pre></td></tr></table></figure><h3 id="绑定-HTML-多选框"><a href="#绑定-HTML-多选框" class="headerlink" title="绑定 HTML 多选框"></a>绑定 HTML 多选框</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092">detail information</a></p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myForm <span class="keyword">struct</span> &#123;</span><br><span class="line">    Colors []<span class="type">string</span> <span class="string">`form:&quot;colors[]&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeForm myForm</span><br><span class="line">    c.ShouldBind(&amp;fakeForm)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;color&quot;</span>: fakeForm.Colors&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>form.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Check some colors<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;colors[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;red&quot;</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;green&quot;</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;colors[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;green&quot;</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;colors[]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;color&quot;:[&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;]&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定-Multipart-x2F-Urlencoded"><a href="#绑定-Multipart-x2F-Urlencoded" class="headerlink" title="绑定 Multipart&#x2F;Urlencoded"></a>绑定 Multipart&#x2F;Urlencoded</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginForm <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="type">string</span> <span class="string">`form:&quot;user&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// you can bind multipart form with explicit binding declaration:</span></span><br><span class="line"><span class="comment">// c.ShouldBindWith(&amp;form, binding.Form)</span></span><br><span class="line"><span class="comment">// or you can simply use autobinding with ShouldBind method:</span></span><br><span class="line"><span class="keyword">var</span> form LoginForm</span><br><span class="line"><span class="comment">// in this case proper binding will be automatically selected</span></span><br><span class="line"><span class="keyword">if</span> c.ShouldBind(&amp;form) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> form.User == <span class="string">&quot;user&quot;</span> &amp;&amp; form.Password == <span class="string">&quot;password&quot;</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;you are logged in&quot;</span>&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(<span class="number">401</span>, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test it with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v --form user=user --form password=password http://localhost:8080/login</span><br></pre></td></tr></table></figure><h3 id="支持-XML-JSON-YAML-和-ProtoBuf-协议"><a href="#支持-XML-JSON-YAML-和-ProtoBuf-协议" class="headerlink" title="支持 XML, JSON, YAML 和 ProtoBuf 协议"></a>支持 XML, JSON, YAML 和 ProtoBuf 协议</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H is a shortcut for map[string]interface&#123;&#125;</span></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// You also can use a struct</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Number  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line">msg.Name = <span class="string">&quot;Lena&quot;</span></span><br><span class="line">msg.Message = <span class="string">&quot;hey&quot;</span></span><br><span class="line">msg.Number = <span class="number">123</span></span><br><span class="line"><span class="comment">// Note that msg.Name becomes &quot;user&quot; in the JSON</span></span><br><span class="line"><span class="comment">// Will output  :   &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;</span></span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someProtoBuf&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reps := []<span class="type">int64</span>&#123;<span class="type">int64</span>(<span class="number">1</span>), <span class="type">int64</span>(<span class="number">2</span>)&#125;</span><br><span class="line">label := <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">// The specific definition of protobuf is written in the testdata/protoexample file.</span></span><br><span class="line">data := &amp;protoexample.Test&#123;</span><br><span class="line">Label: &amp;label,</span><br><span class="line">Reps:  reps,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note that data becomes binary data in the response</span></span><br><span class="line"><span class="comment">// Will output protoexample.Test protobuf serialized data</span></span><br><span class="line">c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-SecureJSON"><a href="#使用-SecureJSON" class="headerlink" title="使用 SecureJSON"></a>使用 SecureJSON</h4><p>Using SecureJSON to prevent json hijacking. Default prepends <code>&quot;while(1),&quot;</code> to response body if the given struct is array values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also use your own secure json prefix</span></span><br><span class="line"><span class="comment">// r.SecureJsonPrefix(&quot;)]&#125;&#x27;,\n&quot;)</span></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">names := []<span class="type">string</span>&#123;<span class="string">&quot;lena&quot;</span>, <span class="string">&quot;austin&quot;</span>, <span class="string">&quot;foo&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will output  :   while(1);[&quot;lena&quot;,&quot;austin&quot;,&quot;foo&quot;]</span></span><br><span class="line">c.SecureJSON(http.StatusOK, names)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-JSONP"><a href="#使用-JSONP" class="headerlink" title="使用 JSONP"></a>使用 JSONP</h4><p>Using JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/JSONP?callback=x&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;foo&quot;</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//callback is x</span></span><br><span class="line"><span class="comment">// Will output  :   x(&#123;\&quot;foo\&quot;:\&quot;bar\&quot;&#125;)</span></span><br><span class="line">c.JSONP(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-AsciiJSON"><a href="#使用-AsciiJSON" class="headerlink" title="使用 AsciiJSON"></a>使用 AsciiJSON</h4><p>Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;lang&quot;</span>: <span class="string">&quot;GO语言&quot;</span>,</span><br><span class="line"><span class="string">&quot;tag&quot;</span>:  <span class="string">&quot;&lt;br&gt;&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// will output : &#123;&quot;lang&quot;:&quot;GO\u8bed\u8a00&quot;,&quot;tag&quot;:&quot;\u003cbr\u003e&quot;&#125;</span></span><br><span class="line">c.AsciiJSON(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-PureJSON"><a href="#使用-PureJSON" class="headerlink" title="使用 PureJSON"></a>使用 PureJSON</h4><p>Normally, JSON replaces special HTML characters with their unicode entities, e.g. <code>&lt;</code> becomes  <code>\u003c</code>. If you want to encode such characters literally, you can use PureJSON instead.<br>This feature is unavailable in Go 1.6 and lower.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serves unicode entities</span></span><br><span class="line">r.GET(<span class="string">&quot;/json&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;html&quot;</span>: <span class="string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serves literal characters</span></span><br><span class="line">r.GET(<span class="string">&quot;/purejson&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.PureJSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;html&quot;</span>: <span class="string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="静态文件服务"><a href="#静态文件服务" class="headerlink" title="静态文件服务"></a>静态文件服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">router.StaticFS(<span class="string">&quot;/more_static&quot;</span>, http.Dir(<span class="string">&quot;my_file_system&quot;</span>))</span><br><span class="line">router.StaticFile(<span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;./resources/favicon.ico&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据流服务"><a href="#数据流服务" class="headerlink" title="数据流服务"></a>数据流服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/someDataFromReader&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">response, err := http.Get(<span class="string">&quot;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || response.StatusCode != http.StatusOK &#123;</span><br><span class="line">c.Status(http.StatusServiceUnavailable)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := response.Body</span><br><span class="line">contentLength := response.ContentLength</span><br><span class="line">contentType := response.Header.Get(<span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line"></span><br><span class="line">extraHeaders := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;Content-Disposition&quot;</span>: <span class="string">`attachment; filename=&quot;gopher.png&quot;`</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-HTML-模板渲染"><a href="#使用-HTML-模板渲染" class="headerlink" title="使用 HTML 模板渲染"></a>使用 HTML 模板渲染</h3><p>Using LoadHTMLGlob() or LoadHTMLFiles()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"><span class="comment">//router.LoadHTMLFiles(&quot;templates/template1.html&quot;, &quot;templates/template2.html&quot;)</span></span><br><span class="line">router.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;Main website&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>templates&#x2F;index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Using templates with same name in different directories</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">router.GET(<span class="string">&quot;/posts/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;posts/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;Posts&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.GET(<span class="string">&quot;/users/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;users/index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;Users&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>templates&#x2F;posts&#x2F;index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;posts/index.tmpl&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using posts/index.tmpl<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p>templates&#x2F;users&#x2F;index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;users/index.tmpl&quot; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using users/index.tmpl<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义模板渲染"><a href="#自定义模板渲染" class="headerlink" title="自定义模板渲染"></a>自定义模板渲染</h4><p>You can also use your own html template render</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;html/template&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">html := template.Must(template.ParseFiles(<span class="string">&quot;file1&quot;</span>, <span class="string">&quot;file2&quot;</span>))</span><br><span class="line">router.SetHTMLTemplate(html)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义分割符"><a href="#自定义分割符" class="headerlink" title="自定义分割符"></a>自定义分割符</h4><p>You may use custom delims</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">r.Delims(<span class="string">&quot;&#123;[&#123;&quot;</span>, <span class="string">&quot;&#125;]&#125;&quot;</span>)</span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;/path/to/templates&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="自定义模板方法"><a href="#自定义模板方法" class="headerlink" title="自定义模板方法"></a>自定义模板方法</h4><p>See the detail <a href="examples/template">example code</a>.</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formatAsDate</span><span class="params">(t time.Time)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    year, month, day := t.Date()</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d%02d/%02d&quot;</span>, year, month, day)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.Delims(<span class="string">&quot;&#123;[&#123;&quot;</span>, <span class="string">&quot;&#125;]&#125;&quot;</span>)</span><br><span class="line">    router.SetFuncMap(template.FuncMap&#123;</span><br><span class="line">        <span class="string">&quot;formatAsDate&quot;</span>: formatAsDate,</span><br><span class="line">    &#125;)</span><br><span class="line">    router.LoadHTMLFiles(<span class="string">&quot;./testdata/template/raw.tmpl&quot;</span>)</span><br><span class="line"></span><br><span class="line">    router.GET(<span class="string">&quot;/raw&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.HTML(http.StatusOK, <span class="string">&quot;raw.tmpl&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;now&quot;</span>: time.Date(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>raw.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date: &#123;[&#123;.now | formatAsDate&#125;]&#125;</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date: 2017/07/01</span><br></pre></td></tr></table></figure><h3 id="多模板"><a href="#多模板" class="headerlink" title="多模板"></a>多模板</h3><p>Gin allow by default use only one html.Template. Check <a href="https://github.com/gin-contrib/multitemplate">a multitemplate render</a> for using features like go 1.6 <code>block template</code>.</p><h3 id="页面重定向"><a href="#页面重定向" class="headerlink" title="页面重定向"></a>页面重定向</h3><p>Issuing a HTTP redirect is easy. Both internal and external locations are supported.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;http://www.google.com/&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Issuing a Router redirect, use <code>HandleContext</code> like below.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.Request.URL.Path = <span class="string">&quot;/test2&quot;</span></span><br><span class="line">    r.HandleContext(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/test2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set example variable</span></span><br><span class="line">c.Set(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;12345&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// before request</span></span><br><span class="line"></span><br><span class="line">c.Next()</span><br><span class="line"></span><br><span class="line"><span class="comment">// after request</span></span><br><span class="line">latency := time.Since(t)</span><br><span class="line">log.Print(latency)</span><br><span class="line"></span><br><span class="line"><span class="comment">// access the status we are sending</span></span><br><span class="line">status := c.Writer.Status()</span><br><span class="line">log.Println(status)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line">r.Use(Logger())</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">example := c.MustGet(<span class="string">&quot;example&quot;</span>).(<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// it would print: &quot;12345&quot;</span></span><br><span class="line">log.Println(example)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-BasicAuth-中间件"><a href="#使用-BasicAuth-中间件" class="headerlink" title="使用 BasicAuth() 中间件"></a>使用 BasicAuth() 中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simulate some private data</span></span><br><span class="line"><span class="keyword">var</span> secrets = gin.H&#123;</span><br><span class="line"><span class="string">&quot;foo&quot;</span>:    gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;foo@bar.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;123433&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;austin&quot;</span>: gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;austin@example.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;666&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;lena&quot;</span>:   gin.H&#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;lena@guapa.com&quot;</span>, <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;523443&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Group using gin.BasicAuth() middleware</span></span><br><span class="line"><span class="comment">// gin.Accounts is a shortcut for map[string]string</span></span><br><span class="line">authorized := r.Group(<span class="string">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line"><span class="string">&quot;foo&quot;</span>:    <span class="string">&quot;bar&quot;</span>,</span><br><span class="line"><span class="string">&quot;austin&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line"><span class="string">&quot;lena&quot;</span>:   <span class="string">&quot;hello2&quot;</span>,</span><br><span class="line"><span class="string">&quot;manu&quot;</span>:   <span class="string">&quot;4321&quot;</span>,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// /admin/secrets endpoint</span></span><br><span class="line"><span class="comment">// hit &quot;localhost:8080/admin/secrets</span></span><br><span class="line">authorized.GET(<span class="string">&quot;/secrets&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// get user, it was set by the BasicAuth middleware</span></span><br><span class="line">user := c.MustGet(gin.AuthUserKey).(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> secret, ok := secrets[user]; ok &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: secret&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;user&quot;</span>: user, <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;NO SECRET :(&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在中间件中使用-Goroutines-协程"><a href="#在中间件中使用-Goroutines-协程" class="headerlink" title="在中间件中使用 Goroutines 协程"></a>在中间件中使用 Goroutines 协程</h3><p>When starting new Goroutines inside a middleware or handler, you <strong>SHOULD NOT</strong> use the original context inside it, you have to use a read-only copy.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/long_async&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// create copy to be used inside the goroutine</span></span><br><span class="line">cCp := c.Copy()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// note that you are using the copied context &quot;cCp&quot;, IMPORTANT</span></span><br><span class="line">log.Println(<span class="string">&quot;Done! in path &quot;</span> + cCp.Request.URL.Path)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/long_sync&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// since we are NOT using a goroutine, we do not have to copy the context</span></span><br><span class="line">log.Println(<span class="string">&quot;Done! in path &quot;</span> + c.Request.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义-HTTP-配置"><a href="#自定义-HTTP-配置" class="headerlink" title="自定义 HTTP 配置"></a>自定义 HTTP 配置</h3><p>Use <code>http.ListenAndServe()</code> directly, like this:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">s := &amp;http.Server&#123;</span><br><span class="line">Addr:           <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler:        router,</span><br><span class="line">ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支持-Let’s-Encrypt"><a href="#支持-Let’s-Encrypt" class="headerlink" title="支持 Let’s Encrypt"></a>支持 Let’s Encrypt</h3><p>example for 1-line LetsEncrypt HTTPS servers.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/autotls&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping handler</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Fatal(autotls.Run(r, <span class="string">&quot;example1.com&quot;</span>, <span class="string">&quot;example2.com&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example for custom autocert manager.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/autotls&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/acme/autocert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping handler</span></span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">m := autocert.Manager&#123;</span><br><span class="line">Prompt:     autocert.AcceptTOS,</span><br><span class="line">HostPolicy: autocert.HostWhitelist(<span class="string">&quot;example1.com&quot;</span>, <span class="string">&quot;example2.com&quot;</span>),</span><br><span class="line">Cache:      autocert.DirCache(<span class="string">&quot;/var/www/.cache&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Fatal(autotls.RunWithManager(r, &amp;m))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Gin-运行多个服务"><a href="#使用-Gin-运行多个服务" class="headerlink" title="使用 Gin 运行多个服务"></a>使用 Gin 运行多个服务</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/346">question</a> and try the following example:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/sync/errgroup&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">g errgroup.Group</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router01</span><span class="params">()</span></span> http.Handler &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line"><span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 01&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router02</span><span class="params">()</span></span> http.Handler &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:  http.StatusOK,</span><br><span class="line"><span class="string">&quot;error&quot;</span>: <span class="string">&quot;Welcome server 02&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server01 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler:      router01(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server02 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">&quot;:8081&quot;</span>,</span><br><span class="line">Handler:      router02(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server01.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server02.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := g.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优雅的重启和停止服务"><a href="#优雅的重启和停止服务" class="headerlink" title="优雅的重启和停止服务"></a>优雅的重启和停止服务</h3><p>Do you want to graceful restart or stop your web server?<br>There are some ways this can be done.</p><p>We can use <a href="https://github.com/fvbock/endless">fvbock&#x2F;endless</a> to replace the default <code>ListenAndServe</code>. Refer issue <a href="https://github.com/gin-gonic/gin/issues/296">#296</a> for more details.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line"><span class="comment">// [...]</span></span><br><span class="line">endless.ListenAndServe(<span class="string">&quot;:4242&quot;</span>, router)</span><br></pre></td></tr></table></figure><p>An alternative to endless:</p><ul><li><a href="https://github.com/braintree/manners">manners</a>: A polite Go HTTP server that shuts down gracefully.</li><li><a href="https://github.com/tylerb/graceful">graceful</a>: Graceful is a Go package enabling graceful shutdown of an http.Handler server.</li><li><a href="https://github.com/facebookgo/grace">grace</a>: Graceful restart &amp; zero downtime deploy for Go servers.</li></ul><p>If you are using Go 1.8, you may not need to use this library! Consider using http.Server’s built-in <a href="https://golang.org/pkg/net/http/#Server.Shutdown">Shutdown()</a> method for graceful shutdowns. See the full <a href="./examples/graceful-shutdown">graceful-shutdown</a> example with gin.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build go1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;Welcome Gin Server&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">srv := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler: router,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// service connections</span></span><br><span class="line"><span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;listen: %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for interrupt signal to gracefully shutdown the server with</span></span><br><span class="line"><span class="comment">// a timeout of 5 seconds.</span></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, os.Interrupt)</span><br><span class="line">&lt;-quit</span><br><span class="line">log.Println(<span class="string">&quot;Shutdown Server ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">if</span> err := srv.Shutdown(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Server Shutdown:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Server exiting&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建包含模板的可执行文件"><a href="#构建包含模板的可执行文件" class="headerlink" title="构建包含模板的可执行文件"></a>构建包含模板的可执行文件</h3><p>You can build a server into a single binary containing templates by using <a href="https://github.com/jessevdk/go-assets">go-assets</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line">t, err := loadTemplate()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">r.SetHTMLTemplate(t)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;/html/index.tmpl&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loadTemplate loads templates embedded by go-assets-builder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadTemplate</span><span class="params">()</span></span> (*template.Template, <span class="type">error</span>) &#123;</span><br><span class="line">t := template.New(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, file := <span class="keyword">range</span> Assets.Files &#123;</span><br><span class="line"><span class="keyword">if</span> file.IsDir() || !strings.HasSuffix(name, <span class="string">&quot;.tmpl&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">h, err := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">t, err = t.New(name).Parse(<span class="type">string</span>(h))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See a complete example in the <code>examples/assets-in-binary</code> directory.</p><h3 id="自定义-struct-绑定表单请求参数"><a href="#自定义-struct-绑定表单请求参数" class="headerlink" title="自定义 struct 绑定表单请求参数"></a>自定义 struct 绑定表单请求参数</h3><p>The follow example using custom struct:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StructA <span class="keyword">struct</span> &#123;</span><br><span class="line">    FieldA <span class="type">string</span> <span class="string">`form:&quot;field_a&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructB <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedStruct StructA</span><br><span class="line">    FieldB <span class="type">string</span> <span class="string">`form:&quot;field_b&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructC <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedStructPointer *StructA</span><br><span class="line">    FieldC <span class="type">string</span> <span class="string">`form:&quot;field_c&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructD <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedAnonyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">        FieldX <span class="type">string</span> <span class="string">`form:&quot;field_x&quot;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    FieldD <span class="type">string</span> <span class="string">`form:&quot;field_d&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataB</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructB</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: b.NestedStruct,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: b.FieldB,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataC</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructC</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: b.NestedStructPointer,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: b.FieldC,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataD</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructD</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>: b.NestedAnonyStruct,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>: b.FieldD,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/getb&quot;</span>, GetDataB)</span><br><span class="line">    r.GET(<span class="string">&quot;/getc&quot;</span>, GetDataC)</span><br><span class="line">    r.GET(<span class="string">&quot;/getd&quot;</span>, GetDataD)</span><br><span class="line"></span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the command <code>curl</code> command result:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl &quot;http://localhost:8080/getb?field_a=hello&amp;field_b=world&quot;</span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;FieldA&quot;:&quot;hello&quot;&#125;,&quot;b&quot;:&quot;world&quot;&#125;</span><br><span class="line">$ curl &quot;http://localhost:8080/getc?field_a=hello&amp;field_c=world&quot;</span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;FieldA&quot;:&quot;hello&quot;&#125;,&quot;c&quot;:&quot;world&quot;&#125;</span><br><span class="line">$ curl &quot;http://localhost:8080/getd?field_x=hello&amp;field_d=world&quot;</span><br><span class="line">&#123;&quot;d&quot;:&quot;world&quot;,&quot;x&quot;:&#123;&quot;FieldX&quot;:&quot;hello&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>: NOT support the follow style struct:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StructX <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="keyword">struct</span> &#123;&#125; <span class="string">`form:&quot;name_x&quot;`</span> <span class="comment">// HERE have form</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructY <span class="keyword">struct</span> &#123;</span><br><span class="line">    Y StructX <span class="string">`form:&quot;name_y&quot;`</span> <span class="comment">// HERE hava form</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructZ <span class="keyword">struct</span> &#123;</span><br><span class="line">    Z *StructZ <span class="string">`form:&quot;name_z&quot;`</span> <span class="comment">// HERE hava form</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In a word, only support nested custom struct which have no <code>form</code> now.</p><h3 id="绑定请求-Body-到不同的-struct"><a href="#绑定请求-Body-到不同的-struct" class="headerlink" title="绑定请求 Body 到不同的 struct"></a>绑定请求 Body 到不同的 struct</h3><p>The normal methods for binding request body consumes <code>c.Request.Body</code> and they<br>cannot be called multiple times.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> formA <span class="keyword">struct</span> &#123;</span><br><span class="line">  Foo <span class="type">string</span> <span class="string">`json:&quot;foo&quot; xml:&quot;foo&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> formB <span class="keyword">struct</span> &#123;</span><br><span class="line">  Bar <span class="type">string</span> <span class="string">`json:&quot;bar&quot; xml:&quot;bar&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SomeHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  objA := formA&#123;&#125;</span><br><span class="line">  objB := formB&#123;&#125;</span><br><span class="line">  <span class="comment">// This c.ShouldBind consumes c.Request.Body and it cannot be reused.</span></span><br><span class="line">  <span class="keyword">if</span> errA := c.ShouldBind(&amp;objA); errA == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formA`</span>)</span><br><span class="line">  <span class="comment">// Always an error is occurred by this because c.Request.Body is EOF now.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB := c.ShouldBind(&amp;objB); errB == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For this, you can use <code>c.ShouldBindBodyWith</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SomeHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  objA := formA&#123;&#125;</span><br><span class="line">  objB := formB&#123;&#125;</span><br><span class="line">  <span class="comment">// This reads c.Request.Body and stores the result into the context.</span></span><br><span class="line">  <span class="keyword">if</span> errA := c.ShouldBindBodyWith(&amp;objA, binding.JSON); errA == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formA`</span>)</span><br><span class="line">  <span class="comment">// At this time, it reuses body stored in the context.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB := c.ShouldBindBodyWith(&amp;objB, binding.JSON); errB == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB JSON`</span>)</span><br><span class="line">  <span class="comment">// And it can accepts other formats</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB2 := c.ShouldBindBodyWith(&amp;objB, binding.XML); errB2 == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB XML`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>c.ShouldBindBodyWith</code> stores body into the context before binding. This has<br>a slight impact to performance, so you should not use this method if you are<br>enough to call binding at once.</li><li>This feature is only needed for some formats – <code>JSON</code>, <code>XML</code>, <code>MsgPack</code>,<br><code>ProtoBuf</code>. For other formats, <code>Query</code>, <code>Form</code>, <code>FormPost</code>, <code>FormMultipart</code>,<br>can be called by <code>c.ShouldBind()</code> multiple times without any damage to<br>performance (See <a href="https://github.com/gin-gonic/gin/pull/1341">#1341</a>).</li></ul><h3 id="http2-服务端推送"><a href="#http2-服务端推送" class="headerlink" title="http2 服务端推送"></a>http2 服务端推送</h3><p>http.Pusher is supported only <strong>go1.8+</strong>. See the <a href="https://blog.golang.org/h2push">golang blog</a> for detail information.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = template.Must(template.New(<span class="string">&quot;https&quot;</span>).Parse(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">  &lt;title&gt;Https Test&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;script src=&quot;/assets/app.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;h1 style=&quot;color:red;&quot;&gt;Welcome, Ginner!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Static(<span class="string">&quot;/assets&quot;</span>, <span class="string">&quot;./assets&quot;</span>)</span><br><span class="line">r.SetHTMLTemplate(html)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> pusher := c.Writer.Pusher(); pusher != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// use pusher.Push() to do server push</span></span><br><span class="line"><span class="keyword">if</span> err := pusher.Push(<span class="string">&quot;/assets/app.js&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Failed to push: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;https&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and Server in https://127.0.0.1:8080</span></span><br><span class="line">r.RunTLS(<span class="string">&quot;:8080&quot;</span>, <span class="string">&quot;./testdata/server.pem&quot;</span>, <span class="string">&quot;./testdata/server.key&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>The <code>net/http/httptest</code> package is preferable way for HTTP testing.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := setupRouter()</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test for code example above:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPingRoute</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">router := setupRouter()</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">req, _ := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ping&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">router.ServeHTTP(w, req)</span><br><span class="line"></span><br><span class="line">assert.Equal(t, <span class="number">200</span>, w.Code)</span><br><span class="line">assert.Equal(t, <span class="string">&quot;pong&quot;</span>, w.Body.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> web </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM自带命令</title>
      <link href="/2020/02/04/java/java-jvm/JVM%E8%87%AA%E5%B8%A6%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/04/java/java-jvm/JVM%E8%87%AA%E5%B8%A6%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM自带命令"><a href="#JVM自带命令" class="headerlink" title="JVM自带命令"></a>JVM自带命令</h1><blockquote><p>引用自<a href="https://mp.weixin.qq.com/s/QNr8somjodyvU9dRAQG2oA">jvm系列(四):jvm调优-命令篇</a></p></blockquote><p>运用jvm自带的命令可以方便的在生产监控和打印堆栈的日志信息帮忙我们来定位问题！虽然jvm调优成熟的工具已经有很多：jconsole、大名鼎鼎的VisualVM，IBM的Memory Analyzer等等，但是在生产环境出现问题的时候，一方面工具的使用会有所限制，另一方面喜欢装X的我们，总喜欢在出现问题的时候在终端输入一些命令来解决。所有的工具几乎都是依赖于jdk的接口和底层的这些命令，研究这些命令的使用也让我们更能了解jvm构成和特性。</p><p>Sun JDK监控和故障处理命令有jps jstat jmap jhat jstack jinfo</p><h2 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h2><p>JVM Process Status Tool，显示指定系统内所有的HotSpot虚拟机进程。</p><ul><li>命令格式</li></ul><p><code>jps [option] [hostid]</code></p><ul><li><p>option参数</p><ul><li>-l：输出主类全名或jar路径</li><li>-q：只输出LVMID</li><li>-m：输入JVM启动时传递给main()的参数</li><li>-v：输出JVM启动时显示指定的JVM参数</li></ul></li></ul><p>其中[option]、[hostid]参数也可以不写。</p><ul><li>示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jps -l -m</span><br><span class="line">28920 org.apache.catalina.startup.Boostrap start</span><br><span class="line">11589 org.apache.catalina.startup.Boostrap start</span><br><span class="line">25816 sun.tools.jps.Jps -l -m</span><br></pre></td></tr></table></figure><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p>jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</p><ul><li>命令格式</li></ul><p><code>jstat [option] LVMID [interval] [count]</code></p><ul><li><p>参数</p><ul><li>[option]：操作参数</li><li>LVMID：本地虚拟机进程ID</li><li>[interval]：连续输出的时间间隔</li><li>[count]：连续输出的次数</li></ul></li></ul><p>option参数总览：</p><table><thead><tr><th>option参数</th><th>说明</th></tr></thead><tbody><tr><td>class</td><td>class loader的行为统计。Statistics on the behavior of the class loader.</td></tr><tr><td>compiler</td><td>HotSpt JIT编译器行为统计。Statistics of the behavior of the HotSpot Just-in-Time compiler.</td></tr><tr><td>gc</td><td>垃圾回收堆的行为统计。Statistics of the behavior of the garbage collected heap.</td></tr><tr><td>gccapacity</td><td>各个垃圾回收代容量(young,old,perm)和他们相应的空间统计。Statistics of the capacities of the generations and their corresponding spaces.</td></tr><tr><td>gcutil</td><td>垃圾回收统计概述。Summary of garbage collection statistics.</td></tr><tr><td>gccause</td><td>垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因。Summary of garbage collection statistics (same as -gcutil), with the cause of the last and</td></tr><tr><td>gcnew</td><td>新生代行为统计。Statistics of the behavior of the new generation.</td></tr><tr><td>gcnewcapacity</td><td>新生代与其相应的内存空间的统计。Statistics of the sizes of the new generations and its corresponding spaces.</td></tr><tr><td>gcold</td><td>年老代和永生代行为统计。Statistics of the behavior of the old and permanent generations.</td></tr><tr><td>gcoldcapacity</td><td>年老代行为统计。Statistics of the sizes of the old generation.</td></tr><tr><td>gcpermcapacity</td><td>永生代行为统计。Statistics of the sizes of the permanent generation.</td></tr><tr><td>printcompilation</td><td>HotSpot编译方法统计。HotSpot compilation method statistics.</td></tr></tbody></table><p>option参数详解：</p><p><strong>-class</strong></p><p>监视类装载、卸载数量、总空间以及耗费的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -class 10916</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line"> 46635 93465.9     1478  2023.5     198.16</span><br></pre></td></tr></table></figure><ul><li>Loaded：加载class的数量</li><li>Bytes：class字节大小</li><li>Unloaded：未加载class的数量</li><li>Bytes：未加载class的字节大小</li><li>Time：加载时间</li></ul><p><strong>-compiler</strong></p><p>输出JIT编译过的方法数量耗时等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -compiler 10916                                 </span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">   56988      0       0   304.35          0             </span><br></pre></td></tr></table></figure><ul><li>Compiled : 编译数量</li><li>Failed : 编译失败数量</li><li>Invalid : 无效数量</li><li>Time : 编译耗时</li><li>FailedType : 失败类型</li><li>FailedMethod : 失败方法的全限定名</li></ul><p><strong>-gc</strong></p><p>垃圾回收堆的行为统计，<strong>常用命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gc 10916</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">10496.0 10496.0  0.0   1085.4 84032.0   7301.1   209904.0   106957.6  287520.0 267661.8 36752.0 32831.8    649    3.923  31      4.348    8.271</span><br></pre></td></tr></table></figure><p><strong>C即Capacity 总容量，U即Used 已使用的容量</strong></p><ul><li>S0C : survivor0区的总容量</li><li>S1C : survivor1区的总容量</li><li>S0U : survivor0区已使用的容量</li><li>S1C : survivor1区已使用的容量</li><li>EC : Eden区的总容量</li><li>EU : Eden区已使用的容量</li><li>OC : Old区的总容量</li><li>OU : Old区已使用的容量</li><li>PC 当前perm的容量 (KB)</li><li>PU perm的使用 (KB)</li><li>YGC : 新生代垃圾回收次数</li><li>YGCT : 新生代垃圾回收时间</li><li>FGC : 老年代垃圾回收次数</li><li>FGCT : 老年代垃圾回收时间</li><li>GCT : 垃圾回收总消耗时间</li></ul><p><code>λ jstat -gc 10916 2000 20</code></p><p>这个命令的意思是每隔2000ms输出10916的gc情况，一共输出20次。</p><p><strong>-gccapacity</strong></p><p>同-gc，不过还会输出Java堆各区域使用到的最大、最小空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gccapacity 10916</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC</span><br><span class="line"> 43648.0 256000.0 105024.0 10496.0 10496.0  84032.0    87424.0   512000.0   209904.0   209904.0      0.0 1300480.0 287520.0      0.0 1048576.0  36752.0    649    32</span><br></pre></td></tr></table></figure><ul><li>NGCMN : 新生代占用的最小空间</li><li>NGCMX : 新生代占用的最大空间</li><li>OGCMN : 老年代占用的最小空间</li><li>OGCMX : 老年代占用的最大空间</li><li>OGC：当前年老代的容量 (KB)</li><li>OC：当前年老代的空间 (KB)</li><li>PGCMN : perm占用的最小空间</li><li>PGCMX : perm占用的最大空间</li></ul><p><strong>-gcutil</strong></p><p>同-gc，不过输出的是已使用空间占总空间的百分比</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcutil 10916</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00   0.00   4.68  47.68  93.00  89.22    649    3.923    32    5.690    9.613</span><br></pre></td></tr></table></figure><p><strong>-gccause</strong></p><p>垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gccause 10916</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">  0.00   0.00   5.42  47.68  93.00  89.22    649    3.923    32    5.690    9.613 System.gc()          No GC</span><br></pre></td></tr></table></figure><ul><li>LGCC：最近垃圾回收的原因</li><li>GCC：当前垃圾回收的原因</li></ul><p><strong>-gcnew</strong></p><p>统计新生代的行为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcnew 10916</span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT</span><br><span class="line">10496.0 10496.0    0.0    0.0  6   6 5248.0  84032.0   6334.3    649    3.923</span><br></pre></td></tr></table></figure><ul><li>TT：Tenuring threshold(提升阈值)</li><li>MTT：最大的tenuring threshold</li><li>DSS：survivor区域大小 (KB)</li></ul><p><strong>-gcnewcapacity</strong></p><p>新生代与其相应的内存空间的统计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcnewcapacity 10916</span><br><span class="line">  NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC</span><br><span class="line">   43648.0   256000.0   105024.0  25600.0  10496.0  25600.0  10496.0   204800.0    84032.0   649    32</span><br></pre></td></tr></table></figure><ul><li>NGC:当前年轻代的容量 (KB)</li><li>S0CMX:最大的S0空间 (KB)</li><li>S0C:当前S0空间 (KB)</li><li>ECMX:最大eden空间 (KB)</li><li>EC:当前eden空间 (KB)</li></ul><p><strong>-gcold</strong></p><p>统计旧生代的行为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcold 10916</span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT</span><br><span class="line">287520.0 267405.4  36752.0  32789.2    209904.0    100087.0    649    32    5.690    9.613</span><br></pre></td></tr></table></figure><p><strong>-gcoldcapacity</strong></p><p>统计旧生代的大小和空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcoldcapacity 10916</span><br><span class="line">   OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT</span><br><span class="line">    87424.0    512000.0    209904.0    209904.0   649    32    5.690    9.613</span><br></pre></td></tr></table></figure><p><strong>-gcpermcapacity</strong></p><p>永生代行为统计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -gcpermcapacity 10916</span><br><span class="line">   PGCMN       PGCMX        PGC         PC       YGC   FGC    FGCT     GCT</span><br><span class="line">    87424.0    512000.0    209904.0    209904.0   649    32    5.690    9.613</span><br></pre></td></tr></table></figure><p><strong>-printcompilation</strong></p><p>hotspot编译方法统计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jstat -printcompilation 10916</span><br><span class="line">Compiled  Size  Type Method</span><br><span class="line">   56991     24    1 com/intellij/ide/b/a$$Lambda<span class="variable">$1343</span> run</span><br></pre></td></tr></table></figure><ul><li>Compiled：被执行的编译任务的数量</li><li>Size：方法字节码的字节数</li><li>Type：编译类型</li><li>Method：编译方法的类名和方法名。类名使用”&#x2F;“ 代替 “.” 作为空间分隔符. 方法名是给出类的方法名. 格式是一致于HotSpot - XX:+PrintComplation 选项</li></ul><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p>jmap(JVM Memory Map)命令用于生成heap dump文件，如果不使用这个命令，还阔以使用-XX:+HeapDumpOnOutOfMemoryError参数来让虚拟机出现OOM的时候·自动生成dump文件。 jmap不仅能生成dump文件，还阔以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。</p><ul><li>命令格式</li></ul><p><code>jmap [option] LVMID</code></p><ul><li><p>option参数</p><ul><li>dump：生成堆转储快照</li><li>finalizerinfo：显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象</li><li>heap：显示Java堆详细信息</li><li>histo：显示堆中对象的统计信息</li><li>permstat：to print permanent generation statistics</li><li>F：当-dump没有响应时，强制生成dump快照</li></ul></li><li><p>示例</p></li></ul><p><strong>-dump</strong></p><p>常用格式</p><p><code>-dump:live,format=b,file=&lt;filename&gt; pid</code></p><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">λ jmap -dump:live,format=b,file=dump.hprof 10916</span><br><span class="line">Dumping heap to C:\Users\yupaits\Desktop\dump.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><p>dump.hprof这个后缀是为了后续可以直接用MAT(Memory Anlysis Tool)打开。</p><p><strong>-finalizerinfo</strong></p><p>打印等待回收对象的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">λ jmap -finalizerinfo 7924</span><br><span class="line">Attaching to process ID 7924, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.131-b11</span><br><span class="line">Number of objects pending <span class="keyword">for</span> finalization: 0</span><br></pre></td></tr></table></figure><p>可以看到当前F-QUEUE队列中并没有等待Finalizer线程执行finalizer方法的对象。</p><p><strong>-heap</strong></p><p>打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况,可以用此来判断内存目前的使用情况以及垃圾回收情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">λ jmap -heap 7924</span><br><span class="line">Attaching to process ID 7924, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.131-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 0</span><br><span class="line">   MaxHeapFreeRatio         = 100</span><br><span class="line">   MaxHeapSize              = 2122317824 (2024.0MB)</span><br><span class="line">   NewSize                  = 44564480 (42.5MB)</span><br><span class="line">   MaxNewSize               = 707264512 (674.5MB)</span><br><span class="line">   OldSize                  = 89653248 (85.5MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 274202624 (261.5MB)</span><br><span class="line">   used     = 162248416 (154.73214721679688MB)</span><br><span class="line">   free     = 111954208 (106.76785278320312MB)</span><br><span class="line">   59.170993199539915% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 15204352 (14.5MB)</span><br><span class="line">   used     = 7543256 (7.193809509277344MB)</span><br><span class="line">   free     = 7661096 (7.306190490722656MB)</span><br><span class="line">   49.61247937432651% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 14680064 (14.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 14680064 (14.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity = 88080384 (84.0MB)</span><br><span class="line">   used     = 28832816 (27.497116088867188MB)</span><br><span class="line">   free     = 59247568 (56.50288391113281MB)</span><br><span class="line">   32.73466201055618% used</span><br><span class="line"></span><br><span class="line">27680 interned Strings occupying 2923128 bytes.</span><br></pre></td></tr></table></figure><p>可以很清楚的看到Java堆中各个区域目前的情况。</p><p><strong>-histo</strong></p><p>打印堆的对象统计，包括对象数、内存大小等等 （因为在dump:live前会进行full gc，如果带上live则只统计活对象，因此不加live的堆大小要大于加live堆的大小 ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">λ jmap -histo:live 7924 | more</span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:         65728        8006256  [C</span><br><span class="line">   2:          8084        5736200  [B</span><br><span class="line">   3:         25807        2271016  java.lang.reflect.Method</span><br><span class="line">   4:         65064        1561536  java.lang.String</span><br><span class="line">   5:         46033        1473056  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   6:         11598        1297352  java.lang.Class</span><br><span class="line">   7:         14291         713424  [Ljava.lang.Object;</span><br><span class="line">   8:         19932         637824  java.lang.ref.WeakReference</span><br><span class="line">   9:         15339         613560  java.util.LinkedHashMap<span class="variable">$Entry</span></span><br><span class="line">  10:          9517         532952  java.util.LinkedHashMap</span><br><span class="line">  11:          7114         519968  [Ljava.util.HashMap<span class="variable">$Node</span>;</span><br><span class="line">  12:         10058         482784  org.aspectj.weaver.reflect.ShadowMatchImpl</span><br><span class="line">  13:         13992         447744  java.util.HashMap<span class="variable">$Node</span></span><br><span class="line">  14:           334         399584  [Ljava.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span>;</span><br><span class="line">  15:          4818         361648  [I</span><br><span class="line">  16:         20911         334576  java.lang.Object</span><br><span class="line">  17:         10058         321856  org.aspectj.weaver.patterns.ExposedState</span><br><span class="line">  18:          8037         321480  java.lang.ref.SoftReference</span><br><span class="line">  19:         13026         282824  [Ljava.lang.Class;</span><br><span class="line">  20:          9821         235704  java.beans.MethodRef</span><br><span class="line">  21:          9613         230712  java.util.ArrayList</span><br><span class="line">  22:          7236         196224  [Ljava.lang.String;</span><br><span class="line">  23:          3475         194600  java.beans.MethodDescriptor</span><br><span class="line">  24:          5495         175840  java.util.LinkedList</span><br><span class="line">  25:          7193         172632  org.springframework.core.MethodClassKey</span><br><span class="line">  26:          1420         136320  org.springframework.beans.GenericTypeAwarePropertyDescriptor</span><br><span class="line">  27:          1751         126072  java.beans.PropertyDescriptor</span><br><span class="line">  28:          2933         117320  java.util.WeakHashMap<span class="variable">$Entry</span></span><br><span class="line">  29:          2299         110352  java.util.HashMap</span><br><span class="line">  30:          2553         102120  java.lang.ref.Finalizer</span><br><span class="line">  31:          3966          95184  sun.reflect.generics.tree.SimpleClassTypeSignature</span><br><span class="line">  32:          3781          90744  java.util.LinkedList<span class="variable">$Node</span></span><br><span class="line">  33:          2246          89840  java.util.TreeMap<span class="variable">$Entry</span></span><br><span class="line">  34:           112          88616  [J</span><br><span class="line">  35:          1046          83680  java.lang.reflect.Constructor</span><br><span class="line">  36:          3308          75096  [Ljava.lang.reflect.Type;</span><br><span class="line">  37:          3966          74696  [Lsun.reflect.generics.tree.TypeArgument;</span><br><span class="line">  38:          2135          68320  java.util.Hashtable<span class="variable">$Entry</span></span><br><span class="line">  39:          4202          67232  java.util.LinkedHashSet</span><br><span class="line">-- More  --</span><br></pre></td></tr></table></figure><p>仅仅打印了前10行</p><p>xml class name是对象类型，说明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B byte</span><br><span class="line">C char</span><br><span class="line">D double</span><br><span class="line">F float</span><br><span class="line">I int</span><br><span class="line">J long</span><br><span class="line">Z boolean</span><br><span class="line">[ 数组，如[I 表示int[]</span><br><span class="line">[L+类名 其它对象</span><br></pre></td></tr></table></figure><p><strong>-permstat</strong>（使用jdk8时发现已经换成了-clstats）</p><p>打印Java堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">λ jmap -clstats 7924</span><br><span class="line">Attaching to process ID 7924, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.131-b11</span><br><span class="line">finding class loader instances ..<span class="keyword">done</span>.</span><br><span class="line">computing per loader <span class="built_in">stat</span> ..<span class="keyword">done</span>.</span><br><span class="line">please <span class="built_in">wait</span>.. computing liveness.............................................................liveness analysis may be inaccurate ...</span><br><span class="line">class_loader    classes bytes   parent_loader   alive?  <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">&lt;bootstrap&gt;     2587    4530544   null          live    &lt;internal&gt;</span><br><span class="line">0x0000000082ab0428      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca4b8      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082d43550      0       0       0x00000000818d03c8      live    org/springframework/data/convert/ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator<span class="variable">$ByteArrayClassLoader</span>@0x0000000100666650</span><br><span class="line">0x0000000083151310      9       32078   0x00000000818d03c8      dead    sun/reflect/misc/MethodUtil@0x0000000100639208</span><br><span class="line">0x00000000819f1418      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcaa30      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cf870      1       892       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081e5fbe8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821d2810      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151e18      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x000000008217a418      14      23439     null          live    org/hibernate/boot/registry/classloading/internal/ClassLoaderServiceImpl<span class="variable">$AggregatedClassLoader</span>@0x000000010041de20</span><br><span class="line">0x0000000082a9df38      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082ab05b8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082eda7f8      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083152200      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821fed88      0       0       0x00000000818d03c8      live    java/net/URLClassLoader@0x000000010000ecd0</span><br><span class="line">0x0000000081bca8a0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cf6e0      1       1474    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821d2600      1       1472    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151c88      1       1473    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcae18      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000818d0428      114     264124    null          live    sun/misc/Launcher<span class="variable">$ExtClassLoader</span>@0x000000010000fa48</span><br><span class="line">0x0000000083151a30      1       1473    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082a9e000      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x000000008183d228      0       0       0x00000000818d03c8      live    java/util/ResourceBundle<span class="variable">$RBClassLoader</span>@0x00000001000f4b10</span><br><span class="line">0x0000000081bca710      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083152138      1       881     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000831e52b0      1       889     0x0000000083151310      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcac88      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082a9e190      1       1474    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca580      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000818dafb0      2       4839      null          dead    javax/management/remote/rmi/NoCallStackClassLoader@0x00000001000df370</span><br><span class="line">0x0000000081e5fa58      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821d29a0      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151fa8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000831e5120      1       881     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcaaf8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cf938      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000818d03c8      8438    14146250        0x00000000818d0428      live    sun/misc/Launcher<span class="variable">$AppClassLoader</span>@0x000000010000f6a0</span><br><span class="line">0x00000000818dbcc8      3       2774      null          dead    javax/management/remote/rmi/NoCallStackClassLoader@0x00000001000df370</span><br><span class="line">0x0000000081e5fb20      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821d28d8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151d50      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082ab0360      1       1473    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca3f0      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000819f1350      1       880       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca968      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cf7a8      1       1485    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081e5fcb0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000821d2748      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151bc0      1       1473    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082a9de70      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082ab04f0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcaee0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000831522c8      1       1471    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082a9e0c8      1       1474    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca7d8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cf618      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083152070      1       1474    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcad50      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151af8      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000082a9e258      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bca648      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081e5f990      1       1505      null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151ee0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000831e51e8      1       894       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000081bcabc0      1       880     0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x00000000827cfa00      1       881       null          dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line">0x0000000083151968      1       1473    0x00000000818d03c8      dead    sun/reflect/DelegatingClassLoader@0x0000000100009df8</span><br><span class="line"></span><br><span class="line">total = 70      11227   19067595            N/A         alive=7, dead=63            N/A</span><br></pre></td></tr></table></figure><p><strong>-F</strong></p><p>强制模式。如果指定的pid没有响应，请使用jmap -dump或jmap -histo选项。此模式下，不支持live子选项。</p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>jhat(JVM Heap Analysis Tool)命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP&#x2F;HTML服务器，生成dump的分析结果后，可以在浏览器中查看。在此要注意，一般不会直接在服务器上进行分析，因为jhat是一个耗时并且耗费硬件资源的过程，一般把服务器生成的dump文件复制到本地或其他机器上进行分析。</p><ul><li>命令格式</li></ul><p><code>jhat [dumpfile]</code></p><ul><li><p>参数</p><ul><li>-stack false|true 关闭对象分配调用栈跟踪(tracking object allocation call stack)。 如果分配位置信息在堆转储中不可用. 则必须将此标志设置为 false. 默认值为 true.&gt;</li><li>-refs false|true 关闭对象引用跟踪(tracking of references to objects)。 默认值为 true. 默认情况下, 返回的指针是指向其他特定对象的对象,如反向链接或输入引用(referrers or incoming references), 会统计&#x2F;计算堆中的所有对象。&gt;</li><li>-port port-number 设置 jhat HTTP server 的端口号. 默认值 7000.&gt;</li><li>-exclude exclude-file 指定对象查询时需要排除的数据成员列表文件(a file that lists data members that should be excluded from the reachable objects query)。 例如, 如果文件列列出了 java.lang.String.value , 那么当从某个特定对象 Object o 计算可达的对象列表时, 引用路径涉及 java.lang.String.value 的都会被排除。&gt;</li><li>-baseline exclude-file 指定一个基准堆转储(baseline heap dump)。 在两个 heap dumps 中有相同 object ID 的对象会被标记为不是新的(marked as not being new). 其他对象被标记为新的(new). 在比较两个不同的堆转储时很有用.&gt;</li><li>-debug int 设置 debug 级别. 0 表示不输出调试信息。 值越大则表示输出更详细的 debug 信息.&gt;</li><li>-version 启动后只显示版本信息就退出&gt;</li><li>-J&lt; flag &gt; 因为 jhat 命令实际上会启动一个JVM来执行, 通过 -J 可以在启动JVM时传入一些启动参数. 例如, -J-Xmx512m 则指定运行 jhat 的Java虚拟机使用的最大堆内存为 512 MB. 如果需要使用多个JVM启动参数,则传入多个 -Jxxxxxx.</li></ul></li><li><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">λ jhat -J-Xmx512m dump.hprof</span><br><span class="line">Reading from dump.hprof...</span><br><span class="line">Dump file created Sat Sep 29 16:43:48 CST 2018</span><br><span class="line">Snapshot <span class="built_in">read</span>, resolving...</span><br><span class="line">Resolving 1639269 objects...</span><br><span class="line">Chasing references, expect 327 dots.......................................................................................................................................................................................................................................................................................................................................</span><br><span class="line">Eliminating duplicate references.......................................................................................................................................................................................................................................................................................................................................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure><p>中间的-J-Xmx512m是在dump快照很大的情况下分配512M内存去启动HTTP服务器，运行完之后就可在浏览器打开Http:&#x2F;&#x2F;localhost:7000进行快照分析 堆快照分析主要在最后面的Heap Histogram里，里面根据class列出了dump的时候所有存活对象。</p><p><strong>分析同样一个dump快照，MAT需要的额外内存比jhat要小的多的多，所以建议使用MAT来进行分析，当然也看个人偏好。</strong></p><ul><li>分析</li></ul><p>打开浏览器Http:&#x2F;&#x2F;localhost:7000，该页面提供了几个查询功能可供使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">All classes including platform</span><br><span class="line">Show all members of the rootset</span><br><span class="line">Show instance counts for all classes (including platform)</span><br><span class="line">Show instance counts for all classes (excluding platform)</span><br><span class="line">Show heap histogram</span><br><span class="line">Show finalizer summary</span><br><span class="line">Execute Object Query Language (OQL) query</span><br></pre></td></tr></table></figure><p>一般查看堆异常情况主要看这个两个部分： Show instance counts for all classes (excluding platform)，平台外的所有对象信息。如下图： </p><p><img src="/images/JVM%E8%87%AA%E5%B8%A6%E5%91%BD%E4%BB%A4/instance-counts-excluding-platform.png" alt="instance-counts-excluding-platform"></p><p>Show heap histogram 以树状图形式展示堆情况。如下图： </p><p><img src="/images/JVM%E8%87%AA%E5%B8%A6%E5%91%BD%E4%BB%A4/heap-histogram.png" alt="heap-histogram.png"></p><p>具体排查时需要结合代码，观察是否大量应该被回收的对象在一直被引用或者是否有占用内存特别大的对象无法被回收。</p><p><strong>一般情况，会down到客户端用工具来分析</strong></p><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p>jstack用于生成java虚拟机当前时刻的线程快照。线程快照是当前java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。 线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。另外，jstack工具还可以附属到正在运行的java程序中，看到当时运行的java程序的java stack和native stack的信息, 如果现在运行的java程序呈现hung的状态，jstack是非常有用的。</p><ul><li>命令格式</li></ul><p><code>jstack [option] LVMID</code></p><ul><li><p>option参数</p><ul><li>-F : 当正常输出请求不被响应时，强制输出线程堆栈</li><li>-l : 除堆栈外，显示关于锁的附加信息</li><li>-m : 如果调用到本地方法的话，可以显示C&#x2F;C++的堆栈</li></ul></li><li><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">λ jstack -l 7924 | more</span><br><span class="line">2018-09-29 18:04:49</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.131-b11 mixed mode):</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;XNIO-2 task-32&quot;</span> <span class="comment">#94 prio=5 os_prio=0 tid=0x000000001ea48000 nid=0x710 waiting on condition [0x0000000022a5e000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x0000000083097410&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;XNIO-2 task-31&quot;</span> <span class="comment">#93 prio=5 os_prio=0 tid=0x000000001ea4e800 nid=0x3840 waiting on condition [0x000000002295e000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x0000000083097410&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;XNIO-2 task-30&quot;</span> <span class="comment">#92 prio=5 os_prio=0 tid=0x000000001ea4e000 nid=0x1c54 waiting on condition [0x000000002285f000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x0000000083097410&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</span><br><span class="line">-- More  --</span><br></pre></td></tr></table></figure><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><p>jinfo(JVM Configuration info)这个命令作用是实时查看和调整虚拟机运行参数。 之前的jps -v口令只能查看到显示指定的参数，如果想要查看未被显示指定的参数的值就要使用jinfo口令</p><ul><li>命令格式</li></ul><p><code>jinfo [option] [args] LVMID</code></p><ul><li><p>option参数</p><ul><li>-flag : 输出指定args参数的值</li><li>-flags : 不需要args参数，输出所有JVM参数的值</li><li>-sysprops : 输出系统属性，等同于System.getProperties()</li></ul></li><li><p>示例</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">λ jinfo -flags 7924</span><br><span class="line">Attaching to process ID 7924, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.131-b11</span><br><span class="line">Non-default VM flags: -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:CICompilerCount=3 -XX:InitialHeapSize=134217728 -XX:+ManagementServer -XX:MaxHeapSize=2122317824 -XX:MaxNewSize=707264512 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=44564480 -XX:OldSize=89653248 -XX:TieredStopAtLevel=1 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC</span><br><span class="line">Command line:  -XX:TieredStopAtLevel=1 -Xverify:none -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=58045 -Dcom.sun.management.jmxremote.authenticate=<span class="literal">false</span> -Dcom.sun.management.jmxremote.ssl=<span class="literal">false</span> -Djava.rmi.server.hostname=localhost -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=<span class="literal">true</span> -javaagent:D:\JetBrains\apps\IDEA-U\ch-0\182.4323.46\lib\idea_rt.jar=58046:D:\JetBrains\apps\IDEA-U\ch-0\182.4323.46\bin -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM框架gorm使用手册</title>
      <link href="/2020/02/04/golang/ORM%E6%A1%86%E6%9E%B6gorm%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2020/02/04/golang/ORM%E6%A1%86%E6%9E%B6gorm%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目地址：<a href="https://github.com/jinzhu/gorm">https://github.com/jinzhu/gorm</a></p></blockquote><blockquote><p><a href="https://jasperxu.github.io/gorm-zh/">gorm文档</a></p></blockquote><h2 id="GORM-中文文档"><a href="#GORM-中文文档" class="headerlink" title="GORM 中文文档"></a>GORM 中文文档</h2><p><a href="http://gorm.book.jasperxu.com/">http://gorm.book.jasperxu.com/</a></p><p>Golang写的，开发人员友好的ORM库。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>全功能ORM（几乎）</li><li>关联（包含一个，包含多个，属于，多对多，多种包含）</li><li>Callbacks（创建&#x2F;保存&#x2F;更新&#x2F;删除&#x2F;查找之前&#x2F;之后）</li><li>预加载（急加载）</li><li>事务</li><li>复合主键</li><li>SQL Builder</li><li>自动迁移</li><li>日志</li><li>可扩展，编写基于GORM回调的插件</li><li>每个功能都有测试</li><li>开发人员友好</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/jinzhu/gorm</span><br></pre></td></tr></table></figure><h3 id="升级到V1-0"><a href="#升级到V1-0" class="headerlink" title="升级到V1.0"></a>升级到V1.0</h3><ul><li><a href="https://github.com/jasperxu/gorm-zh/blob/master/changelog.md">更新日志</a></li></ul><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Code <span class="type">string</span></span><br><span class="line">  Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;sqlite3&quot;</span>, <span class="string">&quot;test.db&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;连接数据库失败&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自动迁移模式</span></span><br><span class="line">  db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建</span></span><br><span class="line">  db.Create(&amp;Product&#123;Code: <span class="string">&quot;L1212&quot;</span>, Price: <span class="number">1000</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取</span></span><br><span class="line">  <span class="keyword">var</span> product Product</span><br><span class="line">  db.First(&amp;product, <span class="number">1</span>) <span class="comment">// 查询id为1的product</span></span><br><span class="line">  db.First(&amp;product, <span class="string">&quot;code = ?&quot;</span>, <span class="string">&quot;L1212&quot;</span>) <span class="comment">// 查询code为l1212的product</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新 - 更新product的price为2000</span></span><br><span class="line">  db.Model(&amp;product).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除 - 删除product</span></span><br><span class="line">  db.Delete(&amp;product)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="连接数据库-dbc"><a href="#连接数据库-dbc" class="headerlink" title="连接数据库 {dbc}"></a>连接数据库 {dbc}</h3><p>要连接到数据库首先要导入驱动程序。例如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br></pre></td></tr></table></figure><p>为了方便记住导入路径，GORM包装了一些驱动。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span></span><br><span class="line"><span class="comment">// import _ &quot;github.com/jinzhu/gorm/dialects/mssql&quot;</span></span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>注：为了处理<code>time.Time</code>，您需要包括<code>parseTime</code>作为参数。 （<a href="https://github.com/go-sql-driver/mysql#parameters">更多支持的参数</a>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/jinzhu/gorm/dialects/postgres&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db, err := gorm.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;host=myhost user=gorm dbname=gorm sslmode=disable password=mypassword&quot;</span>)</span><br><span class="line">  <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sqlite3"><a href="#Sqlite3" class="headerlink" title="Sqlite3"></a>Sqlite3</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">    &quot;github.com/jinzhu/gorm&quot;</span><br><span class="line">    _ &quot;github.com/jinzhu/gorm/dialects/sqlite&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  db, err := gorm.Open(&quot;sqlite3&quot;, &quot;/tmp/gorm.db&quot;)</span><br><span class="line">  defer db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不支持的数据库"><a href="#不支持的数据库" class="headerlink" title="不支持的数据库"></a>不支持的数据库</h4><p>GORM正式支持上述的数据库，如果您使用的是不受支持的数据库请按照下面的连接编写对应数据库支持文件。<br><a href="https://github.com/jinzhu/gorm/blob/master/dialect.go">https://github.com/jinzhu/gorm/blob/master/dialect.go</a></p><h3 id="迁移-m"><a href="#迁移-m" class="headerlink" title="迁移 {m}"></a>迁移 {m}</h3><h4 id="自动迁移"><a href="#自动迁移" class="headerlink" title="自动迁移"></a>自动迁移</h4><p>自动迁移模式将保持更新到最新。</p><blockquote><p>自动迁移<strong>仅仅</strong>会创建表，缺少列和索引，并且不会改变现有列的类型或删除未使用的列以保护数据。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;, &amp;Product&#123;&#125;, &amp;Order&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表时添加表后缀</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=InnoDB&quot;</span>).AutoMigrate(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="检查表是否存在"><a href="#检查表是否存在" class="headerlink" title="检查表是否存在"></a>检查表是否存在</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查模型`User`表是否存在</span></span><br><span class="line">db.HasTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查表`users`是否存在</span></span><br><span class="line">db.HasTable(<span class="string">&quot;users&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为模型`User`创建表</span></span><br><span class="line">db.CreateTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建表`users&#x27;时将“ENGINE = InnoDB”附加到SQL语句</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:table_options&quot;</span>, <span class="string">&quot;ENGINE=InnoDB&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除模型`User`的表</span></span><br><span class="line">db.DropTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除表`users`</span></span><br><span class="line">db.DropTable(<span class="string">&quot;users&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除模型`User`的表和表`products`</span></span><br><span class="line">db.DropTableIfExists(&amp;User&#123;&#125;, <span class="string">&quot;products&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h4><p>修改列的类型为给定值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改模型`User`的description列的数据类型为`text`</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).ModifyColumn(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除模型`User`的description列</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).DropColumn(<span class="string">&quot;description&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加主键</span></span><br><span class="line"><span class="comment">// 1st param : 外键字段</span></span><br><span class="line"><span class="comment">// 2nd param : 外键表(字段)</span></span><br><span class="line"><span class="comment">// 3rd param : ONDELETE</span></span><br><span class="line"><span class="comment">// 4th param : ONUPDATE</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).AddForeignKey(<span class="string">&quot;city_id&quot;</span>, <span class="string">&quot;cities(id)&quot;</span>, <span class="string">&quot;RESTRICT&quot;</span>, <span class="string">&quot;RESTRICT&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为`name`列添加索引`idx_user_name`</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).AddIndex(<span class="string">&quot;idx_user_name&quot;</span>, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为`name`, `age`列添加索引`idx_user_name_age`</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).AddIndex(<span class="string">&quot;idx_user_name_age&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加唯一索引</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).AddUniqueIndex(<span class="string">&quot;idx_user_name&quot;</span>, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为多列添加唯一索引</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).AddUniqueIndex(<span class="string">&quot;idx_user_name_age&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).RemoveIndex(<span class="string">&quot;idx_user_name&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="模型定义-md"><a href="#模型定义-md" class="headerlink" title="模型定义 {md}"></a>模型定义 {md}</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Birthday     time.Time</span><br><span class="line">    Age          <span class="type">int</span></span><br><span class="line">    Name         <span class="type">string</span>  <span class="string">`gorm:&quot;size:255&quot;`</span>       <span class="comment">// string默认长度为255, 使用这种tag重设。</span></span><br><span class="line">    Num          <span class="type">int</span>     <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class="comment">// 自增</span></span><br><span class="line"></span><br><span class="line">    CreditCard        CreditCard      <span class="comment">// One-To-One (拥有一个 - CreditCard表的UserID作外键)</span></span><br><span class="line">    Emails            []Email         <span class="comment">// One-To-Many (拥有多个 - Email表的UserID作外键)</span></span><br><span class="line"></span><br><span class="line">    BillingAddress    Address         <span class="comment">// One-To-One (属于 - 本表的BillingAddressID作外键)</span></span><br><span class="line">    BillingAddressID  sql.NullInt64</span><br><span class="line"></span><br><span class="line">    ShippingAddress   Address         <span class="comment">// One-To-One (属于 - 本表的ShippingAddressID作外键)</span></span><br><span class="line">    ShippingAddressID <span class="type">int</span></span><br><span class="line"></span><br><span class="line">    IgnoreMe          <span class="type">int</span> <span class="string">`gorm:&quot;-&quot;`</span>   <span class="comment">// 忽略这个字段</span></span><br><span class="line">    Languages         []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span> <span class="comment">// Many-To-Many , &#x27;user_languages&#x27;是连接表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Email <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="type">int</span></span><br><span class="line">    UserID  <span class="type">int</span>     <span class="string">`gorm:&quot;index&quot;`</span> <span class="comment">// 外键 (属于), tag `index`是为该列创建索引</span></span><br><span class="line">    Email   <span class="type">string</span>  <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;`</span> <span class="comment">// `type`设置sql类型, `unique_index` 为该列设置唯一索引</span></span><br><span class="line">    Subscribed <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID       <span class="type">int</span></span><br><span class="line">    Address1 <span class="type">string</span>         <span class="string">`gorm:&quot;not null;unique&quot;`</span> <span class="comment">// 设置字段为非空并唯一</span></span><br><span class="line">    Address2 <span class="type">string</span>         <span class="string">`gorm:&quot;type:varchar(100);unique&quot;`</span></span><br><span class="line">    Post     sql.NullString <span class="string">`gorm:&quot;not null&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="type">int</span></span><br><span class="line">    Name <span class="type">string</span> <span class="string">`gorm:&quot;index:idx_name_code&quot;`</span> <span class="comment">// 创建索引并命名，如果找到其他相同名称的索引则创建组合索引</span></span><br><span class="line">    Code <span class="type">string</span> <span class="string">`gorm:&quot;index:idx_name_code&quot;`</span> <span class="comment">// `unique_index` also works</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    UserID  <span class="type">uint</span></span><br><span class="line">    Number  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约定-c"><a href="#约定-c" class="headerlink" title="约定 {c}"></a>约定 {c}</h3><h4 id="gorm-Model-结构体"><a href="#gorm-Model-结构体" class="headerlink" title="gorm.Model 结构体"></a><code>gorm.Model</code> 结构体</h4><p>基本模型定义<code>gorm.Model</code>，包括字段<code>ID</code>，<code>CreatedAt</code>，<code>UpdatedAt</code>，<code>DeletedAt</code>，你可以将它嵌入你的模型，或者只写你想要的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本模型的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  DeletedAt *time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加字段 `ID`, `CreatedAt`, `UpdatedAt`, `DeletedAt`</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需要字段 `ID`, `CreatedAt`</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表名是结构体名称的复数形式"><a href="#表名是结构体名称的复数形式" class="headerlink" title="表名是结构体名称的复数形式"></a>表名是结构体名称的复数形式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;&#125; <span class="comment">// 默认表名是`users`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置User的表名为`profiles`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;profiles&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> TableName() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> u.Role == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin_users&quot;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;users&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局禁用表名复数</span></span><br><span class="line">db.SingularTable(<span class="literal">true</span>) <span class="comment">// 如果设置为true,`User`的默认表名为`user`,使用`TableName`设置的表名不受影响</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="更改默认表名"><a href="#更改默认表名" class="headerlink" title="更改默认表名"></a>更改默认表名</h4><p>您可以通过定义<code>DefaultTableNameHandler</code>对默认表名应用任何规则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gorm.DefaultTableNameHandler = <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB, defaultTableName <span class="type">string</span>)</span></span> <span class="type">string</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;prefix_&quot;</span> + defaultTableName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="列名是字段名的蛇形小写"><a href="#列名是字段名的蛇形小写" class="headerlink" title="列名是字段名的蛇形小写"></a>列名是字段名的蛇形小写</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID <span class="type">uint</span>             <span class="comment">// 列名为 `id`</span></span><br><span class="line">  Name <span class="type">string</span>         <span class="comment">// 列名为 `name`</span></span><br><span class="line">  Birthday time.Time  <span class="comment">// 列名为 `birthday`</span></span><br><span class="line">  CreatedAt time.Time <span class="comment">// 列名为 `created_at`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重设列名</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    AnimalId    <span class="type">int64</span>     <span class="string">`gorm:&quot;column:beast_id&quot;`</span>         <span class="comment">// 设置列名为`beast_id`</span></span><br><span class="line">    Birthday    time.Time <span class="string">`gorm:&quot;column:day_of_the_beast&quot;`</span> <span class="comment">// 设置列名为`day_of_the_beast`</span></span><br><span class="line">    Age         <span class="type">int64</span>     <span class="string">`gorm:&quot;column:age_of_the_beast&quot;`</span> <span class="comment">// 设置列名为`age_of_the_beast`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字段ID为主键"><a href="#字段ID为主键" class="headerlink" title="字段ID为主键"></a>字段<code>ID</code>为主键</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID   <span class="type">uint</span>  <span class="comment">// 字段`ID`为默认主键</span></span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用tag`primary_key`用来设置主键</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">  AnimalId <span class="type">int64</span> <span class="string">`gorm:&quot;primary_key&quot;`</span> <span class="comment">// 设置AnimalId为主键</span></span><br><span class="line">  Name     <span class="type">string</span></span><br><span class="line">  Age      <span class="type">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字段CreatedAt用于存储记录的创建时间"><a href="#字段CreatedAt用于存储记录的创建时间" class="headerlink" title="字段CreatedAt用于存储记录的创建时间"></a>字段<code>CreatedAt</code>用于存储记录的创建时间</h4><p>创建具有<code>CreatedAt</code>字段的记录将被设置为当前时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Create(&amp;user) <span class="comment">// 将会设置`CreatedAt`为当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要更改它的值, 你需要使用`Update`</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;CreatedAt&quot;</span>, time.Now())</span><br></pre></td></tr></table></figure><h4 id="字段UpdatedAt用于存储记录的修改时间"><a href="#字段UpdatedAt用于存储记录的修改时间" class="headerlink" title="字段UpdatedAt用于存储记录的修改时间"></a>字段<code>UpdatedAt</code>用于存储记录的修改时间</h4><p>保存具有<code>UpdatedAt</code>字段的记录将被设置为当前时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Save(&amp;user) <span class="comment">// 将会设置`UpdatedAt`为当前时间</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>) <span class="comment">// 将会设置`UpdatedAt`为当前时间</span></span><br></pre></td></tr></table></figure><h4 id="字段DeletedAt用于存储记录的删除时间，如果字段存在"><a href="#字段DeletedAt用于存储记录的删除时间，如果字段存在" class="headerlink" title="字段DeletedAt用于存储记录的删除时间，如果字段存在"></a>字段<code>DeletedAt</code>用于存储记录的删除时间，如果字段存在</h4><p>删除具有<code>DeletedAt</code>字段的记录，它不会冲数据库中删除，但只将字段<code>DeletedAt</code>设置为当前时间，并在查询时无法找到记录，请参阅<a href="http://gorm.book.jasperxu.com/crud.html#sd">软删除</a></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><h4 id="属于-bt"><a href="#属于-bt" class="headerlink" title="属于 {bt}"></a>属于 {bt}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `User`属于`Profile`, `ProfileID`为外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Profile   Profile</span><br><span class="line">  ProfileID <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Related(&amp;profile)</span><br><span class="line"><span class="comment">//// SELECT * FROM profiles WHERE id = 111; // 111是user的外键ProfileID</span></span><br></pre></td></tr></table></figure><p>指定外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Profile      Profile <span class="string">`gorm:&quot;ForeignKey:ProfileRefer&quot;`</span> <span class="comment">// 使用ProfileRefer作为外键</span></span><br><span class="line">    ProfileRefer <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定外键和关联外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Refer <span class="type">string</span></span><br><span class="line">    Name  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Profile   Profile <span class="string">`gorm:&quot;ForeignKey:ProfileID;AssociationForeignKey:Refer&quot;`</span></span><br><span class="line">    ProfileID <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="包含一个-ho"><a href="#包含一个-ho" class="headerlink" title="包含一个 {ho}"></a>包含一个 {ho}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 包含一个 CreditCard, UserID 为外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    CreditCard   CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    UserID   <span class="type">uint</span></span><br><span class="line">    Number   <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> card CreditCard</span><br><span class="line">db.Model(&amp;user).Related(&amp;card, <span class="string">&quot;CreditCard&quot;</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM credit_cards WHERE user_id = 123; // 123 is user&#x27;s primary key</span></span><br><span class="line"><span class="comment">// CreditCard是user的字段名称，这意味着获得user的CreditCard关系并将其填充到变量</span></span><br><span class="line"><span class="comment">// 如果字段名与变量的类型名相同，如上例所示，可以省略，如：</span></span><br><span class="line">db.Model(&amp;user).Related(&amp;card)</span><br></pre></td></tr></table></figure><p>指定外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  UserRefer <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Profile Profile <span class="string">`gorm:&quot;ForeignKey:UserRefer&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定外键和关联外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name   <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Refer   <span class="type">string</span></span><br><span class="line">  Profile Profile <span class="string">`gorm:&quot;ForeignKey:UserID;AssociationForeignKey:Refer&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="包含多个-hm"><a href="#包含多个-hm" class="headerlink" title="包含多个 {hm}"></a>包含多个 {hm}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 包含多个 emails, UserID 为外键</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Emails   []Email</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Email <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Email   <span class="type">string</span></span><br><span class="line">    UserID  <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Related(&amp;emails)</span><br><span class="line"><span class="comment">//// SELECT * FROM emails WHERE user_id = 111; // 111 是 user 的主键</span></span><br></pre></td></tr></table></figure><p>指定外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  UserRefer <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Profiles []Profile <span class="string">`gorm:&quot;ForeignKey:UserRefer&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定外键和关联外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Profile <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name   <span class="type">string</span></span><br><span class="line">  UserID <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Refer   <span class="type">string</span></span><br><span class="line">  Profiles []Profile <span class="string">`gorm:&quot;ForeignKey:UserID;AssociationForeignKey:Refer&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多对多-mtm"><a href="#多对多-mtm" class="headerlink" title="多对多 {mtm}"></a>多对多 {mtm}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 包含并属于多个 languages, 使用 `user_languages` 表连接</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Languages         []Language <span class="string">`gorm:&quot;many2many:user_languages;&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Related(&amp;languages, <span class="string">&quot;Languages&quot;</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM &quot;languages&quot; INNER JOIN &quot;user_languages&quot; ON &quot;user_languages&quot;.&quot;language_id&quot; = &quot;languages&quot;.&quot;id&quot; WHERE &quot;user_languages&quot;.&quot;user_id&quot; = 111</span></span><br></pre></td></tr></table></figure><p>指定外键和关联外键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomizePerson <span class="keyword">struct</span> &#123;</span><br><span class="line">  IdPerson <span class="type">string</span>             <span class="string">`gorm:&quot;primary_key:true&quot;`</span></span><br><span class="line">  Accounts []CustomizeAccount <span class="string">`gorm:&quot;many2many:PersonAccount;ForeignKey:IdPerson;AssociationForeignKey:IdAccount&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CustomizeAccount <span class="keyword">struct</span> &#123;</span><br><span class="line">  IdAccount <span class="type">string</span> <span class="string">`gorm:&quot;primary_key:true&quot;`</span></span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译者注：这里设置好像缺失一部分</p><h4 id="多种包含-p"><a href="#多种包含-p" class="headerlink" title="多种包含 {p}"></a>多种包含 {p}</h4><p>支持多种的包含一个和包含多个的关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="type">int</span></span><br><span class="line">    Name  <span class="type">string</span></span><br><span class="line">    Toy   Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id   <span class="type">int</span></span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Toy  Toy <span class="string">`gorm:&quot;polymorphic:Owner;&quot;`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> Toy <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id        <span class="type">int</span></span><br><span class="line">    Name      <span class="type">string</span></span><br><span class="line">    OwnerId   <span class="type">int</span></span><br><span class="line">    OwnerType <span class="type">string</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意：多态属性和多对多显式不支持，并且会抛出错误。</p><h4 id="关联模式-am"><a href="#关联模式-am" class="headerlink" title="关联模式 {am}"></a>关联模式 {am}</h4><p>关联模式包含一些帮助方法来处理关系事情很容易。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始关联模式</span></span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>)</span><br><span class="line"><span class="comment">// `user`是源，它需要是一个有效的记录（包含主键）</span></span><br><span class="line"><span class="comment">// `Languages`是关系中源的字段名。</span></span><br><span class="line"><span class="comment">// 如果这些条件不匹配，将返回一个错误，检查它：</span></span><br><span class="line"><span class="comment">// db.Model(&amp;user).Association(&quot;Languages&quot;).Error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Query - 查找所有相关关联</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Find(&amp;languages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Append - 添加新的many2many, has_many关联, 会替换掉当前 has_one, belongs_to关联</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Append(Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete - 删除源和传递的参数之间的关系，不会删除这些参数</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Delete(languageZH, languageEN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace - 使用新的关联替换当前关联</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace([]Language&#123;languageZH, languageEN&#125;)</span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Replace(Language&#123;Name: <span class="string">&quot;DE&quot;</span>&#125;, languageEN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Count - 返回当前关联的计数</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Clear - 删除源和当前关联之间的关系，不会删除这些关联</span></span><br><span class="line">db.Model(&amp;user).Association(<span class="string">&quot;Languages&quot;</span>).Clear()</span><br></pre></td></tr></table></figure><h2 id="CRUD-读写数据"><a href="#CRUD-读写数据" class="headerlink" title="CRUD:读写数据"></a>CRUD:读写数据</h2><!-- toc --><h3 id="创建-c"><a href="#创建-c" class="headerlink" title="创建 {c}"></a>创建 {c}</h3><h4 id="创建记录"><a href="#创建记录" class="headerlink" title="创建记录"></a>创建记录</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;</span><br><span class="line"></span><br><span class="line">db.NewRecord(user) <span class="comment">// =&gt; 主键为空返回`true`</span></span><br><span class="line"></span><br><span class="line">db.Create(&amp;user)</span><br><span class="line"></span><br><span class="line">db.NewRecord(user) <span class="comment">// =&gt; 创建`user`后返回`false`</span></span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>您可以在gorm tag中定义默认值，然后插入SQL将忽略具有默认值的这些字段，并且其值为空，并且在将记录插入数据库后，gorm将从数据库加载这些字段的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="type">int64</span></span><br><span class="line">    Name <span class="type">string</span> <span class="string">`gorm:&quot;default:&#x27;galeone&#x27;&quot;`</span></span><br><span class="line">    Age  <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal = Animal&#123;Age: <span class="number">99</span>, Name: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">db.Create(&amp;animal)</span><br><span class="line"><span class="comment">// INSERT INTO animals(&quot;age&quot;) values(&#x27;99&#x27;);</span></span><br><span class="line"><span class="comment">// SELECT name from animals WHERE ID=111; // 返回主键为 111</span></span><br><span class="line"><span class="comment">// animal.Name =&gt; &#x27;galeone&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="在Callbacks中设置主键"><a href="#在Callbacks中设置主键" class="headerlink" title="在Callbacks中设置主键"></a>在Callbacks中设置主键</h4><p>如果要在BeforeCreate回调中设置主字段的值，可以使用scope.SetColumn，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span></span> BeforeCreate(scope *gorm.Scope) <span class="type">error</span> &#123;</span><br><span class="line">  scope.SetColumn(<span class="string">&quot;ID&quot;</span>, uuid.New())</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展创建选项"><a href="#扩展创建选项" class="headerlink" title="扩展创建选项"></a>扩展创建选项</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为Instert语句添加扩展SQL选项</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:insert_option&quot;</span>, <span class="string">&quot;ON CONFLICT&quot;</span>).Create(&amp;product)</span><br><span class="line"><span class="comment">// INSERT INTO products (name, code) VALUES (&quot;name&quot;, &quot;code&quot;) ON CONFLICT;</span></span><br></pre></td></tr></table></figure><h3 id="查询-q"><a href="#查询-q" class="headerlink" title="查询 {q}"></a>查询 {q}</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条记录，按主键排序</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一条记录，按主键排序</span></span><br><span class="line">db.Last(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有记录</span></span><br><span class="line">db.Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用主键获取记录</span></span><br><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id = 10;</span></span><br></pre></td></tr></table></figure><h4 id="Where查询条件-简单SQL"><a href="#Where查询条件-简单SQL" class="headerlink" title="Where查询条件 (简单SQL)"></a>Where查询条件 (简单SQL)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个匹配记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; limit 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有匹配记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name &lt;&gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line">db.Where(<span class="string">&quot;name in (?)&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LIKE</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AND</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time</span></span><br><span class="line">db.Where(<span class="string">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br></pre></td></tr></table></figure><h4 id="Where查询条件-Struct-amp-Map"><a href="#Where查询条件-Struct-amp-Map" class="headerlink" title="Where查询条件 (Struct &amp; Map)"></a>Where查询条件 (Struct &amp; Map)</h4><p>注意：当使用struct查询时，GORM将只查询那些具有值的字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">20</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键的Slice</span></span><br><span class="line">db.Where([]<span class="type">int64</span>&#123;<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure><h4 id="Not条件查询"><a href="#Not条件查询" class="headerlink" title="Not条件查询"></a>Not条件查询</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">db.Not(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In</span></span><br><span class="line">db.Not(<span class="string">&quot;name&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In slice of primary keys</span></span><br><span class="line">db.Not([]<span class="type">int64</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id NOT IN (1,2,3);</span></span><br><span class="line"></span><br><span class="line">db.Not([]<span class="type">int64</span>&#123;&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Plain SQL</span></span><br><span class="line">db.Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE NOT(name = &quot;jinzhu&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Not(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure><h4 id="带内联条件的查询"><a href="#带内联条件的查询" class="headerlink" title="带内联条件的查询"></a>带内联条件的查询</h4><p>注意：使用主键查询时，应仔细检查所传递的值是否为有效主键，以避免SQL注入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按主键获取</span></span><br><span class="line">db.First(&amp;user, <span class="number">23</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id = 23 LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单SQL</span></span><br><span class="line">db.Find(&amp;user, <span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Find(&amp;users, <span class="string">&quot;name &lt;&gt; ? AND age &gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; AND age &gt; 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Find(&amp;users, User&#123;Age: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Find(&amp;users, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20;</span></span><br></pre></td></tr></table></figure><h4 id="Or条件查询"><a href="#Or条件查询" class="headerlink" title="Or条件查询"></a>Or条件查询</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Or(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;super_admin&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE role = &#x27;admin&#x27; OR role = &#x27;super_admin&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(User&#123;Name: <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="string">&quot;name = &#x27;jinzhu&#x27;&quot;</span>).Or(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br></pre></td></tr></table></figure><h4 id="查询链"><a href="#查询链" class="headerlink" title="查询链"></a>查询链</h4><p>Gorm有一个可链接的API，你可以这样使用它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name &lt;&gt; ?&quot;</span>,<span class="string">&quot;jinzhu&quot;</span>).Where(<span class="string">&quot;age &gt;= ? and role &lt;&gt; ?&quot;</span>,<span class="number">20</span>,<span class="string">&quot;admin&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &#x27;jinzhu&#x27; AND age &gt;= 20 AND role &lt;&gt; &#x27;admin&#x27;;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;admin&quot;</span>).Or(<span class="string">&quot;role = ?&quot;</span>, <span class="string">&quot;super_admin&quot;</span>).Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure><h4 id="扩展查询选项"><a href="#扩展查询选项" class="headerlink" title="扩展查询选项"></a>扩展查询选项</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为Select语句添加扩展SQL选项</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:query_option&quot;</span>, <span class="string">&quot;FOR UPDATE&quot;</span>).First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id = 10 FOR UPDATE;</span></span><br></pre></td></tr></table></figure><h4 id="FirstOrInit"><a href="#FirstOrInit" class="headerlink" title="FirstOrInit"></a>FirstOrInit</h4><p>获取第一个匹配的记录，或者使用给定的条件初始化一个新的记录（仅适用于struct，map条件）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.FirstOrInit(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;, Age: 20&#125;</span></span><br><span class="line">db.FirstOrInit(&amp;user, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Attrs"><a href="#Attrs" class="headerlink" title="Attrs"></a>Attrs</h4><p>如果未找到记录，则使用参数初始化结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM USERS WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">30</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM USERS WHERE name = jinzhu&#x27;;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Assign"><a href="#Assign" class="headerlink" title="Assign"></a>Assign</h4><p>将参数分配给结果，不管它是否被找到</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">30</span>&#125;).FirstOrInit(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM USERS WHERE name = jinzhu&#x27;;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;, Age: 30&#125;</span></span><br></pre></td></tr></table></figure><h4 id="FirstOrCreate"><a href="#FirstOrCreate" class="headerlink" title="FirstOrCreate"></a>FirstOrCreate</h4><p>获取第一个匹配的记录，或创建一个具有给定条件的新记录（仅适用于struct, map条件）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.FirstOrCreate(&amp;user, User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//// INSERT INTO &quot;users&quot; (name) VALUES (&quot;non_existing&quot;);</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;Jinzhu&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Attrs-1"><a href="#Attrs-1" class="headerlink" title="Attrs"></a>Attrs</h4><p>如果未找到记录，则为参数分配结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Attrs(User&#123;Age: <span class="number">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Assign-1"><a href="#Assign-1" class="headerlink" title="Assign"></a>Assign</h4><p>将其分配给记录，而不管它是否被找到，并保存回数据库。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unfound</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">20</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;non_existing&#x27;;</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found</span></span><br><span class="line">db.Where(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="number">30</span>&#125;).FirstOrCreate(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class="line"><span class="comment">//// UPDATE users SET age=30 WHERE id = 111;</span></span><br><span class="line"><span class="comment">//// user -&gt; User&#123;Id: 111, Name: &quot;jinzhu&quot;, Age: 30&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><p>指定要从数据库检索的字段，默认情况下，将选择所有字段;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;name, age&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Select([]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT name, age FROM users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;COALESCE(age,?)&quot;</span>, <span class="number">42</span>).Rows()</span><br><span class="line"><span class="comment">//// SELECT COALESCE(age,&#x27;42&#x27;) FROM users;</span></span><br></pre></td></tr></table></figure><h4 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h4><p>在从数据库检索记录时指定顺序，将重排序设置为<code>true</code>以覆盖定义的条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Order(<span class="string">&quot;age desc, name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiple orders</span></span><br><span class="line">db.Order(<span class="string">&quot;age desc&quot;</span>).Order(<span class="string">&quot;name&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc, name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ReOrder</span></span><br><span class="line">db.Order(<span class="string">&quot;age desc&quot;</span>).Find(&amp;users1).Order(<span class="string">&quot;age&quot;</span>, <span class="literal">true</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age desc; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY age; (users2)</span></span><br></pre></td></tr></table></figure><h4 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h4><p>指定要检索的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.Limit(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel limit condition with -1</span></span><br><span class="line">db.Limit(<span class="number">10</span>).Find(&amp;users1).Limit(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure><h4 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h4><p>指定在开始返回记录之前要跳过的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.Offset(<span class="number">3</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users OFFSET 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel offset condition with -1</span></span><br><span class="line">db.Offset(<span class="number">10</span>).Find(&amp;users1).Offset(<span class="number">-1</span>).Find(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure><h4 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h4><p>获取模型的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Or(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>).Find(&amp;users).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT * from USERS WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (users)</span></span><br><span class="line"><span class="comment">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT count(*) FROM deleted_users;</span></span><br></pre></td></tr></table></figure><h4 id="Group-amp-Having"><a href="#Group-amp-Having" class="headerlink" title="Group &amp; Having"></a>Group &amp; Having</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Date  time.Time</span><br><span class="line">    Total <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure><h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p>指定连接条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个连接与参数</span></span><br><span class="line">db.Joins(<span class="string">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class="string">&quot;jinzhu@example.org&quot;</span>).Joins(<span class="string">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class="string">&quot;credit_cards.number = ?&quot;</span>, <span class="string">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure><h4 id="Pluck"><a href="#Pluck" class="headerlink" title="Pluck"></a>Pluck</h4><p>将模型中的单个列作为地图查询，如果要查询多个列，可以使用<a href="#Scan">Scan</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ages []<span class="type">int64</span></span><br><span class="line">db.Find(&amp;users).Pluck(<span class="string">&quot;age&quot;</span>, &amp;ages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names []<span class="type">string</span></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Pluck(<span class="string">&quot;name&quot;</span>, &amp;names)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要返回多个列，做这样：</span></span><br><span class="line">db.Select(<span class="string">&quot;name, age&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure><h4 id="Scan-Scan"><a href="#Scan-Scan" class="headerlink" title="Scan {Scan}"></a>Scan {Scan}</h4><p>将结果扫描到另一个结构中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;name, age&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">db.Raw(<span class="string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure><h4 id="Scopes-Scopes"><a href="#Scopes-Scopes" class="headerlink" title="Scopes {Scopes}"></a>Scopes {Scopes}</h4><p>将当前数据库连接传递到<code>func(*DB) *DB</code>，可以用于动态添加条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AmountGreaterThan1000</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;amount &gt; ?&quot;</span>, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCreditCard</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PaidWithCod</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Where(<span class="string">&quot;pay_mode_sign = ?&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OrderStatus</span><span class="params">(status []<span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span> <span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">        <span class="keyword">return</span> db.Scopes(AmountGreaterThan1000).Where(<span class="string">&quot;status in (?)&quot;</span>, status)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有信用卡订单和金额大于1000</span></span><br><span class="line"></span><br><span class="line">db.Scopes(AmountGreaterThan1000, PaidWithCod).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有COD订单和金额大于1000</span></span><br><span class="line"></span><br><span class="line">db.Scopes(OrderStatus([]<span class="type">string</span>&#123;<span class="string">&quot;paid&quot;</span>, <span class="string">&quot;shipped&quot;</span>&#125;)).Find(&amp;orders)</span><br><span class="line"><span class="comment">// 查找所有付费，发货订单</span></span><br></pre></td></tr></table></figure><h4 id="指定表名"><a href="#指定表名" class="headerlink" title="指定表名"></a>指定表名</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用User结构定义创建`deleted_users`表</span></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).CreateTable(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deleted_users []User</span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Find(&amp;deleted_users)</span><br><span class="line"><span class="comment">//// SELECT * FROM deleted_users;</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Delete()</span><br><span class="line"><span class="comment">//// DELETE FROM deleted_users WHERE name = &#x27;jinzhu&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="预加载-p"><a href="#预加载-p" class="headerlink" title="预加载 {p}"></a>预加载 {p}</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM orders WHERE user_id IN (1,2,3,4);</span></span><br><span class="line"></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state NOT IN (?)&quot;</span>, <span class="string">&quot;cancelled&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM orders WHERE user_id IN (1,2,3,4) AND state NOT IN (&#x27;cancelled&#x27;);</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;state = ?&quot;</span>, <span class="string">&quot;active&quot;</span>).Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state NOT IN (?)&quot;</span>, <span class="string">&quot;cancelled&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE state = &#x27;active&#x27;;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM orders WHERE user_id IN (1,2) AND state NOT IN (&#x27;cancelled&#x27;);</span></span><br><span class="line"></span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>).Preload(<span class="string">&quot;Profile&quot;</span>).Preload(<span class="string">&quot;Role&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM orders WHERE user_id IN (1,2,3,4); // has many</span></span><br><span class="line"><span class="comment">//// SELECT * FROM profiles WHERE user_id IN (1,2,3,4); // has one</span></span><br><span class="line"><span class="comment">//// SELECT * FROM roles WHERE id IN (4,5,6); // belongs to</span></span><br></pre></td></tr></table></figure><h4 id="自定义预加载SQL"><a href="#自定义预加载SQL" class="headerlink" title="自定义预加载SQL"></a>自定义预加载SQL</h4><p>您可以通过传递<code>func(db *gorm.DB) *gorm.DB</code>（与<a href="#Scopes">Scopes</a>的使用方法相同）来自定义预加载SQL，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(db *gorm.DB)</span></span> *gorm.DB &#123;</span><br><span class="line">    <span class="keyword">return</span> db.Order(<span class="string">&quot;orders.amount DESC&quot;</span>)</span><br><span class="line">&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"><span class="comment">//// SELECT * FROM orders WHERE user_id IN (1,2,3,4) order by orders.amount DESC;</span></span><br></pre></td></tr></table></figure><h4 id="嵌套预加载"><a href="#嵌套预加载" class="headerlink" title="嵌套预加载"></a>嵌套预加载</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Preload(<span class="string">&quot;Orders.OrderItems&quot;</span>).Find(&amp;users)</span><br><span class="line">db.Preload(<span class="string">&quot;Orders&quot;</span>, <span class="string">&quot;state = ?&quot;</span>, <span class="string">&quot;paid&quot;</span>).Preload(<span class="string">&quot;Orders.OrderItems&quot;</span>).Find(&amp;users)</span><br></pre></td></tr></table></figure><h3 id="更新-u"><a href="#更新-u" class="headerlink" title="更新 {u}"></a>更新 {u}</h3><h4 id="更新全部字段"><a href="#更新全部字段" class="headerlink" title="更新全部字段"></a>更新全部字段</h4><p><code>Save</code>将包括执行更新SQL时的所有字段，即使它没有更改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.First(&amp;user)</span><br><span class="line"></span><br><span class="line">user.Name = <span class="string">&quot;jinzhu 2&quot;</span></span><br><span class="line">user.Age = <span class="number">100</span></span><br><span class="line">db.Save(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;jinzhu 2&#x27;, age=100, birthday=&#x27;2016-01-01&#x27;, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure><h4 id="更新更改字段"><a href="#更新更改字段" class="headerlink" title="更新更改字段"></a>更新更改字段</h4><p>如果只想更新更改的字段，可以使用<code>Update</code>, <code>Updates</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个属性（如果更改）</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用组合条件更新单个属性</span></span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111 AND active=true;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`map`更新多个属性，只会更新这些更改的字段</span></span><br><span class="line">db.Model(&amp;user).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, actived=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`struct`更新多个属性，只会更新这些更改的和非空白字段</span></span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 警告:当使用struct更新时，FORM将仅更新具有非空值的字段</span></span><br><span class="line"><span class="comment">// 对于下面的更新，什么都不会更新为&quot;&quot;，0，false是其类型的空白值</span></span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;&quot;</span>, Age: <span class="number">0</span>, Actived: <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="更新选择的字段"><a href="#更新选择的字段" class="headerlink" title="更新选择的字段"></a>更新选择的字段</h4><p>如果您只想在更新时更新或忽略某些字段，可以使用<code>Select</code>, <code>Omit</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Omit(<span class="string">&quot;name&quot;</span>).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET age=18, actived=false, updated_at=&#x27;2013-11-17 21:34:10&#x27; WHERE id=111;</span></span><br></pre></td></tr></table></figure><h4 id="更新更改字段但不进行Callbacks"><a href="#更新更改字段但不进行Callbacks" class="headerlink" title="更新更改字段但不进行Callbacks"></a>更新更改字段但不进行Callbacks</h4><p>以上更新操作将执行模型的<code>BeforeUpdate</code>, <code>AfterUpdate</code>方法，更新其<code>UpdatedAt</code>时间戳，在更新时保存它的<code>Associations </code>，如果不想调用它们，可以使用<code>UpdateColumn</code>, <code>UpdateColumns</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个属性，类似于`Update`</span></span><br><span class="line">db.Model(&amp;user).UpdateColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新多个属性，与“更新”类似</span></span><br><span class="line">db.Model(&amp;user).UpdateColumns(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id = 111;</span></span><br></pre></td></tr></table></figure><h4 id="Batch-Updates-批量更新"><a href="#Batch-Updates-批量更新" class="headerlink" title="Batch Updates 批量更新"></a>Batch Updates 批量更新</h4><p><code>Callbacks</code>在批量更新时不会运行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;id IN (?)&quot;</span>, []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">11</span>&#125;).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18 WHERE id IN (10, 11);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用struct更新仅适用于非零值，或使用map[string]interface&#123;&#125;</span></span><br><span class="line">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET name=&#x27;hello&#x27;, age=18;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用`RowsAffected`获取更新记录计数</span></span><br><span class="line">db.Model(User&#123;&#125;).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: <span class="number">18</span>&#125;).RowsAffected</span><br></pre></td></tr></table></figure><h4 id="使用SQL表达式更新"><a href="#使用SQL表达式更新" class="headerlink" title="使用SQL表达式更新"></a>使用SQL表达式更新</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB.Model(&amp;product).Update(<span class="string">&quot;price&quot;</span>, gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line"><span class="comment">//// UPDATE &quot;products&quot; SET &quot;price&quot; = price * &#x27;2&#x27; + &#x27;100&#x27;, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = &#x27;2&#x27;;</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;price&quot;</span>: gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>)&#125;)</span><br><span class="line"><span class="comment">//// UPDATE &quot;products&quot; SET &quot;price&quot; = price * &#x27;2&#x27; + &#x27;100&#x27;, &quot;updated_at&quot; = &#x27;2013-11-17 21:34:10&#x27; WHERE &quot;id&quot; = &#x27;2&#x27;;</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = &#x27;2&#x27;;</span></span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Where(<span class="string">&quot;quantity &gt; 1&quot;</span>).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//// UPDATE &quot;products&quot; SET &quot;quantity&quot; = quantity - 1 WHERE &quot;id&quot; = &#x27;2&#x27; AND quantity &gt; 1;</span></span><br></pre></td></tr></table></figure><h4 id="在Callbacks中更改更新值"><a href="#在Callbacks中更改更新值" class="headerlink" title="在Callbacks中更改更新值"></a>在Callbacks中更改更新值</h4><p>如果要使用<code>BeforeUpdate</code>, <code>BeforeSave</code>更改回调中的更新值，可以使用<code>scope.SetColumn</code>，例如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span></span> BeforeSave(scope *gorm.Scope) (err <span class="type">error</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class="number">0</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    scope.SetColumn(<span class="string">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="额外更新选项"><a href="#额外更新选项" class="headerlink" title="额外更新选项"></a>额外更新选项</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为Update语句添加额外的SQL选项</span></span><br><span class="line">db.Model(&amp;user).Set(<span class="string">&quot;gorm:update_option&quot;</span>, <span class="string">&quot;OPTION (OPTIMIZE FOR UNKNOWN)&quot;</span>).Update(<span class="string">&quot;name, &quot;</span>hello<span class="string">&quot;)</span></span><br><span class="line"><span class="string">//// UPDATE users SET name=&#x27;hello&#x27;, updated_at = &#x27;2013-11-17 21:34:10&#x27; WHERE id=111 OPTION (OPTIMIZE FOR UNKNOWN);</span></span><br></pre></td></tr></table></figure><h3 id="删除-x2F-软删除-d"><a href="#删除-x2F-软删除-d" class="headerlink" title="删除&#x2F;软删除 {d}"></a>删除&#x2F;软删除 {d}</h3><p><strong>警告</strong> 删除记录时，需要确保其主要字段具有值，GORM将使用主键删除记录，如果主要字段为空，GORM将删除模型的所有记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除存在的记录</span></span><br><span class="line">db.Delete(&amp;email)</span><br><span class="line"><span class="comment">//// DELETE from emails where id=10;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Delete语句添加额外的SQL选项</span></span><br><span class="line">db.Set(<span class="string">&quot;gorm:delete_option&quot;</span>, <span class="string">&quot;OPTION (OPTIMIZE FOR UNKNOWN)&quot;</span>).Delete(&amp;email)</span><br><span class="line"><span class="comment">//// DELETE from emails where id=10 OPTION (OPTIMIZE FOR UNKNOWN);</span></span><br></pre></td></tr></table></figure><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p>删除所有匹配记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>).Delete(Email&#123;&#125;)</span><br><span class="line"><span class="comment">//// DELETE from emails where email LIKE &quot;%jinhu%&quot;;</span></span><br><span class="line"></span><br><span class="line">db.Delete(Email&#123;&#125;, <span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>)</span><br><span class="line"><span class="comment">//// DELETE from emails where email LIKE &quot;%jinhu%&quot;;</span></span><br></pre></td></tr></table></figure><h4 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h4><p>如果模型有<code>DeletedAt</code>字段，它将自动获得软删除功能！ 那么在调用<code>Delete</code>时不会从数据库中永久删除，而是只将字段<code>DeletedAt</code>的值设置为当前时间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">db.Delete(&amp;user)</span><br><span class="line"><span class="comment">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">db.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">20</span>).Delete(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 软删除的记录将在查询时被忽略</span></span><br><span class="line">db.Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Unscoped查找软删除的记录</span></span><br><span class="line">db.Unscoped().Where(<span class="string">&quot;age = 20&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Unscoped永久删除记录</span></span><br><span class="line">db.Unscoped().Delete(&amp;order)</span><br><span class="line"><span class="comment">//// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure><h3 id="关联-a"><a href="#关联-a" class="headerlink" title="关联 {a}"></a>关联 {a}</h3><p>默认情况下，当创建&#x2F;更新记录时，GORM将保存其关联，如果关联具有主键，GORM将调用Update来保存它，否则将被创建。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;</span><br><span class="line">    Name:            <span class="string">&quot;jinzhu&quot;</span>,</span><br><span class="line">    BillingAddress:  Address&#123;Address1: <span class="string">&quot;Billing Address - Address 1&quot;</span>&#125;,</span><br><span class="line">    ShippingAddress: Address&#123;Address1: <span class="string">&quot;Shipping Address - Address 1&quot;</span>&#125;,</span><br><span class="line">    Emails:          []Email&#123;</span><br><span class="line">                                        &#123;Email: <span class="string">&quot;jinzhu@example.com&quot;</span>&#125;,</span><br><span class="line">                                        &#123;Email: <span class="string">&quot;jinzhu-2@example@example.com&quot;</span>&#125;,</span><br><span class="line">                   &#125;,</span><br><span class="line">    Languages:       []Language&#123;</span><br><span class="line">                     &#123;Name: <span class="string">&quot;ZH&quot;</span>&#125;,</span><br><span class="line">                     &#123;Name: <span class="string">&quot;EN&quot;</span>&#125;,</span><br><span class="line">                   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Create(&amp;user)</span><br><span class="line"><span class="comment">//// BEGIN TRANSACTION;</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Billing Address - Address 1&quot;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;addresses&quot; (address1) VALUES (&quot;Shipping Address - Address 1&quot;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;users&quot; (name,billing_address_id,shipping_address_id) VALUES (&quot;jinzhu&quot;, 1, 2);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu@example.com&quot;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;emails&quot; (user_id,email) VALUES (111, &quot;jinzhu-2@example.com&quot;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;languages&quot; (&quot;name&quot;) VALUES (&#x27;ZH&#x27;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO user_languages (&quot;user_id&quot;,&quot;language_id&quot;) VALUES (111, 1);</span></span><br><span class="line"><span class="comment">//// INSERT INTO &quot;languages&quot; (&quot;name&quot;) VALUES (&#x27;EN&#x27;);</span></span><br><span class="line"><span class="comment">//// INSERT INTO user_languages (&quot;user_id&quot;,&quot;language_id&quot;) VALUES (111, 2);</span></span><br><span class="line"><span class="comment">//// COMMIT;</span></span><br><span class="line"></span><br><span class="line">db.Save(&amp;user)</span><br></pre></td></tr></table></figure><p>参考<a href="https://github.com/jasperxu/gorm-zh/blob/master/associations.md">Associations</a>更多详细信息</p><h4 id="创建-x2F-更新时跳过保存关联"><a href="#创建-x2F-更新时跳过保存关联" class="headerlink" title="创建&#x2F;更新时跳过保存关联"></a>创建&#x2F;更新时跳过保存关联</h4><p>默认情况下保存记录时，GORM也会保存它的关联，你可以通过设置<code>gorm:save_associations</code>为<code>false</code>跳过它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.Set(<span class="string">&quot;gorm:save_associations&quot;</span>, <span class="literal">false</span>).Create(&amp;user)</span><br><span class="line"></span><br><span class="line">db.Set(<span class="string">&quot;gorm:save_associations&quot;</span>, <span class="literal">false</span>).Save(&amp;user)</span><br></pre></td></tr></table></figure><h4 id="tag设置跳过保存关联"><a href="#tag设置跳过保存关联" class="headerlink" title="tag设置跳过保存关联"></a>tag设置跳过保存关联</h4><p>您可以使用tag来配置您的struct，以便在创建&#x2F;更新时不会保存关联</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name      <span class="type">string</span></span><br><span class="line">  CompanyID <span class="type">uint</span></span><br><span class="line">  Company   Company <span class="string">`gorm:&quot;save_associations:false&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h2><p>您可以将回调方法定义为模型结构的指针，在创建，更新，查询，删除时将被调用，如果任何回调返回错误，gorm将停止未来操作并回滚所有更改。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>创建过程中可用的回调</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// begin transaction 开始事务</span></span><br><span class="line">BeforeSave</span><br><span class="line">BeforeCreate</span><br><span class="line"><span class="comment">// save before associations 保存前关联</span></span><br><span class="line"><span class="comment">// update timestamp `CreatedAt`, `UpdatedAt` 更新`CreatedAt`, `UpdatedAt`时间戳</span></span><br><span class="line"><span class="comment">// save self 保存自己</span></span><br><span class="line"><span class="comment">// reload fields that have default value and its value is blank 重新加载具有默认值且其值为空的字段</span></span><br><span class="line"><span class="comment">// save after associations 保存后关联</span></span><br><span class="line">AfterCreate</span><br><span class="line">AfterSave</span><br><span class="line"><span class="comment">// commit or rollback transaction 提交或回滚事务</span></span><br></pre></td></tr></table></figure><h3 id="更新对象"><a href="#更新对象" class="headerlink" title="更新对象"></a>更新对象</h3><p>更新过程中可用的回调</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// begin transaction 开始事务</span></span><br><span class="line">BeforeSave</span><br><span class="line">BeforeUpdate</span><br><span class="line"><span class="comment">// save before associations 保存前关联</span></span><br><span class="line"><span class="comment">// update timestamp `UpdatedAt` 更新`UpdatedAt`时间戳</span></span><br><span class="line"><span class="comment">// save self 保存自己</span></span><br><span class="line"><span class="comment">// save after associations 保存后关联</span></span><br><span class="line">AfterUpdate</span><br><span class="line">AfterSave</span><br><span class="line"><span class="comment">// commit or rollback transaction 提交或回滚事务</span></span><br></pre></td></tr></table></figure><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>删除过程中可用的回调</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// begin transaction 开始事务</span></span><br><span class="line">BeforeDelete</span><br><span class="line"><span class="comment">// delete self 删除自己</span></span><br><span class="line">AfterDelete</span><br><span class="line"><span class="comment">// commit or rollback transaction 提交或回滚事务</span></span><br></pre></td></tr></table></figure><h3 id="查询对象-querying-an-object"><a href="#查询对象-querying-an-object" class="headerlink" title="查询对象 {querying-an-object}"></a>查询对象 {querying-an-object}</h3><p>查询过程中可用的回调</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load data from database 从数据库加载数据</span></span><br><span class="line"><span class="comment">// Preloading (edger loading) 预加载（加载）</span></span><br><span class="line">AfterFind</span><br></pre></td></tr></table></figure><h3 id="回调示例"><a href="#回调示例" class="headerlink" title="回调示例"></a>回调示例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> BeforeUpdate() (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> u.readonly() &#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;read only user&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户ID大于1000，则回滚插入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> AfterCreate() (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.Id &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        err = errors.New(<span class="string">&quot;user id is already greater than 1000&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gorm中的保存&#x2F;删除操作正在事务中运行，因此在该事务中所做的更改不可见，除非提交。 如果要在回调中使用这些更改，则需要在同一事务中运行SQL。 所以你需要传递当前事务到回调，像这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> AfterCreate(tx *gorm.DB) (err <span class="type">error</span>) &#123;</span><br><span class="line">    tx.Model(u).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> AfterCreate(scope *gorm.Scope) (err <span class="type">error</span>) &#123;</span><br><span class="line">  scope.DB().Model(u).Update(<span class="string">&quot;role&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="错误处理-eh"><a href="#错误处理-eh" class="headerlink" title="错误处理 {eh}"></a>错误处理 {eh}</h3><p>执行任何操作后，如果发生任何错误，GORM将其设置为<code>*DB</code>的<code>Error</code>字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有多个错误发生，用`GetErrors`获取所有的错误，它返回`[]error`</span></span><br><span class="line">db.First(&amp;user).Limit(<span class="number">10</span>).Find(&amp;users).GetErrors()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否返回RecordNotFound错误</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;hello world&quot;</span>).First(&amp;user).RecordNotFound()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> db.Model(&amp;user).Related(&amp;credit_card).RecordNotFound() &#123;</span><br><span class="line">    <span class="comment">// 没有信用卡被发现处理...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务-t"><a href="#事务-t" class="headerlink" title="事务 {t}"></a>事务 {t}</h3><p>要在事务中执行一组操作，一般流程如下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始事务</span></span><br><span class="line">tx := db.Begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在事务中做一些数据库操作（从这一点使用&#x27;tx&#x27;，而不是&#x27;db&#x27;）</span></span><br><span class="line">tx.Create(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生错误时回滚事务</span></span><br><span class="line">tx.Rollback()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或提交事务</span></span><br><span class="line">tx.Commit()</span><br></pre></td></tr></table></figure><h4 id="一个具体的例子"><a href="#一个具体的例子" class="headerlink" title="一个具体的例子"></a>一个具体的例子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateAnimals</span><span class="params">(db *gorm.DB)</span></span> err &#123;</span><br><span class="line">  tx := db.Begin()</span><br><span class="line">  <span class="comment">// 注意，一旦你在一个事务中，使用tx作为数据库句柄</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tx.Commit()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL构建-sb"><a href="#SQL构建-sb" class="headerlink" title="SQL构建 {sb}"></a>SQL构建 {sb}</h3><h4 id="执行原生SQL"><a href="#执行原生SQL" class="headerlink" title="执行原生SQL"></a>执行原生SQL</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Exec(<span class="string">&quot;DROP TABLE users;&quot;</span>)</span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE orders SET shipped_at=? WHERE id IN (?)&quot;</span>, time.Now, []<span class="type">int64</span>&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan</span></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Raw(<span class="string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure><h4 id="sql-Row-amp-sql-Rows"><a href="#sql-Row-amp-sql-Rows" class="headerlink" title="sql.Row &amp; sql.Rows"></a>sql.Row &amp; sql.Rows</h4><p>获取查询结果为<code>*sql.Row</code>或<code>*sql.Rows</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">row := db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age&quot;</span>).Row() <span class="comment">// (*sql.Row)</span></span><br><span class="line">row.Scan(&amp;name, &amp;age)</span><br><span class="line"></span><br><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">    rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">rows, err := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">    rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代中使用sql-Rows的Scan"><a href="#迭代中使用sql-Rows的Scan" class="headerlink" title="迭代中使用sql.Rows的Scan"></a>迭代中使用sql.Rows的Scan</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="keyword">var</span> user User</span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用数据库接口sql-DB-g"><a href="#通用数据库接口sql-DB-g" class="headerlink" title="通用数据库接口sql.DB {g}"></a>通用数据库接口sql.DB {g}</h3><p>从<code>*gorm.DB</code>连接获取通用数据库接口<a href="http://golang.org/pkg/database/sql/#DB">*sql.DB</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取通用数据库对象`*sql.DB`以使用其函数</span></span><br><span class="line">db.DB()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping</span></span><br><span class="line">db.DB().Ping()</span><br></pre></td></tr></table></figure><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.DB().SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line">db.DB().SetMaxOpenConns(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="复合主键-cpk"><a href="#复合主键-cpk" class="headerlink" title="复合主键 {cpk}"></a>复合主键 {cpk}</h3><p>将多个字段设置为主键以启用复合主键</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID           <span class="type">string</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">    LanguageCode <span class="type">string</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志-l"><a href="#日志-l" class="headerlink" title="日志 {l}"></a>日志 {l}</h3><p>Gorm有内置的日志记录器支持，默认情况下，它会打印发生的错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用Logger，显示详细日志</span></span><br><span class="line">db.LogMode(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用日志记录器，不显示任何日志</span></span><br><span class="line">db.LogMode(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试单个操作，显示此操作的详细日志</span></span><br><span class="line">db.Debug().Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;User&#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="自定义日志"><a href="#自定义日志" class="headerlink" title="自定义日志"></a>自定义日志</h4><p>参考GORM的默认记录器如何自定义它<a href="https://github.com/jinzhu/gorm/blob/master/logger.go">https://github.com/jinzhu/gorm/blob/master/logger.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.SetLogger(gorm.Logger&#123;revel.TRACE&#125;)</span><br><span class="line">db.SetLogger(log.New(os.Stdout, <span class="string">&quot;\r\n&quot;</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="架构-a"><a href="#架构-a" class="headerlink" title="架构 {a}"></a>架构 {a}</h3><p>Gorm使用可链接的API，<code>*gorm.DB</code>是链的桥梁，对于每个链API，它将创建一个新的关系。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(<span class="string">&quot;postgres&quot;</span>, <span class="string">&quot;user=gorm dbname=gorm sslmode=disable&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新关系</span></span><br><span class="line">db = db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤更多</span></span><br><span class="line"><span class="keyword">if</span> SomeCondition &#123;</span><br><span class="line">    db = db.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">20</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    db = db.Where(<span class="string">&quot;age = ?&quot;</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> YetAnotherCondition &#123;</span><br><span class="line">    db = db.Where(<span class="string">&quot;active = ?&quot;</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们开始执行任何操作时，GORM将基于当前的<code>*gorm.DB</code>创建一个新的<code>*gorm.Scope</code>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行查询操作</span></span><br><span class="line">db.First(&amp;user)</span><br></pre></td></tr></table></figure><p>并且基于当前操作的类型，它将调用注册的<code>creating</code>, <code>updating</code>, <code>querying</code>, <code>deleting</code>或<code>row_querying</code>回调来运行操作。</p><p>对于上面的例子，将调用<code>querying</code>，参考<a href="https://github.com/jasperxu/gorm-zh/blob/master/callbacks.md#querying-an-object">查询回调</a></p><h3 id="写插件-w"><a href="#写插件-w" class="headerlink" title="写插件 {w}"></a>写插件 {w}</h3><p>GORM本身由<code>Callbacks</code>提供支持，因此您可以根据需要完全自定义GORM</p><h4 id="注册新的callback"><a href="#注册新的callback" class="headerlink" title="注册新的callback"></a>注册新的callback</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateCreated</span><span class="params">(scope *Scope)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> scope.HasColumn(<span class="string">&quot;Created&quot;</span>) &#123;</span><br><span class="line">        scope.SetColumn(<span class="string">&quot;Created&quot;</span>, NowFunc())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Callback().Create().Register(<span class="string">&quot;update_created_at&quot;</span>, updateCreated)</span><br><span class="line"><span class="comment">// 注册Create进程的回调</span></span><br></pre></td></tr></table></figure><h4 id="删除现有的callback"><a href="#删除现有的callback" class="headerlink" title="删除现有的callback"></a>删除现有的callback</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Callback().Create().Remove(<span class="string">&quot;gorm:create&quot;</span>)</span><br><span class="line"><span class="comment">// 从Create回调中删除`gorm:create`回调</span></span><br></pre></td></tr></table></figure><h4 id="替换现有的callback"><a href="#替换现有的callback" class="headerlink" title="替换现有的callback"></a>替换现有的callback</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Callback().Create().Replace(<span class="string">&quot;gorm:create&quot;</span>, newCreateFunction)</span><br><span class="line"><span class="comment">// 使用新函数`newCreateFunction`替换回调`gorm:create`用于创建过程</span></span><br></pre></td></tr></table></figure><h4 id="注册callback顺序"><a href="#注册callback顺序" class="headerlink" title="注册callback顺序"></a>注册callback顺序</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.Callback().Create().Before(<span class="string">&quot;gorm:create&quot;</span>).Register(<span class="string">&quot;update_created_at&quot;</span>, updateCreated)</span><br><span class="line">db.Callback().Create().After(<span class="string">&quot;gorm:create&quot;</span>).Register(<span class="string">&quot;update_created_at&quot;</span>, updateCreated)</span><br><span class="line">db.Callback().Query().After(<span class="string">&quot;gorm:query&quot;</span>).Register(<span class="string">&quot;my_plugin:after_query&quot;</span>, afterQuery)</span><br><span class="line">db.Callback().Delete().After(<span class="string">&quot;gorm:delete&quot;</span>).Register(<span class="string">&quot;my_plugin:after_delete&quot;</span>, afterDelete)</span><br><span class="line">db.Callback().Update().Before(<span class="string">&quot;gorm:update&quot;</span>).Register(<span class="string">&quot;my_plugin:before_update&quot;</span>, beforeUpdate)</span><br><span class="line">db.Callback().Create().Before(<span class="string">&quot;gorm:create&quot;</span>).After(<span class="string">&quot;gorm:before_create&quot;</span>).Register(<span class="string">&quot;my_plugin:before_create&quot;</span>, beforeCreate)</span><br></pre></td></tr></table></figure><h4 id="预定义回调"><a href="#预定义回调" class="headerlink" title="预定义回调"></a>预定义回调</h4><p>GORM定义了回调以执行其CRUD操作，在开始编写插件之前检查它们。</p><ul><li><a href="https://github.com/jinzhu/gorm/blob/master/callback_create.go">Create callbacks</a></li><li><a href="https://github.com/jinzhu/gorm/blob/master/callback_update.go">Update callbacks</a></li><li><a href="https://github.com/jinzhu/gorm/blob/master/callback_query.go">Query callbacks</a></li><li><a href="https://github.com/jinzhu/gorm/blob/master/callback_delete.go">Delete callbacks</a></li><li>Row Query callbacks<br>Row Query callbacks将在运行<code>Row</code>或<code>Rows</code>时被调用，默认情况下没有注册的回调，你可以注册一个新的回调：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateTableName</span><span class="params">(scope *gorm.Scope)</span></span> &#123;</span><br><span class="line">  scope.Search.Table(scope.TableName() + <span class="string">&quot;_draft&quot;</span>) <span class="comment">// append `_draft` to table name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Callback().RowQuery().Register(<span class="string">&quot;publish:update_table_name&quot;</span>, updateTableName)</span><br></pre></td></tr></table></figure><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h3 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h3><h4 id="破坏性变更"><a href="#破坏性变更" class="headerlink" title="破坏性变更"></a>破坏性变更</h4><ul><li><code>gorm.Open</code>返回类型为<code>*gorm.DB</code>而不是<code>gorm.DB</code></li><li>更新只会更新更改的字段</li></ul><p>大多数应用程序不会受到影响，只有当您更改回调中的更新值（如<code>BeforeSave</code>，<code>BeforeUpdate</code>）时，应该使用<code>scope.SetColumn</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span></span> BeforeUpdate(scope *gorm.Scope) &#123;</span><br><span class="line">  <span class="keyword">if</span> pw, err := bcrypt.GenerateFromPassword(user.Password, <span class="number">0</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    scope.SetColumn(<span class="string">&quot;EncryptedPassword&quot;</span>, pw)</span><br><span class="line">    <span class="comment">// user.EncryptedPassword = pw  // 不工作，更新时不会包括EncryptedPassword字段</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>软删除的默认查询作用域只会检查<code>deleted_at IS NULL</code></li></ul><p>之前它会检查deleted_at小于0001-01-02也排除空白时间，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE deleted_at IS NULL OR deleted_at &lt;= <span class="string">&#x27;0001-01-02&#x27;</span></span><br></pre></td></tr></table></figure><p>但是没有必要，如果你使用<code>*time.Time</code>作为模型的<code>DeletedAt</code>，它已经被<code>gorm.Model</code>使用了，所以SQL就足够了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE deleted_at IS NULL</span><br></pre></td></tr></table></figure><p>所以如果你使用<code>gorm.Model</code>，那么你是好的，没有什么需要改变，只要确保所有记录的空白时间为<code>deleted_at</code>设置为<code>NULL</code>，示例迁移脚本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/jinzhu/now&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> models = []<span class="keyword">interface</span>&#123;&#125;&#123;&amp;User&#123;&#125;, &amp;Image&#123;&#125;&#125;</span><br><span class="line">  <span class="keyword">for</span> _, model := <span class="keyword">range</span> models &#123;</span><br><span class="line">    db.Unscoped().Model(model).Where(<span class="string">&quot;deleted_at &lt; ?&quot;</span>, now.MustParse(<span class="string">&quot;0001-01-02&quot;</span>)).Update(<span class="string">&quot;deleted_at&quot;</span>, gorm.Expr(<span class="string">&quot;NULL&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新的ToDBName逻辑</li></ul><p>在GORM将struct，Field的名称转换为db名称之前，只有那些来自<a href="https://github.com/golang/lint/blob/master/lint.go#L702">golint</a>的常见初始化（如<code>HTTP</code>，<code>URI</code>）是特殊处理的。</p><p>所以字段<code>HTTP</code>的数据库名称将是<code>http</code>而不是<code>h_t_t_p</code>，但是一些其他的初始化，如<code>SKU</code>不在golint，它的数据库名称将是<code>s_k_u</code>，这看起来很丑陋，这个版本固定这个，任何大写的初始化应该正确转换。</p><ul><li>错误<code>RecordNotFound</code>已重命名为<code>ErrRecordNotFound</code></li><li><code>mssql</code>驱动程序已从默认驱动程序中删除，导入它用<code>import _ &quot;github.com/jinzhu/gorm/dialects/mssql&quot;</code></li><li><code>Hstore</code>已移至<code>github.com/jinzhu/gorm/dialects/postgres</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> ORM </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建GitLab私有代码托管</title>
      <link href="/2018/05/01/%E6%90%AD%E5%BB%BAGitLab%E7%A7%81%E6%9C%89%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/"/>
      <url>/2018/05/01/%E6%90%AD%E5%BB%BAGitLab%E7%A7%81%E6%9C%89%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>引用自：<a href="https://about.gitlab.com/installation/#centos-7">GitLab官方安装教程</a>，<a href="http://www.jianshu.com/p/7a0d6917e009">快速安装 GitLab 并汉化</a></p><span id="more"></span><h2 id="CentOS-7安装-GitLab"><a href="#CentOS-7安装-GitLab" class="headerlink" title="CentOS 7安装 GitLab"></a>CentOS 7安装 GitLab</h2><ol><li><p>安装并配置必要的依赖关系</p><p> 如果您安装了<strong>Postfix</strong>用于发送电子邮件，请在安装过程中选择“Internet站点”。你也可以使用<strong>SendMail</strong>或配置自定义 SMTP 服务器，并将其设置为 SMTP 服务器。</p><p> 在 CentOS 上，下述命令将在系统防火墙中打开 HTTP 和 SSH 访问。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install curl policycoreutils openssh-server openssh-clients -y</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">sudo systemctl start sshd</span><br><span class="line">sudo yum install postfix</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line">sudo systemctl start postfix</span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li><li><p>添加 GitLab 包服务器并安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br><span class="line">sudo yum install gitlab-ce -y</span><br></pre></td></tr></table></figure><p> 如果您不想使用管道脚本安装存储库，则可以查看<a href="https://packages.gitlab.com/gitlab/gitlab-ce/install">所有脚本</a>，并<a href="https://packages.gitlab.com/gitlab/gitlab-ce">手动选择并下载软件包</a>，并使用以下命令进行安装。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-XXX.rpm/download</span><br><span class="line">rpm -i gitlab-ce-XXX.rpm</span><br></pre></td></tr></table></figure></li><li><p>配置并启动 GitLab</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li><li><p>浏览到主机名并登录</p><p> 在您第一次访问时，您将被重定向到密码重置屏幕，以提供初始管理员帐户的密码。设置完密码之后您将被重定向回登录屏幕。</p><p> 默认帐户的用户名是<strong>root</strong>。提供您之前创建的密码并登录。登录后，您可以更改用户名。</p></li></ol><h2 id="修改-host"><a href="#修改-host" class="headerlink" title="修改 host"></a>修改 host</h2><ol><li><p>在 GitLab 中添加访问的 host，修改 <code>/etc/gitlab/gitlab.rb</code> 的 <code>external_url</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://git.[hostname].com[:port]&#x27;</span></span><br></pre></td></tr></table></figure><p> 可以设置端口，默认为80端口。</p></li><li><p><code>vim /etc/hosts</code>，在 CentOS 中添加host映射</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 git.[hostname].com</span><br></pre></td></tr></table></figure></li><li><p>每次修改 <code>/etc/gitlab/gitlab.rb</code> 之后，都要运行以下命令，让配置生效</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li><li><p>配置访问机器的 host，如 <code>192.168.1.100 git.[hostname].com</code>。最后，在浏览器中打开网址 <code>http://git.[hostname].com</code> 进行登录访问。</p></li></ol><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><blockquote><p>汉化教程参考<a href="https://gitlab.com/xhang/gitlab">https://gitlab.com/xhang/gitlab</a></p></blockquote><ol><li><p>确认当前安装版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><p> 如果当前安装的版本是 <code>8.5.7</code>，中文补丁需要打 <code>8.5版本</code>，以此类推。</p></li><li><p>克隆 GitLab 源码仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 克隆 GitLab.com 仓库</span></span><br><span class="line"> git <span class="built_in">clone</span> https://gitlab.com/larryli/gitlab.git</span><br><span class="line">＃或 Gitcafe.com 镜像，速度更快</span><br><span class="line"> git <span class="built_in">clone</span> https://gitcafe.com/larryli/gitlab.git</span><br></pre></td></tr></table></figure></li><li><p>运行汉化补丁</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 8.5 版本的汉化补丁（8-5-stable是英文稳定版，8-5-zh是中文版，两个 diff 结果便是汉化补丁）</span></span><br><span class="line">sudo git diff origin/8-5-stable..8-5-zh &gt; /tmp/8.5.diff</span><br><span class="line"><span class="comment"># 停止 gitlab</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"><span class="comment"># 应用汉化补丁</span></span><br><span class="line"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">git apply /tmp/8.5.diff  </span><br><span class="line"><span class="comment"># 启动gitlab</span></span><br><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure></li></ol><p>完成汉化之后可以看到中文版的 GitLab。<br><img src="http://upload-images.jianshu.io/upload_images/25574-8538f4f188691bed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中文版GitLab"></p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>生产环境下，备份是必需的。需要备份的文件有：配置文件和数据文件。</p><ul><li><p>备份配置文件<br>  配置文件包含密码等敏感信息，不要和数据文件放在一起。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&#x27;umask 0077; tar -cf $(data &quot;+etc-gitlab-%s.tar&quot;) -C /etc/gitlab&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>备份数据文件<br>  默认数据备份目录是 <code>/var/opt/gitlab/backups</code>，手动创建备份文件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Omnibus 方式安装使用以下命令备份</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>  日常备份，添加 <strong>crontab</strong>，运行 <code>crontab -e</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天2点执行备份</span></span><br><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span><br></pre></td></tr></table></figure><p>  如要修改备份周期和目录，在&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb中修改以下两个选项</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置备份周期为7天 - 604800秒</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800</span><br><span class="line"><span class="comment"># 备份目录</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&#x27;/mnt/backups&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。</p><ul><li>恢复配置文件  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /etc/gitlab /etc/gitlab.$(<span class="built_in">date</span> +%s)</span><br><span class="line"><span class="comment"># 将下面配置备份文件的时间戳改为你所备份的文件的时间戳</span></span><br><span class="line">sudo tar -xf etc-gitlab-1399948539.tar -C /</span><br></pre></td></tr></table></figure></li><li>恢复数据文件  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据备份文件拷贝至备份目录</span></span><br><span class="line">sudo <span class="built_in">cp</span> 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止连接数据库的进程</span></span><br><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复1393513186这个备份文件，将覆盖GitLab数据库！</span></span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 GitLab</span></span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 GitLab</span></span><br><span class="line">sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="持续集成（GitLab-CI）"><a href="#持续集成（GitLab-CI）" class="headerlink" title="持续集成（GitLab-CI）"></a>持续集成（GitLab-CI）</h2></li></ul><ol><li><p>添加<strong>Runner</strong>安装源</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># For CentOS</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>安装<strong>gitlab-ci-multi-runner</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For Debian/Ubuntu</span></span><br><span class="line">apt-get install gitlab-ci-multi-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># For CentOS</span></span><br><span class="line">yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></li><li><p>注册<strong>Runner</strong><br> 获取Token：以管理员身份登录GitLab，进入管理区域，点击侧边栏的Runner，如下图，“注册授权码”后的字符串便是Token。<br><img src="http://upload-images.jianshu.io/upload_images/25574-0ffcfa9cd7975be2.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitLab Runner Token"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ci-multi-runner register</span><br><span class="line"></span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci):</span><br><span class="line">http://git.home.com/ci</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">xxxx             <span class="comment"># 输入Token</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[xxy-web-test-02]: test-runner  <span class="comment"># 输入runner的名称</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line"><span class="built_in">test</span>,php         <span class="comment"># 输入runner的标签，以区分不同的runner，标签间逗号分隔</span></span><br><span class="line">Registering runner... succeeded                     runner=YDPz2or3</span><br><span class="line">Please enter the executor: ssh, shell, parallels, docker, docker-ssh, virtualbox:</span><br><span class="line">shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">&#x27;s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Flow模型</title>
      <link href="/2017/11/06/GitFlow%E6%A8%A1%E5%9E%8B/"/>
      <url>/2017/11/06/GitFlow%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>git-flow 是在 git branch 和 git tag 基础上封装出来的代码分支管理模型，把实际开发模拟称 master develop feature release hotfix support 几种场景，其中 master 对应发布上线，develop 对应开发，其他几个在不同的情况下出现。通过封装，git-flow 屏蔽了 git branch 等相对来说比较复杂生硬的命令（git branch 还是比较复杂的，尤其是在多分支情况下），简单而且规范的解决了代码分支管理问题。</p><span id="more"></span><p>Git Flow 将 branch 分成2个主要分支和3个临时的辅助分支。</p><p><img src="/images/GitFlow%E6%A8%A1%E5%9E%8B/git-flow.png" alt="git-flow"></p><p>主要分支：</p><ul><li>master：永远处在即将发布（production-ready）状态。</li><li>develop：最新的开发状态。</li></ul><p>辅助分支：</p><ul><li>feature：开发新功能的分支，基于 develop，完成后 merge 回 develop。</li><li>release：准备要发布版本的分支，用来修复 bug。基于 develop，完成后 merge 回 develop 和 master。</li><li>hotfix：修复 master 上的问题，等不及 release 版本就必须马上上线。基于 master，完成后 merge 回 master 和 develop。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git Flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理</title>
      <link href="/2017/11/05/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2017/11/05/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>当前项目开发过程中，项目版本一般使用git进行管理，在进行git相关操作约定之前先对分支管理的细则进行说明。</p><span id="more"></span><h2 id="分支的划分"><a href="#分支的划分" class="headerlink" title="分支的划分"></a>分支的划分</h2><p>工程的分支主要分为master、dev、hotfix、feature四类</p><ul><li>master：线上app代码主分支，该代码和线上代码一致</li><li>dev:开发分支，包含即将上线的新功能，由各个新功能开发分支经测试后合入，属于分支测试后的产物</li><li>feature：功能开发分支，当有新开发任务时，开发需要从dev分支拉取feature分支，开发完毕经过分支测试后，可以进行pull request请求，申请将分支合入dev分支，该分支是开发过程中最常使用的分支</li><li>hotfix：bug修复分支，或紧急需求开发分支（一般不要在hotfix分支上进行新需求的开发）。该分支从master分支拉出，经开发测试完成之后，可以进行pull requets，申请将分支合入master<blockquote><p>特别注意：</p><blockquote><p>feature只能从dev分支拉出，hotfix分支只能从master拉出<br>在进行pull request请求之前必须对当前的开发分支进行反合，即dev分支反合feature分支，master分支反合hotfix分支<br>dev分支会在稳定之后合入master分支<br>不能将master分支与feature反合，dev分支与hotfix反合<br>开发只能将代码提交至对应的开发分支，不能直接提交到master分支或dev分支</p></blockquote></blockquote></li></ul><h2 id="分支的提交注意事项"><a href="#分支的提交注意事项" class="headerlink" title="分支的提交注意事项"></a>分支的提交注意事项</h2><p>分支提交的几点注意如下：</p><ul><li>在拉取新分支之前一定要确保本地的master分支和dev分支代码是最新的（在拉分支之前进行pull操作）</li><li>分支的拉取和push请用git命令或16版本及以上idea完成，不要使用eclipse</li><li>本地代码提交时需要确保本地分支对应的远程分支代码最新，具体在进行提交操作之前请进行pull操作</li><li>代码提交时要进行相关注释，说明修改的代码内容；建议提高代码提交的频率，这样在出现问题时方便问题的定位与代码的回滚</li><li>代码提交时要在本地解决冲突，冲突解决完成，并且代码在本地可以编译通过之后才能提交代码</li><li>在windows下进行开发一定要注意git有关换行符的问题（crlf与lf的问题），具体请在git中设置相关的配置（git config –global core.autocrlf true ），并在开发工具中将默认的环境设置为linux，避免提交的代码出现大量的冲突。如果出现这种情况的冲突，请不要提交代码到远程仓库，本地解决之后再提交。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab使用手册</title>
      <link href="/2017/01/24/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
      <url>/2017/01/24/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。随着Git的流行和DevOps的逐步落地，GitLab越来越成为日常工作中不可或缺的工具，本文是在实际开发过程中正确高效地使用GitLab方法的总结。</p><span id="more"></span><h2 id="1、GitLab设置"><a href="#1、GitLab设置" class="headerlink" title="1、GitLab设置"></a>1、GitLab设置</h2><h3 id="1-1-使用SSH代替账号密码进行认证"><a href="#1-1-使用SSH代替账号密码进行认证" class="headerlink" title="1.1 使用SSH代替账号密码进行认证"></a>1.1 使用SSH代替账号密码进行认证</h3><p>Git提供了账号密码、SSH、GPG三种方式访问代码，其中使用最多最为方便的是SSH。</p><h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><p>生成ssh key需要<a href="http://dev.posun.co:600/root/GitLab-Manual/wikis/%E5%AE%89%E8%A3%85git">安装Git</a>，在 Git Bash 中依次进行以下操作。</p><ul><li>设置Git的全局user的name和email</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@posun.cn&quot;</span><br></pre></td></tr></table></figure><ul><li>生成ssh key</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “xxx@posun.cn”</span><br></pre></td></tr></table></figure><p>之后会看到提示输入保存ssh key的文件名和加密串，建议直接回车跳过。</p><ul><li>查看ssh key</li></ul><p>完成上述操作之后，可以在当前用户的 <code>home</code> 目录下的 <code>.ssh</code> 文件夹中看到生成的 key，<strong>id_rsa</strong> 是私钥，<strong>id_rsa.pub</strong> 是公钥。</p><h4 id="上传ssh-key"><a href="#上传ssh-key" class="headerlink" title="上传ssh key"></a>上传ssh key</h4><p>点击GitLab导航栏的用户头像下拉选择 <strong>设置</strong>，在左侧菜单栏选择 <strong>SSH密钥</strong> 进入 SSH 密钥添加页面，使用文本编辑器打开 <strong>id_rsa.pub</strong> 文件并全选复制粘贴至密钥添加页面的相应位置，填写密钥标题，点击 <strong>增加密钥</strong> 按钮即可完成ssh key的上传。</p><h4 id="使用ssh的好处"><a href="#使用ssh的好处" class="headerlink" title="使用ssh的好处"></a>使用ssh的好处</h4><p>使用ssh之后，使用git方式（不是http&#x2F;https方式）pull和push代码时不用每次都填写账号密码，方便快捷，并且更加安全，但是请妥善保管ssh key，谨防泄漏。</p><h3 id="1-2-设置语言偏好"><a href="#1-2-设置语言偏好" class="headerlink" title="1.2 设置语言偏好"></a>1.2 设置语言偏好</h3><p>在GitLab导航栏点击个人头像下拉选择 <strong>设置</strong>，在左侧菜单栏选择 <strong>Profile</strong> 进入个人配置页面，在 <strong>主要设置</strong> -&gt; <strong>Preferred language</strong> 中选择 “简体中文”。</p><h2 id="2、项目"><a href="#2、项目" class="headerlink" title="2、项目"></a>2、项目</h2><h3 id="2-1-如何新建一个项目"><a href="#2-1-如何新建一个项目" class="headerlink" title="2.1 如何新建一个项目"></a>2.1 如何新建一个项目</h3><p>点击GitLab导航条上的 <code>+</code> 下拉选择 <strong>新建项目</strong> 进入项目创建页面，GitLab提供了以下三种方式创建项目。</p><h4 id="新建一个空白项目"><a href="#新建一个空白项目" class="headerlink" title="新建一个空白项目"></a>新建一个空白项目</h4><p>填写项目路径、名称、描述，选择项目可见等级之后，点击 <strong>创建项目</strong> 按钮即可创建一个空白项目。新项目一般采用此方式进行创建。</p><h4 id="从模板创建"><a href="#从模板创建" class="headerlink" title="从模板创建"></a>从模板创建</h4><p>GitLab提供了三种项目模板：Ruby on Rails、Spring、NodeJS Express，可按需使用。</p><h4 id="从其它代码仓库导入项目"><a href="#从其它代码仓库导入项目" class="headerlink" title="从其它代码仓库导入项目"></a>从其它代码仓库导入项目</h4><p>从GitHub等其它代码仓库导入项目。</p><h3 id="2-2-如何管理项目成员"><a href="#2-2-如何管理项目成员" class="headerlink" title="2.2 如何管理项目成员"></a>2.2 如何管理项目成员</h3><h4 id="添加-x2F-导入项目成员"><a href="#添加-x2F-导入项目成员" class="headerlink" title="添加&#x2F;导入项目成员"></a>添加&#x2F;导入项目成员</h4><p>进入项目页面，在左侧菜单栏选择 <strong>设置</strong> -&gt; <strong>成员</strong>，在 <strong>添加成员</strong> 里依次选择 要邀请的成员（可多选）、角色权限和访问到期日期，点击 <strong>添加到项目</strong> 完成项目成员的添加。除了手动添加之外，还可以点击 <strong>导入</strong> 按钮进入导入成员页面，选择目标项目一键导入目标项目的成员。</p><h4 id="项目成员管理"><a href="#项目成员管理" class="headerlink" title="项目成员管理"></a>项目成员管理</h4><p>项目成员页面还提供了成员管理的功能，可以修改成员的角色权限和访问到期日期，还可以踢出成员。</p><h3 id="2-3-如何新建一个群组项目"><a href="#2-3-如何新建一个群组项目" class="headerlink" title="2.3 如何新建一个群组项目"></a>2.3 如何新建一个群组项目</h3><h4 id="创建一个群组"><a href="#创建一个群组" class="headerlink" title="创建一个群组"></a>创建一个群组</h4><p>在导航栏里点击 <code>+</code> 下拉选择 <strong>新建群组</strong> 进入新建群组页面，填写群组路径、群组名称、描述，上传群组图表，选择群组可见等级之后，点击 <strong>创建群组</strong> 按钮即可创建一个新的群组。</p><h4 id="新建群组项目"><a href="#新建群组项目" class="headerlink" title="新建群组项目"></a>新建群组项目</h4><p>在群组主页点击 <strong>新项目</strong> 按钮进入新建群组项目页面，填写必要信息之后并提交即可创建一个群组项目，群组项目默认的可见等级为 <strong>私有</strong>，即只允许群组成员访问。</p><p>个人项目在 <strong>设置</strong> -&gt; <strong>成员</strong> -&gt; <strong>与群组共享</strong> 里可以将项目共享给指定群组的成员。</p><h4 id="子群组"><a href="#子群组" class="headerlink" title="子群组"></a>子群组</h4><p>在群组主页下拉选择并点击 <strong>新子群组</strong> 进入资群组创建页面，子群组可以对父群组的成员进一步细分，子群组成员可以访问父群组项目，非子群组的父群组成员无法访问子群组项目。</p><h2 id="3、分支管理"><a href="#3、分支管理" class="headerlink" title="3、分支管理"></a>3、分支管理</h2><h3 id="3-1-分支的划分"><a href="#3-1-分支的划分" class="headerlink" title="3.1 分支的划分"></a>3.1 分支的划分</h3><p>工程的分支主要分为 <strong>master</strong>、<strong>dev</strong>、<strong>hotfix</strong>、<strong>feature</strong> 四类。</p><ul><li><strong>master</strong>：线上代码主分支，该代码和线上代码一致</li><li><strong>dev</strong>: 开发分支，包含即将上线的新功能，由各个新功能开发分支经测试后合入，属于分支测试后的产物</li><li><strong>feature</strong>: 功能开发分支，当有新开发任务时，开发需要从dev分支拉取feature分支，开发完毕经过分支测试后，可以进行pull request请求，申请将分支合入dev分支，该分支是开发过程中最常使用的分支</li><li><strong>hotfix</strong>: bug修复分支，或紧急需求开发分支（一般不要在hotfix分支上进行新需求的开发）。该分支从master分支拉出，经开发测试完成之后，可以进行pull requets，申请将分支合入master</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>feature只能从dev分支拉出，hotfix分支只能从master拉出</li><li>在进行pull request请求之前必须对当前的开发分支进行反合，即dev分支反合feature分支，master分支反合hotfix分支</li><li>dev分支会在稳定之后合入master分支</li><li>不能将master分支与feature反合，dev分支与hotfix反合</li><li>开发只能将代码提交至对应的开发分支，不能直接提交到master分支或dev分支</li></ul><h3 id="3-2-分支的提交注意事项"><a href="#3-2-分支的提交注意事项" class="headerlink" title="3.2 分支的提交注意事项"></a>3.2 分支的提交注意事项</h3><p>分支提交的几点注意如下：</p><ul><li>在拉取新分支之前一定要确保本地的master分支和dev分支代码是最新的（在拉分支之前进行pull操作）</li><li>分支的拉取和push请用git命令或16版本及以上idea完成，不要使用eclipse</li><li>本地代码提交时需要确保本地分支对应的远程分支代码最新，具体在进行提交操作之前请进行pull操作</li><li>代码提交时要进行相关注释，说明修改的代码内容；建议提高代码提交的频率，这样在出现问题时方便问题的定位与代码的回滚</li><li>代码提交时要在本地解决冲突，冲突解决完成，并且代码在本地可以编译通过之后才能提交代码</li><li>在windows下进行开发一定要注意git有关换行符的问题（crlf与lf的问题），具体请在git中设置相关的配置（git config –global core.autocrlf true ），并在开发工具中将默认的环境设置为linux，避免提交的代码出现大量的冲突。如果出现这种情况的冲突，请不要提交代码到远程仓库，本地解决之后再提交。</li></ul><h2 id="4、IntelliJ-IDEA使用GitLab"><a href="#4、IntelliJ-IDEA使用GitLab" class="headerlink" title="4、IntelliJ IDEA使用GitLab"></a>4、IntelliJ IDEA使用GitLab</h2><h3 id="4-1-安装Git"><a href="#4-1-安装Git" class="headerlink" title="4.1 安装Git"></a>4.1 安装Git</h3><h4 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h4><p>进入<a href="https://git-scm.com/download">Git下载页面</a>，选择合适的版本下载。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Windows下双击下载好的 <code>Git-x.xx.x-64-bit.exe</code> 安装包执行安装，不建议更改 Git 默认勾选的配置。Git GUI按需使用，实际使用的频率一般比较低。</p><h4 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h4><p>如果在安装时没有勾选 <strong>Checkout Windows-style, commit Unix-style line endings</strong> 项，可以在命令行中执行 <code>git config --global core.autocrlf true</code> 开启 <strong>提交代码时自动转换换行符</strong>。</p><h3 id="4-2-安装IDEA-Git插件"><a href="#4-2-安装IDEA-Git插件" class="headerlink" title="4.2 安装IDEA Git插件"></a>4.2 安装IDEA Git插件</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在IDEA中搜索 <code>Git Integration</code> 和 <code>.ignore</code> 插件并安装，安装完成之后重启IDEA。</p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><ul><li>IDEA Git插件的配置</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png" alt="IDEA-Git插件配置"></p><ul><li>.ignore插件</li></ul><p><strong>.ignore</strong> 插件支持Git推送代码时自动忽略自定义配置的文件或者目录，防止将一些与开发无关的项目配置文件、构建文件推送到代码库，也减少了手动推送的风险。</p><h3 id="4-3-从GitLab导入项目"><a href="#4-3-从GitLab导入项目" class="headerlink" title="4.3 从GitLab导入项目"></a>4.3 从GitLab导入项目</h3><h4 id="从远程仓库clone代码到本地"><a href="#从远程仓库clone代码到本地" class="headerlink" title="从远程仓库clone代码到本地"></a>从远程仓库clone代码到本地</h4><p>在配置好了ssh之后则可进行代码的clone，用http&#x2F;https的方式不在本文的考虑范围内。clone远程代码到本地请使用git bash操作，不要使用ide，尤其是不要使用eclipse（本项目约定使用命令行进行）。<br><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E5%A4%8D%E5%88%B6Git%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93%E8%B7%AF%E5%BE%84.png" alt="复制Git代码仓库路径"></p><p>使用复制好的链接clone代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@dev.posun.co:root/GitLab-Manual.git</span><br></pre></td></tr></table></figure><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/Git-SSH-Clone%E4%BB%A3%E7%A0%81.png" alt="Git-SSH-Clone代码"></p><p>使用IDEA打开Git项目</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA%E6%89%93%E5%BC%80Git%E9%A1%B9%E7%9B%AE.png" alt="IDEA打开Git项目"></p><p>选择项目<strong>目录</strong>，点击“OK”</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/%E9%80%89%E6%8B%A9Git%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.png" alt="选择Git项目目录"></p><p>成功导入Git项目</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E9%A1%B9%E7%9B%AE.png" alt="IDEA-Git项目"></p><h3 id="4-4-本地拉取新的分支并将分支push到远程仓库"><a href="#4-4-本地拉取新的分支并将分支push到远程仓库" class="headerlink" title="4.4 本地拉取新的分支并将分支push到远程仓库"></a>4.4 本地拉取新的分支并将分支push到远程仓库</h3><h4 id="分支操作菜单"><a href="#分支操作菜单" class="headerlink" title="分支操作菜单"></a>分支操作菜单</h4><p>IDEA中Git的操作菜单可以在以下两个地方找到。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%93%8D%E4%BD%9C%E8%8F%9C%E5%8D%95.png" alt="IDEA-Git操作菜单"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E6%93%8D%E4%BD%9C%E8%8F%9C%E5%8D%95-%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt="IDEA-Git操作菜单-菜单栏"></p><p>分支操作菜单在IDEA界面的右下方有一个快捷入口。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-Git%E5%88%86%E6%94%AF%E8%8F%9C%E5%8D%95.png" alt="IDEA-Git分支菜单"></p><h4 id="拉取分支操作流程"><a href="#拉取分支操作流程" class="headerlink" title="拉取分支操作流程"></a>拉取分支操作流程</h4><h5 id="创建本地dev分支"><a href="#创建本地dev分支" class="headerlink" title="创建本地dev分支"></a>创建本地dev分支</h5><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0dev%E5%88%86%E6%94%AF.png" alt="IDEA-创建本地dev分支"></p><h5 id="命名本地dev分支，最好跟远程分支保持一致"><a href="#命名本地dev分支，最好跟远程分支保持一致" class="headerlink" title="命名本地dev分支，最好跟远程分支保持一致"></a>命名本地dev分支，最好跟远程分支保持一致</h5><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png" alt="IDEA-命名本地分支"></p><h5 id="从dev分支拉取feature分支"><a href="#从dev分支拉取feature分支" class="headerlink" title="从dev分支拉取feature分支"></a>从dev分支拉取feature分支</h5><p>拉取分支前需要确认当前本地分支在master或者dev分支，并且分支代码是最新的（拉取feature分支则当前分支需要是dev分支，拉取hotfix分支则要在master分支）</p><ol><li><p>切换到dev分支</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%87%E6%8D%A2%E5%88%B0dev%E5%88%86%E6%94%AF.png" alt="IDEA-切换到dev分支"></p></li><li><p>pull dev分支代码，使代码最新</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-pull%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81.png" alt="IDEA-pull分支代码"></p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-pull%E4%BB%A3%E7%A0%81.png" alt="IDEA-pull代码"></p></li><li><p>创建新的feature分支</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png" alt="IDEA-创建新的本地分支"></p><p> 注意feature分支的命名，<strong>feature_任务编号_任务描述_分支创建日期</strong>。任务编号对应GitLab中项目的问题编号。</p><p> <img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%88%9B%E5%BB%BAfeature%E5%88%86%E6%94%AF.png" alt="IDEA-创建feature分支"></p></li></ol><h4 id="push新的feature分支到远程仓库"><a href="#push新的feature分支到远程仓库" class="headerlink" title="push新的feature分支到远程仓库"></a>push新的feature分支到远程仓库</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-push%20feature%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png" alt="IDEA-push feature分支到远程仓库"></p><p>push feature分支成功</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/push%20feature%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%88%90%E5%8A%9F.png" alt="push feature分支到远程仓库成功"></p><h3 id="4-5-从开发分支上提交代码"><a href="#4-5-从开发分支上提交代码" class="headerlink" title="4.5 从开发分支上提交代码"></a>4.5 从开发分支上提交代码</h3><ul><li>如果有新创建的文件，则在commit之前要进行add</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-git%20add%E6%96%B0%E6%96%87%E4%BB%B6.png" alt="IDEA-git add新文件"></p><ul><li>commit代码之前要检查代码更改的地方，不要提交一些非智力因素导致的合并错误。IDEA中有两种提交代码的方式。</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81.png" alt="IDEA-提交代码"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81-%E8%8F%9C%E5%8D%95%E6%A0%8F.png" alt="IDEA-提交代码-菜单栏"></p><ul><li>该面板可以查看有哪些文件进行了修改以及修改详情</li></ul><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E5%8F%98%E5%8A%A8%E4%BF%A1%E6%81%AF.png" alt="IDEA-查看代码文件变动信息"></p><ul><li>确认无误，添加注释，提交代码</li></ul><p>commit: 提交代码<br>commit and push：提交代码并推送至远程仓库</p><p><strong>可以一次推送多次提交</strong>，一般一个功能点的修改提交一次代码，一个开发周期（半天、一天）推送一次代码。注意提交注释的格式 <code>tasknum#taskdesc:commit message</code>。</p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E5%A1%AB%E5%86%99%E6%8F%90%E4%BA%A4%E8%AF%B4%E6%98%8E.png" alt="IDEA-填写提交说明"></p><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%8F%90%E4%BA%A4%E5%AE%8C%E6%88%90%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81.png" alt="IDEA-提交完成推送代码"></p><h3 id="4-6-查看代码提交历史"><a href="#4-6-查看代码提交历史" class="headerlink" title="4.6 查看代码提交历史"></a>4.6 查看代码提交历史</h3><h4 id="查看指定文件的提交历史"><a href="#查看指定文件的提交历史" class="headerlink" title="查看指定文件的提交历史"></a>查看指定文件的提交历史</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2.png" alt="IDEA-查看文件的提交历史"></p><h4 id="查看项目的提交历史"><a href="#查看项目的提交历史" class="headerlink" title="查看项目的提交历史"></a>查看项目的提交历史</h4><p><img src="/images/GitLab%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/IDEA-%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2.png" alt="IDEA-查看项目的提交历史"></p><h3 id="4-7-代码的回退"><a href="#4-7-代码的回退" class="headerlink" title="4.7 代码的回退"></a>4.7 代码的回退</h3><p><strong>不要回退代码，代码提交错误，请手动删除提交错误的代码，然后再次提交，不然会影响一些提交信息的记录，或其他分支的开发。</strong></p><h3 id="4-8-分支反合及冲突的解决"><a href="#4-8-分支反合及冲突的解决" class="headerlink" title="4.8 分支反合及冲突的解决"></a>4.8 分支反合及冲突的解决</h3><p>虽然这部分大部分靠经验解决问题，但是仍然需要注意以下注意事项：</p><p><strong>分支反合</strong>：即master分支或dev分支合并到开发分支,合并操作可以用命令行进行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature_dev_local</span><br><span class="line">git merge origin/dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout hotfix_fixbug_local</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><ul><li>IDEA中有比较好用的冲突解决工具，命令行执行玩合并之后，用IDEA解决冲突并提交</li><li>不要用IDE进行分支反合，尤其不能用Eclipse</li></ul><h3 id="4-9-提交pull-request"><a href="#4-9-提交pull-request" class="headerlink" title="4.9 提交pull request"></a>4.9 提交pull request</h3><p>pull request在分支测试之后提交，在git的web端可以直接操作，一般这部分由QA完成。</p><h4 id="新建合并请求"><a href="#新建合并请求" class="headerlink" title="新建合并请求"></a>新建合并请求</h4><p>在GitLab的项目页面中选择 <strong>合并请求</strong> 进入pull request面板页面，点击 <strong>新建合并请求</strong>，选择pull request的来源分支和目标分支，点击 <strong>比较分支后继续</strong>。</p><p>填写标题、描述，指派审查员，可选该合并请求相关的里程碑和标记（与问题看板关联），之后点击 <strong>提交合并请求</strong> 即完成了合并请求的创建。勾选 <strong>接受合并请求后删除来源分支</strong>，合并请求完成之后会删除来源分支，一般从feature合并到dev、hotfix合并到master可以勾选，dev合并到master不勾选。</p><h4 id="合并请求的审查"><a href="#合并请求的审查" class="headerlink" title="合并请求的审查"></a>合并请求的审查</h4><p>审查员在代码审查通过之后可以选择合并操作完成分支代码的合并。代码审查不通过时，审查员需要填写原因或建议并关闭合并请求，此时开发人员需要根据审查员的审查结果进行修改并在修改完成之后再次pull request。</p><h3 id="4-10-gitignore文件的使用"><a href="#4-10-gitignore文件的使用" class="headerlink" title="4.10 .gitignore文件的使用"></a>4.10 .gitignore文件的使用</h3><h4 id="gitignore文件的编写原则"><a href="#gitignore文件的编写原则" class="headerlink" title=".gitignore文件的编写原则"></a>.gitignore文件的编写原则</h4><p><code>.gitignore</code> 文件过滤有两种模式：开放模式和保守模式。开放模式负责设置过滤哪些文件和文件夹，保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪。</p><p>gitignore是从上到下逐行匹配的，因此.gitignore文件的编写原则就是：<strong>先编写开放模式，在编写保守模式</strong>。</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>以斜杠“&#x2F;”开头表目录</li><li>以星号“*”通配多字符</li><li>以问号“?”通配单字符</li><li>以方括号“[]”包含单个字符的匹列表</li><li>以叹号“!”对匹配结果反</li></ul><h2 id="5、任务"><a href="#5、任务" class="headerlink" title="5、任务"></a>5、任务</h2><h3 id="5-1-任务的创建与执行"><a href="#5-1-任务的创建与执行" class="headerlink" title="5.1 任务的创建与执行"></a>5.1 任务的创建与执行</h3><h4 id="任务的创建"><a href="#任务的创建" class="headerlink" title="任务的创建"></a>任务的创建</h4><p>在GitLab的项目页面中选择 <strong>问题</strong> -&gt; <strong>列表</strong> 进入问题列表页面，点击 <strong>新建问题</strong> 进入任务创建页面，填写问题标题、描述，指派任务的执行人员，勾选是否保密，选择截止日期，选择里程碑和标记，之后点击 <strong>提交问题</strong> 即可完成任务的创建。这里的任务标记跟问题面板中的面板标题一致。</p><h4 id="任务的执行"><a href="#任务的执行" class="headerlink" title="任务的执行"></a>任务的执行</h4><p>在 <strong>问题</strong> -&gt; <strong>看板</strong> 页面可以对问题的执行情况进行跟踪。这部分跟大部分团队协作的工具比较类似，不做过多说明。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器环境搭建</title>
      <link href="/2017/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/01/20/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>远程云服务器的管理是运维人员的必备技能，本文总结了阿里云linux服务器的基本环境的搭建过程，方便日后查看回顾。</p><span id="more"></span><h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><p>目前windows平台上比较常见的SSH客户端有XShell、Putty等，这里选用比较熟悉的<a href="https://www.netsarang.com/xshell_download.html">XShell</a>。官网需要填写个人信息之后才能下载，这里直接选择<a href="http://rj.baidu.com/soft/detail/15201.html?ald">百度软件中心</a>下载。</p><p>安装完成之后，开始登录远程的linux服务器。</p><ol><li><p>新建会话</p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/XShell%E6%96%B0%E5%BB%BA%E4%BC%9A%E8%AF%9D.png" alt="XShell新建会话"></p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BF%9D%E5%AD%98%E4%B8%BB%E6%9C%BASSH%E5%AF%86%E9%92%A5.png" alt="保存主机SSH密钥"></p></li><li><p>输入用户名、密码，执行登录</p><p> <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="登录成功"></p></li></ol><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>这里选用的是CentOS 7</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>CentOS 7 可以使用yum安装包管理器快速安装配置各种常用的软件工具。</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%9F%A5%E7%9C%8Byum.png" alt="查看yum"></p><p>在安装软件工具之前，先对yum进行更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><h4 id="安装前的检查"><a href="#安装前的检查" class="headerlink" title="安装前的检查"></a>安装前的检查</h4><p>首先检查是否已经安装其他版本JDK，如openjdk等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa | grep -E &#x27;^open[jre|jdk]|j[re|dk]&#x27;</span><br></pre></td></tr></table></figure><p>这里显示的输出信息为：</p><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%A3%80%E6%9F%A5%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%ACjdk.png" alt="检查是否存在其他版本jdk"></p><p>检查当前java版本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>如果已经安装了openjdk，使用 <code>yum remove java-1.x.x-openjdk</code> 命令卸载。</p><h4 id="下载并安装Oracle-JDK"><a href="#下载并安装Oracle-JDK" class="headerlink" title="下载并安装Oracle JDK"></a>下载并安装Oracle JDK</h4><ul><li>下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK</a></li></ul><p><img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDjdk.png" alt="下载jdk"></p><ul><li><p>安装JDK</p><p>  安装之前使用<strong>Xftp</strong>工具将下载的rpm软件包上传到服务器。  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh jdk-8u121-linux-x64.rpm</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>java -version</code> 检查是否成功安装</p></li></ul><h4 id="设置JDK环境变量"><a href="#设置JDK环境变量" class="headerlink" title="设置JDK环境变量"></a>设置JDK环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /etc/profile /etc/profile.backup0831</span><br><span class="line"># vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最下面添加以下信息：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/default</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><ul><li>查看JDK环境变量是否设置成功  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo $JAVA_HOME</span><br></pre></td></tr></table></figure></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><blockquote><p>MySQL的安装可以参考<a href="http://www.cnblogs.com/XBlack/p/5178758.html">阿里云Centos7使用yum安装MySQL5.6的正确姿势</a></p></blockquote><p>以下为主要代码。</p><ul><li><p>安装带有可用的mysql5系列社区版资源的rpm包  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看当前可用的mysql安装资源  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用yum的方式安装MySQL  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></li><li><p>加入开机启动  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable mysqld</span><br></pre></td></tr></table></figure></li><li><p>启动mysql服务进程  </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld</span><br></pre></td></tr></table></figure></li><li><p>重置密码</p><p>  <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%87%8D%E7%BD%AEmysql%E5%AF%86%E7%A0%81.png" alt="重置mysql密码"></p><p>  <img src="/images/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%85%8D%E7%BD%AEmysql.png" alt="配置mysql"></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>参考<a href="http://www.redis.cn/download.html">官方文档</a><br>下载，解压，编译：  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-3.2.6.tar.gz</span><br><span class="line">$ tar xzf redis-3.2.6.tar.gz</span><br><span class="line">$ cd redis-3.2.6</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>make命令需要gcc，使用下列命令安装gcc：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install gcc</span><br></pre></td></tr></table></figure><p>二进制文件是编译完成后在src目录下，通过下面的命令启动Redis服务：<br><code>$ src/redis-server</code></p><p>你可以使用内置的客户端命令redis-cli进行使用：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ src/redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://my.oschina.net/indestiny/blog/197272">Centos开机自启动redis</a></p></blockquote><ul><li><p>修改redis.conf，打开后台运行选项：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li><li><p>编写脚本，vim &#x2F;etc&#x2F;init.d&#x2F;redis:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># chkconfig: 2345 10 90</span><br><span class="line"># description: Start and Stop redis</span><br><span class="line"></span><br><span class="line">PATH=/usr/local/bin:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379 #实际环境而定</span><br><span class="line">EXEC=/usr/local/redis/src/redis-server #实际环境而定</span><br><span class="line">REDIS_CLI=/usr/local/redis/src/redis-cli #实际环境而定</span><br><span class="line"></span><br><span class="line">PIDFILE=/var/run/redis.pid</span><br><span class="line">CONF=&quot;/usr/local/redis/redis.conf&quot; #实际环境而定</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">        start)</span><br><span class="line">                if [ -f $PIDFILE ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;$PIDFILE exists, process is already running or crashed.&quot;</span><br><span class="line">                else</span><br><span class="line">                        echo &quot;Starting Redis server...&quot;</span><br><span class="line">                        $EXEC $CONF</span><br><span class="line">                fi</span><br><span class="line">                if [ &quot;$?&quot;=&quot;0&quot; ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;Redis is running...&quot;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                if [ ! -f $PIDFILE ]</span><br><span class="line">                then</span><br><span class="line">                        echo &quot;$PIDFILE exists, process is not running.&quot;</span><br><span class="line">                else</span><br><span class="line">                        PID=$(cat $PIDFILE)</span><br><span class="line">                        echo &quot;Stopping...&quot;</span><br><span class="line">                        $REDIS_CLI -p $REDISPORT SHUTDOWN</span><br><span class="line">                        while [ -x $PIDFILE ]</span><br><span class="line">                        do</span><br><span class="line">                                echo &quot;Waiting for Redis to shutdown...&quot;</span><br><span class="line">                                sleep 1</span><br><span class="line">                        done</span><br><span class="line">                        echo &quot;Redis stopped&quot;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">        restart|force-reload)</span><br><span class="line">                $&#123;0&#125; stop</span><br><span class="line">                $&#123;0&#125; start</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2</span><br><span class="line">                exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>执行权限：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/redis</span><br></pre></td></tr></table></figure></li><li><p>开机自启动：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 尝试启动或停止redis</span><br><span class="line">service redis start</span><br><span class="line">service redis stop</span><br><span class="line"></span><br><span class="line"># 开启服务自启动</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><blockquote><p>参考<a href="http://ju.outofmemory.cn/entry/53632">yum安装Tomcat</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tomcat8</span><br></pre></td></tr></table></figure><p>使用yum命令安装完成之后，可以方便的使用 <code>$ tomcat start</code> 和 <code>$ tomcat stop</code> 命令开关tomcat。<br>tomcat的安装目录位于 <code>/usr/share/tomcat</code> 下。</p><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><ul><li>vim  <blockquote><p>参考<a href="http://www.cnblogs.com/qianxiaoruofeng/p/5778733.html">yum 安装vim编辑器</a></p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim</span><br></pre></td></tr></table></figure></li><li><a href="http://rj.baidu.com/soft/detail/18249.html?ald">Xftp</a></li><li>Git<br><a href="https://git-scm.com/download/linux">Git下载与安装</a><br><a href="http://blog.csdn.net/laiahu/article/details/7516939">centos上如何yum安装git?</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程 - 廖雪峰的官方网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo快速搭建个人博客</title>
      <link href="/2016/11/24/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2016/11/24/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>摘要：本文主要介绍使用 <strong>hexo博客框架</strong> + <strong>GitHub托管代码</strong> + <strong>GitHub Pages</strong> 搭建个人博客网站。</p><p>由于各种原因，博主一直都有搭建个人博客的想法。在使用hexo之前，博主曾尝试过使用SpringBoot + JQuery编写了一个包含博客功能的<a href="https://github.com/YupaiTS/footprints">网站</a>，由于这种运行于Java环境的项目正式部署到线上比较麻烦，所以就舍弃了。<br>偶然间发现了hexo搭配GitHub Pages可以快速搭建一个博客网站，心中甚是欢喜，立马就动手搭建了起来。在这里分享下使用这种方式搭建博客网站的过程。</p><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>进入<a href="https://git-scm.com/">git官网</a>，下载安装git工具即可。</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>同样的，进入<a href="https://nodejs.org/en/">node.js官网</a>，下载安装node.js工具即可。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>hexo的安装需要node.js环境，在命令行中输入以下命令安装hexo-cli（hexo的命令行工具）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h2><h3 id="创建本地hexo项目"><a href="#创建本地hexo项目" class="headerlink" title="创建本地hexo项目"></a>创建本地hexo项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog  <span class="comment">#使用hexo初始化blog项目</span></span><br><span class="line"><span class="built_in">cd</span> blog         <span class="comment">#进入blog目录</span></span><br><span class="line">npm install     <span class="comment">#安装依赖</span></span><br><span class="line">hexo server     <span class="comment">#启动本地web服务，在浏览器输入localhost:4000预览博客</span></span><br></pre></td></tr></table></figure><h3 id="生成静态网站"><a href="#生成静态网站" class="headerlink" title="生成静态网站"></a>生成静态网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态网站后，项目的目录结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.deploy/        #需部署文件</span><br><span class="line">node_modules/   #node.js依赖的插件</span><br><span class="line">public/         #生成的静态网页文件</span><br><span class="line">scaffolds/      #模版</span><br><span class="line">source/         #博客正文和其他源文件</span><br><span class="line">themes/         #主题</span><br><span class="line">_config.yml     #全局配置文件</span><br></pre></td></tr></table></figure><h3 id="编辑-config-yml配置网站"><a href="#编辑-config-yml配置网站" class="headerlink" title="编辑_config.yml配置网站"></a>编辑_config.yml配置网站</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration     </span></span><br><span class="line"><span class="comment">## Docs: [https://hexo.io/docs/configuration.html](https://hexo.io/docs/configuration.html)     </span></span><br><span class="line"><span class="comment">## Source: [https://github.com/hexojs/hexo/](https://github.com/hexojs/hexo/)</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment">#标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="comment">#副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment">#站点描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"><span class="comment"># URL     </span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as ‘[http://yoursite.com/child](http://yoursite.com/child)‘ and root as ‘/child/‘</span></span><br><span class="line"><span class="attr">url:</span>  <span class="comment">#网址</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> <span class="comment">#文章的链接格式</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span> <span class="comment">#源文件目录</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span> <span class="comment">#生成的网页文件目录</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span> <span class="comment">#标签目录</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span> <span class="comment">#归档目录</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span> <span class="comment">#分类目录</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment">#新文章标题</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment">#默认模版，包括post、page、photo、draft（文章、页面、照片、草稿）</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span>  </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"><span class="comment"># Category</span></span><br><span class="line"><span class="attr">Tagdefault_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"><span class="comment"># Date / Time format     </span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date     </span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in     </span></span><br><span class="line"><span class="comment">## [http://momentjs.com/docs/#/displaying/format/](http://momentjs.com/docs/#/displaying/format/)</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment"># Pagination     </span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="comment"># Extensions     </span></span><br><span class="line"><span class="comment">## Plugins: [https://hexo.io/plugins/](https://hexo.io/plugins/)     </span></span><br><span class="line"><span class="comment">## Themes: [https://hexo.io/themes/](https://hexo.io/themes/)</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">apollo</span> <span class="comment">#主题</span></span><br><span class="line"><span class="comment"># Deployment     </span></span><br><span class="line"><span class="comment">## Docs: [https://hexo.io/docs/deployment.html](https://hexo.io/docs/deployment.html)</span></span><br><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">远程仓库地址</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="hexo命令行"><a href="#hexo命令行" class="headerlink" title="hexo命令行"></a>hexo命令行</h3><ul><li>常用命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span>                   <span class="comment">#查看帮助</span></span><br><span class="line">hexo init                   <span class="comment">#初始化一个目录</span></span><br><span class="line">hexo new <span class="string">&quot;postName&quot;</span>         <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span>    <span class="comment">#新建页面</span></span><br><span class="line">hexo generate               <span class="comment">#生成网页，可在public目录查看</span></span><br><span class="line">hexo server                 <span class="comment">#本地预览</span></span><br><span class="line">hexo deploy                 <span class="comment">#部署.deploy目录</span></span><br><span class="line">hexo clean                  <span class="comment">#清除缓存，每次部署前都要删除.deploy目录</span></span><br></pre></td></tr></table></figure><ul><li>简写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h3><p>使用<code>hexo new postName</code>命令新建文章之后，可以在<code>/source/_posts/</code>目录下看到以postName命名的markdown文件，对该md文件进行编辑即可。</p><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><ul><li>添加rss订阅功能</li></ul><p>安装hexo-generator-feed插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed –-save</span><br></pre></td></tr></table></figure><p>安装完成后，打开**_config.yml**文件进行配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: [http://hexo.io/plugins/](http://hexo.io/plugins/)     </span></span><br><span class="line"><span class="comment">#RSS订阅     </span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="comment">#可选项，可以不填</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>打开当前主题的**_config.yml**文件，添加RSS订阅链接。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><h3 id="注册GitHub帐号"><a href="#注册GitHub帐号" class="headerlink" title="注册GitHub帐号"></a>注册GitHub帐号</h3><p>进入<a href="https://github.com/">GitHub官网</a>注册帐号。</p><h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><p>使用注册的GitHub帐号登录之后，创建名称为<code>username.github.io</code>的仓库，这是特殊的命名约定。可以通过<a href="http://username.github.io/">http://username.github.io</a>来访问个人主页。</p><h3 id="使用SSH方式push代码到GitHub仓库"><a href="#使用SSH方式push代码到GitHub仓库" class="headerlink" title="使用SSH方式push代码到GitHub仓库"></a>使用SSH方式push代码到GitHub仓库</h3><p>打开<strong>Git Bash</strong>工具，进入<code>.ssh/</code>目录，生成新的SSH key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Email地址&quot;</span></span><br></pre></td></tr></table></figure><p>之后会看到如下信息：</p><blockquote><p>Generating public&#x2F;private rsa key pair.<br>Enter file in which to save the key (&#x2F;Users&#x2F;your_user_directory&#x2F;.ssh&#x2F;id_rsa):&lt;回车就好&gt;</p></blockquote><p>回车之后会要求输入密码。</p><blockquote><p>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;<br>Enter same passphrase again:&lt;再次输入加密串&gt;</p></blockquote><p>如果输入的密码为空，在提交代码时系统不会弹出要求输入密码的弹框。</p><p>进入<a href="https://github.com/">GitHub</a>， 点击头像进入<code>settings SSH and GPG keys New SSH key</code>选项，将公钥文件<code>~/.ssh/id_rsa.pub</code>的内容复制到Key里，点击<code>Add SSH key</code>按钮即可向GitHub添加SSH key。</p><h2 id="部署hexo到GitHub-Pages"><a href="#部署hexo到GitHub-Pages" class="headerlink" title="部署hexo到GitHub Pages"></a>部署hexo到GitHub Pages</h2><h3 id="配置代码仓库"><a href="#配置代码仓库" class="headerlink" title="配置代码仓库"></a>配置代码仓库</h3><p>打开 <strong>_config.yml</strong>文件，配置代码仓库。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>打开<strong>Git Bash</strong>工具，输入以下命令部署hexo到GitHub Pages。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清除缓存</span></span><br><span class="line">hexo g      <span class="comment">#生成网页文件</span></span><br><span class="line">hexo d      <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><p>生成SSH key的时候如果设置了密码的话，系统会弹窗提示输入密码，输入正确的密码即可完成部署。</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>进入<a href="https://yupaits.github.io/">GitHub Pages</a>可以查看博客。如果有自己的域名的话，可以在 GitHub 的项目 <code>settings -&gt; GitHub Pages -&gt; Custom Domain</code> 中填写个人博客域名保存，并将个人博客域名以 <strong>CNAME</strong> 方式解析到 <code>yupaits.github.io</code> 即可在自己的博客域名中浏览博客。如果不想每次 <code>hexo d</code> 部署博客之后都去 GitHub Pages 中修改域名，可以在 <code>sources</code> 目录下新建一个名为 <code>CNAME</code> 的文件，并用文本编辑器打开该文件输入博客域名保存即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
